"Document Title",Authors,"Author Affiliations","Publication Title",Date Added To Xplore,"Publication Year","Volume","Issue","Start Page","End Page","Abstract","ISSN",ISBNs,"DOI",Funding Information,PDF Link,"Author Keywords","IEEE Terms","Mesh_Terms",Article Citation Count,Patent Citation Count,"Reference Count","License",Online Date,Issue Date,"Meeting Date","Publisher",Document Identifier
"Strengthening the ""Engineering"" in Software Engineering Education: A Software Engineering Bachelor of Engineering Program for the 21st Century","L. Laird","Stevens Institute of Technology, Hoboken, USA",2016 IEEE 29th International Conference on Software Engineering Education and Training (CSEET),"23 May 2016","2016","","","128","131","In the fall of 2015, Stevens Institute of Technology welcomed the first freshmen into a newly launched Software Engineering Undergraduate Program based largely on the most recent ACM and IEEE-CS guidelines for undergraduate software engineering programs. This is the first such program in the US that also has an ABET accredited general engineering curriculum. Students will receive a B. E. in Software Engineering Degree, and be prepared to sit for the Fundamentals of Engineering (FE) examination. In addition to its strong engineering foundation, the program benefits from the success of the Stevens graduate program in software engineering. This paper describes the program: the motivation, the curriculum, the program assessment plan, the early challenges, and the results to date, including some consideration as a potential model of an undergraduate Cyber-Physical Systems Engineering curriculum.","2377-570X","978-1-5090-0765-3","10.1109/CSEET.2016.13","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7474475","software engineering education;software engineering curriculum;cyber-physical systems education","Software engineering;Software;Cyber-physical systems;Education;Guidelines;Programming;Calculus","","11","","15","IEEE","23 May 2016","","","IEEE","IEEE Conferences"
"IEEE Standard Adoption of ISO/IEC 15026-1--Systems and Software Engineering--Systems and Software Assurance--Part 1: Concepts and Vocabulary","",,"IEEE P15026-1, Jul2014","8 Jul 2014","2014","","","1","34","Assurance-related terms are defined and an organized set of concepts and relationships to establish a basis for shared understanding across user communities for assurance are established in this adoption of ISO/IEC 15026-1. It provides information to users of the other parts of this International Standard including the combined use of multiple parts. The essential concept introduced by ISO/IEC 15026 is the statement of claims in an assurance caseand the support of those claims through argumentation and evidence. These claims are in the context of assurance for properties of systems and software within life cycle processes for the system or software product.Assurance for a service being operated and managed on an ongoing basis is not covered in this International Standard.","","978-0-7381-9241-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6849916","adoption;assurance;assurance case;claim;IEEE 15026-1(TM);integrity level;life cycle processes;reliability;software assurance;software engineering;system assurance;systems engineering","IEEE standards;Software engineering;Systems engineering and theory;Quality assurance","","","","","","8 Jul 2014","","","IEEE","IEEE Standards"
"Software engineering education in the era of outsourcing, distributed development, and open source software: challenges and opportunities","M. J. Hawthorne; D. E. Perry","Empirical Software Engineering Laboratory ECE, University of Texas, Austin, USA; Empirical Software Engineering Laboratory ECE, University of Texas, Austin, USA","Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.","19 Dec 2005","2005","","","643","644","As software development becomes increasingly globally distributed, and more software functions are delegated to common open source software (OSS) and commercial off-the-shelf (COTS) components, practicing software engineers face significant challenges for which current software engineering curricula may leave them inadequately prepared. A new multi-faceted distributed development model is emerging that effectively commoditizes many development activities once considered integral to software engineering, while simultaneously requiring practitioners to apply engineering principles in new and often unfamiliar contexts. We discuss the challenges that software engineers face as a direct result of outsourcing and other distributed development approaches that are increasingly being utilized by industry, and some of the key ways we need to evolve software engineering curricula to address these challenges.","1558-1225","1-59593-963-2","10.1109/ICSE.2005.1553627","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1553627","","Software engineering;Outsourcing;Open source software;Design engineering;Programming;Computer architecture;Educational programs;Engineering management;Computer science education;Software reusability","","3","","3","","19 Dec 2005","","","IEEE","IEEE Conferences"
"What Pakistani Computer Science and Software Engineering Students Think about Software Testing?","L. F. Capretz; A. R. Gilal","Department of Electrical & Computer Engineering, Western University, London, Ontario, Canada; Department of Computer and Information Sciences, Universiti Teknologi PETRONAS, Seri Iskander, Malaysia",2022 29th Asia-Pacific Software Engineering Conference (APSEC),"16 Feb 2023","2022","","","574","575","Software testing is one of the crucial supporting processes of the software life cycle. Unfortunately for the software industry, the role is stigmatized, partly due to misperception and partly due to treatment of the role. The present study aims to analyse the situation to explore what restricts computer science and software engineering students from taking up a testing career in the software industry. To conduct this study, we surveyed 88 Pakistani students taking computer science or software engineering degrees. The results showed that the present study supports previous work into the unpopularity of testing compared to other software life cycle roles. Furthermore, the findings of our study showed that the role of tester has become a social role, with as many social connotations as technical implications.","2640-0715","978-1-6654-5537-4","10.1109/APSEC57359.2022.00087","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10043312","testing career;software engineering;software testing;human factors in software engineering;SQA","Computer science;Software testing;Industries;Engineering profession;Software;Software engineering","","1","","10","IEEE","16 Feb 2023","","","IEEE","IEEE Conferences"
"Educating students by “real-world” software engineering practice — Designing software engineering practice course","Y. Sun; X. Liu","School of Electronics Engineering & Computer Science, Peking University, Key laboratory of High Confidence Software Technologies, Ministry of Education, Beijing, P.R.China; School of Electronics Engineering & Computer Science, Peking University, Key laboratory of High Confidence Software Technologies, Ministry of Education, Beijing, P.R.China",2012 7th International Conference on Computer Science & Education (ICCSE),"6 Sep 2012","2012","","","1356","1359","Introductory Software Engineering courses present the principles in isolation from practice. Teaching the lectures seems to focus on philosophy and methodology level, which leads to difficulty for students having no practical experience to understand. To solve this problem, we design Software Engineering Practice course at Peking University, and educate students by “Real-world” software engineering practice. Through this course, students can understand fundamental software engineering theories and technologies, and apply appropriate software engineering methods and technologies to solve problems. This paper focuses on how to design Software Engineering Practice course, and introduces the experience and lessons when creating the course.","","978-1-4673-0242-5","10.1109/ICCSE.2012.6295315","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6295315","software engineering;software engineering practice;software engineering education","Software engineering;Software;Schedules;Educational institutions;Teamwork;Computer science","","1","","6","IEEE","6 Sep 2012","","","IEEE","IEEE Conferences"
"Undergraduate Software Engineering Programs","C. Taylor; K. Gary; J. Kiper; C. Wellington; N. M. Villegas; L. Chang","Electrical Engineering and Computer Science Department, Milwaukee School of Engineering, Milwaukee, WI, USA; School of Computing, Arizona State University, Mesa, AZ, USA; Department of Computer Science and Software Engineering, Miami University, Oxford, OH, USA; Computer Science and Engineering Department, Shippensburg University, Shippensburg, PA, USA; Department of Information and Communication Technologies, Universidad Icesi, Colombia, Cali, Colombia; Department of Computer Science and Software Engineering, University of Wisconsin-Platteville, Platteville, WI, USA",2017 IEEE 30th Conference on Software Engineering Education and Training (CSEE&T),"7 Dec 2017","2017","","","180","181","Undergraduate programs in software engineering are relatively new. The first ABET accredited programs received accreditation in 2001. There are currently 31 ABET accredited software engineering programs worldwide with additional programs being added each year. In this session, panelists will discuss their experience starting new programs, developing curriculum, and navigating accreditation issues.","2377-570X","978-1-5386-2536-1","10.1109/CSEET.2017.35","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8166699","new program;software engineering;accreditation;curriculum;panel","Software engineering;Computer science;Accreditation;Industries;Software;Electrical engineering","","","","","IEEE","7 Dec 2017","","","IEEE","IEEE Conferences"
"Learning software engineering processes through playing games","J. Pieper","IACS-Institute for Applied Computer Science, University of Applied Sciences, Stralsund, Germany",2012 Second International Workshop on Games and Software Engineering: Realizing User Engagement with Game Engineering Techniques (GAS),"28 Jun 2012","2012","","","1","4","Software Processes belong to those knowledge areas of software engineering that are less suitable to be taught classically in lectures. Class projects which frequently complement lectures are limited by academic settings in various ways too. Simulation and digital game-based learning are considered to have great potential to extend the learning experiences beyond lectures and class projects, help to develop insight into the necessity of software processes and to widen the perspective of software engineering students in a virtual and efficient way. Several efforts made by different research groups show encouraging results. This research gathers preliminary findings, develops new ideas and gives suggestions to exhaust the potential further and to encourage the wider application of digital game-based learning in software engineering education. These suggestions are the foundation for building blocks of a new framework for simulation based digital learning games aiming to teach software engineering processes more effectively and efficiently.","","978-1-4673-1768-9","10.1109/GAS.2012.6225921","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6225921","software process;digital game-based learning;software engineering;software engineering education;software process engineering;software process simulation","Games;Software;Software engineering;Education;Computational modeling;Unified modeling language;Data models","","8","","19","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"Improving the State of Automotive Software Engineering","A. Haghighatkhah; M. Oivo; A. Banijamali; P. Kuvaja","University of Oulu; Empirical Software Engineering in Software, Systems and Services group, University of Oulu; University of Oulu; University of Oulu's, M3S group",IEEE Software,"26 Sep 2017","2017","34","5","82","86","The automotive industry is fundamentally changing by becoming software intensive, rather than mechanically intensive. To stay ahead of the game, automakers must continuously improve their software engineering. For this article, the authors studied the existing literature on the subject and made practitioner-oriented recommendations.","1937-4194","","10.1109/MS.2017.3571571","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8050198","automotive software engineering;ASE;AUTOSAR;standards;testing;search-based testing;requirements engineering;model-based development;agile development;system integration;continuous integration;regression testing;software reliability growth models;SRGM;variability;software engineering;software development","Software;Automotive engineering;Industries;Testing;Tools;Software engineering;Biological system modeling","","13","","18","IEEE","26 Sep 2017","","","IEEE","IEEE Magazines"
"Software Engineering for Machine-Learning Applications: The Road Ahead","F. Khomh; B. Adams; J. Cheng; M. Fokaefs; G. Antoniol","Polytechnique Montréal, SWAT (Software Analytics and Technology) Lab.; Polytechnique Montréal, MCIS (Maintenance, Construction and Intelligence of Software) Lab.; Department of Computer Engineering and Software Engineering, Polytechnique Montréal's; Department of Computer Engineering and Software Engineering, Polytechnique Montréal's; Department of Computer Engineering and Software Engineering, Polytechnique Montréal's",IEEE Software,"27 Sep 2018","2018","35","5","81","84","The First Symposium on Software Engineering for Machine Learning Applications (SEMLA) aimed to create a space in which machine learning (ML) and software engineering (SE) experts could come together to discuss challenges, new insights, and practical ideas regarding the engineering of ML and AI-based systems. Key challenges discussed included the accuracy of systems built using ML and AI models, the testing of those systems, industrial applications of AI, and the rift between the ML and SE communities. This article is part of a theme issue on software engineering’s 50th anniversary.","1937-4194","","10.1109/MS.2018.3571224","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8474484","First Symposium on Software Engineering for Machine Learning Applications;SEMLA;machine learning;artificial intelligence;AI;software engineering;SE;software development;Invited Content","Learning systems;Software engineering;Software systems;Software development;Machine learning;Artificial intelligence","","63","","0","IEEE","27 Sep 2018","","","IEEE","IEEE Magazines"
"Emphasizing experiences in teaching software engineering courses","S. -H. Mirian-Hosseinabadi; Z. Aghakasiri; A. Sadeghi; P. Delfani; M. Ghandehari","Computer Engineering Department, Sharif University of Technology, Tehran, Iran; Computer Engineering Department, Sharif University of Technology, Tehran, Iran; Computer Engineering Department, Sharif University of Technology, Tehran, Iran; Computer Engineering Department, Sharif University of Technology, Tehran, Iran; Computer Engineering Department, Sharif University of Technology, Tehran, Iran",2010 2nd International Conference on Education Technology and Computer,"29 Jul 2010","2010","2","","V2-149","V2-153","Using software products as engineering artifacts is becoming more widespread in industry. It leads to increasing the need for training students and experts in the academic centers with software developing skills in accordance with the engineering principles and disciplines. However, one of the main challenges in the software engineering education is how to teach engineering disciplines to the students so that we can inspire the engineering concept to them. To do so if we use educational methods for teaching this course, which can show the usage of engineering disciplines to the students in practice and demonstrate the impact of their application on creating the engineered software products, we will achieve more qualified and engineered products in the future. To accommodate the application of engineering notion at different stages of the software development lifecycle, we have proposed an experience based approach in this paper that can help teaching software engineering principles and practices through experiments. Reviewing the results of the experiments by students will be helpful to learn software engineering concepts and use them for developing more engineered software.","2155-1812","978-1-4244-6370-1","10.1109/ICETC.2010.5529416","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5529416","Software Engineering Education;Experience Based Approach;Software Engineering Practices;Software Engineering;Undergraduate Software Engineering Course","Software engineering;Computer industry;Programming;Application software;Computer science education;Appropriate technology;Educational technology;Engineering education;Educational programs;Computer science","","1","","9","IEEE","29 Jul 2010","","","IEEE","IEEE Conferences"
"SE2004: Recommendations for Undergraduate Software Engineering Curricula","T. C. Lethbridge; R. J. Leblanc Jr; A. E. Kelley Sobel; T. B. Hilburn; J. L. Diaz-herrera","SITE, University of Ottawa, Ottawa, Canada; College of Computing, Georgia Institute of Technology, Atlanta, GA; Computer Science and Systems Analysis Department, Miami University, Oxford, OH; Dept. of Software engineering, Embry-Riddle Aeronautical University, FL; GCCIS, Rochester Institute of Technology, Rochester, NY",IEEE Software,"13 Nov 2006","2006","23","6","19","25","The recommendations in Software Engineering 2004: Curriculum Guidelines for Undergraduate Degree Programs in Software Engineering, form a volume of the larger Computing Curriculum project of the IEEE-CS and ACM. SE2004 evolved from an analysis of desired student outcomes for a software engineering graduate as compared to those for computer science and computer engineering graduates. This survey of the recommendations summarizes the recommended Software Engineering Education Knowledge (SEEK), which outlines the knowledge that a software engineering undergraduate should learn while at university. The survey also summarizes a set of 19 guidelines prepared to help educators implement a software engineering program as well as the courses and a sample of the curriculum patterns that SE2004 proposes.This article is part of a special issue on Software Engineering Curriculum Development.","1937-4194","","10.1109/MS.2006.171","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4012619","Software engineering education;curricula","Software engineering;Computer science;Guidelines;Software quality;Software performance;Data engineering;Knowledge engineering;Hardware;Software systems;Education","","29","","5","IEEE","13 Nov 2006","","","IEEE","IEEE Magazines"
"Supporting Software Engineering Research and Education by Annotating Public Videos of Developers Programming","A. Alaboudi; T. D. LaToza","George Mason University Fairfax, Virginia, USA; George Mason University Fairfax, Virginia, USA",2019 IEEE/ACM 12th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"29 Aug 2019","2019","","","117","118","Software engineering has long studied how software developers work, building a body of work which forms the foundation of many software engineering best practices, tools, and theories. Recently, some developers have begun recording videos of themselves engaged in programming tasks contributing to open source projects, enabling them to share knowledge and socialize with other developers. We believe that these videos offer an important opportunity for both software engineering research and education. In this paper, we discuss the potential use of these videos as well as open questions for how to best enable this envisioned use. We propose creating a central repository of programming videos, enabling analyzing and annotating videos to illustrate specific behaviors of interest such as asking and answering questions, employing strategies, and software engineering theories. Such a repository would offer an important new way in which both software engineering researchers and students can understand how software developers work.","2574-1837","978-1-7281-2239-7","10.1109/CHASE.2019.00035","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8817042","Software engineering theories, software engineering strategies, screencasting, social software development","Videos;Software engineering;Programming profession;Software;Tools;Education","","7","","11","IEEE","29 Aug 2019","","","IEEE","IEEE Conferences"
"Professional Engineers Ontario's approach to licensing software engineering practitioners","N. S. W. Williams","Admissions Department, Professional Engineers Ontario, Canada",Proceedings 14th Conference on Software Engineering Education and Training. 'In search of a software engineering profession' (Cat. No.PR01059),"7 Aug 2002","2001","","","77","78","Professional Engineers Ontario (PEO) has developed a methodology to assess software practitioners' qualifications for licensing purposes. It entails a comprehensive assessment of the applicants' academic preparation and work experience vis-a/spl grave/-vis PEO's software engineering body of knowledge and criteria for acceptable experience. Using this approach, PEO has licensed close to 200 software engineering practitioners to date.","1093-0175","0-7695-1059-0","10.1109/CSEE.2001.913823","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=913823","","Licenses;Software engineering;Qualifications;Design engineering;Knowledge engineering;Software quality;Mathematics;Object oriented modeling;Data engineering;Power engineering and energy","","1","","3","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Benchmarking the software engineering undergraduate program curriculum at Jordan university of science and technology with the IEEE software engineering body of knowledge: (software engineering knowledge Areas #11-15)","M. A. Radaideh",Jordan university of science and technology,2021 International Conference on Computational Science and Computational Intelligence (CSCI),"22 Jun 2022","2021","","","1043","1049","This paper evaluates the compliance of the software engineering undergraduate program (SWE-curriculum) at Jordan university of science and technology (JUST) with the last five of the fifteen software engineering knowledge Areas (SWE-KAs) of the SWEBOK-V3.0 of the IEEE computer Society. This research is the first to measure the coverage of the SWE-KAs in any SWE-curriculum. It is essential to line up the SWE-curriculum with the IEEE and IET views of software engineering (SWEBOK V3.0).This research attempted to answer questions such as: (a) what is the gap in the coverage of the SWE-KAs#11-15 topics across the SWE-curriculum? (b) what can be done to eliminate that gap? (c) What is the overall gap in the coverage of the SWE-KAs1-15 topics across the SWE-curriculum?This research was divided into three parts (P#1, P#2, and P#3). This paper focused on SWE-KAs#11-15. The previous two papers [1][2] focused on SWE-KA#1-5 and SWE-KA#6-10, respectively. The coverage of SWE-KAs#1-10 [1][2] was inspected across the SWE-curriculum courses. The results were identified as either fully compliant (the SWE-KA is fully covered across one or more of the SWE-curriculum courses); highly compliant (the SWE-KA is highly covered); or partially compliant (the SWE-KA is partially covered). Similarly, the coverage of SWE-KAs#11-15 (this paper, P#3) was inspected across the SWE-curriculum courses as well.The compliance was found fully compliant in the cases of the software requirements, software testing, software engineering management, and software quality software engineering knowledge areas. It was found highly compliant in the cases of the software design, software engineering models and methods, computing foundation, and mathematical foundation knowledge areas. It was found as partially compliant in the cases of the software construction, software maintenance, software configuration management, and software engineering process knowledge areas. In the cases of the software engineering professional Practice, software engineering economics, and engineering foundation knowledge areas, the compliance was found poorly compliant.","","978-1-6654-5841-2","10.1109/CSCI54926.2021.00223","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9798935","software engineering;software engineering knowledge areas;software construction;software design;software maintenance;software requirements;software testing","Knowledge engineering;Economics;Software testing;Software maintenance;Software design;Scientific computing;Configuration management","","1","","52","IEEE","22 Jun 2022","","","IEEE","IEEE Conferences"
"Towards optimization of Software Engineering ontologies","Muhammad Irfan Marwat; S. Jan; M. A. Shah; S. Z. A. Shah","Department of Software Engineering, University of Engineering and Technology, Peshawar, Khyber Pukhtoonkhwa, Pakistan; Department of Software Engineering, University of Engineering and Technology, Peshawar, Khyber Pukhtoonkhwa, Pakistan; Department of Software Engineering, University of Engineering and Technology, Peshawar, Khyber Pukhtoonkhwa, Pakistan; Department of Software Engineering, University of Engineering and Technology Peshawar, Mardan Campus, Khyber Pukhtoonkhwa, Pakistan",2014 World Congress on Computer Applications and Information Systems (WCCAIS),"7 Oct 2014","2014","","","1","6","This paper presents detail analysis of generic and specific Software Engineering ontologies. The analysis results can be used as a road map for the optimization of existing or developing new ontologies. For this purpose, state of the art ontologies have been selected and analyzed in terms of their domain covered, scalability, use of Software Engineering standards, scope and application. Salient features and limitations of these ontologies are presented in this paper which can be considered by ontology engineers and research community for enhancing the knowledge in the field of Software Engineering and specifically Knowledge-based Software developing processes. Based on the presented analysis, we have developed a generic Software Engineering ontology and tried to address such issues which are previously neglected.","","978-1-4799-3351-8","10.1109/WCCAIS.2014.6916610","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6916610","Software Engineering Ontology;Semantic based Software Engineering;Knowledge based Software Engineering;Ontology;Software Engineering","Ontologies;Standards;Software;Software engineering;Measurement","","","","38","IEEE","7 Oct 2014","","","IEEE","IEEE Conferences"
"What Makes Research Software Sustainable? An Interview Study with Research Software Engineers","M. Rosado de Souza; R. Haines; M. Vigo; C. Jay","University of Lavras, Lavras, Brazil; University of Manchester, Manchester, UK; University of Manchester, Manchester, UK; University of Manchester, Manchester, UK",2019 IEEE/ACM 12th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"29 Aug 2019","2019","","","135","138","Software is now a vital scientific instrument, providing the tools for data collection and analysis across disciplines from bioinformatics and computational physics, to the humanities. The software used in research is often home-grown and bespoke: it is constructed for a particular project, and rarely maintained beyond this, leading to rapid decay, and frequent 'reinvention of the wheel'. Understanding how to develop sustainable research software, such that it is suitable for future reuse, is therefore of interest to both researchers and funders, but how to achieve this remains an open question. Here we report the results of an interview study examining how research software engineers - the people actively developing software in an academic research environment - subjectively define software sustainability. Thematic analysis of the data reveals two interacting dimensions: intrinsic sustainability, which relates to internal qualities of software, such as modularity, encapsulation and testability, and extrinsic sustainability, concerning cultural and organisational factors, including how software is resourced, supported and shared. Research software engineers believe an increased focus on quality and discoverability are key factors in increasing the sustainability of academic research software.","2574-1837","978-1-7281-2239-7","10.1109/CHASE.2019.00039","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816873","software sustainability;software quality;research software;research software engineering;best practice;software engineering;communities;research culture;software reuse;software maintenance","Software;Sustainable development;Interviews;Conferences;Software engineering;Wheels;Encapsulation","","5","","16","IEEE","29 Aug 2019","","","IEEE","IEEE Conferences"
"An introductory software engineering course for software engineering program","D. Shao; B. Luo; E. Ding; Q. Liu","State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University, Nanjing, China; State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University, Nanjing, China; State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University, Nanjing, China; State Key Laboratory of Novel Software Technology, Software Institute, Nanjing University, Nanjing, China",2011 24th IEEE-CS Conference on Software Engineering Education and Training (CSEE&T),"16 Jun 2011","2011","","","411","415","One important issue in undergraduate software engineering curriculum is how to help students establish the concept of software engineering at the beginning of software engineering undergraduate program and to provide a reasonable basis of knowledge and skills for subsequent courses. The ""Computing and Software Engineering (CSE)"", a three-semester course, is designed as the introductory course for undergraduate software engineering program at NJU in China; it tries to help students learn the comprehensive knowledge and skills in constructing small-to-medium size software. The course includes not only technical topics, such as programming and software development technology, but also professionalism and teamwork through constructing different scales of software. The knowledge is organized with the complete software example development demonstration, which makes it easier for students to synthesize all knowledge related in software development. CSE has been executed from 2009, and it has been refined according to feedback from students, lecturers and TAs. This paper describes the design and teaching practice of CSE.","2377-570X","978-1-4577-0348-5","10.1109/CSEET.2011.5876115","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5876115","","Software engineering;Education;Software;Knowledge engineering;Spirals;Programming profession","","2","","12","IEEE","16 Jun 2011","","","IEEE","IEEE Conferences"
"Software Engineering Education: Towards Ethical, Reliable, and Beautiful Software","A. Inuganti; M. Goyal; M. Samarah",University of Maryland Baltimore County; University of Maryland Baltimore County; University of Maryland Baltimore County,2024 IEEE/ACM International Workshop on Designing Software (Designing),"11 Sep 2024","2024","","","40","45","In this paper, we present our experience with an innovative pedagogical approach to software engineering in a graduate-level advanced software engineering course. Our approach to software engineering and software design education relies on six dimensions: 1) restating the goal of software engineering education to say that software must be conceived of, architected, designed, developed, deployed, maintained, and managed to be ethical, reliable, and beautiful; 2) software should be engineered as a service; 3) apply proven architectural principles; 4) use sound design principles; 5) create rapid multi-modal prototyping; and 6) bring the course learning objectives together by creating a term-long project that creates a solution to a real-world problem using an iterative process. The results from students’ feedback have been very positive with students citing the benefits of the course particularly a) the realignment of software engineering education goals centered on creating ethical, reliable, and beautiful software, b) the focus on clean, sound, and efficient architectures, and c) blending of IEEE SWEBOK, modern microservice architectures, and emerging approaches from software engineering research and open source. We plan to continue developing the course and enhance it in the areas of software reuse, software product design, AI and software design, design for diverse users, and design for sustainability.CCS CONCEPTS •Software and its engineering~Software creation and management~Software development process management~Software development methods •Software and its engineering~Software organization and properties~Extra-functional properties~Software reliability •Software and its engineering~Software creation and management~Designing software~Software design engineering •Social and professional topics~Professional topics~Computing education~Computing education programs~Software engineering education •Applied computing~Education~Collaborative learning •Software and its engineering~Software creation and management~Software development techniques~Software prototyping •Software and its engineering~Software creation and management~Collaboration in software development~Programming","","979-8-4007-0563-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10669866","Software Engineering Education;Software Engineering Graduate Programs;Software Design;Software Ethics","Ethics;Software design;Microservice architectures;Computer architecture;Reliability engineering;Software;Software reliability","","","","15","CCBY","11 Sep 2024","","","IEEE","IEEE Conferences"
"Tutorial on a Gamification Toolset for Improving Engagement of Students in Software Engineering Courses","T. E. J. Vos; G. Fraser; I. Martinez-Ortiz; R. Prada; A. R. Silva; I. S. W. B. Prasetya","Department of Computer Science, Open Universiteit Nederland, Heerlen, Netherlands; Faculty of Computer Science and Mathematics, Universität Passau, Passau, Germany; Software Engineering and Artificial Intelligence, Universidad Complutense de Madrid, Madrid, Spain; Instituto Superior Técnico, Universidade de Lisboa, Lisbon, Portugal; Instituto Superior Técnico, Universidade de Lisboa, Lisbon, Portugal; Utrecht University, Utrecht, Netherlands",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","3","Few if any would dispute that educating software engineering is a challenging endeavour. Although programming and creating new artefacts can motivate the creativity of students. Other software engineering topics (like e.g. requirement specifications and testing) are not considered very exciting by students. However, these topics are important to develop quality software and insufficient knowledge of students — Europe's future software engineers — in the long run contributes to failing software. The EU Erasmus+ project IMPRESS was set to explore the use of gamification in educating software engineering at the university level. The objective has been to develop a toolset that can help to improve students' engagement, and hence their appreciation, for the taught subjects like software testing and specifications. The proposed tutorial will guide participants through the set of tools developed by the project and introduce how they can use them to improve students' engagement.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206212","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206212","games for teaching software engineering;smart quiz for teaching;generating quizes;analytics for teaching software engineering","Software engineering;Tools;Software;Tutorials;Games;Software testing;Computer science","","1","","3","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"The Exploration and Practice of Gradually Industrialization Model in Software Engineering Education - A Factual Instance of the Excellent Engineer Plan of China","S. Liu; P. Ma; D. Li","School of Software, Harbin Institute of Technology, Harbin, China; School of Software, Harbin Institute of Technology, Harbin, China; School of Software, Harbin Institute of Technology, Harbin, China",2012 IEEE 25th Conference on Software Engineering Education and Training,"23 Jul 2012","2012","","","23","31","The current education model and practices in the Higher education sector in China have been successful in educating students for academic excellence, for producing industry-linked and practice-oriented graduates, who could quickly fit into the industrial working environment, has been a problem. There is a big gap between the theoretical knowledge learned in school and the practical knowledge and skills needed in the industry. National Pilot School of Software (NPSS) at Harbin Institute of Technology (HIT) has started to explore the way to reform the current education system since 2002. Over the nine years practices HIT-NPSS has developed a gradually industrialization education model with industryoriented curricula and some best practices. The software engineering education model which became a factual instance in education reforming for universities, and also an answer for the Excellent Engineer Plan of State Ministry of Education in China.","2377-570X","978-1-4673-1592-0","10.1109/CSEET.2012.24","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6245004","Industry-oriented education;software engineering education;software engineering curriculum;gradually industrialization approach","Educational institutions;Software;Industries;Software engineering;Programming;Training","","2","","6","IEEE","23 Jul 2012","","","IEEE","IEEE Conferences"
"Rochester Institute of Technology Bachelor of Science in Software Engineering CSEE&T Hall of Fame Nomination","J. R. Vallino","Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA",2017 IEEE 30th Conference on Software Engineering Education and Training (CSEE&T),"7 Dec 2017","2017","","","3","4","In the fall of 1996, the Rochester Institute of Technology launched the first undergraduate software engineering program in the United States. The culmination of five years of planning, development, and review, the program was designed from the outset to prepare graduates for professional positions in commercial and industrial software development. From an initial class of 15, the ABET-accredited program has grown steadily over the intervening years until today the student body numbers over 580 undergraduates.","2377-570X","978-1-5386-2536-1","10.1109/CSEET.2017.11","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8166675","software engineering education;RIT software engineering;undergraduate software engineering","Conferences;Software engineering;Training;Three-dimensional displays","","","","8","IEEE","7 Dec 2017","","","IEEE","IEEE Conferences"
"Is software engineering training enough for software engineers?","I. Crnkovic; R. Land; A. Sjogren","Department of Computer Science and Engineering, Mälardalen University, Vasteras, Sweden; Department of Computer Science and Engineering, Mälardalen University, Vasteras, Sweden; Department of Computer Science and Engineering, Mälardalen University, Vasteras, Sweden","Proceedings 16th Conference on Software Engineering Education and Training, 2003. (CSEE&T 2003).","2 Apr 2003","2003","","","140","147","Most software engineering courses focus exclusively on the software development process, often referring to problems related to the complexity of software products and processes. In practice, however, many problems of a complex nature arise in which system engineering and other engineering disciplines are important in the development of systems. In such cases software engineers may have difficulty in coping with the entire problem, in the same way that engineers in other fields may have difficulty in understanding the software part. This suggests that the software engineering education of today is inadequate in certain respects. This paper presents a case study of a software engineering course and discusses the difficulty for computer science students to understand and to develop a system which also requires skills in engineering of a non-software nature.","1093-0175","0-7695-1869-9","10.1109/CSEE.2003.1191371","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1191371","","Software engineering;Computer science;Knowledge engineering;Programming;Systems engineering and theory;Computer science education;Engineering management;Management training;Design engineering;Software design","","5","","17","IEEE","2 Apr 2003","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE Draft International Standard - Systems and Software Engineering -- Life Cycle Processes --Requirements Engineering","",,"ISO/IEC/IEEE P29148_FDIS, September 2018","12 Sep 2018","2018","","","1","104","This document contains provisions for the processes and products related to the engineering of requirements for systems and software products and services throughout the life cycle. It defines the construct of a good requirement, provides attributes and characteristics of requirements, and discusses the iterative and recursive application of requirements processes throughout the life cycle. This document provides additional guidance in the application of requirements engineering and management processes for requirements-related activities in ISO/IEC/IEEE 12207 and ISO/IEC/IEEE 15288. Information items applicable to the engineering of requirements and their content are defined. The content of this document can be added to the existing set of requirements-related life cycle processes defined by ISO/IEC/IEEE 12207 or ISO/IEC/IEEE 15288, or can be used independently.","","978-1-5044-5161-1","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8463987","requirement;requirement characteristics;concept of operations;ConOps;operational concept;OpsCon;prototyping;software requirements specification;system;system requirements specification;SyRS","IEEE Standards;IEC Standards;ISO Standards;Software engineering;Requirements engineering;Product life cycle management","","","","","","12 Sep 2018","","","IEEE","IEEE Standards"
"Half a Century of Software Engineering Education: The CMU Exemplar","N. R. Mead; D. Garlan; M. Shaw",Carnegie Mellon University; Carnegie Mellon University; Carnegie Mellon University,IEEE Software,"27 Sep 2018","2018","35","5","25","31","From the aspirational title of the 1968 NATO conference, software engineering has evolved to a well-defined engineering discipline with strong educational underpinnings. The supporting educational foundation has grown from a few courses in programming languages and data structures, evolving through structured programming, correctness formalisms, and state machine abstractions to full curricula and degree programs. With this context in mind, the authors discuss the evolution of software engineering education and pedagogy, software engineering principles, and future needs, drawing specifically on their experience at Carnegie Mellon University. Reflecting on the software development profession today, they believe that formal software engineering education is needed at least as much as it was in earlier decades. However, it must address the increasing diversity of the developer community, and it must be an education based on the enduring principles that will last a lifetime. This article is part of a theme issue on software engineering’s 50th anniversary.","1937-4194","","10.1109/MS.2018.290110743","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8409913","software engineering education;software engineering history;software engineering practice;Carnegie Mellon University;Software Engineering Institute;software development;software engineering","Software engineering;History;Technology forecasting;Computer science","","3","","16","IEEE","11 Jul 2018","","","IEEE","IEEE Magazines"
"Understanding software engineering failure as part of the SWEBOK","I. Monarch","Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA",Proceedings 14th Conference on Software Engineering Education and Training. 'In search of a software engineering profession' (Cat. No.PR01059),"7 Aug 2002","2001","","","191","192","The Guide to the Software Engineering Body of Knowledge (GSWEBOK) is a good first step in characterizing the contents of the software engineering discipline and in providing a topical access to the Software Engineering Body of Knowledge (SWEBOK). However, the GSWEBOK is seriously lacking as a guide to how the SWEBOK can be used to explore system failures as a way of enhancing practitioner's preparations for the software engineering profession. This lack is not limited to the Guide. This is why it is very important, in order that software system failure may be understood from a software engineering point of view, that a new conception of what the SWEBOK is, as well as new approaches to its access, need to be developed.","1093-0175","0-7695-1059-0","10.1109/CSEE.2001.913843","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=913843","","Software engineering;Software systems;Software quality;Best practices;Knowledge engineering;Reflection;Software testing;Humans;Computer architecture;Failure analysis","","1","","","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"IEEE/ISO/IEC International Standard for Software and systems engineering--Software testing--Part 3:Test documentation - Redline","",,ISO/IEC/IEEE 29119-3:2021(E) - Redline,"20 Jan 2022","2021","","","1","274","The purpose of the ISO/IEC/IEEE 29119 series of software testing standards is to define an internationally-agreed set of standards for software testing that can be used by any organization when performing any form of software testing. ISO/IEC/IEEE 29119-3 includes templates and examples of test documentation. The templates are arranged within clauses reflecting the overall test process description structure in ISO/IEC/IEEE 29119-2, i.e. by the test process in which they are being produced. Annex A outlines the contents of each document and maps each document to ISO/IEC/IEEE 29119-2. Annex B contains an overview of the examples. Annexes C to R contain examples of the application of the templates. Annex S provides mappings to existing standards. Annex T explains the use of the term Test Model in this document. The Bibliography for this part of ISO/IEC/IEEE 29119 is at the end of the document. ISO/IEC/IEEE 29119-3 supports dynamic testing, functional and non-functional testing, manual and automated testing, and scripted and unscripted testing. The documentation templates defined in ISO/IEC/IEEE 29119-3 can be used in conjunction with any software development lifecycle model.","","978-1-5044-8368-1","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9687477","29119;29119-1;software testing;Test Planning Process;Test Plan;verification and validation.","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software testing;Systems engineering and theory;Documentation","","","","","","20 Jan 2022","","","IEEE","IEEE Standards"
"System Thinking: Educating T-Shaped Software Engineers","B. Boehm; S. K. Mobasser","Center for Systems and Software Engineering, University of Southern California, Los Angeles, CA, USA; Center for Systems and Software Engineering, University of Southern California, Los Angeles, CA, USA",2015 IEEE 28th Conference on Software Engineering Education and Training,"17 Aug 2015","2015","","","13","16","With respect to system thinking, a T-shaped person is one who has technical depth in at least one aspect of the system's content, and a workable level of understanding of a fair number of the other system aspects. Many pure computer science graduates are strongly I-shaped, with a great deal of depth in software technology, but little understanding of the other disciplines involved in such areas as business, medicine, transportation, or Internets of Things. This leaves them poorly prepared to participate in the increasing numbers of projects involving multi-discipline system thinking, and in strong need of software skills. We have developed and evolved an MS-level software engineering curriculum that enables Computer Science (CS) majors to become considerably more T-shaped than when they entered. It includes courses in software management and economics, human-computer interaction, embedded software systems, systems and software requirements, architecture, and Verification and Validation (V&V), and a two-semester, real-client team project course that gives students experience in applying these skills. We find via feedback on the students' internships and job experiences that they and their employers have high rates of success in job offers and job performance.","2377-570X","978-1-4673-6701-1","10.1109/CSEET.2015.11","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203846","Software Engineering;Systems Engineering;System Thinking;T-shaped;Curriculum;Education and Training;The Incremental Commitment Spiral Model","Software;Software engineering;Aircraft propulsion;Stakeholders;Computer science;Modeling;Aircraft","","1","","8","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"A Progression Model of Software Engineering Goals, Challenges, and Practices in Start-Ups","E. Klotins; M. Unterkalmsteiner; P. Chatzipetrou; T. Gorschek; R. Prikladnicki; N. Tripathi; L. B. Pompermaier","Software Engineering Research Lab Sweden, Blekinge Institute of Technology, Karlskrona, Sweden; Software Engineering Research Lab Sweden, Blekinge Institute of Technology, Karlskrona, Sweden; Department of Informatics, CERIS, Örebro University School of Business, Örebro, Sweden; Software Engineering Research Lab Sweden, Blekinge Institute of Technology, Karlskrona, Sweden; Software Engineering Research Lab, Blekinge Institute of Technology, Karlskrona, Sweden; M3S Research Unit, University of Oulu, Oulu, Finland; School of Technology, Pontifical Catholic University of Rio Grande do Sul, Porto Alegre, Brazil",IEEE Transactions on Software Engineering,"15 Mar 2021","2021","47","3","498","521","Context: Software start-ups are emerging as suppliers of innovation and software-intensive products. However, traditional software engineering practices are not evaluated in the context, nor adopted to goals and challenges of start-ups. As a result, there is insufficient support for software engineering in the start-up context. Objective: We aim to collect data related to engineering goals, challenges, and practices in start-up companies to ascertain trends and patterns characterizing engineering work in start-ups. Such data allows researchers to understand better how goals and challenges are related to practices. This understanding can then inform future studies aimed at designing solutions addressing those goals and challenges. Besides, these trends and patterns can be useful for practitioners to make more informed decisions in their engineering practice. Method: We use a case survey method to gather first-hand, in-depth experiences from a large sample of software start-ups. We use open coding and cross-case analysis to describe and identify patterns, and corroborate the findings with statistical analysis. Results: We analyze 84 start-up cases and identify 16 goals, 9 challenges, and 16 engineering practices that are common among start-ups. We have mapped these goals, challenges, and practices to start-up life-cycle stages (inception, stabilization, growth, and maturity). Thus, creating the progression model guiding software engineering efforts in start-ups. Conclusions: We conclude that start-ups to a large extent face the same challenges and use the same practices as established companies. However, the primary software engineering challenge in start-ups is to evolve multiple process areas at once, with a little margin for serious errors.","1939-3520","","10.1109/TSE.2019.2900213","CNpq and FAPERGS(grant numbers:17/2551-0001205-4); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8643804","Software start-up;software engineering practices;progression model","Software;Software engineering;Companies;Market opportunities;Requirements engineering;Analytical models","","28","","96","IEEE","17 Feb 2019","","","IEEE","IEEE Journals"
"Highlighting the challenges of model-based engineering for spaceflight software systems","R. G. Pettit; N. Mezcciani","Flight Software and Embedded Systems Office, Aerospace Corporation, VA, USA; Software Systems Analysis Department, Aerospace Corporation, El Segundo, CA, USA",2013 5th International Workshop on Modeling in Software Engineering (MiSE),"12 Sep 2013","2013","","","51","54","Spaceflight software continues to experience exponential growth as functionality migrates from hardware to software. The resulting complexity of these mission critical systems demands new approaches to software systems engineering in order to effectively manage the development efforts and ensure that reliability is not compromised. Model-based systems /software engineering (MBE) approaches present attractive solutions to address the size and complexity through abstraction and analytical models. However, there are many challenges that must be addressed before MBE approaches can be effectively adopted on a large scale across an entire system. In this position paper, we highlight some of the key challenges based on our experiences with flight software programs employing elements of MBE.","2156-7891","978-1-4673-6447-8","10.1109/MiSE.2013.6595296","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6595296","Model-Based Engineering;Systems Engineering;Software Engineering;Flight Software","Unified modeling language;Complexity theory;Analytical models;Software engineering;Software systems","","3","","26","IEEE","12 Sep 2013","","","IEEE","IEEE Conferences"
"IEEE Draft Standard for Adoption of Systems and software engineering --Systems and software assurance -- Part 3: Systems integrity levels","",,IEEE-P15026-3-DIS-January 2015,"22 Jan 2015","2015","","","1","29","The content of ISO/IEC 15026-3:2015 is adopted by this standard. This part of ISO/IEC 15026 specifies the concept of integrity levels with corresponding integrity level requirements that are required to be met in order to show the achievement of the integrity level. It places requirements on and recommends methods for defining and using integrity levels and their integrity level requirements. It covers systems, software products, and their elements, as well as relevant external dependencies.","","978-0-7381-9510-0","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7017980","15026-3;adoption;integrity levels;software systems","IEEE Standards;Software engineering;Quality assurance;Software assurance;Systems engineering and theory;ISO Standards;IEC Standards;Risk management","","","","","","22 Jan 2015","","","IEEE","IEEE Standards"
"IEEE Approved Draft International Standard for Software and Systems Engineering--Software Testing--Part 4: Test Techniques","",,ISO/IEC/IEEE P29119-4-FDIS April 2015,"22 Apr 2015","2015","","","1","147","This part of ISO/IEC 29119 defines software testing techniques that can be used by any organization, project or smaller testing activity. The test techniques in this International Standard are used to derive the test cases executed as part of the dynamic testing process specified in part two of this standard. This International Standard is applicable to the testing in all software development lifecycle models. This document is intended for, but not limited to, testers, test managers, developers, project managers, particularly those responsible for governing, managing and implementing software testing.","","978-0-7381-9676-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7091844","software testing techniques;test case design;test case execution","IEEE Standards;Software engineering;Software testing;Systems engineering and theory","","","","","","22 Apr 2015","","","IEEE","IEEE Standards"
"Developing an Optimizing Compiler for the Game Boy as a Software Engineering Project","S. Kögel; M. Stegmaier; R. Groner; M. Tichy; S. Götz; S. Rechenberger","Institute of Software Engineering and Programming Languages, Ulm University; Institute of Software Engineering and Programming Languages, Ulm University; Institute of Software Engineering and Programming Languages, Ulm University; Institute of Software Engineering and Programming Languages, Ulm University; Institute of Software Engineering and Programming Languages, Ulm University; Institute of Software Engineering and Programming Languages, Ulm University",2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"26 Aug 2018","2018","","","9","12","Software engineering students not only have to learn theoretical concepts but also how to successfully apply them in practice. Hence, projects are an important part of software engineering curricula. As software engineering methods and technologies are only relevant for non-trivial software systems, we report in this paper on a master-level software engineering project course in which a team of students developed a compiler for the Game Boy in a single semester. The students developed different languages and corresponding parsers to a common intermediate language, optimizations on the intermediate language, as well as a code generator for the Game Boy. We particularly present lessons learned by us and the students as well as potential course improvements.","","978-1-4503-5660-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445176","Compiler construction;software engineering education;project based learning","Software engineering;Games;Optimization;Generators;XML;Registers","","","","6","","26 Aug 2018","","","IEEE","IEEE Conferences"
"Teaching an object-oriented software development lifecycle in undergraduate software engineering education","M. B. Blake; T. Cornett","Department of Computer Science, George town University, Washington D.C., DC, USA; Department of Computer Science, George town University, Washington D.C., DC, USA",Proceedings 15th Conference on Software Engineering Education and Training (CSEE&T 2002),"7 Aug 2002","2002","","","234","240","In order to develop students for successful careers in software engineering, specifically for software development, they must not only be immersed in the software development lifecycle and paradigms, but also in the workings of large project teams. Currently, most undergraduate software engineering courses are taught by presenting the concepts and methodologies and assigning fragmented 3-4 person group projects. In the Department of Computer Science at Georgetown University, a two-course approach to undergraduate software engineering education has been developed that incorporates the practical application of coursework in a large team setting. The first course presents a firm software design basis, while the second course demonstrates corporate-level software engineering concepts with a semester-long software development simulation where the entire class is the development team. This paper presents the experiences from offering this software engineering simulation approach.","1093-0175","0-7695-1515-0","10.1109/CSEE.2002.995215","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=995215","","Programming;Software engineering;Object oriented modeling;Software design;Software architecture;Collaborative software;Computer science education;Computer science;Application software;Design engineering","","8","","13","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Practices and Technologies in Computer Game Software Engineering","W. Scacchi","Institute for Software Research, University of California, Irvine",IEEE Software,"16 Jan 2017","2017","34","1","110","116","Computer games are rich, complex, and often large-scale software applications. They're a significant, interesting, and often compelling domain for innovative research in software engineering techniques and technologies. Computer games are progressively changing the everyday world in many positive ways. Game developers, whether focusing on entertainment market opportunities or game-based applications in nonentertainment domains such as education, healthcare, defense, or scientific research (that is, serious games), thus share a common interest in how best to engineer game software. This article examines techniques and technologies that inform contemporary computer game software engineering.","1937-4194","","10.1109/MS.2017.20","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7819395","computer games;software engineering;software development;software engineering education;game development;game platforms;game engines;software architecture;gameplay;playtesting;software reuse;requirements engineering;runtime services;scalability","Games;Software development;Software engineering;Engines;Computer architecture;Runtime;Requirements engineering","","7","","7","IEEE","16 Jan 2017","","","IEEE","IEEE Magazines"
"What Do We Know about Knowledge Management? Practical Implications for Software Engineering","T. Dingsøyr; F. O. Bjørnson; F. Shull","SINTEF Information and Communication Technology, Department of Computer and Information Science, Norwegian University of Science and Technology; SINTEF Fisheries and Aquaculture; Measurement and Knowledge Management Division, Fraunhofer Center for Experimental Software Engineering, Maryland",IEEE Software,"17 Apr 2009","2009","26","3","100","103","Knowledge management is an overarching idea with a large potential impact on knowledge-intensive work such as software engineering. What do we know about these approaches and how they work in practice? What are the main findings from research on knowledge management in software engineering, and what are these findings' practical implications? This article summarizes a systematic review of research on knowledge management in software engineering, characterizing the research findings and practical implications according to knowledge management school.","1937-4194","","10.1109/MS.2009.82","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4814968","software engineering;knowledge management;learning software organization;software process improvement;systematic review","Knowledge management;Software engineering;Educational institutions;Systems engineering and theory;Knowledge engineering;Guidelines;Software development management;Programming;Social network services;Space technology","","30","","7","IEEE","17 Apr 2009","","","IEEE","IEEE Magazines"
"Automated Feedback for Quality Assurance in Software Engineering Education","R. Cardell-Oliver; L. Zhang; R. Barady; Y. H. Lim; A. Naveed; T. Woodings","School of Computer Science & Software Engineering, University of Western Australia, Crawley, WA, Australia; School of Computer Science & Software Engineering, University of Western Australia, Crawley, WA, Australia; School of Computer Science & Software Engineering, University of Western Australia, Crawley, WA, Australia; School of Computer Science & Software Engineering, University of Western Australia, Crawley, WA, Australia; School of Computer Science & Software Engineering, University of Western Australia, Crawley, WA, Australia; School of Computer Science & Software Engineering, University of Western Australia, Crawley, WA, Australia",2010 21st Australian Software Engineering Conference,"1 Jun 2010","2010","","","157","164","This paper investigates the use of automated testing tools for improving the quality of programs produced by software engineering students. Our approach to software quality assurance utilizes open source, professional software engineering tools to measure a number of quality attributes. Programming assignments are designed and the tools configured to provide timely, formative feedback to students. Evaluation of over 450 student assignments developed both with and without tool support demonstrates that the feedback both enables and motivates students to improve significantly the quality of their submitted programming assignments.","2377-5408","978-1-4244-6476-0","10.1109/ASWEC.2010.24","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5475060","software quality;software engineering education;software testing;automatic assessment","Feedback;Quality assurance;Software engineering;Software quality;Programming profession;Software testing;Computer science education;Educational programs;Computer science;Australia","","4","","21","IEEE","1 Jun 2010","","","IEEE","IEEE Conferences"
"Complex Network Thinking in Software Engineering","D. Li; Y. Han; J. Hu","Institute of Electronic System Engineering, Beijing, China; Beihang University, Beijing, China; Beihang University, Beijing, China",2008 International Conference on Computer Science and Software Engineering,"22 Dec 2008","2008","1","","264","268","The booming of Internet has brought new challenges to software engineering. In the network age, software industry has undergone a transition from manufacturing industry to the service trade, software doesnpsilat have clear hierarchy structure, specific life cycle and definite system border any longer. On the contrary, both software itself and the environment it works in are all networked. In this paper, we explore an idea of software engineering from the perspective of complex networks. First, we present a skeletal description to abstract software structure into network topology. Evidence shows that software systems have the characteristics of small world, scale-free and high clustering. Then we point out three aspects of the influence to software engineering based on the characteristics of complex network. Finally, the most promising development trend of software engineering in the future is predicted.","","978-0-7695-3336-0","10.1109/CSSE.2008.689","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4721739","complex networks;community structure;small-world;scale-free;software engineering","Complex networks;Software engineering;Manufacturing industries;Network topology;Computer science;Computer industry;Systems engineering and theory;IP networks;Software systems;Production","","18","","17","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Knowledge Management in the Global Software Engineering Environment","I. Richardson; M. O'Riordan; V. Casey; B. Meehan; I. Mistrik","Lero-The Irish Software Engineering Research Centre, University of Limerick, Limerick, Ireland; Lero-The Irish Software Engineering Research Centre, University of Limerick, Limerick, Ireland; Software System Research Centre, Bournemouth University, Dorset, UK; Department of Computer Science and Information Systems, University of Limerick, Limerick, Ireland; Heidelberg, Germany",2009 Fourth IEEE International Conference on Global Software Engineering,"7 Aug 2009","2009","","","367","369","In this paper we consider the importance of explicit knowledge management, taking into account the growth of global software engineering and the importance of corporate knowledge. We conclude by suggesting specific areas of research which should be considered important for the implementation of knowledge management within global software engineering environments","2329-6313","978-0-7695-3710-8","10.1109/ICGSE.2009.57","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5196961","global software engineering;knoweldge management;corporate organisations","Knowledge management;Software engineering;Programming;Environmental management;Globalization;Costs;Engineering management;Software testing;System testing;Software systems","","7","","18","IEEE","7 Aug 2009","","","IEEE","IEEE Conferences"
"The Research of Software Product Line Engineering Process and Its Integrated Development Environment Model","J. Dong; J. Wang; D. Sun; H. Lu","School of Computer Engineering, HuaiHai Institute of Technology, Lianyungang, China; School of Mathematics & Statistics, Lanzhou University, Lanzhou, China; Key Laboratory of Western Chinas Environmental Systems, College of Earth and Environment Sciences, Ministry of Education, Lanzhou University, Lanzhou, China; Department of Software Engineering, University of Technology, Sydney, Australia",2008 International Symposium on Computer Science and Computational Technology,"30 Dec 2008","2008","1","","66","71","In order to realize the industrialization production of software, people have carried out research on and analysis the software product line architecture of the growing maturity, component technology and development methods for product line. In this paper, a novel software engineering process model is proposed based on the modern industrial production systems and automated production method: that is ¿N-life-cycle model¿. Based on this new model, not only integrated software engineering environment model and framework have been proposed, which are based on the product line development process model, but also study systematically on theirs implementation. ""N-life-cycle model"" and ""integrated software engineering environment model based on the product line"" which are set up in the article are brand-new open models possessing modern manufacturing production characteristic. The models can impel the research development quickly of product line engineering and product line software engineering environment towards the industrialisation and automatization of the software industry.","","978-1-4244-3746-7","10.1109/ISCSCT.2008.100","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4731376","software product-line;software architecture;component;integrated software engineering environmen;process model","Software engineering;Computer industry;Educational technology;Software architecture;Application software;Design engineering;Production systems;Computer architecture;Assembly;Manufacturing industries","","2","","13","IEEE","30 Dec 2008","","","IEEE","IEEE Conferences"
"Teaching systems engineering to software engineering students","R. E. Fairley; M. J. Willshire","Software and Systems Engineering Associates, USA; Software and Systems Engineering Associates, USA",2011 24th IEEE-CS Conference on Software Engineering Education and Training (CSEE&T),"16 Jun 2011","2011","","","219","226","This paper describes the relationships between systems engineering and software engineering and indicates ways in which systems engineering concepts can be integrated into the SE2004 curriculum guidelines for software engineering to produce software engineers who can effectively participate in systems engineering endeavors. This paper is a companion to “Teaching Software Engineering Concepts to Systems Engineers” which appears in the proceedings of the 2011 ASEE conference.","2377-570X","978-1-4577-0348-5","10.1109/CSEET.2011.5876090","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5876090","","Software;Software engineering;Knowledge engineering;Object oriented modeling;Guidelines","","7","","3","IEEE","16 Jun 2011","","","IEEE","IEEE Conferences"
"Research on Engineering Certification-Oriented Course Design for Software Engineering under the Background of New Engineering","X. Chen; F. Hu; J. Lai; C. Tao; H. Shin","Chongqing Engineering Research Center for Spatial Big Data Intelligent Technology, Chongqing University of Posts and Telecommunications, Chongqing, China; Department of Computer Science, Chongqing University of Posts and Telecommunications, Chongqing, China; Department of Computer Science, Chongqing University of Posts and Telecommunications, Chongqing, China; Department of Computer Science, Chongqing University of Posts and Telecommunications, Chongqing, China; Software Department, Konkuk University, Seoul, Korea",2021 10th International Conference on Educational and Information Technology (ICEIT),"17 Mar 2021","2021","","","101","105","With the appearance of the new engineering concept in 2017, the mode of talents development in colleges and universities has also changed. And the new engineering talents need to be more practical and innovative abilities. However, the professional certification of engineering education is an important guidance for the teaching of engineering majors in China, and it is the core idea of output-oriented, student-centered and continuous improvement to construct the quality control system of engineering education in colleges and universities in China. Combining with the core idea of engineering certification and the new requirements under the background of new engineering, in this paper, we put forward to a set of comprehensive software engineering course design for engineering certification in the new engineering environment, which is guided by engineering education, aims at improving students' engineering practical ability and innovation, provides a method of solution for the reform of software engineering course design under the new engineering background.","","978-1-6654-2295-6","10.1109/ICEIT51700.2021.9375577","Chongqing University of Posts and Telecommunications; National Research Foundation of Korea; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9375577","software engineering course design;engineering certification;new engineering","Knowledge engineering;Technological innovation;Quality control;Engineering education;Information technology;Certification;Software engineering","","1","","8","IEEE","17 Mar 2021","","","IEEE","IEEE Conferences"
"Tendency analysis of software reliability engineering","L. Fan; Z. Ma","Zunyi Normal College, Zunyi, China; Qiannan Normal College for Nationalities, Qiannan, China","The Proceedings of 2011 9th International Conference on Reliability, Maintainability and Safety","11 Aug 2011","2011","","","771","773","Under the effects of integrated factors, such as IT technology, software engineering, user requirement etc, software reliability engineering has been gradually developed. With the continuous improvement of software engineering technology, the perfection of software reliability tools and the enhancement of user requirement for software reliability, and the research for software reliability are developing in a new manner. This paper simply reviews the basic contents and features of software reliability engineering, and then mainly introduces its development tendency. Finally, proposed some problems which need to be solved in the development of software reliability engineering.","","978-1-61284-666-8","10.1109/ICRMS.2011.5979369","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5979369","Software Reliability;Reliability engineering;software engineering;software testing","Software reliability;Software;Reliability engineering;Software engineering;Testing;Software measurement","","","","8","IEEE","11 Aug 2011","","","IEEE","IEEE Conferences"
"Teaching Software Engineering Principles Using Micro Project with Eclipse (MPE) Activity: An Evaluation","L. Al-Abdulkarim; M. Al-Yahya","Information Technology Department, King Saud University, Riyadh, Saudi Arabia; Information Technology Department, King Saud University, Riyadh, Saudi Arabia",2009 Fourth International Conference on Software Engineering Advances,"30 Oct 2009","2009","","","384","388","In this paper, we describe the design, implementation, and evaluation of the MPE (Micro Project with Eclipse) learning activity. The MPE learning activity is designed to enable students to apply software engineering principles within a limited timeframe of one academic semester. The MPE activity is based on the Eclipse platform. Students studying a Software Engineering course at the Information Technology Department at King Saud University completed the MPE activity. An evaluation was conducted to obtain students' perceptions on the MPE activity and how well it helped them understand software engineering concepts. Results of the evaluation indicate that the activity was generally effective in helping students learn about various software engineering principles. Students indicated that it allowed them to apply software development phases from requirements to testing.","","978-1-4244-4779-4","10.1109/ICSEA.2009.62","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5298198","Software Engineering;Learning activity;Software development;Eclipse;Micro project;MPE","Education;Software engineering;Programming;Collaborative software;Computational modeling;Information technology;Software testing;Computer simulation;Computer aided software engineering;Computer industry","","1","","20","IEEE","30 Oct 2009","","","IEEE","IEEE Conferences"
"Why Pakistani Software Companies don't use Best Practices for Requirement Engineering Processes","I. Zafar; A. Shaheen; A. K. Nazir; B. Maqbool; W. H. Butt; J. Zeb","Department of Computer & Software Engineering, National University of Sciences and Technology (NUST), Islamabad; Department of Computer & Software Engineering, National University of Sciences and Technology (NUST), Islamabad; Department of Computer & Software Engineering, National University of Sciences and Technology (NUST), Islamabad; Department of Computer & Software Engineering, National University of Sciences and Technology (NUST), Islamabad; Department of Computer & Software Engineering, National University of Sciences and Technology (NUST), Islamabad; Department of Computer & Software Engineering, National University of Sciences and Technology (NUST), Islamabad","2018 IEEE 9th Annual Information Technology, Electronics and Mobile Communication Conference (IEMCON)","17 Jan 2019","2018","","","996","999","Requirement engineering (RE) is initial and critical phase of software engineering. The success of software project is based on good requirement engineering practices. The purpose of requirement engineering practices is to elicit all intended user needs and document them for clarity of understanding and for future reference. In developing countries like Pakistan best RE practices are not fully used in software industry. In this study, major reasons for not using best RE practices are identified based on literature review of research work done related to RE in different countries. Literature review revealed that lack of knowledge of requirement engineering processes, lack of cost, lack of time are major factors behind not using RE practices in software development. A survey was conducted to base on factors identified to highlight major obstacles in way of using best requirement engineering practices in Pakistan. Survey results depicted the main issues are lack of budget, lack of time, lack of dedicated team and communication difficulties.","","978-1-5386-7266-2","10.1109/IEMCON.2018.8614913","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8614913","Requirement Engineering Practices;Problems;Pakistan software industry","Software;Requirements engineering;Companies;Software engineering;Industries;Bibliographies","","5","","30","IEEE","17 Jan 2019","","","IEEE","IEEE Conferences"
"Including practical software evolution in software engineering education","M. Postema; J. Miller; M. Dick","School of Computer Science and Sofiare Engineering, Monash University, Australia; School of Computer Science and Sofiare Engineering, Monash University, Australia; School of Computer Science and Sofiare Engineering, Monash University, Australia",Proceedings 14th Conference on Software Engineering Education and Training. 'In search of a software engineering profession' (Cat. No.PR01059),"7 Aug 2002","2001","","","127","135","Software engineering typically requires more effort in maintenance than in development time. As such, software engineering education needs to actively include software evolution. Teaching software evolution to undergraduate students usually includes the theoretical aspects, but does not normally include the actual implementation. This paper describes the practice of teaching software evolution to undergraduate computing students at Monash University. It demonstrates how the four maintenance activities: corrective, adaptive, perfective and preventative, can be included into the practical component of a software engineering course, providing students with a much more realistic view of software engineering.","1093-0175","0-7695-1059-0","10.1109/CSEE.2001.913829","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=913829","","Software engineering;Software maintenance;Error correction;Computer science education;Software systems;Computer science;Software tools;Engineering education;Educational programs;Hardware","","9","","12","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Deciding what to design: closing a gap in software engineering education","M. Shaw; J. Herbsleb; I. Ozkaya","Institute for Software Research, International School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA; Institute for Software Research, International School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA; Institute for Software Research, International School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA","Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.","19 Dec 2005","2005","","","607","608","Software has jumped ""out of the box"" - it controls critical systems; it pervades business and commerce; it is embedded in myriad mechanisms; it infuses entertainment, communication, and other activities of everyday life. Designs for these applications are constrained not only by traditional considerations of capability and performance but also by economic, business, market, and policy issues and the context of intended use. The diversity of applications requires adaptability in responding to client needs, and the diversity of clients and contexts requires the ability to discriminate among criteria for success. As a result, software designers must also get out of their boxes: in addition to mastering traditional software development skills, they must understand the contextual issues that discriminate good solutions from merely competent ones. Current software engineering education, however, remains largely ""in the box"": it neglects the rich fabric of issues that lie between the client's problem and actual software development. At Carnegie Mellon we have addressed this major shortcoming with a course that teaches students to understand both the capabilities required by the client and the constraints imposed by the client's context. This paper presents our view of the engineering character of software engineering, describes the content and organization of our new course, reports on our experience from the first three offerings of our course, and suggests ways to adapt our course for other educational settings.","1558-1225","1-59593-963-2","10.1109/ICSE.2005.1553609","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1553609","","Software engineering;Application software;Programming;Control engineering education;Communication system software;Embedded software;Communication system control;Control systems;Business communication;Context","","15","","","","19 Dec 2005","","","IEEE","IEEE Conferences"
"Using Software Project Courses to Integrate Education and Research: An Experience Report","S. Koolmanojwong; B. Boehm","Center of Systems and Software Engineering (CSSE), University of Southern California, Los Angeles, CA, USA; Center of Systems and Software Engineering (CSSE), University of Southern California, Los Angeles, CA, USA",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","26","33","At University of Southern California (USC), CSCI577ab is a graduate software engineering course that teaches best software engineering practices and allows students to apply the learned knowledge in developing real-client projects. The class is used as an experimental test-bed to deploy various research tools and approaches for validation of new methods and tools. Various research data have been collected as partial basis for twelve PhD dissertations. This paper reports how research and education are integrated via project experiments and how the results strengthen future educational experiences.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.25","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812671","Software Engineering Class;Empirical Research","Software engineering;Open source software;Risk analysis;Quality management;Risk management;Engineering management;Systems engineering education;Software maintenance;Software quality;Testing","","8","","18","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"A Two-Year Software Engineering M.Sc. Degree Designed Under the Bologna Declaration Principles","J. M. Fernandes; R. J. Machado","Departamento de Informática, Universidade do Minho, Braga, Portugal; Departamento de Sistemas de Informação, Universidade do Minho, Guimaraes, Portugal",2006 International Conference on Software Engineering Advances (ICSEA'06),"19 Dec 2006","2006","","","1","1","This paper presents and discusses the syllabus of a second cycle degree on Software Engineering in which any student that finishes any undergraduate Computing degree (Computer Engineering, Computer Science, Information Systems, Information Technology, and Software Engineering) can enroll. In the first year, the degree is composed of two 30-ECTS modules, one dedicated to software analysis and design and the other devoted to software quality and management. Each module is composed of five curricular units, being one of them dedicated to the experimental integration of the module's topics. The second year allows two different paths to be followed by the students. The professional path includes a 30-ECTS industrial project, while in the scientific path students must write a 45-ECTS master dissertation. The degree is mainly structured to consider the Bologna Declaration that is now being used in Europe to recast all university degrees. Additionally, we also considered the Software Engineering 2004 Curriculum Guidelines and the Knowledge Areas described in the SWEBOK.","","0-7695-2703-5","10.1109/ICSEA.2006.261257","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4031786","Software engineering;Bologna declaration;master degree;project-led engineering education.","Software engineering;Collaborative software;Engineering education;Software systems;Project management;Application software;Software maintenance;Distributed computing;Software quality;Europe","","1","","13","IEEE","19 Dec 2006","","","IEEE","IEEE Conferences"
"The Basic Research of Human Factor Analysis Based on Knowledge in Software Engineering","Z. Yanyan; X. Renzuo","Software engineering of Wuhan University, Wuhan, China; Software engineering of Wuhan University, Wuhan, China",2008 International Conference on Computer Science and Software Engineering,"22 Dec 2008","2008","5","","1302","1305","The human factors issues in software engineering are very serious, so to start the research of human factor analysis is urgent and important. Software itself is the aggregate of knowledge. And the whole software development process is full of knowledge. We analyze the knowledge in each stage of software engineering and knowledge errors caused by human factor in this paper. We did some interview and investigation, and discussed some primary management measures for these human factors.","","978-0-7695-3336-0","10.1109/CSSE.2008.219","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4723148","human factor;knowledge;software engineering","Human factors;Software engineering;Psychology;Programming profession;Accidents;Personnel;Software quality;Engineering management;Computer science;Aggregates","","8","","8","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Computing curriculum - software engineering: its impacts on professional software engineering education","T. H. Tse","Department of Computer Science, University of Hong Kong, Hong Kong, China","Proceedings of the 28th Annual International Computer Software and Applications Conference, 2004. COMPSAC 2004.","18 Oct 2004","2004","","","176","177 vol.1","The Software Engineering volume by the IEEE Computer Society/ACM Joint Task Force on Computing Curricula, otherwise known as the Computing Curriculum - Software Engineering (CCSE), has been finalized and approved. This work comments on the impacts of the volume on professional software engineering education.","0730-3157","0-7695-2209-2","10.1109/CMPSAC.2004.1342824","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1342824","","Software engineering;Licenses;Software quality;Knowledge engineering;Ethics;Computer science education;Certification;Guidelines;Application software;Law","","2","","6","IEEE","18 Oct 2004","","","IEEE","IEEE Conferences"
"Poster: A Matrix for Analyzing Projects in Software Engineering Courses","J. Marcos-Abed","Computer Science Department, Tecnológico de Monterrey, Monterrey, N.L., México",2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion),"30 Aug 2018","2018","","","139","140","The careful selection of a project for Software Engineering courses is important from the point of view of the student, the teacher and the project user or client -if available. But, how do you determine whether to develop a complex fictional case, or a simple real-world project with a considerable amount of learning about the software lifecycle? How do you determine whether or not to develop a social project aimed at the community? In order to analyze project characteristics a framework was elaborated, based in a matrix with attributes found in different academic projects carried out over 10 years, and weighted according to certain criteria. It is expected that the result of this analysis will help professors choose the most appropriate software project to develop in class, depending on the characteristics of each project.","2574-1934","978-1-4503-5663-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449469","Software projects;software lifecycle;software engineering education","Software engineering;Software;Education;Computer science;Teamwork;Project management","","","","6","","30 Aug 2018","","","IEEE","IEEE Conferences"
"Is an Athletic Approach the Future of Software Engineering Education?","E. Hill; P. M. Johnson; D. Port",Drew University; University of Hawaii at Manoa; University of Hawaii at Manoa,IEEE Software,"29 Dec 2015","2016","33","1","97","100","Traditional software engineering education approaches--in-class lectures, unsupervised homework assignments, and occasional projects--create many opportunities for distraction. To address this problem, the authors have employed an approach that treats software engineering education more like athletic training.","1937-4194","","10.1109/MS.2016.15","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7367991","software engineering education;athletic software engineering;education;software development;unit testing;software engineering","Software engineering;Programming profession;Training;Computer science education;Software development","","6","","1","IEEE","29 Dec 2015","","","IEEE","IEEE Magazines"
"Soft skills in software engineering: A study of its demand by software companies in Uruguay","G. Matturro","Departamento de Ingeniería de Software Universidad ORT Uruguay, Montevideo, Uruguay",2013 6th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"30 Sep 2013","2013","","","133","136","Software development requires professionals with knowledge and experience on many different methodologies, tools, and techniques. However, the so-called soft skills, such as interpersonal skills, teamwork, problem solving and customer orientation to name just a few, are as important as, or even more important, than traditional qualifications and technical skills. In this paper we review a set of jobs advertisements offering job positions related to software engineering in order to identify what soft skills are most in demand by software companies in Uruguay. We also compare our findings with the ones reported in other recent studies carried out with data from other countries. This comparison shows that evidence exists about a common set of basic soft skills software companies demand when looking for new staff for software engineering activities.","","978-1-4673-6290-0","10.1109/CHASE.2013.6614749","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6614749","Soft skills;software engineering","Software engineering;Companies;Teamwork;Problem-solving;Software testing;Software design","","32","","9","IEEE","30 Sep 2013","","","IEEE","IEEE Conferences"
"Towards flexible automated support to improve the quality of computational science and engineering software","D. Falessi; F. Shull","Fraunhofer USA, Center for Experimental Software Engineering, MD, USA; Fraunhofer USA, Center for Experimental Software Engineering, MD, USA",2013 5th International Workshop on Software Engineering for Computational Science and Engineering (SE-CSE),"30 Sep 2013","2013","","","88","91","Continual evolution of the available hardware (e.g. in terms of increasing size, architecture, and computing power) and software (e.g. reusable libraries) is the norm rather than exception. Our goal is to enable CSE developers to spend more of their time finding scientific results by capitalizing on these evolutions instead of being stuck in fixing software engineering (SE) problems such as porting the application to new hardware, debugging, reusing (unreliable) code, and integrating open source libraries. In this paper we sketch a flexible automated solution supporting scientists and engineers in developing accurate and reliable CSE applications. This solution, by collecting and analyzing product and process metrics, enables the application of well-established software engineering best practices (e.g., separation of concerns, regression testing and inspections) and it is based upon the principles of automation, flexibility and iteration.","","978-1-4673-6261-0","10.1109/SECSE.2013.6615104","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6615104","Computational science and engineering software;empirical software engineering","Software;Software engineering;Best practices;Testing;Automation;Measurement;Computer architecture","","1","","11","IEEE","30 Sep 2013","","","IEEE","IEEE Conferences"
"The Impact of Combining Storytelling with Lecture on Female Students in Software Engineering Education","S. Ouhbi; M. A. M. Awad","Dept. Computer Science & Software Eng. CIT, United Arab Emirates University Al Ain, Abu Dhabi, UAE; Dept. Computer Science & Software Eng. CIT, United Arab Emirates University Al Ain, Abu Dhabi, UAE",2021 IEEE Global Engineering Education Conference (EDUCON),"18 Jun 2021","2021","","","443","447","Software engineering courses are characterized by heavy theoretical and complex concepts that might be challenging to teach while keeping students engaged in the classroom, which might impact them from pursuing software engineering careers later. Software engineering is well known to be a male dominated field even though the first software engineer was a woman. Research has shown that storytelling can be used to improve students and teachers engagement in primary and secondary education. However, there is a lack of research on storytelling application and efficiency in higher education to teach complex concepts. This study explored the impact of combining a story with lecture on undergraduate female students in a software engineering course. We investigated the following hypothesis: Combining storytelling with lectures can improve the female students interest in software engineering. A questionnaire study has been conducted with 24 female undergraduate students in the classroom. Students had no prior knowledge on software engineering before the study. The questionnaire was designed to be simple to motivate students to participate in the study. It contained three questions to capture the interest of female students in pursuing a career in software engineering: prior to the lecture, after the lecture, and after the story. The results showed that the story incorporated in the lecture had great impact on female students perception about software engineering. Combining storytelling with software engineering lectures seems a promising tool to engage female students in higher education and increase their interest in pursuing a career in software engineering.","2165-9567","978-1-7281-8478-4","10.1109/EDUCON46332.2021.9453992","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9453992","story;storytelling;software engineering;higher education;female students.","Knowledge engineering;Engineering profession;Conferences;Tools;Software;Engineering education;Software engineering","","6","","44","IEEE","18 Jun 2021","","","IEEE","IEEE Conferences"
"IEEE Draft International Standard for Software and Systems Engineering--Software Testing--Part 4: Test Techniques","",,ISO/IEC/IEEE P29119-4-DISMay2013,"21 Feb 2014","2014","","","1","132","This part of ISO/IEC 29119 defines software testing techniques that can be used by any organization, project or smaller testing activity. The test techniques in this International Standard are used to derive the test cases executed as part of the dynamic testing process specified in part two of this standard. This International Standard is applicable to the testing in all software development lifecycle models. This document is intended for, but not limited to, testers, test managers, developers, project managers, particularly those responsible for governing, managing and implementing software testing.","","978-0-7381-8451-7","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6746633","software testing techniques;test case design;test case execution","IEEE standards;ISO standards;IEC standards;Software testing;Software engineering","","","","","","21 Feb 2014","","","IEEE","IEEE Standards"
"Variability Management in Software Product Line Engineering","A. Metzger; K. Pohl","Software Systems Engineering, University of Duisburg-Essen, Essen, Germany; Software Systems Engineering, University of Duisburg-Essen, Essen, Germany",29th International Conference on Software Engineering (ICSE'07 Companion),"4 Jun 2007","2007","","","186","187","Software product line engineering (SPLE [2], [6]) has proven to be the paradigm for developing a diversity of similar software applications and software-intensive systems at low costs, in short time, and with high quality. Numerous reports document the significant achievements of introducing software product lines in industry [6].","","0-7695-2892-9","10.1109/ICSECOMPANION.2007.83","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4222738","","Engineering management;Application software;Testing;Design engineering;Software engineering;Software quality;Documentation;Software systems;Systems engineering and theory;Costs","","23","1","7","IEEE","4 Jun 2007","","","IEEE","IEEE Conferences"
"IEEE Draft International Standard - Systems and Software Engineering--Life Cycle Management--Part 5: Software Development Planning","",,"ISO/IEC/IEEE P24748-5-CD3, February 2015","22 Apr 2015","2015","","","1","42","ISO/IEC/IEEE 24748 provides unified and consolidated guidance on the life cycle management of systems and software. It draws on key aspects of the former IEEE J-Std-016 Standard for information technology software Software life cycle processes Software development Acquirer-supplier agreement. The IEEE Standards Association has identified the need for a non-military standard to guide managers of software systems in software development planning.Taken together, the parts of ISO/IEC/IEEE 24748are intended to facilitate the joint usage of the process content of ISO/IEC/IEEE 12207 and ISO/IEC/IEEE 15288, Systems and software engineering System life cycle processes, which in turn may be used together with related standards such as for service management,and various lower-level process standards.","","978-0-7381-9677-0","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7091838","","IEEE Standards;Software engineering;Product life cylce management;Software development;Systems engineering and theory","","","","","","22 Apr 2015","","","IEEE","IEEE Standards"
"On Constraints and Count-Measures for Software Engineering","Y. Wang","Theoretical and Empirical Software Engineering Research Center, Department of Electrical and Computer Engineering, University of Calgary, Calgary, AB, Canada",2006 Canadian Conference on Electrical and Computer Engineering,"15 Jan 2007","2006","","","2389","2392","Constraints of software engineering are inherent by its intangibility, complexity, and diversity. A comprehensive set of 14 basic constraints of software engineering are identified in this paper, which can be classified into three categories known as the cognitive, organizational, and resource constraints. The relationships between the three categories of basic constraints of software engineering can be described by the software engineering constraint model (SECM). A set of 31 fundamental principles for software engineering as the key measures for coping with the basic constraints is identified. A mapping between the software engineering constraints and measures is developed, which can be used as a guideline for allocating certain software engineering methodologies for coping with a given problem in a software engineering projects","0840-7789","1-4244-0038-4","10.1109/CCECE.2006.277683","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4054981","Software engineering;basic constraints;fundamental principles;count-measures;methodologies","Software engineering;Constraint theory;Software measurement;Costs;Application software;Drives;Guidelines;Software systems;Power system management;Engineering management","","1","","9","IEEE","15 Jan 2007","","","IEEE","IEEE Conferences"
"IEEE Standard Adoption of ISO/IEC 90003:2014, Software Engineering -- Guidelines for the Application of ISO 9001:2008 to Computer Software","",,IEEE Std 90003-2015,"22 Sep 2015","2015","","","1","71","This International Standard provides guidance for organizations in the application of ISO 9001:2008 to the acquisition, supply, development, operation, and maintenance of computer software and related support services. It does not add to or otherwise change the requirements of ISO 9001:2008.;This International Standard provides guidance for organizations in the application of ISO 9001:2008 to the acquisition, supply, development, operation, and maintenance of computer software and related support services. It does not add to or otherwise change the requirements of ISO 9001:2008.","","978-0-7381-9850-7","10.1109/IEEESTD.2015.7274039","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7274039","9001;adoption;computer software;IEEE 90003(TM);quality management","IEEE Standards;Software engineering;Software qualiy;Quality management;ISO Standards;IEC Standards","","","","","","22 Sep 2015","","","IEEE","IEEE Standards"
"Five years of lessons learned from the Software Engineering course: Adapting best practices for Distributed Software Development","C. R. L. Neto; E. S. de Almeida","Reuse in Software Engineering Laboratorie, USA; Computer Science Department, Federal University of Bahia (DCC/UFBA), Brazil",2012 Second International Workshop on Collaborative Teaching of Globally Distributed Software Development (CTGDSD),"28 Jun 2012","2012","","","6","10","Several companies around the world are using Distributed Software Development (DSD) to reduce costs and some Software Engineering courses are trying to simulate this distributed environment. This paper shows the experience faced by students during five years from the Software Engineering course performed at the Federal University of Pernambuco, Brazil, which the objective was adapting the best practices from traditional development for DSD. Course lectures and materials educate students about software engineering best practices and DSD. The students developed a project organized into a set of work assignments that could be distributed across groups. At the end they learned to communicate and collaborate with each other, and they also believed that the course was helpful to them, which justifies the low number of dropouts. Most of the students, but not all, successfully completed their projects.","","978-1-4673-1818-1","10.1109/CTGDSD.2012.6226948","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6226948","Distributed Software Development;Software Engineering Education","Programming;Software engineering;Software;Education;Conferences;Best practices;Collaboration","","2","","16","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"An Agile Software Engineering Course with Product Hand-Off","J. Shepherd","Buena Vista University Storm Lake, Iowa, U.S.A.",2018 IEEE/ACM International Workshop on Software Engineering Education for Millennials (SEEM),"23 Aug 2018","2018","","","86","89","This paper describes a novel design for an agile software engineering course that emphasizes keeping product artifacts updated throughout development. The signature transformative event in the course is the mid-semester project ""hand-off,"" at which point teams trade projects with other student teams and must make immediate progress despite no prior knowledge of the new project's design, coding conventions, or documentation. Course features are described along with their implementation and assessment.","","978-1-4503-5750-0","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8442133","Software engineering education;agile software engineering;peer learning;hand-off","Software engineering;Software;Documentation;Education;Programming;Task analysis;Sociology","","","","12","","23 Aug 2018","","","IEEE","IEEE Conferences"
"Mining software engineering data","A. E. Hassan; T. Xie","Queens University, Canada; North Carolina State University, USA",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","503","504","Software engineering data (such as code bases, execution traces, historical code changes, mailing lists, and bug databases) contains a wealth of information about a project's status, progress, and evolution. Using well-established data mining techniques, practitioners and researchers have started exploring the potential of this valuable data in order to better manage their projects and to produce higher quality software systems that are delivered on time and within budget. This tutorial presents the latest research in mining software engineering data, discusses challenges associated with mining software engineering data, highlights success stories of mining software engineering data, and outlines future research directions. Attendees will acquire the knowledge and skills needed to integrate the mining of software engineering data in their own research or practice. This tutorial builds on several successful offerings at ICSE since 2007.","1558-1225","978-1-60558-719-6","10.1145/1810295.1810451","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062269","mining software engineering data;mining software repositories","Data mining;Software engineering;Tutorials;Software maintenance;Reliability;History","","7","1","13","","27 Oct 2011","","","IEEE","IEEE Conferences"
"The Theory and Practice of Bilingual Teaching in ""Object-Oriented Software Engineering""","Z. Wei; Z. Tao; C. H. -M. Lewis; F. -F. Duan","College of Software and Microelectronics, Northwestern Polytechnical University, Shanxi, China; College of Software and Microelectronics, Northwestern Polytechnical University, Shanxi, China; College of Software and Microelectronics, Northwestern Polytechnical University, Shanxi, China; College of Software and Microelectronics, Northwestern Polytechnical University, Shanxi, China",2009 International Conference on Computer Engineering and Technology,"2 Feb 2009","2009","2","","417","419","In this paper, we describe the main courses of object-oriented software engineering, analyze the necessity of bilingual teaching and explain in detail the teaching plan and strategy of object-oriented software engineering. Finally, we, summarize the advantages and disadvantages of this bilingual teaching course. We conclude that practice has proved the worth of bilingual teaching in object-oriented software engineering.","","978-1-4244-3334-6","10.1109/ICCET.2009.33","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4769635","object-oriented;software engineering;bilingual teaching","Education;Software engineering;Programming;Natural languages;Educational institutions;Microelectronics;Software design;Software testing;Object oriented modeling;Globalization","","1","","5","IEEE","2 Feb 2009","","","IEEE","IEEE Conferences"
"Experimental Software Engineering: A New Conference","K. Reed",La Trobe University,IEEE Software,"17 Jul 2006","2006","23","4","98","99","An interesting issue facing software engineering relates to the evidence for adopting new techniques, tools, languages methodologies, and so on. We shouldn't always reject new models based on pure argument and logic, but ideally, we should subject such developments to some form of validation. The software engineering community has addressed this issue in part by the establishment of specialist conferences. Two of these are merging, and the Technical Council on Software Engineering thought you would like to know why.","1937-4194","","10.1109/MS.2006.100","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1657947","International Symposium on Empirical Software Engineering and Measurement;software metrics;evidence-based software engineering","Software engineering;Technical Councils;Software metrics;Computer science;Software testing;Flow graphs;Software maintenance;Maintenance engineering;Software measurement;Communities","","","","4","IEEE","17 Jul 2006","","","IEEE","IEEE Magazines"
"Crafting the Future of Software Engineering Education in CC2020: A Workshop","R. J. LeBlanc; N. R. Mead; J. Impagliazzo","Department of Computer Science and Software Engineering, Seattle University, Seattle, Washington, USA; Software Engineering Institute, Carnegie Mellon University, Pittsburgh, Pennsylvania, USA; Engineering and Applied Sciences, Hofstra University, Hempstead, New York, USA",2017 IEEE 30th Conference on Software Engineering Education and Training (CSEE&T),"7 Dec 2017","2017","","","65","66","Several national and international computing and engineering organizations are in the process of developing a new curricular document tentatively titled 'Computing Curricula 2020' (CC2020). This curricular project, based on its predecessor CC2005, intends to reflect the state-of-the-art in computing education and practice as well as the future of the computing educational field for the 2020s. This workshop provides an overview of the CC2005 report and its transition to the CC2020 project. It also provides unique perspectives from three members of the CC2020 task force. The workshop authors and participants will engage in lively discussions on ways to include software engineering as a significant component of the project and extend its influence in global undergraduate computing education for the future. The authors anticipate full audience involvement and participation in formulating this vision.","2377-570X","978-1-5386-2536-1","10.1109/CSEET.2017.20","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8166684","software engineering education;CC2020;CC2005;future software engineering education","Software engineering;Conferences;Guidelines;Force;Information technology;Education","","1","","7","IEEE","7 Dec 2017","","","IEEE","IEEE Conferences"
"Developing Flexible Software Using Agent-Oriented Software Engineering","H. Mubarak","Institute of Industrial Automation and Software Engineering, Universität Stuttgart",IEEE Software,"19 Aug 2008","2008","25","5","12","15","Over the past decade, software agents and multiagent systems have grown into a powerful software engineering paradigm. They enable abstractions not only from the problem domain but also toward dynamic solutions that evolve in real time, depending on environmental stimuli to the software system. Agent-oriented software engineering supports the design of dynamically interacting components, each with its own thread of control, and using complex coordination protocols such as networking applications, ubiquitous computing, and sensor networks. The major pitfall so far has been the lack of sufficient engineering methodology. Author Hisham Mubarak looks at the engineering of agent-oriented systems and provides practical guidance to get started.","1937-4194","","10.1109/MS.2008.135","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4602667","agent-oriented software engineering;agent platforms","Software engineering;Software agents;Multiagent systems;Real time systems;Software systems;Protocols;Application software;Ubiquitous computing;Systems engineering and theory","","11","","","IEEE","19 Aug 2008","","","IEEE","IEEE Magazines"
"Watching the Detectives: An Initial Report on an Industrial Experiment to Collaborate with the Empirical Software Engineering Research Community","K. Wallace","BAE Systems, Maritime Portsmouth, UK",2018 IEEE/ACM 5th International Workshop on Software Engineering Research and Industrial Practice (SER&IP),"2 Sep 2018","2018","","","18","21","Context: Evidence-based practice within healthcare benefits from the Cochrane Collaboration providing trustworthy evidence that can be used to inform clinical decisions. Currently no equivalent resource exists for the practice of software engineering. With the ever increasing dependence of society upon software an analogue of the collaboration for the discipline of software engineering would appear to be of potentially significant societal benefit. Objectives: This study investigated attitudes of the empirical software engineering community, as exemplified by attendees at an research focused conference, to the hypothesis that an analogue of the Cochrane Collaboration would be beneficial. Method: An online survey was employed to capture opinions of participants in the EASE'16 conference on the hypothesis. During a presentation at the industrial track of the conference attendees (27) were invited to complete the survey. Subsequently all conference attendees (90) were provided with details of the survey, irrespective of whether they had attended the presentation or not. No closing date for the survey was specified. Results: In total 9 conference attendees completed the survey: of whom 7 had attended the industrial track presentation. These figures approximate to a response rate of 26% for those attending the presentation and exactly 10% for conference participants overall. This response rate is insufficient to enable statistical analysis of the data obtained through the survey. Trends are, however, evident in the rankings of the responses provided. These trends are consistent with opinions and observations volunteered by a diverse range of individuals active in software engineering and allied fields dating from 2014 to the present. Conclusions: At this time there is insufficient data to validate the hypothesis. Nevertheless experience, informal observation and opinion continues to accumulate to provide evidence in support of the validity of the hypothesis, albeit principally in anecdotal form.","","978-1-4503-5744-9","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8452766","Software Engineering;Evidence;Cochrane Collaboration;Survey;Principles","Software engineering;Software;Medical services;Teamwork;Decision making;Currencies","","","","17","","2 Sep 2018","","","IEEE","IEEE Conferences"
"Generating undergraduate software engineering courses/programs using the computing curricula software engineering volume","R. LeBlanc; T. Lethbridge; A. E. K. Sobel","Georgia Tech, Altanta, GA; Univ. of Ottawa, Ottawa, Ontario, Canada; Miami University, Oxford, OH, USA","17th Conference on Software Engineering Education and Training, 2004. Proceedings.","30 Mar 2004","2004","","","167","168","The Software Engineering Volume is part of the IEEE-CS/ACM Computing Curricula effort that began in the fall of 1998 when a group of dedicated individuals from the IEEE Computer Society and the ACM were appointed by the two societies to begin work on what was then called Computing Curriculum 2001. This Steering Committee came to the conclusion that the area of computing had gone beyond the boundaries of computer science and that one volume would not effectively contain all of the newer areas of computing that had been developed. It was decided to split the Computing Curriculum effort into several volumes: namely, Computer Science, Computer Engineering, Software Engineering, and Information Systems volumes. The main goals of the IEEE-CS/ACM Computing Curricula effort are to provide guidance to academic institutions and accreditation agencies about what should constitute an undergraduate education in one of the aforementioned areas.","1093-0175","0-7695-2099-5","10.1109/CSEE.2004.1276531","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1276531","","Software engineering;Computer science education;Computer science;Accreditation;Guidelines;Educational programs;Software design;Conferences;Societies;Information systems","","","","","IEEE","30 Mar 2004","","","IEEE","IEEE Conferences"
"Large Language Models for Software Engineering: Survey and Open Problems","A. Fan; B. Gokkaya; M. Harman; M. Lyubarskiy; S. Sengupta; S. Yoo; J. M. Zhang","Generative AI Team Meta Platforms Inc., New York, NY, USA; PyTorch Team Meta Platforms Inc., Menlo Park, CA, USA; Instagram Product Foundation Meta Platforms Inc., London, UK; Developer Infrastructure Meta Platforms Inc., London, UK; FAIR Meta Platforms Inc., Menlo Park, CA, USA; School of Computing KAIST, Daejeon, Korea; Department of Informatics, King's College London, London, UK",2023 IEEE/ACM International Conference on Software Engineering: Future of Software Engineering (ICSE-FoSE),"4 Mar 2024","2023","","","31","53","This paper provides a survey of the emerging area of Large Language Models (LLMs) for Software Engineering (SE). It also sets out open research challenges for the application of LLMs to technical problems faced by software engineers. LLMs' emergent properties bring novelty and creativity with applications right across the spectrum of Software Engineering activities including coding, design, requirements, repair, refactoring, performance improvement, documentation and analytics. However, these very same emergent properties also pose significant technical challenges; we need techniques that can reliably weed out incorrect solutions, such as hallucinations. Our survey reveals the pivotal role that hybrid techniques (traditional SE plus LLMs) have to play in the development and deployment of reliable, efficient and effective LLM-based SE.","","979-8-3503-2496-9","10.1109/ICSE-FoSE59343.2023.00008","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10449667","Automated Program Repair;Documentation generation;Generative AI;Genetic Improvement;Human-Computer Interaction;Large Language Models;Refactoring;Requirements engineering;Search Based Software Engineering (SBSE);Software Analytics;Software Engineering Education;Software Processes;Software Maintenance and Evolution;Software Testing","Surveys;Maintenance engineering;Reliability engineering;Software;Software reliability;Software engineering;Testing","","43","","236","IEEE","4 Mar 2024","","","IEEE","IEEE Conferences"
"Empirical Software Engineering Research on Free/Libre/Open Source Software","G. Robles","GSyC/LibreSoft-Libre Software Engineering Laboratory, Universidad Rey Juan Carlos de Madrid, Madrid, Spain",2006 22nd IEEE International Conference on Software Maintenance,"11 Dec 2006","2006","","","347","350","Public available data sources are an important knowledge generator from which researchers can obtain, mostly in a non-intrusive way, data and facts from software projects. We present a methodological approach to the data sources commonly found in libre (free, open source) software projects over the Internet, explain how to extract these data and enhance them and offer some ways of analyzing it from various perspectives. The whole process has been implemented with tools that automatize the process so that an ample amount of analysis from various angles (that range from software maintenance and software evolution to the social structure of the underlying organization in charge of the development) of a huge amount of software projects has been used as case studies. This paper demonstrates that it is possible to build research methodologies that can be applied to a large quantity of software projects and that empirical software engineering studies have not to refer to a limited number of software projects. Although specifically targeted to libre software development, many of the techniques and lessons learned can be generally applied to other types of software environments","1063-6773","0-7695-2354-4","10.1109/ICSM.2006.25","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4021360","","Software engineering;Open source software;Software maintenance;Software performance;Performance analysis;Software tools;Programming;Linux;Internet;Data mining","","6","","12","IEEE","11 Dec 2006","","","IEEE","IEEE Conferences"
"Software Engineering Education Program for Software Professionals of High Competency at DENSO","K. Kobata; T. Uesugi; H. Adachi; M. Aoyama","Engineering Education Development Dept., DENSO E & TS TRAINING CENTER CORPORATION, Obu, Japan; Engineering Education Development Dept., DENSO E & TS TRAINING CENTER CORPORATION, Obu, Japan; EPF R&D Dept., DENSO CORPORATION, Kariya, Japan; Dep. of Software Engineering, Nanzan University, Seto, Japan",2013 20th Asia-Pacific Software Engineering Conference (APSEC),"6 Mar 2014","2013","2","","117","122","This article reports on the developing and practicing of software professional education program for ten years at DENSO. Through the experience in fostering professionals, we focused on solving challenges in order to create an effective solution, and introduced the problem solving technique, advanced software engineering and engineer' philosophy to the education program. The performance of participants demonstrated significant improvement in the quality of their solutions. Particularly, the courses in problem solving and engineers' philosophy contributed to motivating the participants and improving the performance. This article reports the improvement of the education program with statistics.","1530-1362","978-1-4799-2144-7","10.1109/APSEC.2013.125","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6754364","Software Engineering Education;Automotive Software Engineering;Problem Solving;Professional Software Engineer","Problem-solving;Software;Software engineering;Education;Writing;Automobiles;Chapters","","3","","7","IEEE","6 Mar 2014","","","IEEE","IEEE Conferences"
"Are Computer Science and Engineering Graduates Ready for the Software Industry? Experiences from an Industrial Student Training Program","E. Tuzun; H. Erdogmus; I. G. Ozbilgin","Department of Computer Engineering, Havelsan Technology and Academy Directorate, Turkey; Carnegie Mellon University, Electrical and Computer Engineering, USA; Havelsan Technology and Academy Directorate, Turkey",2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"26 Aug 2018","2018","","","68","77","It has been 50 years since the term ""software engineering"" was coined in 1968 at a NATO conference. The field should be relatively mature by now, with most established universities covering core software engineering topics in their Computer Science programs and others offering specialized degrees. However, still many practitioners lament a lack of skills in new software engineering hires. With the growing demand for software engineers from the industry, this apparent gap becomes more and more pronounced. One corporate strategy to address this gap is for the industry to develop supplementary training programs before the hiring process, which could also help companies screen viable candidates. In this paper, we report on our experiences and lessons learned in conducting a summer school program aimed at screening new graduates, introducing them to core skills relevant to the organization and industry, and assessing their attitudes toward mastering those skills before the hiring process begins. Our experience suggests that such initiatives can be mutually beneficial for new hires and companies alike. We support this insight with pre- and post-training data collected from the participants during the first edition of the summer school and a follow-up questionnaire conducted after a year with the participants, 50% of whom were hired by the company shortly after the summer school.","","978-1-4503-5660-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445184","software engineering education;software engineering training;software engineering summer school;hiring practices for software professionals","Software engineering;Companies;Software;Industries;Training;Computer science","","","","19","","26 Aug 2018","","","IEEE","IEEE Conferences"
"Incorporating software process in an undergraduate software engineering curriculum: challenges and rewards","Deepti Suri; M. J. Sebern","Department of Electrical Engineering and Computer Science, Milwaukee School of Engineering, Milwaukee, WI, USA; Department of Electrical Engineering and Computer Science, Milwaukee School of Engineering, Milwaukee, WI, USA","17th Conference on Software Engineering Education and Training, 2004. Proceedings.","30 Mar 2004","2004","","","18","23","Milwaukee School of Engineering has one of the first ABET-accredited software engineering (SE) programs in the United States. We describe our experiences in incorporating the core elements of the software engineering process throughout the undergraduate SE program. These elements are integrated vertically as well as horizontally throughout the curriculum, starting with an introductory process course in the sophomore year and culminating in a three-quarter software development laboratory course sequence and a two-quarter capstone project in the junior and senior years. The challenges encountered while using this approach are also discussed.","1093-0175","0-7695-2099-5","10.1109/CSEE.2004.1276505","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1276505","","Software engineering;Programming;Laboratories;Production;Software maintenance;Software quality;Software systems;Algorithm design and analysis;Software algorithms;Software architecture","","6","","19","IEEE","30 Mar 2004","","","IEEE","IEEE Conferences"
"Bloom's taxonomy levels for three software engineer profiles","P. Bourque; L. Buglione; A. Abran; A. April","École de Technologie Supérieure, Montreal, Canada; École de Technologie Supérieure, Montreal, Canada; École de Technologie Supérieure, Montreal, Canada; École de Technologie Supérieure, Montreal, Canada",Eleventh Annual International Workshop on Software Technology and Engineering Practice,"27 Dec 2004","2003","","","123","129","This paper is the product of a workshop held in Amsterdam during the Software Technology and Practice Conference (STEP 2003). The purpose of the paper is to propose Bloom's taxonomy levels for the Guide to the Software Engineering Body of Knowledge (SWEBOK) topics for three software engineer profiles: a new graduate, a graduate with four years of experience, and an experienced member of a software engineering process group. Bloom's taxonomy levels are proposed for topics of four knowledge areas of the SWEBOK Guide: software maintenance, software engineering management, software engineering process, and software quality. By proposing Bloom's taxonomy in this way, the paper aims to illustrate how such profiles could be used as a tool in defining job descriptions, software engineering role descriptions within a software engineering process definition, professional development paths, and training programs.","","0-7695-2218-1","10.1109/STEP.2003.6","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1372142","Guide to the Software Engineering Body of Knowledge;SWEBOK;Bloom’s Taxonomy","Taxonomy;Software engineering;Knowledge engineering;Electric breakdown;Software maintenance;Knowledge management;Quality management;Engineering management;Software quality;Management training","","12","","17","IEEE","27 Dec 2004","","","IEEE","IEEE Conferences"
"Should Robotics Engineering Education Include Software Engineering Education?","M. Zizyte; T. Tabor","Computer Science Department, Brown University, Providence, Rhode Island, USA; School of Computer Science, Carnegie Mellon University, Pittsburgh, Pennsylvania, USA",2022 IEEE/ACM 4th International Workshop on Robotics Software Engineering (RoSE),"11 Jul 2022","2022","","","39","42","Multiple universities across the United States now offer bachelor's degrees in robotics, which aim to prepare students to work in the robotics industry. To judge how well these programs are providing software engineering training, we evaluate whether these programs teach the software engineering practices that are required for robotics software engineering. We compile an updated list of robotics bachelor's degree programs and measure whether the curriculum of each program claims to teach a specific practice. We find that some of these practices are not mentioned in the curricula, and that some are only taught implicitly in long-term project courses. These project courses vary in scope, guidance, and structure. This implies that robotics bachelor's degrees may not be preparing students to engage with the practices in the workforce.","","978-1-4503-9317-1","10.1145/3526071.3527514","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9814834","Robotics Education;Robotic Software Engineering;University Curriculum","Training;Industries;Service robots;Conferences;Software;Engineering education;Software engineering","","","","11","CCBY","11 Jul 2022","","","IEEE","IEEE Conferences"
"Information Transformation: An Underpinning Theory for Software Engineering","D. Clark; R. Feldt; S. Poulding; S. Yoo","Department of Computer Science, University College London, London; Department of Software Engineering, Blekinge Institute of Technology, Sweden; Department of Software Engineering, Blekinge Institute of Technology, Sweden; Department of Computer Science, University College London, London",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","599","602","Software engineering lacks underpinning scientific theories both for the software it produces and the processes by which it does so. We propose that an approach based on information theory can provide such a theory, or rather many theories. We envision that such a benefit will be realised primarily through research based on the quantification of information involved and a mathematical study of the limiting laws that arise. However, we also argue that less formal but more qualitative uses for information theory will be useful. The main argument in support of our vision is based on the fact that both a program and an engineering process to develop such a program are fundamentally processes that transform information. To illustrate our argument we focus on software testing and develop an initial theory in which a test suite is input/output adequate if it achieves the channel capacity of the program as measured by the mutual information between its inputs and its outputs. We outline a number of problems, metrics and concrete strategies for improving software engineering, based on information theoretical analyses. We find it likely that similar analyses and subsequent future research to detail them would be generally fruitful for software engineering.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.202","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203022","information theory;software engineering;software testing","Software engineering;Entropy;Software;Channel capacity;Software testing;Measurement","","9","","20","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Software Engineering Education Toolkit for Embedded Software Architecture Design Methodology Using Robotic Systems","D. Kim; S. Kim; S. Kim; S. Park","Department of Computer Science and Engineering, Sogang University, Seoul, South Korea; Department of Computer Science and Engineering, Sogang University, Seoul, South Korea; Department of Computer Science and Engineering, Sogang University, Seoul, South Korea; Department of Computer Science and Engineering, Sogang University, Seoul, South Korea",2008 15th Asia-Pacific Software Engineering Conference,"22 Dec 2008","2008","","","317","324","Recently, industries need more effective software engineering education for undergraduate students as software plays an increasingly important role in consumer products. Specifically, the manufacturing industry emphasizes overall experience with software development processes from requirements to implementation in embedded software development. This paper proposes an educational toolkit focusing on architecture design methodology for embedded software and reports experience with teaching software engineering by using the toolkit. The toolkit has several tools that support methodology education. The toolkit consists of three perspectives: people, process, and technology. Each perspective represents a set of tools which can support educational activities. Particularly, the toolkit introduces LEGO MindStorms NXT as a robotic system to provide experiences with embedded software development, and visible and tangible course materials. We have conducted a case study based on the toolkit in undergraduate-level classes. The case study shows the toolkit can be successfully applied in undergraduate-level software engineering education.","1530-1362","978-0-7695-3446-6","10.1109/APSEC.2008.58","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4724562","Software Engineering Education;Robotics;Embedded Software;Software Design;Methodology","Software engineering;Systems engineering education;Embedded software;Computer architecture;Design methodology;Educational robots;Educational products;Manufacturing industries;Service robots;Computer industry","","3","","18","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Towards software engineering process for C4I systems","T. Hussain; K. N. Al-Mutib; A. S. Alghamdi","Department of Software Engineering, College of Computer and Information Sciences, King Saud University, Riyadh, Saudi Arabia; Department of Software Engineering, College of Computer and Information Sciences, King Saud University, Riyadh, Saudi Arabia; Department of Software Engineering, College of Computer and Information Sciences, King Saud University, Riyadh, Saudi Arabia",2011 IEEE 3rd International Conference on Communication Software and Networks,"8 Sep 2011","2011","","","125","129","Command Control, Communication Computer and Intelligence (C4I) systems enables modern military forces to achieve information superiority in the battlefield. C4I are complex System of systems (SOS) where individual systems interact locally to achieve global SOS behaviors. To build software for C4I systems conventional software engineering SwE process and practices have shortcomings and are not capable to support certain aspect of these systems. If C4I systems fail to operate as required due to the fact that SwE process was unable to fulfill its requirements, the consequences may not be tolerated because of the criticality of the mission of these systems in information warfare (IW). This paper highlights the distinguished characteristics and operational requirements of C4I systems which poses challenges to SwE process and practices. This paper also discuss the possible future research areas in order to enhance SwE process so that better software could drive these complex systems as required.","","978-1-61284-486-2","10.1109/ICCSN.2011.6013558","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6013558","System of systems (SOS);C4I systems;Software Engineering (SwE) process;interoperability;NetCentric","Software engineering;Computational modeling;Computer architecture;Software systems;Predictive models;Complexity theory","","2","","22","IEEE","8 Sep 2011","","","IEEE","IEEE Conferences"
"Software Measurement in Software Engineering Education: A Delphi Study to Develop a List of Teaching Topics and Related Levels of Learning","M. Villavicencio; A. Abran","CIDIS-FIEC, Escuela Superior Politécnica del Litoral, Guayaquil, Ecuador; École de technologie supérieure, Montreal, Canada",2012 38th Euromicro Conference on Software Engineering and Advanced Applications,"11 Oct 2012","2012","","","357","362","Software engineering education is aimed at preparing professionals to achieve software quality, manage risk, and deliver projects on time and on budget. This paper reports on the findings of a Delphi study as part of a series of research studies designed to identify the software measurement topics that should be taught in software engineering programs. It also outlines the levels of learning and skills that are expected to be reached by undergraduate students.","2376-9505","978-0-7695-4790-9","10.1109/SEAA.2012.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6328175","software measurement;software engineering;higher education","Software measurement;Software;Software engineering;Educational institutions;Phase measurement;Atmospheric measurements","","2","","18","IEEE","11 Oct 2012","","","IEEE","IEEE Conferences"
"IEEE Draft International Standard for Software and Systems Engineering--Software Testing--Part 4: Test Techniques","",,IEEE P29119-4/DIS2-Feb2014,"21 Feb 2014","2014","","","1","139","This part of ISO/IEC 29119 defines software testing techniques that can be used by any organization, project or smaller testing activity. The test techniques in this International Standard are used to derive the test cases executed as part of the dynamic testing process specified in part two of this standard. This International Standard is applicable to the testing in all software development lifecycle models. This document is intended for, but not limited to, testers, test managers, developers, project managers, particularly those responsible for governing, managing and implementing software testing.","","978-0-7381-8957-4","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6746628","software testing techniques;test case design;test case execution","IEEE standards;ISO standards;IEC standards;Software testing;Systems engineering and theory","","","","","","21 Feb 2014","","","IEEE","IEEE Standards"
"Software engineer behavior analysis measurement process in SW-KPA","Y. Li; J. Li; K. Hao","Management and Economy School, Beijing Institute of Technology, Beijing, China; Management and Economy School, Beijing Institute of Technology, Beijing, China; Software Engineering Institute, Northwest University NWU, Xi'an, China",2011 IEEE 2nd International Conference on Software Engineering and Service Science,"11 Aug 2011","2011","","","22","26","This paper introduced the GQM model into software engineer behavior analysis measurement process, which makes the software engineer behavior controllable and prevision. Here has fully explained GQM model, while introducing the software measurement steps. And based on a giving software engineer behavior analysis management frame referencing to Organizational Behavior, this paper has finished a series of particular GQM measurement plan and measurement structure. Consequently, a measurement indicator is gotten, analyzing and summarizing the measurement results. Well, it is proved that all of this paper is greatly valuable for the software practicable activities.","2327-0594","978-1-4244-9698-3","10.1109/ICSESS.2011.5982245","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5982245","Software Engineer Behavior Analysis;Measurement Process;Organizational Behavior;GQM Model","Software;Software measurement;Organizations;Software engineering;Analytical models;Data models","","","","12","IEEE","11 Aug 2011","","","IEEE","IEEE Conferences"
"Learning software engineering principles using open source software","J. Nandigam; V. N. Gudivada; A. Hamou-Lhadj","Grand Valley State University, Allendale, MI, US; Marshall University, Huntington, WV, US; Canada",2008 38th Annual Frontiers in Education Conference,"22 Dec 2008","2008","","","S3H-18","S3H-23","Traditional lectures espousing software engineering principles hardly engage studentspsila attention due to the fact that students often view software engineering principles as mere academic concepts without a clear understanding of how they can be used in practice. Some of the issues that contribute to this perception include lack of experience in writing and understanding large programs, and lack of opportunities for inspecting and maintaining code written by others. To address these issues, we have worked on a project whose overarching goal is to teach students a subset of basic software engineering principles using source code exploration as the primary mechanism. We attempted to espouse the following software engineering principles and concepts: role of coding conventions and coding style, programming by intention to develop readable and maintainable code, assessing code quality using software metrics, refactoring, and reverse engineering to recover design elements. Student teams have examined the following open source Java code bases: ImageJ, Apache Derby, Apache Lucene, Hibernate, and JUnit. We have used Eclipse IDE and relevant plug-ins in this project.","2377-634X","978-1-4244-1969-2","10.1109/FIE.2008.4720643","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4720643","Eclipse;Open source software;Source code exploration;Software engineering education","Software engineering;Open source software;Writing;Programming profession;Java;Computer science;Algorithm design and analysis;Software metrics;Reverse engineering;Application software","","26","","15","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Value Based Prioritization of Requirements in Software Engineering Education","P. Grasserbauer; R. Ploesch","Business Informatics - Software Engineering, Johannes Kepler University Linz, Linz, Austria; Business Informatics - Software Engineering, Johannes Kepler University Linz, Linz, Austria",2023 IEEE 35th International Conference on Software Engineering Education and Training (CSEE&T),"31 Aug 2023","2023","","","11","20","Both physical and software products have a functional use for which they were designed. Putting a new project idea into action necessitates a clear, holistic vision of the expected gain and costs. However, gain (or value) can have many different manifestations that often go far beyond pure functionality. For one thing, it can be about purely monetary value, but it can also be about expanding the company’s reach, improving customer loyalty, displacing competitors, or generating other additional benefits for the company or the user. Cost and Value Engineering is a promising approach for addressing such a value-centered perspective without losing sight of expenses. In typical Software Engineering courses Software Engineering students learn how to deal with requirements in general, as well as user stories, epics, and other requirements artifacts in the context of agile software development projects. However, aside from rudimentary planning activities for user stories or epics, they rarely learn to apply good value prioritization techniques. The primary goal of this paper is to present a validation experiment for two cost and value engineering methods in order to determine whether these methods are appropriate and valuable in a student context. The results are promising, indicating that these methods should be used in software engineering courses on a regular basis. In order for these methodologies to be properly incorporated into Software Engineering courses, an integrated tool support is required.","2377-570X","979-8-3503-2202-6","10.1109/CSEET58097.2023.00012","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10229428","Cost and Value Engineering;Requirements Prioritization;Software Engineering Education","Costs;Agile software development;Companies;Software;Planning;Engineering education;Software engineering","","","","22","IEEE","31 Aug 2023","","","IEEE","IEEE Conferences"
"Software Engineering Research and Industry: A Symbiotic Relationship to Foster Impact","V. Basili; L. Briand; D. Bianculli; S. Nejati; F. Pastore; M. Sabetzadeh","University of Maryland, College Park; University of Luxembourg; University of Luxembourg; University of Luxembourg; University of Luxembourg; University of Luxembourg",IEEE Software,"27 Sep 2018","2018","35","5","44","49","Software engineering is not only an increasingly challenging endeavor that goes beyond the intellectual capabilities of any single individual engineer but also an intensely human one. Tools and methods to develop software are employed by engineers of varied backgrounds within a large variety of organizations and application domains. As a result, the variation in challenges and practices in system requirements, architecture, and quality assurance is staggering. Human, domain, and organizational factors define the context within which software engineering methodologies and technologies are to be applied and therefore the context that research needs to account for, if it is to be impactful. This article provides an assessment of the current challenges faced by software engineering research in achieving its potential, a description of the root causes of such challenges, and a proposal for the field to move forward and become more impactful through collaborative research and innovation between public research and industry. This article is part of a theme issue on software engineering’s 50th anniversary.","1937-4194","","10.1109/MS.2018.290110216","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8409904","software engineering research;empirical software engineering;collaborative research;context-driven research;software engineering;software development","Software engineering;Collaboration;Software development;Context modeling","","31","","8","IEEE","11 Jul 2018","","","IEEE","IEEE Magazines"
"On Practice-Oriented Software Engineering Education","Shihong Huang; D. Distante","Computer Science & Engineering, Florida Atlantic University, USA; Research Centre On Software Technology, University of Sannio, Italy",19th Conference on Software Engineering Education and Training Workshops (CSEETW'06),"26 Jun 2006","2006","","","15","15","The old saying ""practice makes perfect"" has been proven to be true in many fields when training new people to master the skills needed for a particular domain. It is even truer for software engineering education. Software engineering, by and large, is the application of engineering to software. Unlike other disciplines in the computer sciences, only by coupling theory and practice can students (who usually lack real-world working experience) understand some of the abstract concepts and principles taught in software engineering courses. This paper summarizes our experience in teaching software engineering courses in two different universities using a practice-oriented approach that guides students through learning the different, and yet abstract, aspects of the software engineering process.","","0-7695-2647-0","10.1109/CSEETW.2006.11","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1644086","","Software engineering;Computer science education;Software systems;Computer science;Application software;Programming;Database systems;Software development management;Engineering management;Large-scale systems","","10","","7","IEEE","26 Jun 2006","","","IEEE","IEEE Conferences"
"Lessons from a Pioneering Software Engineering Environment: Design Principles of Software through Pictures","A. I. T. Wasserman","Software Methods and Tools, San Francisco, CA, USA",2024 IEEE/ACM First IDE Workshop (IDE),"16 Oct 2024","2024","","","12","14","This paper describes the historical background that led to the development of the innovative Software through Pictures multi-user development environment, and the principles for its integration with other software products to create a software engineering environment covering multiple tasks in the software development lifecycle.","","979-8-4007-0580-9","10.1145/3643796.3648445","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10713943","Software engineering environments;software tools;software design;software architecture","Conferences;Computer architecture;Software;Libraries;Artificial intelligence;Software engineering;Software development management","","","","22","","16 Oct 2024","","","IEEE","IEEE Conferences"
"Is Software Engineering Research Addressing Software Engineering Problems? (Keynote)","G. C. Murphy","Department of Computer Science, Vancouver, BC, Canada",2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE),"24 Dec 2020","2020","","","4","5","Brian Randell described software engineering as “the multi-person development of multi-version programs”. David Parnas expressed that this “pithy phrase implies everything that differentiates software engineering from other programming” (Parnas, 2011). How does current software engineering research compare against this definition? Is there too much focus currently on research into problems and techniques more associated with programming than software engineering? Are there opportunities to use Randell's description of software engineering to guide the community to new research directions? In this extended abstract, I motivate the keynote, which explores these questions and discusses how a consideration of the development streams used by multiple individuals to produce multiple versions of software opens up new avenues for impactful software engineering research.","2643-1572","978-1-4503-6768-4","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9286117","multi-person development;multi-version software","Programming;Software;Software engineering","","1","","5","","24 Dec 2020","","","IEEE","IEEE Conferences"
"The Software Sustainability Institute: Changing Research Software Attitudes and Practices","S. Crouch; N. C. Hong; S. Hettrick; M. Jackson; A. Pawlik; S. Sufi; L. Carr; D. De Roure; C. Goble; M. Parsons",Software Sustainability Institute; Software Sustainability Institute; Software Sustainability Institute; Software Sustainability Institute; Software Sustainability Institute; Software Sustainability Institute; Software Sustainability Institute; Software Sustainability Institute; Software Sustainability Institute; Software Sustainability Institute,Computing in Science & Engineering,"4 Feb 2014","2013","15","6","74","80","To effect change, the Software Sustainability Institute works with researchers, developers, funders, and infrastructure providers to identify and address key issues with research software.","1558-366X","","10.1109/MCSE.2013.133","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6731384","Software development;Software engineering;Training;Scientific computing;Software reliability;Programming;Domain engineering;scientific computing;software engineering;domain engineering;reliability;maintainability","Software development;Software engineering;Training;Scientific computing;Software reliability;Programming;Domain engineering","","59","","5","IEEE","4 Feb 2014","","","IEEE","IEEE Magazines"
"Putting Human Aspects of Software Engineering in University Curricula","O. Hazzan","Department of Education in Technology and Science at Technion, Israel Institute of Technology-Technion, Israel",IEEE Software,"14 Jun 2010","2010","27","4","90","91","Although people-related issues are central factors in determining the success of software projects, they do not receive sufficient attention in the software industry to improve project results. This essay describes two barriers to their getting more attention: barriers that originate in the academic status and positioning of software engineering. The essay also proposes several suggestions regarding the professional development of software practitioners.","1937-4194","","10.1109/MS.2010.104","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5484115","human aspects of software engineering;software engineering education;computer science education;software projects;software industry;professional development of software engineers","Humans;Software engineering;Computer industry","","4","","7","IEEE","14 Jun 2010","","","IEEE","IEEE Magazines"
"Software Engineering Process and Methodology in Blockchain-Oriented Software Development: A Systematic Study","M. J. H. Faruk; S. Subramanian; H. Shahriar; M. Valero; X. Li; M. Tasnim","Department of Software Engineering and Game Development, Kennesaw State University, USA; Department of Software Engineering and Game Development, Kennesaw State University, USA; Department of Information Technology, Kennesaw State University, USA; Department of Information Technology, Kennesaw State University, USA; Department of Software Engineering and Game Development, Kennesaw State University, USA; Institute for Cybersecurity Workforce Development, Kennesaw State University, USA","2022 IEEE/ACIS 20th International Conference on Software Engineering Research, Management and Applications (SERA)","30 Jun 2022","2022","","","120","127","Software Engineering is the process of systematic, disciplined, quantifiable approach that has significant impact on large-scale and complex software development. Scores of well-established software process models have long been adopted in the software development life cycle that pour stakeholders towards the completion of final software products development. Within the boundary of advanced technology, various emerging and futuristic technology is evolving that really need the attention of software engineering community whether the conventional software process techniques are capable to inherit the core fundamental into the futuristic software development. In this paper, we study the impact of existing software engineering processes and models including Agile, and DevOps in Blockchain-Oriented Software Engineering. We also examine the essentiality of adopting state-of-art concepts and evolving the current soft-ware engineering process for blockchain-oriented systems. We discuss the insight of software project management practices in BOS development. The findings of this study indicate that utilizing state-of-art techniques in software processes for futur-istic technology would be challenging and promising research is needed extensively towards addressing and improving state-of - the-art software engineering processes and methodology for novel technologies.","2770-8209","978-1-6654-8350-6","10.1109/SERA54885.2022.9806817","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9806817","Blockchain-Oriented Software Engineering;Blockchain Technology;Software Process;Software Methodology;Software Project Management","Bridges;Systematics;Distributed ledger;Project management;Software;Product development;Blockchains","","11","","38","IEEE","30 Jun 2022","","","IEEE","IEEE Conferences"
"Is there a ""software engineering ethics""? Comparing commercial and research software engineering","G. Lee","Department of Computer Science, University of Oxford, Oxford, United Kingdom",2021 IEEE/ACM 2nd International Workshop on Ethics in Software Engineering Research and Practice (SEthics),"7 Jul 2021","2021","","","13","17","While ethical principles like fairness and honesty may be broad cultural or even universal virtues, many inputs into a professional software engineer's ethical code will be situational, depending on the nature of the engineer's employing institution and the line of business in which that organisation participates. We compare published codes of ethics for employees at Silicon Valley technology companies and at UK universities, to identify the commonalities and differences of the ethical values that guide engineering practice in each category of employer. This comparison represents the beginning of a context-dependent methodology for software engineering, in which practices are recommended based on the distinct properties of the problem domain and the solutions expected therein.","","978-1-6654-4555-9","10.1109/SEthics52569.2021.00010","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9474808","ethics;software engineering;research software engineering","Ethics;Conferences;Companies;Software;Cultural differences;Software engineering;Business","","1","","23","IEEE","7 Jul 2021","","","IEEE","IEEE Conferences"
"The Role of Deliberate Artificial Design Elements in Software Engineering Experiments","J. Hannay; M. Jørgensen","Department of Software Engineering, Simula Research Laboratory, Lysaker, Norway; Simula Research Laboratory Department of Software Engineering, Department of Informatics Industrial Systems Development Group University of Oslo, Oslo, Norway",IEEE Transactions on Software Engineering,"31 Mar 2008","2008","34","2","242","259","Increased realism in software engineering experiments is often promoted as an important means to increase generalizability and industrial relevance. In this context, artificiality, e.g., the use of constructed tasks in place of realistic tasks, is seen as a threat. In this article, we examine the opposite view, that deliberately introduced artificial design elements may increase knowledge gain and enhance both generalizability and relevance. In the first part of the article, we identify and evaluate arguments and examples in favor of, and against, deliberately introducing artificiality into software engineering experiments. In the second part of the article, we summarize a content analysis of articles reporting software engineering experiments published over the ten-year period 1993-2002. The analysis reveals a striving for realism and external validity, but little awareness of for what and when, various degrees of artificiality and realism are appropriate. We conclude that an increased awareness and deliberation in these respects is essential. However, arguments in favor of artificial design elements should not be used to justify studies that are badly designed or that have research questions of low relevance.","1939-3520","","10.1109/TSE.2008.13","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4453833","Software Engineering;Surveys of historical development of one particular area;Software Engineering;Surveys of historical development of one particular area","Software design;Software engineering;Computer industry;Computer Society;Engineering drawings;Displays;Programming;Probability distribution","","42","","110","IEEE","31 Mar 2008","","","IEEE","IEEE Journals"
"IT SPIRAL: A Case Study in Scalable Software Engineering Education","M. Barker; K. Inoue","Nara Institute of Science and Technology, Osaka University, Japan; Nara Institute of Science and Technology, Osaka University, Japan",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","53","60","IT SPIRAL is a collaborative project by nine universities and four industries to develop a common curriculum for teaching software engineering. It combines existing foundation educational practices at the individual universities, a shared DVD library on advanced software engineering topics, and common intensive sessions led by industry participants. It aims to develop advanced IT skills in top-level students, shared educational skills and materials among the universities, and practical cooperation with industry to focus and advance masters level software engineering education. IT SPIRAL combines fundamentals, advanced topics, and a practical focus in a scalable approach to developing world-class software engineers.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.23","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812675","software engineering;education;curriculum;industry-academia collaboration;DVD library","Spirals;Software engineering;Computer industry;Collaborative software;Educational programs;Education;Industrial training;Educational technology;Software libraries;Collaborative work","","6","","8","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"Software Engineers and Engineering: A Survey of Undergraduate Preconceptions","J. Ivins; B. R. Von Konsky; D. Cooper; M. Robey","Software Engineering Education Research Group, Department of Computing, Curtin University of Technology, Perth, WA, Australia; Software Engineering Education Research Group, Department of Computing, Curtin University of Technology, Perth, WA, Australia; Software Engineering Education Research Group, Department of Computing, Curtin University of Technology, Perth, WA, Australia; Software Engineering Education Research Group, Department of Computing, Curtin University of Technology, Perth, WA, Australia",Proceedings. Frontiers in Education. 36th Annual Conference,"5 Mar 2007","2006","","","6","11","Past research has demonstrated that student misconceptions about degree programs can negatively affect enrolment and retention rates. Software engineering is a relatively new discipline that is distinct from computer science and other engineering specializations; however, it is still rapidly evolving and consequently there is potential for misconceptions about the new discipline to arise. A study was therefore undertaken to investigate the preconceptions of first-year students enrolled in various Bachelor of Engineering degrees. Students were asked to rank the importance of different skills and activities for software engineering, and to rate a variety of statements about software engineering using a Likert scale. First-year preconceptions were compared with the responses of fourth-year software engineering students who had completed a major industry-based project. The two groups of students had statistically significant differences of opinion with respect to many of the survey items. There were no statistically significant differences between the responses of first-year students from different engineering specializations. These findings are discussed in the context of recruiting and retaining software engineering students","2377-634X","1-4244-0256-5","10.1109/FIE.2006.322364","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4116888","preconceptions;software engineering education;student recruitment and retention","Software engineering;Computer science;Software maintenance;Licenses;Computer science education;Computer industry;Recruitment;Application software;Knowledge engineering;Educational programs","","3","","16","IEEE","5 Mar 2007","","","IEEE","IEEE Conferences"
"Workshop on Bad Practice Smells in Novice Software Engineering Education","D. Port; R. Kazman","Information Technology Management, University of Hawaii, Manoa Honolulu, HI; Information Technology Management, University of Hawaii, Manoa Honolulu, HI",2023 IEEE 35th International Conference on Software Engineering Education and Training (CSEE&T),"31 Aug 2023","2023","","","202","202","This workshop aims to address the common bad practices and habits that novice software engineering students develop and how educators can detect them and guide students towards better practices before they become ingrained. The workshop explored this by soliciting contributions of bad practices educators have observed in teaching introductory software engineering. Contributions were workshopped to develop a compendium of bad practices, along with proposed remediations and subsequently shared with the software engineering education community. The workshop concluded with recommendations for using the compendium to improve software engineering education.","2377-570X","979-8-3503-2202-6","10.1109/CSEET58097.2023.00049","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10229352","software engineering education;bad smells;bad software development practices","Conferences;Education;Software;Software engineering","","","","2","IEEE","31 Aug 2023","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE Draft International Standard - Software and systems engineering - Software testing -- Part 2: Test processes","",,"ISO/IEC/IEEE P29119-2/FDIS, June2021","26 Jul 2021","2021","","","1","64","","","978-1-5044-7833-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9495330","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software testing;Systems engineering and theory","","","","","","26 Jul 2021","","","IEEE","IEEE Standards"
"ISO/IEC/IEEE Draft International Standard - Software and systems engineering - Software testing -- Part 2: Test processes","",,"ISO/IEC/IEEE P29119-2_FDIS, December 2020","22 Jan 2021","2021","","","1","65","","","978-1-5044-7331-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9334491","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Systems engineering and theory;Software testing","","","","","","22 Jan 2021","","","IEEE","IEEE Standards"
"An empirical study on the use of standards and procedures in software development projects","A. Tahir; R. Ahmad; Z. M. Kasirun","Software Engineering Department, University of Malaya, Malaysia; Software Engineering Department, University of Malaya, Malaysia; Software Engineering Department, University of Malaya, Malaysia",2010 2nd International Conference on Software Technology and Engineering,"25 Oct 2010","2010","1","","V1-274","V1-278","This paper presents the results of an empirical study on the use of standards and procedures in software development industry. Even though there are several studies which have been conducted for this purpose, there is none or very few which have been carried out in the South East Asia region. Hence, this survey study intends to fill up this gap. The survey was conducted based on data collected from questionnaire and interview sessions. It is a part of our continuous research on software engineering practices in the Malaysian software industry. As a result, this survey shows that Malaysian software companies are aware of the importance of using standards and procedures in the software development. Still, there are some gaps in the implementation of these standards and procedures in real-world projects. Decipher these findings will help these companies to improve the overall quality of their software products.","","978-1-4244-8666-3","10.1109/ICSTE.2010.5608844","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5608844","Empirical Study;Software Engineering;Standards;Procedures;Survey","Companies;Software;Standards;Programming;Software engineering;Interviews;Encoding","","1","","11","IEEE","25 Oct 2010","","","IEEE","IEEE Conferences"
"Secure Modules for Undergraduate Software Engineering Courses","J. Yang; A. Lodgher; Y. Lee","Computing and Cyber Security, Texas A&M University-San Antonio, San Antonio, TX, USA; Computing and Cyber Security, Texas A&M University-San Antonio, San Antonio, TX, USA; Computing and Cyber Security, Texas A&M University-San Antonio, San Antonio, TX, USA",2018 IEEE Frontiers in Education Conference (FIE),"7 Mar 2019","2018","","","1","5","Security affects every software component in different types of computing systems. Many vulnerabilities and attacks on software systems are due to security weaknesses in the software itself. During the process of software specification, development, or testing, security issues are either taken into consideration insufficiently or not at all. Such software, due to internal weaknesses is prone to new attacks. By teaching secure software engineering techniques for designing and developing software modules, students would learn systematic secure software development techniques, such as defect detecting and security testing. This paper presents a series of modules that are designed to be integrated into undergraduate software engineering courses from a security perspective. The goal of the modules is to teach the building of robust software security requirements, secure software design and development, and secure software verification through a secure software development lifecycle.","2377-634X","978-1-5386-1174-6","10.1109/FIE.2018.8658433","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8658433","secure software engineering;secure design;secure coding;security testing;security assessment","Software;Testing;Software engineering;Encoding;Computer security;Risk management","","7","","12","IEEE","7 Mar 2019","","","IEEE","IEEE Conferences"
"IEEE/ISO/IEC Draft International Standard - Software and systems engineering--Software testing--Part 4: Test techniques","",,"IEEE/ISO/IEC P29119-4/DIS, April 2020","28 Jul 2020","2020","","","1","152","The purpose of this part of ISO/IEC/IEEE 29119 is to provide an International Standard that defines software test design techniques (also known as test case design techniques or test methods) that can be used within the test design and implementation process that is defined in ISO/IEC/IEEE 29119-2. This part of ISO/IEC/IEEE 29119 does not describe a process for test design and implementation; instead, it describes a set of techniques that can be used within the test design and implementation process defined in ISO/IEC/IEEE 29119-2. The intent is to describe a series of techniques that have wide acceptance in the software testing industry. The test design techniques presented in this part of ISO/IEC/IEEE 29119 can be used to derive test cases that, when executed, generate evidence that test item requirements have been met or that defects are present in a test item (i.e. that requirements have not been met). Risk-based testing could be used to determine the set of techniques that are applicable in specific (risk-based testing is covered in ISO/IEC/IEEE 29119-1 and ISO/IEC/IEEE 29119-2).","","978-1-5044-6888-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9151435","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software testing;Systems engineering and theory","","","","","","28 Jul 2020","","","IEEE","IEEE Standards"
"IEEE/ISO/IEC Draft International Standard - Software and systems engineering--Software testing--Part 4: Test techniques","",,"IEEE/ISO/IEC P29119-4_FDIS, December 2020","22 Jan 2021","2021","","","1","154","The purpose of this part of ISO/IEC/IEEE 29119 is to provide an International Standard that defines software test design techniques (also known as test case design techniques or test methods) that can be used within the test design and implementation process that is defined in ISO/IEC/IEEE 29119-2. This part of ISO/IEC/IEEE 29119 does not describe a process for test design and implementation; instead, it describes a set of techniques that can be used within the test design and implementation process defined in ISO/IEC/IEEE 29119-2. The intent is to describe a series of techniques that have wide acceptance in the software testing industry. The test design techniques presented in this part of ISO/IEC/IEEE 29119 can be used to derive test cases that, when executed, generate evidence that test item requirements have been met or that defects are present in a test item (i.e. that requirements have not been met). Risk-based testing could be used to determine the set of techniques that are applicable in specific (risk-based testing is covered in ISO/IEC/IEEE 29119-1 and ISO/IEC/IEEE 29119-2).","","978-1-5044-7330-9","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9334488","","IEEE Standards;IEC Standards;ISO Standards;Software engineering;Systems engineering and theory;Software testing","","","","","","22 Jan 2021","","","IEEE","IEEE Standards"
"IEEE/ISO/IEC Draft International Standard - Software and systems engineering--Software testing--Part 4: Test techniques","",,"IEEE/ISO/IEC P29119-4/FDIS, June 2021","26 Jul 2021","2021","","","1","148","The purpose of this part of ISO/IEC/IEEE 29119 is to provide an International Standard that defines software test design techniques (also known as test case design techniques or test methods) that can be used within the test design and implementation process that is defined in ISO/IEC/IEEE 29119-2. This part of ISO/IEC/IEEE 29119 does not describe a process for test design and implementation; instead, it describes a set of techniques that can be used within the test design and implementation process defined in ISO/IEC/IEEE 29119-2. The intent is to describe a series of techniques that have wide acceptance in the software testing industry. The test design techniques presented in this part of ISO/IEC/IEEE 29119 can be used to derive test cases that, when executed, generate evidence that test item requirements have been met or that defects are present in a test item (i.e. that requirements have not been met). Risk-based testing could be used to determine the set of techniques that are applicable in specific (risk-based testing is covered in ISO/IEC/IEEE 29119-1 and ISO/IEC/IEEE 29119-2).","","978-1-5044-7834-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9495345","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software testing;Systems engineering and theory","","","","","","26 Jul 2021","","","IEEE","IEEE Standards"
"ISO/IEC/IEEE Draft International Standard - Software and systems engineering--Software testing--Part 4: Test techniques","",,"ISO/IEC/IEEE P29119-4/FDIS, August 2019","6 Nov 2019","2019","","","1","149","The purpose of this part of ISO/IEC/IEEE 29119 is to provide an International Standard that defines software test design techniques (also known as test case design techniques or test methods) that can be used within the test design and implementation process that is defined in ISO/IEC/IEEE 29119-2. This part of ISO/IEC/IEEE 29119 does not describe a process for test design and implementation; instead, it describes a set of techniques that can be used within the test design and implementation process defined in ISO/IEC/IEEE 29119-2. The intent is to describe a series of techniques that have wide acceptance in the software testing industry. The test design techniques presented in this part of ISO/IEC/IEEE 29119 can be used to derive test cases that, when executed, generate evidence that test item requirements have been met or that defects are present in a test item (i.e. that requirements have not been met). Risk-based testing could be used to determine the set of techniques that are applicable in specific (risk-based testing is covered in ISO/IEC/IEEE 29119-1 and ISO/IEC/IEEE 29119-2).","","978-1-5044-6243-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8892802","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software testing;Systems engineering and theory","","","","","","6 Nov 2019","","","IEEE","IEEE Standards"
"What is social debt in software engineering?","D. A. Tamburri; P. Kruchten; P. Lago; H. van Vliet","Department of Computer Science, VU University, Amsterdam, The Netherlands; Electrical and Computer Engineering University of British Columbia, Vancouver, BC, Canada; Department of Computer Science, VU University, Amsterdam, The Netherlands; Department of Computer Science, VU University, Amsterdam, The Netherlands",2013 6th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"30 Sep 2013","2013","","","93","96","“Social debt” in software engineering informally refers to unforeseen project cost connected to a “suboptimal” development community. The causes of suboptimal development communities can be many, ranging from global distance to organisational barriers to wrong or uninformed socio-technical decisions (i.e., decisions that influence both social and technical aspects of software development). Much like technical debt, social debt impacts heavily on software development success. We argue that, to ensure quality software engineering, practitioners should be provided with mechanisms to detect and manage the social debt connected to their development communities. This paper defines and elaborates on social debt, pointing out relevant research paths. We illustrate social debt by comparison with technical debt and discuss common real-life scenarios that exhibit “sub-optimal” development communities.","","978-1-4673-6290-0","10.1109/CHASE.2013.6614739","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6614739","Social Debt;Software Engineering;Human Factors in Software Engineering;Global Software Engineering;Technical Debt;Software Architecture;Social Communities;Social Structure;Social Networks","Communities;Software engineering;Collaboration;Companies;Open source software;Visualization","","70","","28","IEEE","30 Sep 2013","","","IEEE","IEEE Conferences"
"A State-of-the-Practice Survey of Risk Management in Development with Off-the-Shelf Software Components","J. Li; R. Conradi; O. P. Slyngstad; M. Torchiano; M. Morisio; C. Bunse","Software Engineering Group, Norwegian University, Trondheim, Norway; Software Engineering Group, Norwegian University, Trondheim, Norway; Software Engineering Group, Norwegian University, Trondheim, Norway; Dipartimento di Automatica e Informatica, Politecnico di Torino, Torino, MA, Italy; Dipartimento di Automatica e Informatica, Politecnico di Torino, Torino, MA, Italy; International University, Bruchsal, Germany",IEEE Transactions on Software Engineering,"31 Mar 2008","2008","34","2","271","286","An international survey on risk management in software development with off-the-shelf (OTS) components is reported upon and discussed. The survey investigated actual risk-management activities and their correlations with the occurrences of typical risks in OTS component-based development. Data from 133 software projects in Norway, Italy, and Germany were collected using a stratified random sample of IT companies. The results show that OTS components normally do not contribute negatively to the quality of the software system as a whole, as is commonly expected. However, issues such as the underestimation of integration effort and inefficient debugging remain problematic and require further investigation. The results also illustrate several promising effective risk-reduction activities, e.g., putting more effort into learning relevant OTS components, integrating unfamiliar components first, thoroughly evaluating the quality of candidate OTS components, and regularly monitoring the support capability of OTS providers. Five hypotheses are proposed regarding these risk-reduction activities. The results also indicate that several other factors, such as project, cultural, and human-social factors, have to be investigated to thoroughly deal with the possible risks of OTS-based projects.","1939-3520","","10.1109/TSE.2008.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4459339","Software Engineering/Reusable Software;Software Engineering/Management;Software Engineering/Software Engineering Process;Software Engineering/Reusable Software;Software Engineering/Management;Software Engineering/Software Engineering Process","Risk management;Software engineering;Computer Society;Software systems;Programming;Computer industry;Investments;Open source software;Project management;Debugging","","51","","56","IEEE","31 Mar 2008","","","IEEE","IEEE Journals"
"Team, Leadership, Ethic, and Profession in Software Engineering Education","Z. Wang","National Pilot School of Software, Yunnan University, Kunming, China",2009 WRI World Congress on Software Engineering,"10 Nov 2009","2009","4","","81","83","This paper discusses topic of team, leadership and relevant issues in software engineering education. To prepare the students for fulfilling the requirements of information technology, training and equipping with the basic knowledge plus fundamental skills of team and leadership are also crucial task to the technical counterparts, especially for students who are studying software engineering at universities. Those aspects, both technical and nontechnical, build the foundation for the future software engineers with high quality ethic and professional capabilities.","","978-0-7695-3570-8","10.1109/WCSE.2009.360","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5319505","team;leadership;ethic;software engineering;education","Ethics;Software engineering;Collaborative work;Educational institutions;Humans;Programming profession;Information technology;Software quality;Qualifications;Guidelines","","","","9","IEEE","10 Nov 2009","","","IEEE","IEEE Conferences"
"Software Engineering Education: How Far We've Come and How Far We Have to Go","N. R. Mead","Software Engineering Institute, USA",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","18","22","In this talk wepsilall trace the history of software engineering education and focus on some of the key players. Although the time has gone by quickly, it is more than 20 years since the first CSEE was held, and there have been many changes. Wepsilall highlight the work that we have accomplished in the areas of degree programs and curricula, conferences and working groups, professionalism, certification, and industry-university collaboration. Wepsilall also look at the challenges that lie ahead-the global reach of education, new delivery mechanisms, new professional efforts, and the need for us to engage in leadership in software engineering education. What new approaches should we be considering? How can we maintain our vitality? How can we best nurture new educators and encourage others to join our profession?","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.33","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556945","Software Engineering Education","Software engineering;Educational programs;Programming profession;Milling machines;History;Certification;Collaborative work;Writing;Systems engineering education;Books","","4","","21","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"Cooperative and Human Aspects of Software Engineering (CHASE 2010)","Y. Dittrich; C. de Souza; M. Korpela; H. Sharp; J. Singer; H. W. Theophilus","IT University of Copenhagen, Copenhagen, Denmark; IBM Brazil, Sao Paulo, Sao Paulo, Brazil; HIS Research and Development, University of Eastern Finland, Kuopio, Finland; Open University, Milton Keynes, UK; NRC-IRAP, Ottawa, ONT, Canada; School of Information Technology, Polytechnic of Namibia, Windhoek, Namibia",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","435","436","Software is created by people---software engineers---working in varied environments, under various conditions. Thus understanding cooperative and human aspect of software development is crucial to comprehend how methods and tools are used, and thereby improving the creation and maintenance of software. Inspired by the hosting country's concept of co-responsibility -- ubuntu -- we especially invited contributions that address community-based development like open source development and sustainability of ICT eco-systems. The goal of this workshop is to provide a forum for discussing high quality research on human and cooperative aspects of software engineering. We aim at providing both a meeting place for the growing community and the possibility for researchers interested in joining the field to present their work in progress and get an overview over the field.","1558-1225","978-1-60558-719-6","10.1145/1810295.1810416","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062235","cooperative and human aspects of software engineering","Software engineering;Software;Humans;Programming;Conferences;Communities;Educational institutions","","","","","","27 Oct 2011","","","IEEE","IEEE Conferences"
"The future of software engineering education","N. G. Leveson","MIT, USA",Proceedings 15th Conference on Software Engineering Education and Training (CSEE&T 2002),"7 Aug 2002","2002","","","1","1","","1093-0175","0-7695-1515-0","10.1109/CSEE.2002.995190","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=995190","","Software engineering;Computer science education;Computer science;Control engineering education;Aerospace engineering;Embedded software;Software safety;Licenses;Space vehicles;Writing","","","","","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"SEE_ME: Software Engineering Education Methodology Exploration","X. Feng; C. Ji; H. Guo; Y. Ji","Computer Science and Technology Programme, United International College, P.R. China; Computer Science and Technology Programme, United International College, P.R. China; Computer Science and Technology Programme, United International College, P.R. China; Computer Science and Technology Programme, United International College, P.R. China","2015 IEEE International Conference on Teaching, Assessment, and Learning for Engineering (TALE)","21 Jan 2016","2015","","","49","53","Software Engineering is a primary subject in many computer science departments of universities worldwide. Its purpose is to help students understand and apply both disciplined and systematic methods to software development. Due to the ubiquity and visibility of software in the modern world, the study, education and research into software engineering and its practice have retained a high level of interest. Distinct in nature from other computer science courses, this discipline borrows from and is influenced by other fields such as, systems analysis, design, management, quality control, and communication. In this paper, the practices and methodologies used, developed, and evaluated in the Software Engineering Education (SEE) will be outlined. Further improvements have been planned through the Software Engineering Education Methodology Exploration (SEE_ME) project.","","978-1-4673-9226-6","10.1109/TALE.2015.7386014","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7386014","Software engineering;software engineering education;whole person education;software development process","Software engineering;Software;Education;Industries;Conferences;Companies;Computer science","","","","9","IEEE","21 Jan 2016","","","IEEE","IEEE Conferences"
"Computer software engineering management measures","W. Jing; Z. GuangLei; W. ZongChen","Rizhao Polytechnic, China; Rizhao Polytechnic, China; Rizhao Polytechnic, China",2011 IEEE 3rd International Conference on Communication Software and Networks,"8 Sep 2011","2011","","","221","224","The software engineering is confronted with severe software crisis in our country, which makes the software engineering management (SEM) face great challenge. This study examines the matters with SEM and introduces the management strategies about software engineering adopted in these years, including personnel management, control management, quality management, risk management, etc.","","978-1-61284-486-2","10.1109/ICCSN.2011.6013699","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6013699","Software Crisis;Software Engineering Management;Strategies","Software engineering;Software quality;Personnel;Risk management;Programming;Research and development management","","","","6","IEEE","8 Sep 2011","","","IEEE","IEEE Conferences"
"Incomplete Software Requirements and Assumptions Made by Software Engineers","Ö. Albayrak; H. Kurtoglu; M. Biçakçi","Department. of Computer Technology and Information Systems, Bilkent University, Bilkent, Ankara, Turkey; Department. of Software Engineering, STM Defence Technologies Engineering Inc., Bilkent, Ankara, Turkey; Department. of Software Engineering, STM Defence Technologies Engineering Inc., Bilkent, Ankara, Turkey",2009 16th Asia-Pacific Software Engineering Conference,"28 Dec 2009","2009","","","333","339","Many software engineers make implicit assumptions when working with incomplete software requirements. To study assumptions made by software engineers while converting incomplete requirements to software design or to implementation phase deliverables, we conducted an experiment with 251 software engineers from eight companies. The results of this empirical study showed that how software engineers responded (using source code, pseudo code, or prototype) to an incomplete requirement significantly impacted the number of explicit assumptions they made. We studied relationships between the number of explicit assumptions and the engineers’ experience and educational backgrounds. On average, non-computer-background engineers made more explicit assumptions than computer background graduates. We found a significant relationship between the engineers’ experience and the number of explicit assumptions made. We discuss the results and their implications.","1530-1362","978-0-7695-3909-6","10.1109/APSEC.2009.39","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5358721","incomplete software requirements;assumption","Design engineering;Software engineering;Software prototyping;Software systems;Project management;Software quality;Design for experiments;Merging;Information systems;Software design","","12","","33","IEEE","28 Dec 2009","","","IEEE","IEEE Conferences"
"Big(ger) Data in Software Engineering","M. Nagappan; M. Mirakhorli","Department of Software Engineering, Rochester Institute of Technology, USA; Department of Software Engineering, Rochester Institute of Technology, USA",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","957","958","""Big Data"" analytics has become the next hot topic for most companies - from financial institutions to technology companies to service providers. Likewise in software engineering, data collected about the development of software, the operation of the software in the field, and the users feedback on software have been used before. However, collecting and analyzing this information across hundreds of thousands or millions of software projects gives us the unique ability to reason about the ecosystem at large, and software in general. At no time in history has there been easier access to extremely powerful computational resources as it is today, thanks to the advances in cloud computing, both from the technology and business perspectives. In this technical briefing, we will present the state-of-the-art with respect to the research carried out in the area of big data analytics in software engineering research.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.305","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203127","Big Data;Software Engineering","Software;Software engineering;Big data;Data mining;Companies;Conferences;Ecosystems","","1","","2","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Applying software reliability engineering process to software development in Korea defense industry","T. Kim; S. Park; T. Lee","Weapon System Software Reliability Technology, ADD, Daejeon, Republic of Korea; Weapon System Software Reliability Technology, ADD, Daejeon, Republic of Korea; Weapon System Software Reliability Technology, ADD, Daejeon, Republic of Korea",2017 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW),"16 Nov 2017","2017","","","81","81","In Korea weapon system software development, there is a manual which defines the process for software development, support and management. Although this manual guides developers to perform static and dynamic testing of source code, these are not sufficient for developing reliable software. Therefore undefined activities in the manual, such as modeling software reliability and metric data collection, need to be specified and covered. In this paper, we suggest software reliability engineering process to the software development in Korea defense industry. We define several additional reliability activities for each software development lifecycle phase. We also applied models and metrics for accessing and analyzing the reliability of software products. These are based on international standards about software reliability. We hope that our research helps developers to produce more reliable software.","","978-1-5386-2387-9","10.1109/ISSREW.2017.26","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8109257","Software reliability engineering;Software reliability engineering process;Weapon system software","Software reliability;Software;Manuals;Measurement;Defense industry;Weapons","","3","","2","IEEE","16 Nov 2017","","","IEEE","IEEE Conferences"
"Evolution of a software engineer in a SoS system engineering world","P. Oberndorf; C. A. Sledge","Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA; Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA",2010 IEEE International Systems Conference,"7 Jun 2010","2010","","","91","96","Many U.S. defense programs and commercial industries (hereafter referred to simply as 'programs') have difficulty in fielding and sustaining systems in a timely and cost-efficient manner. As software assumes an ever-increasing and important role in the engineering of systems, not only do these programs struggle to employ good software engineering practices, but the dialog between systems engineers and software engineers starts later in the life cycle than it should. Although these difficulties are faced by single, stand-alone systems, such systems are no longer the norm. System and software engineers are increasingly faced with the challenges of systems of systems (SoS).","","978-1-4244-5884-4","10.1109/SYSTEMS.2010.5482478","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5482478","systems of systems;system engineering;system of systems engineering;practices;skills","Systems engineering and theory;Software engineering;Software systems;Collaborative software;Resource management;Software performance;Software development management;Engineering management;Computer industry;Defense industry","","2","","5","IEEE","7 Jun 2010","","","IEEE","IEEE Conferences"
"An Innovative Approach to Teaching an Undergraduate Software Engineering Course","C. Y. Lester","Department of Computer Science, Tuskegee University, Tuskegee, AL, USA",2008 The Third International Conference on Software Engineering Advances,"7 Nov 2008","2008","","","301","306","Software engineering is defined as a discipline concerned with all aspects of software production from inception to the maintenance of a system. It has often been dubbed as the ""cradle-to-grave"" approach to producing reliable, cost-efficient software delivered in a timely manner that satisfies the customer's needs. It interleaves the concepts of individual work with team work and the soft skills of technical writing with technical proficiency. Therefore, as computer science educators, we are faced with the challenge of creating a learning experience for our students that effectively introduces the technical aspect of software engineering principles, as well as those essential non-technical skills. The goal of this paper is to describe a work in progress that focuses on creating an enhanced learning experience where computational thinking, collaborative learning, and service-learning are infused into an undergraduate software engineering course. The paper introduces these concepts and how each is used to train students.","","978-1-4244-3218-9","10.1109/ICSEA.2008.72","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4668124","software engineering education;computational thinking;collaborative learning;service-learning","Education;Software engineering;Computer science;Software maintenance;Production systems;Collaborative work;Writing;Hardware;Industrial training;Application software","","","","14","IEEE","7 Nov 2008","","","IEEE","IEEE Conferences"
"Draft International Standard Systems and software engineering -- Systems and software assurance -- Part 1: Concepts and vocabulary","",,"IEEE P15026-1, May2014","20 Jun 2014","2014","","","1","33","This part of ISO/IEC defines assurance-related terms and establishes an organized set of concepts and relationships to establish a basis for shared understanding across user communities for assurance. It provides information to users of the other parts of this International Standard including the combined use of multiple parts. The essential concept introduced by ISO/IEC 15026 is the statement of claims in an assurance case and the support of those claims through argumentation and evidence. These claims are in the context of assurance for properties of systems and software within life cycle processes for the system or software product.Assurance for a service being operated and managed on an ongoing basis is not covered in ISO/IEC 15026.","","978-0-7381-9218-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6840843","","IEEE standards;Software engineering;Systems engineering and theory;Quality assurance;Software quality","","","","","","20 Jun 2014","","","IEEE","IEEE Standards"
"A Kind of 2-Stage Software Life Cycle and Cost Estimation Framework in Agile Methodology from a System Engineering Perspective","X. Zhu; B. Fu; Y. Lu; T. Lin; X. Lv; Y. Wu","North China Institute of Computing Technology, Beijing, China; North China Institute of Computing Technology, Beijing, China; North China Institute of Computing Technology, Beijing, China; North China Institute of Computing Technology, Beijing, China; North China Institute of Computing Technology, Beijing, China; North China Institute of Computing Technology, Beijing, China",2024 IEEE 4th International Conference on Software Engineering and Artificial Intelligence (SEAI),"20 Sep 2024","2024","","","188","193","Software cost estimate is essential not only for project plans but also for software budgeting. Many researchers research software engineering and software cost estimation from either software engineering or cost perspective. However, this non-systematic perspective or technology path leads to unnecessary conflicts both in academics and in engineering, such as Function Points Analysis treated as a financial or economic research method, software cost estimation treated only as a financial or economic tool, and software cost estimation treated as an unrelated tool to software development engineering. Software development disciplines have a direct and critical relationship to software cost estimation. This paper presents a basic 2-stage life cycle and related cost estimation framework, which illustrates cost structure and expresses in the equation to form a development-maintenance 2-stage module using agile. In this module, we assign software development to the first stage and combine software maintenance to the second stage. Under this framework, software development and cost estimation are connected. We use a quantile-based scale measure(QSC) to analyze and evaluate the percentage of test work in the projects whole work. It is illustrated that the share of the testing workload in the total workload occupies nearly 22%, and the share of the management workload occupies 13% at toughly.","","979-8-3503-7434-6","10.1109/SEAI62072.2024.10674449","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10674449","software cost estimation;workload analysis;system engineering","Software maintenance;Costs;Statistical analysis;Estimation;Systems engineering and theory;Software;Software measurement","","","","16","IEEE","20 Sep 2024","","","IEEE","IEEE Conferences"
"IEEE Standard Adoption of ISO/IEC 15026-3 -- Systems and Software Engineering -- Systems and Software Assurance -- Part 3: System Integrity Levels","",,IEEE Std 15026-3-2013,"11 Jul 2013","2013","","","1","51","The concept of integrity levels with corresponding integrity level requirements that are required to be met in order to show the achievement of the integrity level are specified in this adoption of ISO/IEC 15026-3:2011. It places requirements on and recommends methods for defining and using integrity levels and their integrity level requirements, including the assignment of integrity levels to systems, software products, their elements, and relevant external dependences. This standard is applicable to systems and software and is intended for use by the following: Definers of integrity levels such as industry and professional organizations, standards organizations, and government agencies; Users of integrity levels such as developers and maintainers, suppliers and acquirers, users, and assessors of systems or software and for the administrative and technical support of systems and/or software products. One important use of integrity levels is by suppliers and acquirers in agreements; for example, to aid in assuring safety, economic, or security characteristics of a delivered system or product. This standard does not prescribe a specific set of integrity levels or their integrity level requirements. In addition, it does not prescribe the way in which integrity level use is integrated with the overall system or software engineering life cycle processes. This standard can be used alone or with other parts of ISO/IEC 15026. It can be used with a variety of technical and specialized risk analysis and development approaches. ISO/IEC TR 15026-1 provides additional information and references to aid users of IEEE Std 15026-3.;The concept of integrity levels with corresponding integrity level requirements that arerequired to be met in order to show the achievement of the integrity level are specified in thisadoption of ISO/IEC 15026-3:2011. It places requirements on and recommends methods fordefining and using integrity levels and their integrity level requirements, including the assignmentof integrity levels to systems, software products, their elements, and relevant externaldependences.","","978-0-7381-8436-4","10.1109/IEEESTD.2013.6557405","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6557405","adoption;argument;assurance case;claim;dependability;evidence;IEEE 15026-3;integrity level;property;reliability;safety;security;software assurance;software engineering;system assurance;systems engineering","IEEE standards;Quality assurance;Power system reliability;Systems engineering and theory;Power system reliability;Safety;Software engineering;Software assurance","","1","","22","","11 Jul 2013","","","IEEE","IEEE Standards"
"ISO/IEC/IEEE Draft International Standard - Systems and software engineering--Systems and software assurance -- Part 4: Assurance in the life cycle","",,"ISO/IEC/IEEE P15026-4/DIS2, September 2020","22 Oct 2020","2020","","","1","47","This document provides guidance and recommendations for assurance of a selected claim about the system-of-interest by achieving the claim and showing the achievement. The guidance and recommendations are given in a System Assurance process view on top of ISO/IEC/IEEE 15288 and a Software Assurance process view on top of ISO/IEC/IEEE 12207.","","978-1-5044-7158-9","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9237220","","IEEE Standards;IEC Standards;ISO Standards;Software assurance;Software engineering;Systems engineering and theory","","","","","","22 Oct 2020","","","IEEE","IEEE Standards"
"Focusing on Both Teaching Agile Software Development and Communication","S. Datta; M. S. Mirza","Software Engineering, University of Houston-Clear Lake, Houston, TX, USA; Software Engineering, University of Houston-Clear Lake, Houston, TX, USA",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","2","The field of Software engineering haves several roles, one of their important roles is communication. It has been found that communication helps with a better understanding of the product the stakeholder needs to be developed. If software engineers can understand and be able to express their understanding to the stakeholders or to their team half of the problems would be solved. This would lead to better utilization of resources. Thus, for educating students for the future, this study focuses on teaching agile development to students with an emphasis on communication. This study is ongoing, and the presented research includes one year of data. The same process is repeated this year.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206187","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206187","software engineering;communication;Agile software development;writing;presentations","Software;Writing;Software engineering;Testing;Education;Agile software development;Stakeholders","","3","","7","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"A Software Factory for Education in Software Engineering","F. L. Siqueira; G. M. C. Barbarán; J. L. R. Becerra","Escola Politecnica da Universidade de São Paulo, São Paulo, SP, Brazil; Centro Universitário FIEO (UNIFIEO), São Paulo, SP, Brazil; Escola Politecnica da Universidade de São Paulo, São Paulo, SP, Brazil",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","215","222","The aim of a software factory is to obtain productivity, quality, scale, and control in software development. In this paper this concept is applied in a software engineering laboratory, creating an environment with well-defined processes for software development and management. In comparison with traditional software engineering laboratories, this proposal allows learning, in practice, of project management activities following quality standards. Also, the students follow a defined and controlled process, which makes it easier for them to understand the activities to be done. It also allows the students to face many problems that are common in enterprises, allowing an interaction among them and a discussion with the teacher about the best alternatives for solution. Finally, the use of this factory allows both a quantitative and a qualitative evaluation of the students.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.10","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556968","software factory;education;project management;software engineering","Production facilities;Software engineering;Programming;Control engineering education;Educational products;Software quality;Productivity;Environmental management;Software development management;Engineering management","","10","","21","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"Analyzing Software Engineering Experiments: Everything You Always Wanted to Know But Were Afraid to Ask","S. Vegas","Escuela Técnica Superior de Ingenieros Informáticos, Universidad Politécnica de Madrid, Madrid, Spain",2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C),"3 Jul 2017","2017","","","513","514","Experimentation is a key issue in science and engineering. But it is one of software engineering's stumbling blocks. Quite a lot of experiments are run nowadays, but it is a risky business. Software engineering has some special features, leading to some experimentation issues being conceived of differently than in other disciplines. The aim of this technical briefing is to help participants to avoid common pitfalls when analyzing the results of software engineering experiments. The technical briefing is not intended as a data analysis course, because there is already plenty of literature on this subject. It reviews several key issues that we have identified in published software engineering experiments, and addresses them based on the knowledge acquired after 18 years running experiments.","","978-1-5386-1589-8","10.1109/ICSE-C.2017.160","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7965409","Software Engineering experimentation;controlled experiments;analysis of experiments","Software engineering;Software;Data analysis;Psychology;Tutorials;Knowledge engineering;Medical services","","1","","4","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"Is there a happy marriage between software engineering and knowledge engineering?","Shi-Kuo Chang","Department of Computer Science, University of Pittsburgh, USA","Tenth Asia-Pacific Software Engineering Conference, 2003.","8 Jan 2004","2003","","","4","4","","","0-7695-2011-1","10.1109/APSEC.2003.1254352","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1254352","","Software engineering;Knowledge engineering;Design engineering;Software design;Computer science;Unified modeling language;Embedded software;Knowledge representation","","","","","IEEE","8 Jan 2004","","","IEEE","IEEE Conferences"
"Using model-driven engineering to complement software product line engineering in developing software defined radio components and applications","B. Trask; A. Roman; D. Paniscotti; V. Bhanot","PrismTech Corp., Midrand, South Africa; PrismTech Corporation, USA; PrismTech Corporation, USA; PrismTech Corporation, USA",10th International Software Product Line Conference (SPLC'06),"11 Sep 2006","2006","","","9 pp.","202","This paper details the application of software product lines (SPL) and model-driven engineering (MDE) to the software defined radio domain. More specifically it is an experience report emphasizing the synergy resulting from combining MDE and SPL technologies. The software defined radio domain has very unique characteristics as its systems typically are a confluence of a number of typically challenging aspects of software development. To name a few, these systems are usually described by modifiers such as, embedded, real-time, distributed, object-oriented, portable, heterogeneous, multithreaded, high performance, dynamic, resource-constrained, safety-critical, secure, networked, component based and fault-tolerant. Each one of these modifiers by themselves carries with it a set of unique challenges but building systems characterized by all of these modifiers all at the same time makes for quite an adventure in software development. In addition to all of these, it is quite common in these embedded systems for components to have multiple implementations that must run on disparate processing elements. With all of this taken into account, it stands to reason that these systems could and should benefit greatly from advances in software technology such as product line engineering, domain-specific modeling and model-driven engineering. It is our experience that one big boon to the software development industry is the combination of the software product lines and model driven engineering technologies.","","0-7695-2599-7","10.1109/SPLINE.2006.1691591","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1691591","","Model driven engineering;Software radio;Application software;Hardware;Programming;Object oriented modeling;Computer industry;Communication equipment;Programmable logic arrays;Software maintenance","","5","4","20","IEEE","11 Sep 2006","","","IEEE","IEEE Conferences"
"Sustainable software engineering - have we neglected the software engineer's perspective?","B. Tanveer","Department of Software Engineering, Blekinge Institute of Technology, Karlskrona, Sweden",2021 36th IEEE/ACM International Conference on Automated Software Engineering Workshops (ASEW),"24 Jan 2022","2021","","","267","270","Background: Software development is a knowledge-intensive and creative activity requiring human ingenuity, thus, sustainability from an engineer's perspective (i.e., meeting an engineer's personal and professional needs while maintaining their mental and physical well-being) must be achieved and maintained. Aims: With this paper, we aim to bring attention to the currently overlooked aspect of sustainability from an individual engineer's perspective. Method: Through an analysis of systematic literature reviews and mapping studies, this research demonstrates a lack of research investigating the individual (human) dimension of sustainability in the current software engineering literature. Results: The analysis of the literature reviews reveals that the current research has mainly focused on reducing the energy footprint of software systems. Thus, revealing the renewed need for paying attention to the individual engineer's perspective. Conclusion: Future research should leverage contributions from related research areas like human aspects in software engineering (e.g., topics like cognition and motivation). There is a need for identifying factors that impact sustainability at an individual level and their interplay with the team and organization level practices, policies, and decisions. The overall ambition is to develop empirically validated guidelines and best practices to measure, improve and maintain sustainability from an engineer's perspective. Such measures are expected to ensure engineers' sustainability and enable highquality software development.","2151-0830","978-1-6654-3583-3","10.1109/ASEW52652.2021.00059","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9679832","sustainable software engineering;software de-velopment;individual sustainability","Systematics;Bibliographies;Taxonomy;Organizations;Software systems;Software;Cognition","","3","","28","IEEE","24 Jan 2022","","","IEEE","IEEE Conferences"
"Incorporating Software Security into an Undergraduate Software Engineering Course","C. Y. Lester; F. Jamerson","Department of Computer Science, Tuskegee University, Tuskegee, AL, USA; Department of Computer Science, Tuskegee University, Tuskegee, AL, USA","2009 Third International Conference on Emerging Security Information, Systems and Technologies","21 Aug 2009","2009","","","161","166","Secure software development has become a topic of increasing importance, as a general fear rises due to security holes, vulnerabilities, and attacks. To ensure the security of information in a society of file sharing, on-line business transactions, and e-communication, undergraduate students will soon be required to implement software security concepts into their software development processes as soon as they complete their degrees. Consequently, it is imperative for graduates of computer science departments to be trained in the fundamentals of information security and to gain hands-on experience with secure software development. To address this issue computer science educators at the undergraduate level are turning their attentions to incorporating security issues within traditional computer science courses. The paper describes an existing undergraduate software engineering course that has been modified to include software security concepts. Challenges and future work are also presented.","2162-2116","978-0-7695-3668-2","10.1109/SECURWARE.2009.32","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5211015","Collaborative learning;software security;secure software development lifecycle;software engineering;undergraduate curriculum","Software engineering;Computer security;Information security;Computer science;Programming;Data security;National security;Computer errors;Software quality;Educational programs","","1","","19","IEEE","21 Aug 2009","","","IEEE","IEEE Conferences"
"Mind the Gap: Can and Should Software Engineering Data Sharing Become a Path of Less Resistance?","K. Wallace","BAE Systems, Maritime, Portsmouth, UK",2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering in Practice Track (ICSE-SEIP),"30 Aug 2018","2018","","","43","44","The facility to process data is, arguably, the defining capability underpinning the transformative power of software: the relationships of each to the other are deep and extensive. This is reflected in the degree to which both software engineering practitioners and researchers rely upon data to direct their endeavours. Ironically however, while both the industrial and research communities are dependent upon data these dependencies present a dichotomy. Practitioners can suffer an abundance of data, much of it dark, which they struggle to interpret and apply beneficially. Isolated by gaps between industry and academia researchers often find themselves lacking data, watching as their industrial counterparts pursue a different and distinct course of action. Integrating evidence with experience gained in practice and through engagement with research this talk offers an industrial perspective on whether this situation can be improved upon; and what the benefits of achieving this outcome, particularly for practitioners, might be.","","978-1-4503-5659-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449234","Software Engineering;Data;Evidence Informed;Industrial Practice;Assessment;Defects;Digital Commons;Evaluation","Software engineering;Software;Medical services;Safety;Resistance;Software measurement;Computer science","","","","16","","30 Aug 2018","","","IEEE","IEEE Conferences"
"The impact of SWEBOK Version 3 on software engineering education and training","R. E. D. Fairley; P. Bourque; J. Keppler","Software and Systems Engineering Associates, USA; Ecole de technologie supérieure Canada; IEEE Computer Society, USA",2014 IEEE 27th Conference on Software Engineering Education and Training (CSEE&T),"19 May 2014","2014","","","192","200","The Guide to the Software Engineering Body of Knowledge (the SWEBOK Guide) provides generally accepted knowledge for the software engineering profession. The content of the SWEBOK Guide is derived from academic sources and the best practices of the profession. The SWEBOK Guide is a reference document for many academic and industrial curricula, certification programs, accreditation criteria, and professional licensure. This paper provides an overview of the recently published Version 3 of the SWEBOK Guide and examines the potential impact of the changes in Version 3 on software engineering education and training for the academic and industrial sectors.","2377-570X","978-1-4799-4970-0","10.1109/CSEET.2014.6816804","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6816804","","Software engineering;Software;Knowledge engineering;Modeling;Biological system modeling;Training","","9","","4","IEEE","19 May 2014","","","IEEE","IEEE Conferences"
"IEEE Standard Adoption of ISO/IEC 15026-1--Systems and Software Engineering--Systems and Software Assurance--Part 1: Concepts and Vocabulary","",,IEEE Std 15026-1-2014,"5 Nov 2014","2014","","","1","45","Assurance-related terms are defined and an organized set of concepts and relationships to establish a basis for shared understanding across user communities for assurance are established in this adoption of ISO/IEC 15026-1. It provides information to users of the other parts of this International Standard including the combined use of multiple parts. The essential concept introduced by ISO/IEC 15026 is the statement of claims in an assurance caseand the support of those claims through argumentation and evidence. These claims are in the context of assurance for properties of systems and software within life cycle processes for the system or software product.Assurance for a service being operated and managed on an ongoing basis is not covered in this International Standard.;Assurance-related terms are defined and an organized set of concepts and relationships to establish a basis for shared understanding across user communities for assurance are established in this adoption of ISO/IEC 15026-1. It provides information to users of the other parts of this International Standard including the combined use of multiple parts. The essential concept introduced by ISO/IEC 15026 is the statement of claims in an assurance case and the support of those claims through argumentation and evidence. These claims are in the context of assurance for properties of systems and software within life cycle processes for the system or software product. Assurance for a service being operated and managed on an ongoing basis is not covered in this International Standard.","","978-0-7381-9350-2","10.1109/IEEESTD.2014.6948215","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6948215","adoption;assurance;assurance case;claim;IEEE 15026-1(TM);integrity level;life cycle processes;reliability;software assurance;software engineering;system assurance;systems engineering","IEEE standards;IEC standards;ISO standards;Software engineering;Software assurance;Product life cycle management;Systems engineering and theory","","2","","193","","5 Nov 2014","","","IEEE","IEEE Standards"
"ISO/IEC/IEEE Draft International Standard - Systems and Software Engineering-Life Cycle Management-Part 3: Guidelines for the Application of ISO/IEC/IEEE 12207 (Software Life Cycle Processes)","",,"ISO/IEC/IEEE/ P24748-3/DIS, August 2019","22 Aug 2019","2019","","","1","83","ISO/IEC/IEEE 24748-3 provides guidance on the application of the software life cycle processes standard, ISO/IEC/IEEE 12207:2017. This document establishes guidance to implement a common framework for software life cycle processes, with well-defined terminology, that can be referenced by the software industry. This document provides guidance on defining, controlling, and improving software life cycle processes within an organization or a project. It recommends methods and approaches suitable for a variety of life cycle models. The guidance emphasizes the importance of establishing a strategy, planning, and the involvement of stakeholders, with the ultimate goal of achieving customer satisfaction. Its purpose is to help ensure consistency in system concepts and life cycle concepts, models, stages, processes, process application, key points of view, adaptation and use in various domains. This document concentrates on specific guidance for the Technical processes and how they can be effectively used during the software life cycle. It is intended to be useful in a variety of software life cycle situations, including the use of agile methods.","","978-1-5044-6088-0","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8809977","life cycle;life cycle process;software;system;project;stage;software engineering","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Product life cycle management;Systems engineering and theory","","","","","","22 Aug 2019","","","IEEE","IEEE Standards"
"IEEE Draft - Systems and Software Engineering-Life Cycle Management-Part 3: Guidelines for the Application of ISO/IEC/IEEE 12207 (Software Life Cycle Processes)","",,"ISO/IEC/IEEE P24748-3, January 2019","22 Aug 2019","2019","","","1","78","ISO/IEC/IEEE 24748-3 provides guidance on the application of the software life cycle processes standard, ISO/IEC/IEEE 12207:2017. This document establishes guidance to implement a common framework for software life cycle processes, with well-defined terminology, that can be referenced by the software industry. This document provides guidance on defining, controlling, and improving software life cycle processes within an organization or a project. It recommends methods and approaches suitable for a variety of life cycle models. The guidance emphasizes the importance of establishing a strategy, planning, and the involvement of stakeholders, with the ultimate goal of achieving customer satisfaction. Its purpose is to help ensure consistency in system concepts and life cycle concepts, models, stages, processes, process application, key points of view, adaptation and use in various domains. This document concentrates on specific guidance for the Technical processes and how they can be effectively used during the software life cycle. It is intended to be useful in a variety of software life cycle situations, including the use of agile methods.","","978-1-5044-5641-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8809989","life cycle;life cycle process;software;system;project;stage;software engineering","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Product life cycle management;Systems engineering and theory","","","","","","22 Aug 2019","","","IEEE","IEEE Standards"
"ISO/IEC/IEEE Approved Draft International Standard - Systems and Software Engineering-Life Cycle Management-Part 3: Guidelines for the Application of ISO/IEC/IEEE 12207 (Software Life Cycle Processes)","",,"ISO/IEC/IEEE P24748-3/D3_FDIS, April 2020 (E)","22 Apr 2020","2020","","","1","76","ISO/IEC/IEEE 24748-3 provides guidance on the application of the software life cycle processes standard, ISO/IEC/IEEE 12207:2017. This document establishes guidance to implement a common framework for software life cycle processes, with well-defined terminology, that can be referenced by the software industry. This document provides guidance on defining, controlling, and improving software life cycle processes within an organization or a project. It recommends methods and approaches suitable for a variety of life cycle models. The guidance emphasizes the importance of establishing a strategy, planning, and the involvement of stakeholders, with the ultimate goal of achieving customer satisfaction. Its purpose is to help ensure consistency in system concepts and life cycle concepts, models, stages, processes, process application, key points of view, adaptation and use in various domains. This document concentrates on specific guidance for the Technical processes and how they can be effectively used during the software life cycle. It is intended to be useful in a variety of software life cycle situations, including the use of agile methods.","","978-1-5044-6631-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9076356","life cycle;life cycle process;software;system;project;stage;software engineering","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Systems engineering and theory;Product life cycle management","","","","","","22 Apr 2020","","","IEEE","IEEE Standards"
"Accelerating Change in the Nordic Software Intensive Industry: Keynote Software Engineering Research and Industrial Practice Workshop","J. Bosch","Department of Computer Science and Engineering, Chalmers University of Technology Gothenburg, Sweden",2015 IEEE/ACM 2nd International Workshop on Software Engineering Research and Industrial Practice,"20 Aug 2015","2015","","","1","2","Collaboration between software engineering researchers and industry is notoriously difficult to scale beyond ad-hoc connections between individual researchers and companies. Software Center in Gothenburg, Sweden has over the last years built up a scaling research collaboration between eight international companies and three universities. Several elements underlie the success of the center, including the adoption of a sprint model, the role of industry in steering projects and the organization around a common conceptual model.","","978-1-4673-7085-1","10.1109/SERIP.2015.8","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7210485","software engineering;industry collaboration;research center","Companies;Software;Industries;Software engineering;Collaboration;Conferences","","","","3","IEEE","20 Aug 2015","","","IEEE","IEEE Conferences"
"Understanding requirement engineering (REQ) from a software agent modeling perspective","P. Ranganathan; K. Magel","Department of Computer Science, North Dakota State University, Fargo, ND, USA; Department of Computer Science, North Dakota State University, Fargo, ND, USA",2010 IEEE International Conference on Software Engineering and Service Sciences,"19 Aug 2010","2010","","","83","85","The requirements for modeling a software product are growing in size and increasingly getting complex, interdependent and to understand them requires the availability of simple representational requirement engineering tools and measures to evaluate them. Requirements engineering still remains a key factor to guarantee stakeholders involvement, facilitating their understanding and participation. The paper presents an overview of agent based modeling requirements engineering (REQ) from a software agent point of view via a JADE platform. It describes the main areas of RE practice, tools for requirement management, conflict between goals of different agents and highlights some key open research issues for the future. The paper addresses how to model requirements engineering problem model using a proposed Prioritization Agent matrix Scheduling (PAMS) as a use-case example.","2327-0594","978-1-4244-6055-7","10.1109/ICSESS.2010.5552296","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5552296","Requirement Engineering;Software Agent modeling","Software engineering;Natural languages;Software agents;Software measurement;Software systems;Availability","","","","4","IEEE","19 Aug 2010","","","IEEE","IEEE Conferences"
"Transitioning to Software as a Service: Realigning Software Engineering Practices with the New Business Model","E. R. Olsen","School for New Learning, De Paul University, Chicago, IL, USA","2006 IEEE International Conference on Service Operations and Logistics, and Informatics","12 Mar 2007","2006","","","266","271","Transitioning from software as a good to software as a service is not simply a matter of developing appropriate protocols, adopting new service-oriented technologies, and writing code. Instead, software companies that seek to adapt to a market based on software as a service need to examine how they approach very basic business tasks like marketing and engineering. This paper focuses on the implications a particular software paradigm has on software engineering. It concludes that some traditional software engineering practices in the goods paradigm related to planning, versioning, and maintenance are simply not appropriate in the service paradigm. To be successful as a service-oriented business, a software company needs to realign its base software engineering practices to fit the new business model","","1-4244-0317-0","10.1109/SOLI.2006.328929","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4125590","Engineering Culture;Service Engineering;Software as a Service;Software Engineering","Software engineering;Companies;Software maintenance;Programming;Protocols;Appropriate technology;Writing;Web services;Research and development management;Computer architecture","","9","","4","IEEE","12 Mar 2007","","","IEEE","IEEE Conferences"
"From RE Cares to SE Cares: Software Engineering for Social Good, One Venue at a Time","A. Dekhtyar; J. H. Hayes; J. Payne; T. Yu; J. Horkoff; G. Mussbacher; I. Hadar; M. Levy; B. Paech; K. Youngjoon; J. Eunjung; H. Seungbum; H. Youngtaek; N. Byoungyoung; K. Sanggon","CSSE Department, Cal Poly, USA; Computer Science Department, University of Kentucky, USA; Computer Science Department, University of Kentucky, USA; Computer Science Department, University of Kentucky, USA; Chalmers | University of Gotheburg, Sweden; McGill University, Canada; Department of Information Systems, University of Haifa, Israel; Schhool of Industrial Engineering and Management, Shenkar College of Engineering, Design and Art, Ramat-Gan, Israel; Heidelberg University, Germany; J-CCEI, South Korea; J-CCEI, South Korea; J-CCEI, South Korea; J-CCEI, South Korea; J-CCEI, South Korea; J-CCEI, South Korea",2020 IEEE/ACM 42nd International Conference on Software Engineering: Software Engineering in Society (ICSE-SEIS),"7 Dec 2020","2020","","","49","52","As software practitioners, we can help society by using our communities of experts to address a software need of a socially-conscious organization. Doing so can benefit society in the locale of a software engineering conference, and provides access to international experts for local organizations which may otherwise not have access. Furthermore, established Software Engineering (SE) researchers as well as practitioners and students have the opportunity for a unique learning experience. In this paper, we argue that the SE community should use SE conferences as the focal points for activities that benefit society at the locations of the conferences, and make such activities an integral, valued, and recognized part of the conference programs. The proposed series of events, termed SE Cares, can follow and learn from the model of Requirements Engineering (RE) Cares events that took place in 2018 and 2019, and can be a co-located event at all interested SE-related conferences.","","978-1-4503-7125-4","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9276514","• Software and its engineering → Requirements analysis; Software prototyping; Collaboration in software development","Stakeholders;Software;Software engineering;Prototypes;Organizations;Task analysis;Scheduling","","","","3","","7 Dec 2020","","","IEEE","IEEE Conferences"
"Software-Intensive Product Engineering in Start-Ups: A Taxonomy","E. Klotins; M. Unterkalmsteiner; T. Gorschek",Blekinge Institute of Technology; Blekinge Institute of Technology; Blekinge Institute of Technology,IEEE Software,"6 Jul 2018","2018","35","4","44","52","Software start-ups are new companies aiming to launch an innovative product to mass markets fast with minimal resources. However, most start-ups fail before realizing their potential. Poor software engineering, among other factors, could be a significant contributor to the challenges that start-ups experience. Little is known about the engineering context in start-up companies. On the surface, start-ups are characterized by uncertainty, high risk, and minimal resources. However, such a characterization isn’t granular enough to support identification of specific engineering challenges and to devise start-up–specific engineering practices. The first step toward an understanding of software engineering in start-ups is the definition of a Start-Up Context Map—a taxonomy of engineering practices, environment factors, and goals influencing the engineering process. This map aims to support further research on the field and serve as an engineering decision support tool for start-ups. This article is part of a theme issue on Process Improvement.","1937-4194","","10.1109/MS.2018.2801548","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8405630","software-intensive product engineering;product engineering;Start-Up Context Map;start-ups;software engineering;software development","Software engineering;Market research;Context modeling;Market opportunities;Business;Software development management","","6","","26","IEEE","6 Jul 2018","","","IEEE","IEEE Magazines"
"A Conceptual Model of Software Engineering Research Approaches","S. Flint","Australian National University, Canberra, ACT, Australia",2009 Australian Software Engineering Conference,"19 Jun 2009","2009","","","229","236","A key motivation for undertaking software engineering research is a need to improve industrial software engineering practice. In order to address this need, it is necessary to adopt an approach to research that responds to industry problems and facilitates the orderly evaluation, adoption and continuous improvement of research outputs. This paper proposes a simple conceptual model which can be used to describe, discuss and compare a broad range of research approaches. The model is validated by using it to unify prior contributions in the area of software engineering research approaches and presenting a case study.","2377-5408","978-0-7695-3599-9","10.1109/ASWEC.2009.42","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5076645","software engineering;research methods;systems engineering","Software engineering;Unified modeling language;Software measurement;Australia;Software maintenance;Computer industry;Continuous improvement;Glass;Software tools","","","","14","IEEE","19 Jun 2009","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE International Standard - Systems and software engineering--Life cycle management--Part 3: Guidelines for the application of ISO/IEC/IEEE 12207 (software life cycle processes)","",,ISO/IEC/IEEE 24748-3:2020(E),"23 Oct 2020","2020","","","1","76","ISO/IEC/IEEE 24748-3 provides guidance on the application of the software life cycle processes standard, ISO/IEC/IEEE 12207:2017. This document establishes guidance to implement a common framework for software life cycle processes, with well-defined terminology, that can be referenced by the software industry. This document provides guidance on defining, controlling, and improving software life cycle processes within an organization or a project. It recommends methods and approaches suitable for a variety of life cycle models. The guidance emphasizes the importance of establishing a strategy, planning, and the involvement of stakeholders, with the ultimate goal of achieving customer satisfaction. Its purpose is to help ensure consistency in system concepts and life cycle concepts, models, stages, processes, process application, key points of view, adaptation and use in various domains. This document concentrates on specific guidance for the Technical processes and how they can be effectively used during the software life cycle. It is intended to be useful in a variety of software life cycle situations, including the use of agile methods.;ISO/IEC/IEEE 24748-3 provides guidance on the application of the software life cycle processes standard, ISO/IEC/IEEE 12207:2017. This document establishes guidance to implement a common framework for software life cycle processes, with well-defined terminology, that can be referenced by the software industry. This document provides guidance on defining, controlling, and improving software life cycle processes within an organization or a project. It recommends methods and approaches suitable for a variety of life cycle models. The guidance emphasizes the importance of establishing a strategy, planning, and the involvement of stakeholders, with the ultimate goal of achieving customer satisfaction. Its purpose is to help ensure consistency in system concepts and life cycle concepts, models, stages, processes, process application, key points of view, adaptation and use in various domains. This document concentrates on specific guidance for the Technical processes and how they can be effectively used during the software life cycle. It is intended to be useful in a variety of software life cycle situations, including the use of agile methods.","","978-1-5044-7172-5","10.1109/IEEESTD.2020.9238526","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9238526","life cycle;life cycle process;software;system;project;stage;software engineering","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Systems engineering and theory;Product life cycle management","","3","","","","23 Oct 2020","","","IEEE","IEEE Standards"
"Experiential Learning for Software Engineering using Agile Modeling in Umple","T. C. Lethbridge","Electrical Engineering and Computer Science, University of Ottawa, Ottawa, ON, Canada",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","2","In this tutorial we will discuss a method of teaching a variety of software engineering topics in an integrated and experiential manner. Topics covered include agile processes, software modeling, open source development tools and processes, code generation and testing. Our approach involves using a textual modeling language called Umple that enables agile, model-driven, test-driven development. Students are introduced to this tool in an introduction to software engineering course, where they learn the basics of the above topics. Then in their capstone course they are able to actually contribute to the tool itself.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206221","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206221","model-driven development;agile software processes;code generation;compiler;Umple;software engineering education","Unified modeling language;Software engineering;Tutorials;Software;Tools;Object oriented modeling","","1","","12","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"CSEE&T 2017 Hall of Fame Nomination: Studio-Based Master of Software Engineering Program at Carnegie Mellon University","G. A. Lewis",Carnegie Mellon Software Engineering Institute,2017 IEEE 30th Conference on Software Engineering Education and Training (CSEE&T),"7 Dec 2017","2017","","","1","2","Since its founding in 1989, the Studio-based Master of Software Engineering (MSE) Program at Carnegie Mellon University (CMU) has been a trailblazer in advancing the practice of masters-level professional software engineering education. From its inception, the program was designed around a comprehensive development project, the Studio. The Studio provides students with a team-based, mentored, multi-semester engagement with external clients, allowing them to ""learn by doing"" as they apply skills and techniques derived from complementary core and elective courses. Going far beyond the common ""capstone"" experience of many other programs at the time, the Studio concept was unique because of the amount of time set aside for practice-based learning (almost a third of the entire curriculum), its approach to active mentoring (engaging seasoned software engineering professionals), and its focus on reflective practices (with explicit attention given to retrospective analysis of positive and negative experiences). This formulation of a software engineering professional degree program has had far-reaching and lasting impacts on software engineering education.","2377-570X","978-1-5386-2536-1","10.1109/CSEET.2017.10","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8166674","software engineering;education;studio;masters program","Software engineering;Software;Training;Conferences;Mentoring;Industries","","1","","14","IEEE","7 Dec 2017","","","IEEE","IEEE Conferences"
"SE and CS Collaboration: Training Students for Engineering Large, Complex Systems","M. Nauman; M. Uzair","Information Technology, City University of Science, Peshawar, Pakistan; University of Peshawar, Peshawar, Pakistan",20th Conference on Software Engineering Education & Training (CSEET'07),"16 Jul 2007","2007","","","167","174","Today's software industry is characterized by fast growth and diversity. To engineer software in such an environment, software engineers are required to work with large teams and handle large complex systems, involving common off-the-shelf components, open source software and outsourced resources. This poses a serious challenge for software engineering institutions. In this paper, we outline a framework for collaboration among computer science and software engineering programmes within a university with the goal of training students for engineering large, complex systems. We chart a three phase layout for the framework in which students of both programmes work together to simulate the industry's practices by designing, building, integrating and testing a large, complex system. We consider the issue of evaluating students in such a framework and give alternatives for certain variables so as to fit the framework in different environments.","2377-570X","0-7695-2893-7","10.1109/CSEET.2007.44","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4271603","Software engineering;computer science;education;complex systems","Collaboration;Systems engineering and theory;Open source software;Collaborative work;Industrial training;Software engineering;Software systems;Computer industry;Collaborative software;Computer science","","8","","11","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE International Draft Standard - Systems and Software Engineering -- Requirements for Testers and Reviewers of User Documentation","",,"ISO/IEC/IEEE DIS P26513, March 2016","13 May 2016","2016","","","1","47","This document supports the need for software users to receive consistent, complete, accurate, and usable documentation. This document was developed to assist those who review, assess, and test software user documentation as part of the software lifecycle process. It is not limited to the review and test phase of the software lifecycle, but includes activities throughout the information management and documentation management processes. This document applies to printed and electronic documentation such as user manuals, online help, instructions, user assistance, tutorials, websites, and user reference documentation. Much of its guidance is applicable to user documentation for systems as well as the software used to control machinery or hardware devices. It applies to both initial development and subsequent releases of the software and user documentation. This document is intended for use by all types of organizations, whether or not a dedicated documentation department is present. Readers are assumed to have experience with or general knowledge of reviewing and testing processes.","","978-1-5044-2051-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7469978","software documentation review;software documentation testing;user documentation;testing and reviewing user documentation;usability testing","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software testing","","","","","","13 May 2016","","","IEEE","IEEE Standards"
"ISO/IEC/IEEE International Draft Standard - Systems and Software Engineering -- Requirements for Testers and Reviewers of User Documentation","",,"ISO/IEC/IEEE CD P26513/D1, August 2015","4 Sep 2015","2015","","","1","45","This document supports the need for software users to receive consistent, complete, accurate, and usable documentation. This document was developed to assist those who review, assess, and test software user documentation as part of the software lifecycle process. It is not limited to the review and test phase of the software lifecycle, but includes activities throughout the information management and documentation management processes. This document applies to printed and electronic documentation such as user manuals, online help, instructions, user assistance, tutorials, websites, and user reference documentation. Much of its guidance is applicable to user documentation for systems as well as the software used to control machinery or hardware devices. It applies to both initial development and subsequent releases of the software and user documentation. This document is intended for use by all types of organizations, whether or not a dedicated documentation department is present. Readers are assumed to have experience with or general knowledge of reviewing and testing processes.","","978-0-7381-9936-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7243267","software documentation review;software documentation testing;user documentation;testing and reviewing user documentation;usability testing","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software testing","","","","","","4 Sep 2015","","","IEEE","IEEE Standards"
"Industrial strength software and quality: software and engineering at Siemens","R. Achatz; F. Paulisch","Software and Engineering, Siemens AG, Germany; Software and Engineering, Siemens AG, Germany","Third International Conference on Quality Software, 2003. Proceedings.","9 Aug 2004","2003","","","321","326","This paper is based on Siemens extensive experience in the area of quality for software-based products, systems, and plants. It describes the ""best practices"" in the area of software and quality that are used at Siemens. These techniques include Siemens' approaches in the areas of assessments and improvement of development processes, the use of metrics to measure such improvements, testing and quality engineering, inspections and reviews, software architecture as well as organization issues associated with quality such as the sharing of best practices in these areas. The results are based on a number of examples from a broad variety of application areas (e.g. telecommunications, industrial automation, medical engineering and transportation). Our experience is that a focus on quality leads to reductions in cycle-time, effort, and costs and thus to business benefit.","","0-7695-2015-4","10.1109/QSIC.2003.1319117","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1319117","","Software quality;Computer industry;Best practices;Biomedical engineering;Area measurement;Software measurement;Software testing;Inspection;Software architecture;Application software","","5","","10","IEEE","9 Aug 2004","","","IEEE","IEEE Conferences"
"The Impact of the Model-Driven Approach to Software Engineering on Software Engineering Education","A. Hamou-Lhadj; A. Gherbi; J. Nandigam","Concordia University, Montreal, QUE, Canada; Concordia University, Montreal, QUE, Canada; Grand Valley State University, Allendale, MI, USA",2009 Sixth International Conference on Information Technology: New Generations,"10 Jun 2009","2009","","","719","724","As businesses rely on software solutions to preserve their position in a highly competitive market, the need for reliable and robust software systems is vital. Lately, there has been a significant interest in building software using models as their main artifacts. Unlike traditional development techniques which tend to be code-centric, model driven approaches, such as the Model Driven Architecture (MDA) standard, stress the usage of models at all levels of the software development life-cycle. The MDA, which is supported by the Object Management Group (OMG), is based on a comprehensive set of standards including MOF, UML, and OCL, to mention a few. This paradigm shift in software engineering has impacted not only the way software is built but also the way software engineering is being taught - The standards introduce a significant body of knowledge that should be integrated in a software engineering curriculum. In this paper, we discuss the impact of the model-driven software engineering approach on software education. This discussion is based on an experience teaching a graduate course on model-driven software engineering at Concordia University.","","978-1-4244-3770-2","10.1109/ITNG.2009.160","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5070705","Model-driven software engineering;software engineering education;model-driven architecture (MDA)","Software engineering;Software standards;Robustness;Software systems;Buildings;Computer architecture;Code standards;Standards development;Stress;Programming","","12","","19","IEEE","10 Jun 2009","","","IEEE","IEEE Conferences"
"A review of software operational profile in software reliability engineering","M. Muhammad Ali-Shahid; S. Sulaiman","Faculty of Computing, Universiti Teknologi Malaysia, Skudai, Johor, Malaysia; Faculty of Computing, Universiti Teknologi Malaysia, Skudai, Johor, Malaysia",2014 8th. Malaysian Software Engineering Conference (MySEC),"18 Dec 2014","2014","","","1","6","Software reliability engineering is evolving in tandem with the growth of software engineering research and practice. The software operational profile has proven its merits in reliability and quality enhancement. It has become essential tool and guidance to testers. Simultaneously, it saves cost, time, and effort. Software operational profile development requires improvements with the evolution of interrelated technologies, growing scales of software, incorporation of new frameworks and matured requirements of the customers. This research focuses on the review of a software operational profile, its extension, enactment, and shortcomings. In the literature review procedure, a study selection criterion is shaped to guide the literature search process. The research summarizes the outcome of 30 main (51% of the total 58) studies that are filtered and selected. The findings of the research is an initial step leading to the construction of a comprehensive software operational profile eliminating common issues in it and enhancing software performance overall.","","978-1-4799-5439-1","10.1109/MySec.2014.6985980","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6985980","Software operational profile;Software reliability engineering;Software reliability based testing","Software;Software reliability;Testing;Software engineering;Reliability engineering;Filtering","","2","","41","IEEE","18 Dec 2014","","","IEEE","IEEE Conferences"
"Security Requirements Engineering for Software Systems: Case Studies in Support of Software Engineering Education","N. R. Mead; E. D. Hough","Software Engineering Institute, Carnegie Mellon University, USA; Software Engineering Institute, Carnegie Mellon University, USA",19th Conference on Software Engineering Education & Training (CSEET'06),"8 May 2006","2006","","","149","158","Software engineering curricula too often neglect the development of security requirements for software systems. As a consequence, programmers often produce buggy code with weak security measures. This report focuses on three case studies in which graduate students applied a novel security requirements engineering methodology to real-world software development projects. The experiences showed promise for curriculum integration in educating students about the importance of security requirements in software engineering, as well as how to develop such requirements","2377-570X","0-7695-2557-1","10.1109/CSEET.2006.30","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1617341","","Systems engineering and theory;Software systems;Computer aided software engineering;Software engineering;Systems engineering education;Information security;Programming;Educational programs;Information management;Technology management","","17","","16","IEEE","8 May 2006","","","IEEE","IEEE Conferences"
"Students Evaluation in AGILE after Completing Software Engineering Course","S. M. Saleh; S. Richard Philip","Department of Computer Science and Engineering, City University, Dhaka, Bangladesh; Department of Computer Science and Engineering, City University, Dhaka, Bangladesh","2019 1st International Conference on Advances in Science, Engineering and Robotics Technology (ICASERT)","19 Dec 2019","2019","","","1","6","In the arena of Software Development, the software engineering philosophy Agile is becoming more popular juxtaposed to the long-established methods. Software organizations have a prerequisite from graduates with cutting-edge knowledge of software engineering methodologies. Due to Agile's popularity universities and institutions have already added agile in the curriculum of software engineering. They have started to teach the students Agile theoretically, practically in labs and also have some seminars where empirical knowledge is shared with students. This paper aims to acquit the determination of Agile to the perceptual experience of Software Engineering undergraduate students, after completing their projects in the lab by following Agile principles, where they were trying to adopt Agile.","","978-1-7281-3445-1","10.1109/ICASERT.2019.8934745","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8934745","Software Engineering Education;Agile Software Development;Software Project Management","Software;Software engineering;Organizations;Project management;Standards organizations;Education;Task analysis","","4","","31","IEEE","19 Dec 2019","","","IEEE","IEEE Conferences"
"Teaching software product engineering in undergraduate computing curriculum","Y. R. Reddy; K. V. Nori","International Institute of Information Technology Software Engineering Research Center, Hyderabad, India; International Institute of Information Technology Software Engineering Research Center, Hyderabad, India",2014 IEEE 27th Conference on Software Engineering Education and Training (CSEE&T),"19 May 2014","2014","","","175","178","Traditional engineering disciplines like electrical engineering, mechanical engineering, metallurgical engineering have focused on the design of artifacts. However most the modern day software engineering course with in the undergraduate-computing curriculum focuses on teaching software processes rather than design of software artifacts. This paper argues the need for introducing software product engineering, i.e., a course that extensively deals with design of software artifacts in undergraduate computing curriculum. At a broader level, we also argue the need for more undergraduate software engineering programs in India.","2377-570X","978-1-4799-4970-0","10.1109/CSEET.2014.6816798","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6816798","","Software;Software engineering;Education;Information technology;Programming profession","","2","","8","IEEE","19 May 2014","","","IEEE","IEEE Conferences"
"A Software Chasm: Software Engineering and Scientific Computing","D. F. Kelly","Department of Mathematics and Computer Science, Royal Military College of Canada",IEEE Software,"5 Nov 2007","2007","24","6","120","119","Some time ago, a chasm opened between the scientific-computing community and the software engineering community. Originally, computing meant scientific computing. Today, science and engineering applications are at the heart of software systems such as environmental monitoring systems, rocket guidance systems, safety studies for nuclear stations, and fuel injection systems. Failures of such health-, mission-, or safety-related systems have served as examples to promote the use of software engineering best practices. Yet, the bulk of the software engineering community's research is on anything but scientific-application software. This chasm has many possible causes. In this article, we look at the impact of one particular contributor in industry.","1937-4194","","10.1109/MS.2007.155","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4375255","software engineering;scientific computing","Software engineering;Scientific computing;Application software;Heart;Software systems;Condition monitoring;Rockets;Software safety;Fuels;Best practices","","59","","4","IEEE","5 Nov 2007","","","IEEE","IEEE Magazines"
"Ultra-automation and ultra-autonomy for software engineering management of ultra-large-scale systems","P. M. Johnson","Collaborative Software Development Laboratory, Department of Information and Computer Sciences, University of Hawai, Honolulu, HI, USA",International Workshop on Software Technologies for Ultra-Large-Scale Systems (ULS '07),"16 Jul 2007","2007","","","1","1","""UltraLargeScale Systems: The Software Challenge of the Future"" identifies ""Engineering Management at Large Scales"" as an important focus of research. Engineer ing management for software typically involves measure ment and monitoring of products and processes in order to maintain acceptable levels of important project characteristics including cost, quality, usability, performance, reliability, and so forth. Our research on software engineering measurement over the past ten years has exhibited a trend towards increasing automation and autonomy in the collection and analysis of process and product measures. In this position paper, we extrapolate from our work so far to con sider what new forms of automation and autonomy might be required for software engineering management of ULS systems.","","0-7695-2965-8","10.1109/ULS.2007.8","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4273447","","Software engineering;Engineering management;Software measurement;Automation;Software systems;Research and development management;Large-scale systems;Maintenance engineering;Reliability engineering;Quality management","","","","10","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"Proposal Based Studio Projects:  How to Avoid Producing ""Cookie Cutter"" Software Engineers","D. Root; M. Rosso-Llopart; G. Taran","Master of Software Engineering Programs Institute for Software Research School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA; Master of Software Engineering Programs Institute for Software Research School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA; Master of Software Engineering Programs Institute for Software Research School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","145","151","The proposal based studio is a method to teach software engineers best practices without developing a ""cookie cutter"" environment. It teaches students how to get projects done in the fixed time of a degree program without relying on a dogmatic, fixed ""recipe"" process. This paper discusses how students are provided a template with six general process areas for which they must ""propose"" solutions. These proposed solutions are unique to each 4 to 5 member Master of Software Engineering team and are continuously reviewed by the faculty throughout the project.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.20","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556960","software engineer teaching method;proposal based studio projects","Proposals;Software engineering;Computer science education;Educational programs;Gas insulated transmission lines;Computer science;Best practices;Computer industry;Software development management;Programming","","6","","8","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"Teaching real-world software engineering through a capstone project course with industrial customers","J. Vanhanen; T. O. A. Lehtinen; C. Lassenius","Software Process Research Group, Aalto University, Espoo, Finland; Software Process Research Group, Aalto University, Espoo, Finland; Software Process Research Group, Aalto University, Espoo, Finland",2012 First International Workshop on Software Engineering Education Based on Real-World Experiences (EduRex),"28 Jun 2012","2012","","","29","32","In this paper, we describe how we teach real-world software engineering to students using a project course simulating in-vivo software development projects. The course gives the students an opportunity to try out in practice the skills gained on other computer science and software engineering courses. The students execute projects in teams consisting of seven to ten students, developing software for a real customer. Students spend more than 150 hours each on the project. The main stakeholders of the projects are the project team, customer, and mentor. The mentor represents the course personnel and provides practical guidance for the project team during the project. During the course, the students are supported by mentoring and experience exchange sessions. While laborious, the course is consistently ranked in the top three in the CS curriculum by the students.","","978-1-4673-1805-1","10.1109/EduRex.2012.6225702","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6225702","Software Engineering Education;Capstone Software Project;Industrial Collaboration","Software engineering;Software;Educational institutions;Quality assurance;Companies;Proposals","","26","","4","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"Component-based Approach to Software Engineering of Machine Learning-enabled Systems","V. Indykov","University of Gothenburg | Chalmers, Gothenburg, Sweden",2024 IEEE/ACM 3rd International Conference on AI Engineering – Software Engineering for AI (CAIN),"18 Jun 2024","2024","","","250","252","Machine Learning (ML) - enabled systems capture new frontiers of industrial use. The development of such systems is becoming a priority course for many vendors due to the unique capabilities of Artificial Intelligence (AI) techniques. The current trend today is to integrate ML functionality into complex systems as architectural components. There are a lot of relevant challenges associated with this strategy in terms of the overall system architecture and in the context of development workflow (MLOps). The probabilistic nature, crucial dependency on data, and work in an environment of high uncertainty do not allow software engineers to apply traditional software development methodologies. As a result, there is a community request to systematize the most relevant experience in building software architectures with ML components, to create new approaches to organizing the process of developing ML-enabled systems, and to build new models for assessing the system quality. Our research contributes to all mentioned directions and aims to create a methodology for the efficient implementation of ML-enabled software and AI components. The results of the research can be used in the design and development in industrial settings, as well as a basis for further studies in the research field, which is of both practical and scientific value.1CCS CONCEPTS• Software and its engineering → Requirements analysis; Software design engineering; Design patterns; Software design tradeoffs.","","979-8-4007-0591-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10556246","machine learning;software architecture;software quality","Knowledge engineering;Software design;Uncertainty;Software architecture;Systems architecture;Machine learning;Software quality","","","","22","","18 Jun 2024","","","IEEE","IEEE Conferences"
"First International Workshop on Product Line Approaches in Software Engineering (PLEASE 2010)","J. Rubin; G. Botterweck; M. Mezini; I. Maman; A. Pleuss","IBM Haifa Research Laboratory, Haifa University Campus, Haifa, Israel; Lero-The Irish Software Engineering Research Centre, University of Limerick, Limerick, Ireland; Technische Universität Darmstadt, Darmstadt, Germany; IBM Haifa Research Laboratory, Haifa University Campus, Haifa, Israel; Lero-The Irish Software Engineering Research Centre, University of Limerick, Limerick, Ireland",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","439","440","PLEASE is a new workshop series that focuses on exploring the present and the future of Software Product Line Engineering (SPLE) techniques. The goal of the workshop is to bring together researchers and practitioners with special interest in SPLE in order to discuss ongoing research and new ideas for advancing the field. The workshop's main theme, Beyond Product Lines, focuses on the adaptation of SPLE to dynamic settings in which neither the goal nor the organizational structure is stable. We seek to foster exchange of ideas, techniques, and approaches with the broader software engineering community. In a special session of this year's edition, we examine how to leverage existing research by discussing synergy opportunities with members of the Software Clones community. The first edition of PLEASE is held in conjunction with the 32st International Conference in Software Engineering (May 2--8, 2010. Cape Town, South Africa).","1558-1225","978-1-60558-719-6","10.1145/1810295.1810418","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062237","product line engineering;software product lines;variability modeling","Software;Educational institutions;Cloning;Software engineering;Conferences;Ecosystems;Portfolios","","","","3","","27 Oct 2011","","","IEEE","IEEE Conferences"
"Fourth international workshop on software engineering for computational science and engineering: (SE-CSE2011)","J. C. Carver; R. Bartlett; I. Gorton; L. Hochstein; D. Kelly; J. Segal","University of Alabama, Tuscaloosa, AL, USA; Sandia National Laboratories, Albuquerque, NM, USA; Pacific Northwest National Laboratory, Richland, WA, USA; USC-ISI, Arlington, VA, USA; Royal Military College, Kingston, ONT, Canada; The Open University, Milton Keynes, UK",2011 33rd International Conference on Software Engineering (ICSE),"10 Oct 2011","2011","","","1226","1227","Computational Science and Engineering (CSE) software supports a wide variety of domains including nuclear physics, crash simulation, satellite data processing, fluid dynamics, climate modeling, bioinformatics, and vehicle development. The increase in the importance of CSE software motivates the need to identify and understand appropriate software engineering (SE) practices for CSE. Because of the uniqueness of CSE software development, existing SE tools and techniques developed for the business/IT community are often not efficient or effective. Appropriate SE solutions must account for the salient characteristics of the CSE development environment. This situation creates an opportunity for members of the SE community to interact with members of the CSE community to address this need. This workshop facilitates that collaboration by bringing together members of the SE community and the CSE community to share perspectives and present findings from research and practice relevant to CSE software. A significant portion of the workshop is devoted to focused interaction among the participants with the goal of generating a research agenda to improve tools, techniques, and experimental methods for studying CSE software engineering.","1558-1225","978-1-4503-0445-0","10.1145/1985793.1986058","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6032647","computational engineering;computational science","Conferences;Software engineering;Software;Communities;Scientific computing;Programming;Computational modeling","","3","","6","","10 Oct 2011","","","IEEE","IEEE Conferences"
"Software Engineering’s Top Topics, Trends, and Researchers","G. Mathew; T. Menzies","North Carolina State University; North Carolina State University, RAISE (Real-World AI for Software Engineering) research group",IEEE Software,"27 Sep 2018","2018","35","5","88","93","For this theme issue on the 50th anniversary of software engineering (SE), Redirections offers an overview of the twists, turns, and numerous redirections seen over the years in the SE research literature. Nearly a dozen topics have dominated the past few decades of SE research—and these have been redirected many times. Some are gaining popularity, whereas others are becoming increasingly rare. This article is part of a theme issue on software engineering’s 50th anniversary.","1937-4194","","10.1109/MS.2018.3571230","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8474491","latent Dirichlet allocation;text mining;software engineering research;software engineering;software development;redirections","Text mining;Object oriented modeling;Market research;Software measurement;Software engineering","","7","","11","IEEE","27 Sep 2018","","","IEEE","IEEE Magazines"
"SE-Games 2020: 1st International Workshop on Games for Software Engineering Education and Training","T. Haendler; G. Neumann","University of Applied Sciences BFI Vienna, Austria, Vienna University of Economics and Business (WU), Austria; Vienna University of Economics and Business (WU), Austria",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","2","This workshop summary refers to the 1st International Workshop on Games for Software Engineering Education and Training (SE-Games 2020), co-located with the 32nd IEEE International Conference on Software Engineering Education & l Training (CSEE&T 2020). SE-Games aims to serve as a platform for researchers and practitioners, who share the goal to improve the methods of teaching and training software engineering by designing and applying game-based environments such as serious games, game-based learning and gamification.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206189","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206189","Software Engineering;Gamification;Serious Games;Game-based Learning;Software-Engineering Education and Training","Games;Conferences;Training;Software engineering;Software;Programming","","2","","6","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"Automated Assessment and Evaluation of Contribution of Collaborative Software Engineering Development Process","K. Ma; K. Liu; L. Du","Shandong Provincial Key Laboratory of Network Based Intelligent Computing, University of Jinan, Jinan, China; Shandong Provincial Key Laboratory of Network Based Intelligent Computing, University of Jinan, Jinan, China; Shandong Provincial Key Laboratory of Network Based Intelligent Computing, University of Jinan, Jinan, China",2020 27th Asia-Pacific Software Engineering Conference (APSEC),"1 Mar 2021","2020","","","500","504","In the context of New Generation of Information Technology (NGIT) and Emerging Engineering Education (3E) in China, it is a new research hot topic to in evaluating students involvements and skills in engineering practice. Many automated assessment systems were developed specifically for the use case of grading student work. Sometimes, it is subjective evaluation and not always correct. These systems usually emphasize the training results, but neglects the process tracking od the result. In this paper, our automated assessment and evaluation of the contribution of collaborative software engineering training is proposed to evaluate student involving in software engineering training against a rubric feedback. Contributions of our method are automated assessment of laboratory environment and collaborative software development process, and cooperative development contribution model. Finally, the results of automated assessment of workload and its balance is analyzed to illustrate the effect of our software engineering training.","2640-0715","978-1-7281-9553-7","10.1109/APSEC51365.2020.00064","National Natural Science Foundation of China(grant numbers:61772231); Shandong Provincial Natural Science Foundation(grant numbers:ZR2017MF025); Industry-Academy Cooperative Education Project of Ministry of Education(grant numbers:201801002030,201702185051); University of Jinan(grant numbers:JZ1807); Science and Technology Program of University of Jinan(grant numbers:XKY1734,XKY1828); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9359313","Software Engineering Training;Vagrant;Automated Assessment;Continuous Integration;Workload;Agile Software Development","Training;Collaborative software;Laboratories;Software;Engineering education;Information technology;Software engineering","","1","","16","IEEE","1 Mar 2021","","","IEEE","IEEE Conferences"
"Assessing Teamwork Performance in Software Engineering Education: A Case in a Software Engineering Undergraduate Course","J. Chen; G. Qiu; L. Yuan; L. Zhang; G. Lu","School of Computer Science, Shaanxi Normal University, Xi'an, Shaanxi, China; School of Computer Science, Shaanxi Normal University, Xi'an, Shaanxi, China; School of Computer Science, Shaanxi Normal University, Xi'an, Shaanxi, China; School of Computer Science, Shaanxi Normal University, Xi'an, Shaanxi, China; School of Computer Science, Shaanxi Normal University, Xi'an, Shaanxi, China",2011 18th Asia-Pacific Software Engineering Conference,"16 Jan 2012","2011","","","17","24","Teamwork skills are important and even essential for software engineering professionals. Although there are rich research results on teamwork skill development and assessment in other engineering disciplines, more research is required on effective approaches in software engineering education as teamwork plays a more fundamental role with some special requirements. This paper presents a novel assessment approach for teamwork performance in software engineering education. The approach has been used in several software engineering courses and the results are positive and promising. A novel feature of the approach is that it encourages and supports student active and collaborative learning by using an approach specially assessing teamwork performance of a team and each team member of the team. Another feature is that it can be tailored to different requirements and software engineering courses. We illustrate the approach by a case that uses the approach in software project management course. Limitations of the approach and further work are also discussed.","1530-1362","978-1-4577-2199-1","10.1109/APSEC.2011.50","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6130665","teamworks;collaborative learning;engineering education;software engineering","Teamwork;Software engineering;Software;Education;Project management;Collaborative work","","20","","19","IEEE","16 Jan 2012","","","IEEE","IEEE Conferences"
"Interdisciplinary influences in software engineering practices","R. Bunting; F. Coallier; G. Lewis","Software Engineering, Institute Carnegie Mellon, Pittsburgh, PA, USA; École de Technologie Supérieure, Montreal, QUE, Canada; Software Engineering, Institute Carnegie Mellon, Pittsburgh, PA, USA",10th International Workshop on Software Technology and Engineering Practice,"26 Feb 2004","2002","","","62","69","In consideration of the future of software engineering as an interdisciplinary activity, this paper explores the existing coverage of interdisciplinary software engineering areas in established or emerging software engineering frameworks. In particular we investigate the Software Engineering Body of Knowledge (SWEBOK), the Capability Maturity Model (CMM) and related Capability Maturity Model Integration (CMMI), and the Rational Unified Process (RUP). Following the investigation of the interdisciplinary elements of these frameworks we explore potential areas of advancement and opportunities, that is, where and how future body of knowledge, process, and framework revisions might benefit from the interdisciplinary approach.","","0-7695-1878-8","10.1109/STEP.2002.1267604","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1267604","","Software engineering;Capability maturity model;Project management;Coordinate measuring machines;Systems engineering and theory;Engineering management;Computer science;Mathematics;Cognitive science;Human factors","","1","","11","IEEE","26 Feb 2004","","","IEEE","IEEE Conferences"
"Search-Based Software Engineering in the Era of Modern Software Systems","F. Sarro","Department of Computer Science, University College London, London, United Kingdom",2023 IEEE 31st International Requirements Engineering Conference (RE),"28 Sep 2023","2023","","","3","5","This short paper accompanies the keynote given by Federica Sarro at the 31st IEEE International Requirements Engineering Conference, Hanover, Germany, September 2023.","2332-6441","979-8-3503-2689-5","10.1109/RE57278.2023.00010","ERC(grant numbers:741278); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10260877","Search-Based Software Engineering;Responsible Software Engineering;Software Fairness;Software Footprint;On-line Social Systems","Software systems;Requirements engineering;Software engineering","","6","","29","IEEE","28 Sep 2023","","","IEEE","IEEE Conferences"
"Towards Supporting Software Engineering Using Deep Learning: A Case of Software Requirements Classification","R. Navarro-Almanza; R. Juarez-Ramirez; G. Licea","School of Chemical Science and Engineering, Univ. Autonoma de Baja California Tijuana, Tijuana, Baja California, Mexico; Sch. of Chem. Sci. & Eng., Univ. Autonoma de Baja California Tijuana, Tijuana, Baja California, Mexico; School of Chemical Science and Engineering, Univ. Autonoma de Baja California Tijuana, Tijuana, Baja California, Mexico",2017 5th International Conference in Software Engineering Research and Innovation (CONISOFT),"16 Apr 2018","2017","","","116","120","Software Requirements are the basis of high-quality software development process, each step is related to SR, these represent the needs and expectations of the software in a very detailed form. The software requirement classification (SRC) task requires a lot of human effort, specially when there are huge of requirements, therefore, the automation of SRC have been addressed using Natural Language Processing (NLP) and Information Retrieval (IR) techniques, however, generally requires human effort to analyze and create features from corpus (set of requirements). In this work, we propose to use Deep Learning (DL) to classify software requirements without labor intensive feature engineering. The model that we propose is based on Convolutional Neural Network (CNN) that has been state of art in other natural language related tasks. To evaluate our proposed model, PROMISE corpus was used, contains a set of labeled requirements in functional and 11 different categories of non-functional requirements. We achieve promising results on SRC using CNN even without handcrafted features.","","978-1-5386-3956-6","10.1109/CONISOFT.2017.00021","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8337942","Software Requirement Classification;Convolutional Neural Network;Word Embedding;Software Engineering","Software;Machine learning;Task analysis;Convolutional neural networks;Data models;Computer architecture;Software engineering","","48","","13","IEEE","16 Apr 2018","","","IEEE","IEEE Conferences"
"A user evaluation of synchronous collaborative software engineering tools","C. Cook; W. Irwin; N. Churcher","Computer Science & Software Engineering Department, University of Canterbury, Christchurch, New Zealand; Computer Science & Software Engineering Department, University of Canterbury, Christchurch, New Zealand; Computer Science & Software Engineering Department, University of Canterbury, Christchurch, New Zealand",12th Asia-Pacific Software Engineering Conference (APSEC'05),"20 Mar 2006","2005","","","6 pp.","","Collaborative software engineering (CSE) is a rapidly growing field. Tools such as IDEs are now beginning to incorporate new collaborative features. We have developed several real-time CSE tools which support fine-grained collaboration. In this paper we present an empirical evaluation to investigate the potential benefits of our tools for collaborative source code development. Our results show that for the two typical types of collaborative programming scenarios studied, users of CSE tools achieve task completion rates at least twice as fast as those obtained from their single-user counterparts. Additionally, participants indicated strong support for the concept of CSE tools. These results encourage us to continue developing our CSE tools, and to investigate their use in other software engineering contexts.","1530-1362","0-7695-2465-6","10.1109/APSEC.2005.22","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1607212","Collaborative Software Engineering;CSCW;Human Factors;Experimentation","Collaborative software;Collaborative tools;Software engineering;Collaborative work;Computer science;Visualization;Human factors;Computer industry;Software maintenance;Control systems","","7","2","13","IEEE","20 Mar 2006","","","IEEE","IEEE Conferences"
"A Survey of the Practice of Design -- Code Correspondence amongst Professional Software Engineers","A. Nugroho; M. R. V. Chaudron","Leiden Institute of Advanced Computer Science, Leiden University, Netherlands; Department of Maths and Computer Science, Technische Universiteit Eindhoven, Netherlands",First International Symposium on Empirical Software Engineering and Measurement (ESEM 2007),"15 Oct 2007","2007","","","467","469","Correspondence between the design and the code of a system is desirable for several purposes in software development, such as predicting properties of the system based on the design, and for using the documentation for understanding and maintaining the system. In this paper we report on a study into the correspondence between the design of a software system, represented by means of UML, and the implementation of the system. We performed a web-based questionnaire among professional software engineers for finding out how they deal with correspondence. The questionnaire elicited the attitude of professional software engineers with respect to: importance of correspondence, common practice in maintaining correspondence and common reasons for deterioration of correspondence. The results of the questionnaire provide a deeper understanding of the aspects of correspondence and their importance in practical software engineering.","1949-3789","978-0-7695-2886-1","10.1109/ESEM.2007.69","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4343781","","Design engineering;Maintenance engineering;Programming;Documentation;Software design;Software systems;Unified modeling language;Software performance;Software maintenance;Software engineering","","7","","8","IEEE","15 Oct 2007","","","IEEE","IEEE Conferences"
"Enabling Real-Time Feedback in Software Engineering","E. Larios Vargas; J. Hejderup; M. Kechagia; M. Bruntink; G. Gousios",Software Improvement Group; Delft University of technology; Delft University of technology; Software Improvement Group; Delft University of technology,2018 IEEE/ACM 40th International Conference on Software Engineering: New Ideas and Emerging Technologies Results (ICSE-NIER),"23 Aug 2018","2018","","","21","24","Modern software projects consist of more than just code: teams follow development processes, the code runs on servers or mobile phones and produces run time logs and users talk about the software in forums like StackOverflow and Twitter and rate it on app stores. Insights stemming from the real-time analysis of combined software engineering data can help software practitioners to conduct faster decision-making. With the development of CodeFeedr, a Real-time Software Analytics Platform, we aim to make software analytics a core feedback loop for software engineering projects. CodeFeedr's vision entails: (1) The ability to unify archival and current software analytics data under a single query language, and (2) The feasibility to apply new techniques and methods for high-level aggregation and summarization of near real-time information on software development. In this paper, we outline three use cases where our platform is expected to have a significant impact on the quality and speed of decision making; dependency management, productivity analytics, and run-time error feedback.","","978-1-4503-5662-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8444829","software analytics;real time feedback;streaming data","Software;Real-time systems;Computer bugs;Productivity;Libraries;Software engineering","","","","12","","23 Aug 2018","","","IEEE","IEEE Conferences"
"A comparative study of three personality assessment models in software engineering field","J. Jia; P. Zhang; R. Zhang","School of Software, Beihang University, Beijing, China; School of Software, Beihang University, Beijing, China; School of Software, Beihang University, Beijing, China",2015 6th IEEE International Conference on Software Engineering and Service Science (ICSESS),"30 Nov 2015","2015","","","7","10","People with different personalities see a problem from several perspectives and make different decisions in a software project. Therefore, some researchers have associated software personnel's psychological personality types with the various tasks in recent years. But which psychological personality model is best suited to software engineering field has not been examined fully. This article discusses the Big Five personality model, the Myers-Briggs Type Indicator and the Keirsey Temperament Sorter, which are popular personality assessment models in psychology. Based on extant research literature, this study presents their relationships and differences from conceptual content, measurement method and application results. Our analysis suggests that the Big Five model is much better than the other two in software engineering field. Our finding has important implications for researchers studying effectiveness and fulfilment among software engineers. Likewise, our study attempts to bring in fresh insights from personality psychology to enrich software engineering research.","2327-0594","978-1-4799-8353-7","10.1109/ICSESS.2015.7338995","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7338995","personality types;big five personality model;myers-briggs type indicator;keirsey temperament sorter;software engineering;software psychology","Software;Psychology;Software engineering;Sensors;Bridges;Stability analysis;Stress","","11","","16","IEEE","30 Nov 2015","","","IEEE","IEEE Conferences"
"The case for teaching “tool science” taking software engineering and software engineering education beyond the confinements of traditional software development contexts","C. Wolff","Media Informatics Group, University of Regensburg Regensburg, Germany",2015 IEEE Global Engineering Education Conference (EDUCON),"30 Apr 2015","2015","","","932","938","In this paper the need for tool science, a discipline dedicated to the problem of developing, selecting, adapting and teaching about software tools for research is discussed. Starting from a general description of this field a short overview on the state-of-the-art is given. Core problems for tools research are discussed and several open research issues are identified like the need for case studies in research tool usage or making economic benefits of better usability and user experience for research tools evident. In addition, aspects of teaching concepts for tool developers and users outside the core disciplines of computer science and software engineering are presented.","2165-9567","978-1-4799-1908-6","10.1109/EDUCON.2015.7096085","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7096085","scientific software tools;software engineering in research;user experience;typology of software tools in research","Software engineering;Usability;Education;Context;Software tools;Economics","","1","","33","IEEE","30 Apr 2015","","","IEEE","IEEE Conferences"
"IEEE Approved Draft Standard for Software and Systems Engineering--Software Testing--Part 1: Concepts and Definitions","",,"ISO/IEC/IEEE P29119-1-FDIS, April 2013","2 May 2013","2013","","","1","69","The scope of this standard is the testing of software-intensive systems.Software is present in many of the products we use today and these products are getting more and more complex; for example a calendar on your PC, an electronic game, a mobile telephone, a car, or an aircraft. Software-intensive systems may describe a pure software system or may consist of a number of subsystems, such as hardware, network, documentation, data, data repository systems, license agreements, descriptions of manual processes, and of course, software.This standard supports testing across the entire software development lifecycle, from static testing of requirements, specifications and other documentation, unit or component testing that is typically carried out by developers, integration testing of program modules, system testing of integrated systems, and user acceptance testing that is usually carried out by end-users. It also supports testing during maintenance cycles that typically occur after release.","","978-0-7381-8414-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6512514","","IEEE standards;Software engineering;Software testing","","","","","","2 May 2013","","","IEEE","IEEE Standards"
"A Survey of Software Engineering Techniques in Medical Device Development","R. L. Feldmann; F. Shull; C. Denger; M. Host; C. Lindholm","Fraunhofer Center for Experimental Software Engineering, College Park, MD, USA; Fraunhofer Center for Experimental Software Engineering, College Park, MD, USA; Fraunhofer Center슠for슠Experimental Software Engineering, Kaiserslautern, Germany; Department of Communication Systems, Lund University, Lund, Sweden; Fraunhofer Center for Experimental Software Engineering, College Park, MD, USA","2007 Joint Workshop on High Confidence Medical Devices, Software, and Systems and Medical Device Plug-and-Play Interoperability (HCMDSS-MDPnP 2007)","22 Jan 2008","2007","","","46","54","A wide variety of the functions provided by today's medical devices relies heavily on software. Most of these capabilities could not be offered without the underlying integrated software solutions. As a result, the medical device industry has become highly interdisciplinary. Medical device manufacturers are finding an increasing need to incorporate the research ideas and results from traditionally disconnected research areas such as medicine, software and system engineering, and mechanical engineering. In 2006, we conducted a survey with more than 100 companies from Europe and the USA to shine some light on the current status of the integration of software engineering technologies into the medical device domain. The initial results of this survey are presented in this paper. Both software engineers and the medical device industry can use these findings to better understand current challenges and future directions, to achieve a better integration of the fields.","","978-0-7695-3081-9","10.1109/HCMDSS-MDPnP.2007.4","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4438163","","Software engineering;Medical diagnostic imaging;Communication system software;Biomedical engineering;Software standards;Software systems;Systems engineering and theory;Standards development;Europe;Computer industry","","9","","13","IEEE","22 Jan 2008","","","IEEE","IEEE Conferences"
"Combining Quantitative and Qualitative Studies in Empirical Software Engineering Research","M. Di Penta; D. A. Tamburri","DEEPSE group - DEIB - Politecnico di Milano, Milano, Italy; Dept. of Engineering, University of Sannio, Benevento, Italy",2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C),"3 Jul 2017","2017","","","499","500","This technical briefing provides an overview of how quantitative empirical research methods can be combined with qualitative ones generating the family of empirical software engineering approaches known as mixed-methods. The ultimate aim of such mixed-methods is supporting cause-effect claims combining multiple data types, sources and analyses that provide software practitioners and academicians solid rationale and practical value to research results. This briefing offers lessons we learned in instrumenting and executing mixed-methods approaches for the benefit of the goal above.","","978-1-5386-1589-8","10.1109/ICSE-C.2017.163","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7965402","Empirical Software Engineering;Quantitative Methods;Qualitative Methods;Grounded Theory","Software engineering;Software;Context;Statistical analysis;Correlation;Measurement;Data mining","","10","","13","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEEDraft International Standard - Software Engineering - Software Life Cycle Processes - Maintenance","",,"ISO/IEC/IEEE P14764/CD2, June 2020","10 Jul 2020","2020","","","1","43","","","978-1-5044-6848-0","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9138813","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software maintenance;Product life cycle management","","","","","","10 Jul 2020","","","IEEE","IEEE Standards"
"ISO/IEC/IEEE Approved Draft International Standard - Software Engineering - Software Life Cycle Processes - Maintenance","",,"ISO/IEC/IEEE P14764/FDIS, July 2021","2 Sep 2021","2021","","","1","46","","","978-1-5044-7921-9","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9528313","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software Maintenance","","","","","","2 Sep 2021","","","IEEE","IEEE Standards"
"ISO/IEC/IEEE International Standard - Software engineering - Software life cycle processes - Maintenance","",,ISO/IEC/IEEE 14764:2022(E),"21 Jan 2022","2022","","","1","46","","","978-1-5044-8247-9","10.1109/IEEESTD.2022.9690131","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9690131","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software maintenance;Product life cycle management","","","","","","21 Jan 2022","","","IEEE","IEEE Standards"
"Cross-boundary software engineering: Implications of engineering paradigm shift","T. Yamakami","Access, 1-10-2 Nakase, Mihama-ku, Chiba-shi, Chiba, Japan 261-0023",The 3rd International Conference on Information Sciences and Interaction Sciences,"3 Aug 2010","2010","","","536","540","Software engineering is a rigid process for dealing with machine-readable information using imprecise human hands. This legacy monolithic software engineering needs to address the emerging challenges involving heavy engagement of human communications. The author describes cases of this new trend and advantages of communication-centered software engineering. Then, the author proposes a cross-boundary software engineering model in order to describe these cases. The author discusses transition patterns for coping with these challenges. Using this model, the author describes issues for enterprises and for academic education.","","978-1-4244-7386-1","10.1109/ICICIS.2010.5534768","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5534768","cross-boundary software engineering","Software engineering;Open source software;Software maintenance;Computer industry;Mobile handsets;Application software;Technological innovation;Programming;Embedded software;Telephone sets","","2","","20","IEEE","3 Aug 2010","","","IEEE","IEEE Conferences"
"Conducting empirical software engineering research in Nigeria: the posing problems","A. S. Olalekan","Department of Computer Science, University of Ibadan, Nigeria","Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.","19 Dec 2005","2005","","","633","634","Empirical software engineering research has advanced in many parts of the world especially the western nations, but little has been contributed in this research domain by the developing nations such as Nigeria, the well-acclaimed 'Giant of Africa'. The fast growing software industry in the country suggests that we need to incorporate solid software engineering studies into the various software process activities of the stakeholders in the industry, if at all quality software products must be turned out into the ever-competing global market. Recent survey of the Nigeria software industry shows that the industry is just coming into limelight, and that the industry is beset with 'software process compromise'. This short article takes a cursory look into the state of software engineering research in Nigeria with particular reference to the nature of the nation's software industry and the student/academic environment as well as their posing problems. The article concludes with some cogent recommendations.","1558-1225","1-59593-963-2","10.1109/ICSE.2005.1553622","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1553622","","Software engineering;Computer industry;Computer science;Software quality;Management training;Project management;Engineering management;Industrial training;Business;Africa","","","","6","","19 Dec 2005","","","IEEE","IEEE Conferences"
"Standard for Information Technology--Software Life Cycle Processes--Software Development--Acquirer-Supplier Agreement (Issued for Trial Use)","",,J-STD-016-1995,"25 Jul 2013","1996","","","1","232","Withdrawn Standard. This standard defines a set of software development activities and resulting software products. It provides a framework for software development planning and engineering. It is also intended to merge commercial and Government software development requirements within the framework of the software life cycle process requirements of the Electronic Industries Association (EIA), Institute of Electrical and Electronics Engineers (IEEE) and International Organization for Standardization (ISO). The term software development is used as an inclusive term encompassing new development, modification, reuse, reengineering, maintenance, and all other processes or activities resulting in software products.","","978-0-7381-0427-0","10.1109/IEEESTD.1996.6569022","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6569022","builds incremental development;database;joint technical management reviews;operational concept;reusable software;risk management;security privacy protection;software configuration management;software development;software documentation;software implementation;software management indicators;software product evaluation;software quality assurance;software requirements definitions;software safety;software maintenance;software testing;software unit;tailoring","IEEE standards;Risk management;Reusability;Software quality;Software maintenance;Software testing;Quality assurance;Privacy;Documentation","","","","0","","25 Jul 2013","","","IEEE","IEEE Standards"
"ScrumBoard: A Project Management Tool Purpose-Built for Software Engineering Education","M. Minish; F. Gilson; M. Galster","Department of Computer Science and Software Engineering, University of Canterbury, Christchurch, New Zealand; Department of Computer Science and Software Engineering, University of Canterbury, Christchurch, New Zealand; Department of Computer Science and Software Engineering, University of Canterbury, Christchurch, New Zealand",2024 36th International Conference on Software Engineering Education and Training (CSEE&T),"10 Sep 2024","2024","","","1","5","This paper recounts our experiences with the ‘ScrumBoard’, a custom-built open-source digital project man-agement tool specifically designed for software engineering project courses. We discuss how it has supported experiential learning pedagogy and assessment over multiple iterations of a two-semester, 3rd year project course, having now been used extensively by more than 200 students. While offering a similar experience to commercial software project management tools, we reflect on how the ScrumBoard has supported our ability to assess students more accurately and efficiently, and how the tool has enabled us to identify problematic work practices in real-time, allowing for earlier interventions from teaching staff and an improved learning experience for students.","2377-570X","979-8-3503-7897-9","10.1109/CSEET62301.2024.10663034","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10663034","Higher education;project course;project-based learning;Scrum;agile software development","Surveys;Measurement;Education;Project management;Software;Reflection;Real-time systems;Recommender systems;Software engineering;Software development management","","","","11","IEEE","10 Sep 2024","","","IEEE","IEEE Conferences"
"The Ethical Software Engineer","D. Hall","Software and computing for the Square Kilometre Array Program Development Office, The University of Mancheste",IEEE Software,"19 Jun 2009","2009","26","4","9","10","Compliance to a professional society's code of ethics carries obligations beyond minimum standards of behavior. Members of software engineering professional societies should also serve the public interest and promote the common good.","1937-4194","","10.1109/MS.2009.106","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5076450","professional ethics;codes of ethics;codes of good practice;professional licensing;software engineering practice","Ethics;Software engineering;Software standards;Standards development;Programming;ISO;Knowledge engineering;Software development management;IEC standards;Career development","","10","","4","IEEE","19 Jun 2009","","","IEEE","IEEE Magazines"
"Software Engineering Research in Brazil: An Analysis of the Last Five Editions of SBES","J. Leite; T. Batista; L. Leite","Departamento de Informática e Matemática Aplicada, Universidade Federal do Rio Grande do Norte, Natal, Brazil; Departamento de Informática e Matemática Aplicada, Universidade Federal do Rio Grande do Norte, Natal, Brazil; Departamento de Informática e Matemática Aplicada, Universidade Federal do Rio Grande do Norte, Natal, Brazil",2011 25th Brazilian Symposium on Software Engineering,"3 Nov 2011","2011","","","24","29","The Brazilian software engineering main conference is celebrating its silver jubilee. It is time to reflect on its current status and maturity. In this paper, our goals are (i) to give an overview of the recent SBES publications and (ii) to analyze their relevance to its community and to industry. We analyzed the last five editions of SBES proceedings to identify the type of articles, the research topics, the references to previous SBES publications and the relationship with industry. The results show us that the community is very active but it is time to reflect about the identified problems, to improve the interaction with industry, and to increase the collaboration network between the researchers.","","978-1-4577-2187-8","10.1109/SBES.2011.18","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6065142","software engineering research;literature analyses;research topics;relationship with industry","Industries;Software engineering;Educational institutions;Software;Software testing;Collaboration;Communities","","1","","6","IEEE","3 Nov 2011","","","IEEE","IEEE Conferences"
"The challenge and practice of creating Software Engineering curriculum","Y. Sun","School of Electronics Engineering & Computer Science, Key laboratory of High Confidence Software Technologies, Ministry of Education, Peking University, Beijing, China",2011 24th IEEE-CS Conference on Software Engineering Education and Training (CSEE&T),"16 Jun 2011","2011","","","497","501","Software Engineering is important for the students majored in computer science and technology. This curriculum is intended to provide students with an overall view over Software Engineering as an engineering discipline and with insight into the processes of software development. Creating software Engineering curriculum faces several challenges: (1) Software Engineering has wide coverage, but teaching time is limited. So it is difficult to make in-depth education. (2) Some introductory Software Engineering courses present the principles in isolation from practice. Teaching the lectures seems to focus on philosophy and methodology level, which leads to difficulty for students having no practical experience to understand. (3) Due to the lack of software project practice, students can hardly apply appropriate software engineering methods and technologies to solve problems. (4) How can Software Engineering curriculum satisfy the various needs of different levels? This paper focuses on the challenges above, and introduces how to try to solve them by a case study on the construction of Software Engineering curriculum at Peking University. Finally, this paper gives the future direction for the construction of Software Engineering curriculum.","2377-570X","978-1-4577-0348-5","10.1109/CSEET.2011.5876132","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5876132","","Software engineering;Education;Knowledge engineering;Software;Programming;Systematics","","5","","6","IEEE","16 Jun 2011","","","IEEE","IEEE Conferences"
"Engineering safety- and security-related requirements for software-intensive systems: tutorial summary","D. G. Firesmith","Software Engineering Institute, Pittsburgh, PA, USA",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","489","490","This full-day tutorial introduces the attendee to the engineering of safety- and security-related requirements for software-intensive systems. It provides a consistent, effective, and efficient method for identifying, analyzing, specifying, verifying, and validating the four different types of safety- and security-related requirements.","1558-1225","978-1-60558-719-6","10.1145/1810295.1810444","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062262","requirements engineering;safety engineering;security engineering;software-intensive systems","Security;Tutorials;Fires;Software engineering;Software","","3","","9","","27 Oct 2011","","","IEEE","IEEE Conferences"
"1st International workshop on natural language analysis in software engineering (NaturaLiSE 2013)","L. Pollock; D. Binkley; D. Lawrie; E. Hill; R. Oliveto; G. Bavota; A. Bacchelli","University of Delaware, USA; Loyola University, MD, USA; Loyola University, MD, USA; Montclair State University, USA; University of Molise, Italy; University of Salerno, Italy; University of Lugano, Switzerland",2013 35th International Conference on Software Engineering (ICSE),"26 Sep 2013","2013","","","1537","1538","Software engineers produce code that has formal syntax and semantics, which establishes its formal meaning. However, the code also includes significant natural language found primarily in identifier names and comments. Furthermore, the code is surrounded by non-source artifacts, predominantly written in natural language. The NaturaLiSE workshop focuses on natural language analysis of software. The workshop brings together researchers and practitioners interested in exploiting natural language information to create improved software engineering tools. Participants will explore natural language analysis applied to software artifacts, combining natural language and traditional program analysis, integration of natural language analyses into client tools, mining natural language data, and empirical studies focused on evaluating the usefulness of natural language analysis.","1558-1225","978-1-4673-3076-3","10.1109/ICSE.2013.6606775","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6606775","Natural language analysis of software artifacts;textual analysis;software evolution;software engineering tools","Natural languages;Conferences;Software engineering;Educational institutions;Software maintenance;Data mining","","","","4","IEEE","26 Sep 2013","","","IEEE","IEEE Conferences"
"On Gender, Ethnicity, and Culture in Empirical Software Engineering Research","L. Gren","The Department of Computer Science and Engineering, The University of Gothenburg, Gothenburg, Sweden",2018 IEEE/ACM 11th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"26 Aug 2018","2018","","","77","78","This note highlights the importance of investigating diversity aspects in combination in empirical research. It draws on the psychological discourse and suggests why and how software engineering scholars can use the aspect of diversity in all their research endeavors.","2574-1837","978-1-4503-5725-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445541","external validity;empirical software engineering;intersectionality","Software engineering;Psychology;Sociology;Statistics;Cultural differences;Europe;Software","","","","13","","26 Aug 2018","","","IEEE","IEEE Conferences"
"About software engineering frameworks and methodologies","E. Mnkandla","Department of Business Information Technology, University of Johannesburg, Johannesburg, South Africa",AFRICON 2009,"3 Nov 2009","2009","","","1","5","Defining software engineering can be a rather challenging task depending on the purpose of the definition and the intended beneficiaries. Talking about frameworks and methodologies in software engineering can be even more complex under whatever circumstances due to the many different ways in which the issues concerning frameworks, processes, approaches and methodologies have been handled. This paper explores software engineering frameworks and methodologies and related topics. The purpose of this study is to add further understanding in the area of software engineering frameworks and methodologies. Data from published literature is analysed to establish a position on the status of software engineering frameworks and methodologies. The fundamental questions to consider here are; what kind of benefits can be derived from a better understanding of these issues? Would a better understanding of frameworks and methodologies improve the way we design, develop, implement, maintain and use information systems?","2153-0033","978-1-4244-3918-8","10.1109/AFRCON.2009.5308117","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5308117","Software engineering;frameworks;methodologies;models;software development","Software engineering;Software maintenance;Design engineering;Humans;Systems engineering and theory;Hardware;Software design;Maintenance engineering;Programming;Software systems","","19","","25","IEEE","3 Nov 2009","","","IEEE","IEEE Conferences"
"Towards Greener Software Engineering Using Software Analytics: A Systematic Mapping","H. Anwar; D. Pfahl","Institute of computer science, University of Tartu, Tartu, Estonia; Institute of computer science, University of Tartu, Tartu, Estonia",2017 43rd Euromicro Conference on Software Engineering and Advanced Applications (SEAA),"28 Sep 2017","2017","","","157","166","Sustainability in software engineering is a relatively new and fast growing field of research. Green software engineering aims to produce sustainable software products with minimum negative impact on the environment. In order to make greener software products, software practitioners need actionable timely information, to make useful trade-offs between energy efficiency and other quality attributes, like performance, during development. Software analytics could be used to provide this support, as it combines information from different software artifacts and converts it into useful information. The objective of this paper is to provide an overview of the sub-domains, contribution types, research types, research methods, future research potentials and the role of software analytics in the field of green software engineering in 2015-16. We applied the systematic mapping method and conducted a search for studies in six online databases. Screening of papers was done according to inclusion/exclusion criteria and 50 selected studies were classified after analysis and data extraction. We found that there are many validation studies but hardly any evaluation and experience papers in the domain of green software engineering. Only 11 out of 50 papers in the green software engineering domain used software analytics techniques to foster green software engineering. Our results indicate the need to develop new/improved automated software analytics tools for software practitioners along with metrics explaining the correlation between energy usage and other quality attributes.","","978-1-5386-2141-7","10.1109/SEAA.2017.56","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8051343","systematic mapping;sustainability;green software engineering;software analytics","Software engineering;Software;Green products;Systematics;Sustainable development;Energy efficiency;Measurement","","11","","35","IEEE","28 Sep 2017","","","IEEE","IEEE Conferences"
"Yesterday, Today, and Tomorrow: 50 Years of Software Engineering","M. Broy",Technische Universität München,IEEE Software,"27 Sep 2018","2018","35","5","38","43","In 2018, we’re now 50 years after the famous groundbreaking conference on software engineering in Garmisch, organized by its chairman F.L. Bauer and his cochairs L. Bolliet and H.J. Helms. This conference introduced the notion and discipline of software engineering. This is a moment to look back at what we’ve achieved, what we haven’t achieved, where we are today, and what challenges lie ahead. This article is part of a theme issue on software engineering’s 50th anniversary.","1937-4194","","10.1109/MS.2018.290111138","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8409912","software engineering;software development;history of software engineering","Software engineering;Programming;Computer architecture;Computer languages;Software systems","","4","","11","IEEE","11 Jul 2018","","","IEEE","IEEE Magazines"
"ISO/IEC/IEEE International Standard - Software and systems engineering --Software testing --Part 1:General concepts","",,ISO/IEC/IEEE 29119-1:2022(E),"31 Jan 2022","2022","","","1","60","This document specifies general concepts in software testing and presents key concepts for the ISO/IEC/IEEE 29119 series.","","978-1-5044-8251-6","10.1109/IEEESTD.2022.9698145","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9698145","","IEEE  Standards;IEC Standards;ISO Standards;Software engineering;Systems analysis and design;Software testing","","2","","","","31 Jan 2022","","","IEEE","IEEE Standards"
"Incorporating Real Projects Into a Software Engineering Undergraduate Curriculum","R. Chanin; J. Melegati; A. Sales; M. Detoni; X. Wang; R. Prikladnicki",School Of Technology PUCRS; Faculty of Computer Science Free University of Bozen-Bolzano; School Of Technology PUCRS; School Of Technology PUCRS; Faculty of Computer Science Free University of Bozen-Bolzano; School Of Technology PUCRS,2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"19 Aug 2019","2019","","","250","251","Software engineering researchers and practitioners are increasingly more concerned about non-technical issues like user involvement and interaction as a way to improve software development process efficiency. This issue is also present in software engineering education. The IEEE/ACM software engineering guidelines highlights that an undergraduate course in this matter should have a real-world basis. In this paper, we present an undergraduate program that connect students with real-world projects throughout their studies. To evaluate educational results, we performed a survey with 111 students from this software engineering program. The results indicate that students in the end of this program has a much better chance of taking users' desires into consideration instead of focusing on software implementation.","2574-1934","978-1-7281-1764-5","10.1109/ICSE-Companion.2019.00099","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8802846","software engineering;software engineering education;real-world projects","Software engineering;Software;Guidelines;Focusing;Logistics;Testing;Encoding","","2","","5","IEEE","19 Aug 2019","","","IEEE","IEEE Conferences"
"GitHub-OSS Fixit: Fixing Bugs at Scale in a Software Engineering Course","S. H. Tan; C. Hu; Z. Li; X. Zhang; Y. Zhou","Department of Computer Science and Engineering, Southern University of Science and Technology, Shenzhen, China; Department of Computer Science and Engineering, Southern University of Science and Technology, Shenzhen, China; Department of Computer Science and Engineering, Southern University of Science and Technology, Shenzhen, China; Department of Computer Science and Engineering, Southern University of Science and Technology, Shenzhen, China; Department of Computer Science and Engineering, Southern University of Science and Technology, Shenzhen, China",2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"7 May 2021","2021","","","1","10","Many studies have shown the benefits of introducing open-source projects into teaching Software Engineering (SE) courses. However, there are several limitations of existing studies that limit the wide adaptation of open-source projects in a classroom setting, including (1) the selected project is limited to one particular project, (2) most studies only investigated on its effect on teaching a specific SE concept, and (3) students may make mistakes in their contribution which leads to poor quality code. Meanwhile, software companies have successfully launched programs like Google Summer of Code (GSoC) and FindBugs ""fixit"" to contribute to open-source projects. Inspired by the success of these programs, we propose GitHub-OSS Fixit, a team-based course project where students are taught to contribute to open-source Java projects by fixing bugs reported in GitHub. We described our course outline to teach students SE concepts by encouraging the usages of several automated program analysis tools. We also included the carefully designed instructions that we gave to students for participating in GitHub-OSS Fixit. As all lectures and labs are conducted online, we think that our course design could help in guiding future online SE courses. Overall, our survey results show that students think that GitHub-OSS Fixit could help them to improve many skills and apply the knowledge taught in class. In total, 154 students have submitted 214 pull requests to 24 different Java projects, in which 93 of them have been merged, and 46 have been closed by developers.","","978-1-6654-0138-8","10.1109/ICSE-SEET52601.2021.00009","Natural Science Foundation of Guangdong Province; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9402190","Open-source software;program repair;software engineering","Training;Java;Computer bugs;Tools;Open source software;Software engineering;Software development management","","5","","40","IEEE","7 May 2021","","","IEEE","IEEE Conferences"
"A Graduate Program on Embedded Software Engineering in China","K. Yimei","Software College, BeiHang University, Beijing, China",20th Conference on Software Engineering Education & Training (CSEET'07),"16 Jul 2007","2007","","","3","10","Software has become a key component of embedded systems as more and more complex embedded systems have been developed. Currently most embedded system developers in China are graduated from electronics, mechanics, automatic control and other majors. These developers are familiar with the application fields, but unfamiliar with systematic development process, method and management of software project. Moreover, the embedded software development is different from general software development. To provide more qualified software developers for embedded systems, we have founded a graduate program in embedded software engineering (ESE), which combines the embedded system development and software engineering (SE), with emphasis in state-of-art embedded software development methods and techniques. In this program, we teach students complex software analysis and design, construction and test. To name a few, students enrolled in this program learn (1) how to apply software architectures and software design patterns to embedded systems, (2) how to manage a large and complex software project, (3) Co-develop hardware and software, etc. This program includes a series of courses and a multilevel practice model. Some courses are provided by industries. The practice model includes four levels. In the fourth practice level, students will finish a complete project in industries under the project manager's instruction. They not only learn techniques and put into practice on embedded software development, but also experience the industry cultures. This 2-5 years graduate program is to train graduates to be well qualified for embedded software development positions in software industry.","2377-570X","0-7695-2893-7","10.1109/CSEET.2007.7","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4271584","","Embedded software;Embedded system;Project management;Software design;Computer industry;Automatic control;Application software;Software development management;Programming;Software engineering","","4","","4","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"Teaching Global Software Engineering in a Remote Customer Environment","R. Vallon; P. Spiesberger; M. Zoffi; C. Zrelski; C. Dräger; T. Grechenig","Research Group for Industrial Software, Vienna University of Technology; Research Group for Industrial Software, Vienna University of Technology; Research Group for Industrial Software, Vienna University of Technology; Research Group for Industrial Software, Vienna University of Technology; Research Group for Industrial Software, Vienna University of Technology; Research Group for Industrial Software, Vienna University of Technology",2018 IEEE 10th International Conference on Engineering Education (ICEED),"27 Jan 2019","2018","","","63","68","Global software engineering environments feature a remote customer in many of today's software engineering projects. We developed a university course design to better match these real-world conditions with developer teams comprised of European students and customer teams comprised of Indian students. Our distributed student teams were asked to autonomously find the best way to overcome the three big challenges in global software engineering, communication, cooperation and coordination, and establish a working relationship between developer team and customer team. Key findings include that language difficulties and cultural differences were among the hardest challenges to overcome. Post-course feedback was very positive, as both European and Indian students highly valued the realistic learning experience, even though Indian students noted that they would prefer to be on the development team.","","978-1-5386-6847-4","10.1109/ICEED.2018.8626985","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8626985","Engineering Education;ICT;ICT4D;Global Software Engineering;Distributed Software Engineering;Remote Customer","Europe;Software;Software engineering;Education;Cultural differences;Collaboration;Interviews","","7","","11","IEEE","27 Jan 2019","","","IEEE","IEEE Conferences"
"Analyzing Software Engineering Experiments: Everything You Always Wanted to Know but Were Afraid to Ask","N. Juristo; S. Vegas","Escuela Tecnica Superior de Ingenieros Infomnaticos, Universidad Politecnica de Madrid, Spain; M-Group Department of Information Processing Science, University of Oulu, Finland",2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C),"23 Mar 2017","2016","","","900","901","Experimentation is a key issue in science and engineering. But it is one of software engineering's stumbling blocks. Quite a lot of experiments are run nowadays, but it is a risky business. Software engineering has some special features, leading to some experimentation issues being conceived of differently than in other disciplines. The aim of this technical briefing is to help participants to avoid common pitfalls when analyzing the results of software engineering experiments. The technical briefing is not intended as a data analysis course, because there is already plenty of literature on this subject. It reviews several issues that we have identified in published SE experiments.","","978-1-4503-4205-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883435","Software Engineering experimentation;controlled experiments;analysis of experiments","Software engineering;Psychology;Data analysis;Software;Medical services;Conferences;Tutorials","","","","4","","23 Mar 2017","","","IEEE","IEEE Conferences"
"Software engineering education should be presented as: A. Science B. Engineering C. Technology D. All of the above E. None of the above, other","J. E. Diaz-Herrera; T. Hilburn; G. Hislop; M. Lutz; P. E. MacNeil; M. McCracken","School of Computing and Software Engineering, Southern Polytechnic State University, Marietta, GA, USA; Computer Science, Embrey-Riddle Aeronautical University, Daytona Beach, FL, USA; Drexel University, Philadelphia, PA, USA; Rochester Institute of Technology, Rochester, NY, USA; College of Engineering, Mercer University, Atlanta, GA, USA; College of Computing, Georgia Institute of Technology, Atlanta, GA, USA",31st Annual Frontiers in Education Conference. Impact on Engineering and Science Education. Conference Proceedings (Cat. No.01CH37193),"6 Aug 2002","2001","1","","T3D","T31 vol.1","For many, the software engineering profession is still viewed as immature. The authors contend that a major problem has to do with the current educational model(s) for software. Most computer science graduates pursue careers in software development/software engineering. Only recently, a few B.S. in Software Engineering programs began their existence. Analyses of several of these programs reveal a lack of coherent design. Some are housed in an engineering school and have the 'flavor' of engineering but lack enough emphasis on software engineering core. Some are housed on traditional CS departments, have a strong CS component with a few SwE courses, and no engineering focus. What is the right ""mix""? Which of the existing BSSwE programs can be accredited? What educational model will most likely help produce a professional software engineer? Science? Engineering? Technology? This paper addresses these and other related topics and controversial issues.","0190-5848","0-7803-6669-7","10.1109/FIE.2001.963916","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=963916","","Software engineering;Educational technology;Educational programs;Programming;Computer science;Engineering profession;Educational institutions;Accreditation;Engineering education;Business","","","","4","IEEE","6 Aug 2002","","","IEEE","IEEE Conferences"
"Software Engineering Education for Technical Engineering Degrees: A Comparison With the Needs of Robotics Software Engineering Education","M. Daun","Technical University of Applied Sciences Würzburg-Schweinfurt, Schweinfurt, Germany",IEEE Software,"1 Dec 2023","2023","40","6","40","46","We compare software engineering education for traditional computer science and software engineering degree programs with the needs of robotics software engineering, concluding that technical engineering degrees need to emphasize social aspects of software engineering, group work, and weigh advantages and disadvantages between different solution options.","1937-4194","","10.1109/MS.2023.3291655","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10175045","","Software engineering;Robots;Education;Knowledge engineering;Programming profession;Electrical engineering;Computer science education","","","","15","IEEE","6 Jul 2023","","","IEEE","IEEE Magazines"
"IEEE/ISO/IEC International Standard - Software and systems engineering--Software testing--Part 4: Test techniques","",,ISO/IEC/IEEE 29119-4:2021(E),"27 Oct 2021","2021","","","1","148","The purpose of this part of ISO/IEC/IEEE 29119 is to provide an International Standard that defines software test design techniques (also known as test case design techniques or test methods) that can be used within the test design and implementation process that is defined in ISO/IEC/IEEE 29119-2. This part of ISO/IEC/IEEE 29119 does not describe a process for test design and implementation; instead, it describes a set of techniques that can be used within the test design and implementation process defined in ISO/IEC/IEEE 29119-2. The intent is to describe a series of techniques that have wide acceptance in the software testing industry. The test design techniques presented in this part of ISO/IEC/IEEE 29119 can be used to derive test cases that, when executed, generate evidence that test item requirements have been met or that defects are present in a test item (i.e. that requirements have not been met). Risk-based testing could be used to determine the set of techniques that are applicable in specific (risk-based testing is covered in ISO/IEC/IEEE 29119-1 and ISO/IEC/IEEE 29119-2).","","978-1-5044-7982-0","10.1109/IEEESTD.2021.9591574","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9591574","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software testing;System analysis and design","","","","","","27 Oct 2021","","","IEEE","IEEE Standards"
"IEEE/ISO/IEC International Standard - Software and systems engineering--Software testing--Part 4: Test techniques - Redline","",,ISO/IEC/IEEE 29119-4:2021(E) - Redline,"24 Dec 2021","2021","","","1","286","The purpose of this part of ISO/IEC/IEEE 29119 is to provide an International Standard that defines software test design techniques (also known as test case design techniques or test methods) that can be used within the test design and implementation process that is defined in ISO/IEC/IEEE 29119-2. This part of ISO/IEC/IEEE 29119 does not describe a process for test design and implementation; instead, it describes a set of techniques that can be used within the test design and implementation process defined in ISO/IEC/IEEE 29119-2. The intent is to describe a series of techniques that have wide acceptance in the software testing industry. The test design techniques presented in this part of ISO/IEC/IEEE 29119 can be used to derive test cases that, when executed, generate evidence that test item requirements have been met or that defects are present in a test item (i.e. that requirements have not been met). Risk-based testing could be used to determine the set of techniques that are applicable in specific (risk-based testing is covered in ISO/IEC/IEEE 29119-1 and ISO/IEC/IEEE 29119-2).","","978-1-5044-8332-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9663118","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;System analysis and design;Software testing","","","","","","24 Dec 2021","","","IEEE","IEEE Standards"
"Application of Software Engineering Technology in System Software Development","C. Zhao; Y. Wang; J. Jiang","School of Information Science and Technology, Dalian University of Science and Technology, Dalian, China; School of Information Science and Technology, Dalian University of Science and Technology, Dalian, China; School of Information Science and Technology, Dalian University of Science and Technology, Dalian, China","2023 Asia-Europe Conference on Electronics, Data Processing and Informatics (ACEDPI)","26 Jun 2023","2023","","","502","506","For system software development, software engineering technology is not only the key advantage of system software development, but also the inevitable demand for the professional development of system software development in the new era. It can effectively solve various problems in the process of software development and further improve the quality and efficiency of system software. Therefore, it is very valuable to study and analyze the application and effect of software engineering technology in the process of system software development. Based on this, this paper studies the application strategy of software engineering technology in the system software development process for reference.","","979-8-3503-0115-1","10.1109/ACEDPI58926.2023.00101","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10158172","software engineering;software development;key points of application","Data processing;Data models;System software;Informatics;Consumer electronics;Software engineering;Software development management","","","","10","IEEE","26 Jun 2023","","","IEEE","IEEE Conferences"
"Architecture-Centric Quality Engineering form Software Product Lines","R. Kolb; D. Muthig","Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany",10th International Software Product Line Conference (SPLC'06),"11 Sep 2006","2006","","","226","226","The product line approach to software development is based on the systematic, large-scale reuse of development artifacts such as architecture, design, and components between a set of functional similar products. It promises, among others, to shorten the development time of software systems and to significantly reduce development and maintenance costs. In order to achieve the promised improvements, however, the components and artifacts intended for reuse must be of high quality. Therefore, more than for traditional software development, quality engineering (i.e., constructive and analytical activities performed to assure the quality of development artifacts and end products) becomes a very crucial part of every software product line effort. Even though quality engineering","","0-7695-2599-7","10.1109/SPLINE.2006.1691608","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1691608","","Software quality;Computer architecture;Software performance;Quality assurance;Programming;Software systems;Software reusability;Software engineering;Large-scale systems;Costs","","1","","","IEEE","11 Sep 2006","","","IEEE","IEEE Conferences"
"Customization of requirement engineering best practices for Pakistan software industry","M. Q. Riaz; Fateh-ur-Rehman; B. Maqbool; W. H. Butt","National University of Sciences and Technology, Islamabad, PK; National University of Sciences and Technology, Islamabad, PK; National University of Sciences and Technology, Islamabad, PK; National University of Sciences and Technology, Islamabad, PK","2018 International Conference on Computing, Mathematics and Engineering Technologies (iCoMET)","26 Apr 2018","2018","","","1","6","Software development is one of the fastest growing industry in this era. Even the developing countries like Pakistan are examining a rapid growth in this sector. Almost every software development organization in the world follows the Software Development Life Cycle (SDLC). Requirement engineering is the primary and most important part of the whole development process. Use of actual requirement engineering practices is a key factor for the success of projects. In this paper, our team focused on the customized requirement engineering practices followed by the software development organization of Pakistan. The study is conducted by collecting the data from different software industries. Then we analyzed the data by using statistical software like SPSS and Minitab. The information developed by carrying out this study will be useful for all participants in the local and global software industry, including IT professionals, IT project managers and Pakistan Software Export Board.","","978-1-5386-1370-2","10.1109/ICOMET.2018.8346347","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8346347","Requirement Engineering (RE);Requirement Engineering Process;Requirement Engineering Practices;Requirement Engineering Models;Customization in Requirement Engineering;Requirement Engineering in Pakistan","Requirements engineering;Software;Companies;Computational modeling;Mathematical model;Industries","","7","","25","IEEE","26 Apr 2018","","","IEEE","IEEE Conferences"
"A software system family: Learning from simple data processing to knowledge management system of research","I. Liem; T. Semiawan; A. Chandra; Suprihanto","Data and Software Engineering Research Group, School of Electrical Engineering and Informatics ITB, Bandung, Indonesia; Department of Computer Engineering and Informatics, Bandung State Polytechnics, Bandung; Department of Computer Engineering and Informatics, Bandung State Polytechnics, Bandung; Department of Computer Engineering and Informatics, Bandung State Polytechnics, Bandung",2015 7th International Conference on Information Technology and Electrical Engineering (ICITEE),"18 Feb 2016","2015","","","24","28","In this paper, we propose a series of applications that represent a system family for processing Research Data. The whole system is a model of complete data flow of ""research"", from data capturing, processing, until intelligent data analysis. Data engineering, Software Engineering, Domain Engineering and Ontology Engineering are used for the development of the system. We also described tools and technologies to be used in building the system. The prototype of a small scale system has been built as a proof of concept of this family of system, for the domain of ""Research"" in Indonesian context. The aim of building this prototype are: (a) to provide an architectural description prototype of a knowledge repository where Indonesian Context Research as a central domain (b) to comprehend a software engineering for software system family.","","978-1-4673-7863-5","10.1109/ICITEED.2015.7408906","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7408906","data engineering;software engineering;domain engineering;ontology engineering;software architecture","Ontologies;Software;Data models;Unified modeling language;Prototypes;Software engineering;Information systems","","","","15","IEEE","18 Feb 2016","","","IEEE","IEEE Conferences"
"Influencing the adoption of software engineering methods using social software","L. Singer; K. Schneider","Software Engineering Group, Leibniz Universität Hannover, Hanover, Germany; Software Engineering Group, Leibniz Universität Hannover, Hanover, Germany",2012 34th International Conference on Software Engineering (ICSE),"28 Jun 2012","2012","","","1325","1328","Software engineering research and practice provide a wealth of methods that improve the quality of software and lower the costs of producing it. Even though processes mandate their use, methods are not employed consequently. Software developers and development organizations thus cannot fully benefit from these methods. We propose a method that, for a given software engineering method, provides instructions on how to improve its adoption using social software. This employs the intrinsic motivation of software developers rather than prescribing behavior. As a result, we believe that software engineering methods will be applied better and more frequently.","1558-1225","978-1-4673-1067-3","10.1109/ICSE.2012.6227088","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6227088","Social Software;Motivation;Adoption;Process;Virtual Communities;CSCW;Social Network Sites","Software;Software engineering;Measurement;Social network services;Systematics;Crystals;Media","","13","","16","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"Integrating Software Engineering Process in an Undergraduate Curriculum","M. J. Sebern; T. B. Hilburn","Milwaukee School of Engineering, USA; Embrey-Riddle Aeronautical University, USA",18th Conference on Software Engineering Education & Training (CSEET'05),"8 Dec 2008","2005","","","245","248","This tutorial is intended to assist faculty members and administrators who are designing or modifying undergraduate software engineering curricula, and who wish to learn about alternative approaches to incorporating software engineering process. Curricular recommendations developed by the Joint Task Force on Computing Curricula, formed by the IEEE Computer Society and the Association for Computing Machinery, provide a context for this discussion. The applicability of the Personal Software Process (PSP) and the Team Software Process (TSP), developed by the Software Engineering Institute, is also considered. Experienced software engineering educators may benefit from the presentations, hands-on exercises, and group discussions, but the tutorial is designed primarily for educators with less experience in software engineering curriculum development","2377-570X","0-7695-2324-2","10.1109/CSEET.2005.23","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4698931","","Software engineering;Software quality;Design engineering;Computer Society;Machinery;Educational programs;Computer science education;Engineering management;Guidelines;Collaborative software","","2","","17","IEEE","8 Dec 2008","","","IEEE","IEEE Conferences"
"Investigation on Complex Networks in Software Engineering","R. Xu; X. Zhu; D. Qi; W. Huang; W. Liu; S. Ming; A. Huang","State Key Laboratory of Software Engineering, Wuhan University of China, Wuhan, China; State Key Laboratory of Software Engineering, Wuhan University of China, Wuhan, China; State Key Laboratory of Software Engineering, Wuhan University of China, Wuhan, China; State Key Laboratory of Software Engineering, Wuhan University of China, Wuhan, China; State Key Laboratory of Software Engineering, Wuhan University of China, Wuhan, China; State Key Laboratory of Software Engineering, Wuhan University of China, Wuhan, China; GuangXi University for Nationalities, Nanning, China",2006 IEEE International Conference on Management of Innovation and Technology,"26 Dec 2006","2006","1","","532","534","According to the statistic data reported by a famous international investigation company, the successful rate of large projects in software engineering is lower down sixteen percent. In the field of software engineering, human has proposed a huge number of ideas, theories, and methods since the technical term ""software engineering"" appeared. And new idea, theory and method are keeping increasing.. But, to compare with other one, why software engineering has so lowest successful rate? Many outstanding researches, engineers strive half century more for it in this field, and the situation is still very dejected radically. In this paper, we attempt to analyze some causes by discussing the complex network theory. And then, we try to seek for some solution ways to raise the project successful rate in software engineering. The complex network theory is developed in recent years, it studies so called `small world phenomenon"", and includes many interesting research results. And after our studies, we found there are many complex networks in a software project developing process, and at the same time, they can explain by using the research results in the field of complex networks. We discover that many complex networks in a software engineering process are independent, not connected among them, and not communicated by each other. For instances, software version management, software development schedule management, finance management, manpower management, and so on.","","1-4244-0147-X","10.1109/ICMIT.2006.262238","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4035892","small world phenomenon;complex network;software engineering;successful rate","Complex networks;Software engineering;Financial management;Software development management;Humans;Statistics;Programming;Finance;Brain modeling;Neurons","","","","11","IEEE","26 Dec 2006","","","IEEE","IEEE Conferences"
"Teaching software engineering with projects","J. Ludewig; I. Bogicevic","Institute for Software Technology, University of Stuttgart, Germany; Institute for Software Technology, University of Stuttgart, Germany",2012 First International Workshop on Software Engineering Education Based on Real-World Experiences (EduRex),"28 Jun 2012","2012","","","25","28","The software engineering curriculum offered by the University of Stuttgart emphasizes project work from the first to the last semester. While some of the projects are similar to those in other programs, others are less common. In this paper, we describe an introductory course called “Program Understanding”, and the so called “Consulting Task”. We also give a short description of what we call the First Software Project and the Large Software Project. In the Program Understanding course, new students learn to understand a fairly large, complex program in order to implement some modifications. In the Large Software Project, some ten people work on a serious software development for one year. In the Consulting Task, a group of three students analyses a problem, usually one given by an industrial partner. The students investigate possible solutions, and finally deliver a recommendation. Both our experience and feedback from students, including feedback from alumni, prove that these projects are very successful and highly esteemed.","","978-1-4673-1805-1","10.1109/EduRex.2012.6225701","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6225701","software projects;Program Understanding;Consulting Task;software engineering curriculum","Software;Software engineering;Educational institutions;Programming;Industries;Companies;Java","","9","","4","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"The Biological Half-Life of Software Engineering Ideas","P. Kruchten","University of British Columbia, Vancouver",IEEE Software,"19 Aug 2008","2008","25","5","10","11","The first installment of this new column on professional development discusses how some software engineering ideas have a half-life. The author conjectures that this half-life is roughly five years, and outlines the need for software engineers to thus stay abreast of new technologies.","1937-4194","","10.1109/MS.2008.127","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4602666","software engineering;software careers;professional development","Software engineering;Programming;Books;Software architecture;Software standards;Computer science education;Certification;Accreditation;Engineering profession;Biology computing","","6","","","IEEE","19 Aug 2008","","","IEEE","IEEE Magazines"
"Work in Progress: Towards an Academic Secure Software Engineering Curriculum for Engineers","S. Jahn; J. Mottok","Ostbayerische Technische Hochschule Regensburg, Regensburg, Germany; Ostbayerische Technische Hochschule Regensburg, Regensburg, Germany",2020 IEEE Global Engineering Education Conference (EDUCON),"25 Jun 2020","2020","","","1713","1717","In the age of the Internet of Things, it is becoming increasingly important to integrate knowledge about the development of secure systems (Secure Software Engineering) into academic teaching. However, teaching IT Security and Secure Software Engineering to non-computer scientists is rare. Therefore, we focus our research on the integration of IT Security into software engineering education of non-computer scientists, particularly electrical engineers, by means of inductive teaching- and learning-arrangements. After collecting students’ preconceptions of IT Security and Secure Software Engineering in prior work, this paper now contributes with a first mapping of these preconceptions with corresponding learning content as well as suitable inductive teaching methods to be able to create new lecture and exercise units and improve academic learning and teaching in both areas.","2165-9567","978-1-7281-0930-5","10.1109/EDUCON45650.2020.9125210","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9125210","IT Security;secure software engineering;academic education;engineering curriculum","Knowledge engineering;Conferences;Software;Security;Internet of Things;Engineering education;Software engineering","","1","","15","IEEE","25 Jun 2020","","","IEEE","IEEE Conferences"
"First International Workshop on Quantitative Methods in Software Product Line Engineering","S. Abrahao; A. J. Nolan; P. C. Clements; J. D. McGregor","Dept of Computer Science Universidad Politécnica de Valencia, Valencia, Spain; Rolls- Royce SIN C-3, Rolls-Royce plc, Derby, England; Software Engineering Institute Carnegie-Mellon University, Pittsburgh, PA, USA; Dept of Computer Science Clemson University, Clemson, USA",2011 15th International Software Product Line Conference,"29 Sep 2011","2011","","","341","341","The objective of this workshop is to bring together researchers and practitioners to report and discuss the challenges and opportunities for integrating quantitative methods in product line engineering with the objective of achieving both technical and business goals. In particular, we are seeking contributions that, on the one hand, deal with product line estimation and metrics for the effective management of product line projects, and on the other hand, provide some insight into new trends in value-based product line engineering.","","978-1-4577-1029-2","10.1109/SPLC.2011.12","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6030081","Quantitative Methods;Software Product Lines;PL Estimation and Metrics;Value-based Product Line Engineering","Software;Conferences;Organizations;Estimation;Software engineering;Measurement","","","","3","IEEE","29 Sep 2011","","","IEEE","IEEE Conferences"
"Exploration of ability development of engineering and computational thinking skills in software engineering majors","Z. Deng; W. Huang; R. Dong; P. Wen","School of Computer Science and Control, Guilin University of Electronic Technology, China; School of Computer Science and Control, Guilin University of Electronic Technology, China; School of Computer Science and Control, Guilin University of Electronic Technology, China; School of Computer Science and Control, Guilin University of Electronic Technology, China",2009 4th International Conference on Computer Science & Education,"1 Sep 2009","2009","","","1665","1668","Software talents should have the engineering ability, a common sense in IT industry, which is characterized by the fact that design plays a very important role in software engineering. Basis on the enhancement of computational thinking, the reform ideas of the development of the student's engineering ability are introduced. The detailed approaches include: 1) Extraction of fundamental discipline concept of engineering ability development; 2) Problem solving-centered organization of courses of software development tools; 3) Initiate the courses of software engineering as soon as possible; 4) Continual training of abstract logical thinking for the purpose of software abstract thinking.","","978-1-4244-3520-3","10.1109/ICCSE.2009.5228288","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5228288","software engineering;Computational thinking;design;abstract","Software engineering;Software systems;Design engineering;Programming;Computer science;Computer science education;Application software;Engineering management;Educational technology;Computer industry","","1","","7","IEEE","1 Sep 2009","","","IEEE","IEEE Conferences"
"The classification and cultivating software engineers","Chunting Yang","School of Information and Electronic Engineering, Zhejiang University of Science and Technology, Hangzhou, China",2010 International Conference on Artificial Intelligence and Education (ICAIE),"18 Nov 2010","2010","","","560","563","Recent years, lack of excellent software engineers has been the bottleneck of China's software industry development. In contrast, every year a large number of graduates are difficult to find a relevant job. These indicate there is a great gap between our graduates and the requirements of enterprises. In this paper, demand for software engineers is analyzed and the results indicate that the demand shows the complexity and diversity. Then we have proposed the software engineer should be classifieds into analysis-oriented engineers, design-oriented engineers, program-oriented engineers, testing-oriented engineers, service-oriented engineers and management-oriented engineers. Frequently different requirements about knowledge, capacity and characteristics are discussed. And the cultivating objectives, pattern and process of different universities are proposed.","","978-1-4244-6936-9","10.1109/ICAIE.2010.5641099","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5641099","Excellent software engineer;Software engineering education;Classification of software engineers","Software;Modems;Lead;Estimation;Software reliability;Personnel;Education","","","","6","IEEE","18 Nov 2010","","","IEEE","IEEE Conferences"
"IEEE Draft Standard for Software and Systems Engineering--Software Testing--Part 4: Test Techniques","",,"ISO/IEC/IEEE P29119-4-CD3, September 2012","13 Sep 2012","2012","","","1","146","This part of ISO/IEC 29119 defines software testing techniques that can be used by any organization, project or smaller testing activity. The test techniques in this International Standard are used to derive the test cases executed as part of the dynamic testing process specified in part two of this standard. This International Standard is applicable to the testing in all software development lifecycle models. This document is intended for, but not limited to, testers, test managers, developers, project managers, particularly those responsible for governing, managing and implementing software testing.","","978-0-7381-7448-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6302146","","IEEE standards;Software engineering;Software testing","","","","","","13 Sep 2012","","","IEEE","IEEE Standards"
"IEEE Draft Standard for Software and Systems Engineering--Software Testing--Part 2: Test Process","",,"IEEE/ISO/IEC P29119-2-DIS, December 2011","20 Feb 2012","2012","","","1","58","This standard covers software testing processes, for use by any organization, project or smaller testing activity (e.g. a maintenance testing activity). Testing processes (both prescriptive and exploratory), that support all software development lifecycle models, including (but not limited to) waterfall, spiral and agile models of development are supported by this standard.This part, ISO/IEC 29119-2 Test Process, comprises test process descriptions and diagrams that define the software testing processes for use by any organization, project, team or individual. It is assumed that configuration management of all assets required for testing, including testware, is handled by a separate (parallel) process. Therefore, it is not within the scope of this standard.","","978-0-7381-7450-1","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6155568","","IEEE standards;Software testing;Software engineering","","","","","","20 Feb 2012","","","IEEE","IEEE Standards"
"A framework of software reusing engineering management","T. Xin; L. Yang","Dept. of System Design, Technology and Engineering Center for Space Utilization, Beijing, CAS, China; Dept. of System Design, Technology and Engineering Center for Space Utilization, Beijing, CAS, China","2017 IEEE 15th International Conference on Software Engineering Research, Management and Applications (SERA)","3 Jul 2017","2017","","","277","282","As the cost of software development rises, software reuse has been overly successful in controlling the time and expenses to date. However, it is difficult to catch the essential of reusing management. In fact, there are a lot of factors and approaches must be considered in software reuse process, so it is important to strengthen key point management in software reusing. In order to manage software reusing process effectively, this paper provides a framework of software reusing engineering management. The framework shows us how to choose types of reuse process and what to do in reuse process management. This paper will discuss four types of software reusing, and show how to analyze reusing feasibility. Then, different types will be related to different reusing management processes and key points. Besides, this paper will also illustrate a case study. The case indicates that the framework could take advantage of reusing factors and approaches together, and give reasonable processes in each type of software reusing engineering management. In addition, key point management plays a crucial role in software reusing. As a summary, the advantages of this framework and the future research will be discussed.","","978-1-5090-5756-6","10.1109/SERA.2017.7965738","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7965738","Software Reusing;Software Reusability;Software Engineering Management","Software reliability;Companies;Software reusability;Safety;Software systems","","3","","14","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"Developing critical computer literacy for academic subjects ‘English for Software Engineering’ and ‘Expert Systems’ at the Department of Software Engineering University of Belgrade","M. D. Burić; D. Drašković","Univerzitet u Beogradu, Beograd, Beograd, RS; Faculty of Electrical Engineering, University of Belgrade, Belgrade, Serbia",2011 19thTelecommunications Forum (TELFOR) Proceedings of Papers,"2 Feb 2012","2011","","","1466","1469","Students at the Department of Software Engineering spend copious amounts of their time using computers both for studying by means of the Internet and for leisure. Having spent much time within the complex multimedia environment and being intimately familiar with software tools, our Software Engineering students meet new challenges in the form of critical computer literacy. In this paper we present the principles behind our decision to introduce critical computer literacy skills, their aims and the actual implementation in the domain of two academic subjects: English for Software Engineering and Expert Systems for students at the Department of Software Engineering.","","978-1-4577-1498-6","10.1109/TELFOR.2011.6143833","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6143833","English for Software Engineering;Expert Systems;Multimedia;Software Tools;Critical Computer Literacy;Department of Software Engineering University of Belgrade;Computer-Assisted Learning","Software engineering;Expert systems;Computers;Multimedia communication;Software tools;Educational institutions;Electrical engineering","","","","9","IEEE","2 Feb 2012","","","IEEE","IEEE Conferences"
"Second International Workshop on Software Architecture and Metrics (SAM 2015)","I. Ozkaya; R. L. Nord; H. Koziolek; P. Avgeriou","Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA; Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA; ABB Corporate Research, Ladenburg, Germany; University of Groningen, Groningen, NL",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","999","1000","Software engineers and architects of complex software systems need to balance hard quality attribute requirements while at the same time manage risks and make decisions with a system-wide and long-lasting impact. To achieve these tasks efficiently, they need quantitative information about design-time and run-time system aspects through usable and quick tools. While there is body of work focusing on code quality and metrics, their applicability at the design and architecture level and at scale are inconsistent and not proven. We are interested in exploring whether architecture can assist with better contextualizing existing system and code quality and metrics approaches. Furthermore, we ask whether we need additional architecture-level metrics to make progress and whether something as complex and subtle as software architecture can be quantified. The goal of this workshop is to discuss progress, gather empirical evidence, and identify priorities for a research agenda on architecture and metrics in the software engineering field.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.346","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203147","Software architecture; metrics; software analytics; technical debt; software quality; software maintenance and evolution; empirical software engineering; qualitative methods","Computer architecture;Conferences;Software architecture;Software;Software measurement","","2","","6","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Getting results from search-based approaches to software engineering","M. Harman; J. Wegener","Brunei University, Middlesex, UK; DaimlerChrysler Aerospace, Berlin, Germany",Proceedings. 26th International Conference on Software Engineering,"26 Jul 2004","2004","","","728","729","Like other engineering disciplines, software engineering is typically concerned with near optimal solutions or those which fall within a specified applicable tolerance. More recently, search-based techniques have started to find application in software engineering problem domains. This area of search-based software engineering has its origins in work on search-based testing, which began in the mid 1990s. Already, search-based solutions have been applied to software engineering problems right through the development life cycle.","0270-5257","0-7695-2163-0","10.1109/ICSE.2004.1317508","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1317508","","Software engineering;Genetic algorithms;Application software;Evolutionary computation;Software testing;Software maintenance;Algorithm design and analysis;Robustness;Constraint optimization;Genetic engineering","","10","","26","IEEE","26 Jul 2004","","","IEEE","IEEE Conferences"
"Work in Progress - Developing the Community of Software Engineering Educators","G. W. Hislop; T. B. Hilburn; M. J. Lutz; M. J. Sebern","College of Information Science and Technology, Drexel University, USA; Department of Computing, Embrey-Riddle Aeronautical University, USA; Department of Software Engineering, Rochester Institute of Technology, USA; Department of Electrical Engineering and Computer Science, Milwaukee School of Engineering",Proceedings Frontiers in Education 35th Annual Conference,"3 Apr 2006","2005","","","T3G","T3G","SWENET, the network community for software engineering education, is an NSF funded project to produce and organize high-quality materials supporting software engineering education. The project supports faculty members delivering software engineering degrees and also individual software engineering courses in other computing degrees. SWENET also seeks to foster the development of the community of software engineering educators. This paper discusses plans to continue this development beyond the period of the initial NSF grant. The paper begins with a summary of the SWENET efforts to create course materials and other SWENET activities. The paper also addresses future directions in developing shared course materials, and creation of permanent resources and mechanisms for interaction among software engineering educators","2377-634X","0-7803-9077-6","10.1109/FIE.2005.1611952","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1611952","Software engineering education;curriculum models;software engineering body of knowledge","Software engineering;Educational programs;Educational technology;Computer science education;Educational institutions;Information science;Computer networks;Materials science and technology;Accreditation;Continuing education","","2","","2","IEEE","3 Apr 2006","","","IEEE","IEEE Conferences"
"Speeding-up software engineering's escape from its pre-paradigmatic stage","I. Exman","Software Engineering Department, The Jerusalem College of Engineering, Jerusalem, Israel",2013 2nd SEMAT Workshop on a General Theory of Software Engineering (GTSE),"30 Sep 2013","2013","","","1","4","Software Engineering has been for at least a decade in a pre-paradigmatic stage, lacking a broadly accepted theoretical basis. But the repeated ritual of novel theories' suggestion, enthusiastic adoption and subsequent decline, does not provide by itself enough thrust to escape the pre-paradigmatic stage. This paper promotes, concomitantly to novel theory proposal, active elimination of mistaken, irrelevant, undesirable notions among previous candidates. Specifically four NOT theorems are stated, justified and explained in the wider software engineering context.","","978-1-4673-6273-3","10.1109/GTSE.2013.6613862","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6613862","Software Engineering;Algebra;Runnable;Abstractions;Meaning;Software Protocols;Pre-Paradigmatic","Software engineering;Software systems;Software algorithms;Protocols;Computer science;Algebra","","3","","24","IEEE","30 Sep 2013","","","IEEE","IEEE Conferences"
"A Product Engineering Approach to Software Development","K. V. Nori; N. Swaminathan","Business Systems & Cybernetics Centre, Tata Consultancy Services, Hyderabad, India; Business Systems & Cybernetics Centre, Tata Consultancy Services, Hyderabad, India",19th Conference on Software Engineering Education and Training Workshops (CSEETW'06),"26 Jun 2006","2006","","","1","1","Software engineering currently takes an activity-oriented view of development. Our approach to achieving qualities is rooted in process engineering: identifying and performing a set of requirements, design and construction activities, with testing to inspect if the desired product has been obtained, and relying on process optimization over time to help us in defining the right set of activities. In contrast, design in other engineering disciplines is centered on product engineering, systematically engineering in desired qualities through successive stages of development. Process engineering is then applied to this conceptually sound fundamental structure to optimize process performance parameters. This paper asserts that software development can and should be grounded in product engineering, and presents a conceptual model that enables a systematic approach to achieving qualities. Key enablers for this are a clear separation of quality concerns and the use of analysis to validate designs. Analysis techniques for software qualities have been available for many years, yet they are not viewed as basic knowledge in Computer Science and Software Engineering curricula. We argue that to put software engineering education on a firm footing, it is necessary to shift our conceptual basis for software development from process engineering to product engineering.","","0-7695-2647-0","10.1109/CSEETW.2006.2","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1644072","","Programming;Acoustical engineering;Design engineering;Software engineering;Systems engineering and theory;Performance evaluation;Testing;Design optimization;Software quality;Computer science","","2","","2","IEEE","26 Jun 2006","","","IEEE","IEEE Conferences"
"A HOT --- Human, Organizational and Technological --- framework for a software engineering course","O. Hazzan; Y. Dubinsky","Department of Education in Technology and Science, Technion-Israel Institute of Technology, Haifa, Israel; IBM Haifa Research Laboratory, Haifa, Israel",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","1","","559","566","In this paper, we present a HOT - Human, Organizational and Technological - framework for software engineering and describe its application in a full one-semester software engineering course on agile software development. We suggest and illustrate how this framework has the potential to widen and deepen the students' understanding of software engineering processes.","1558-1225","978-1-60558-719-6","10.1145/1806799.1806880","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062060","HOT --- human organizational and technological --- framework;agile software development;software engineering course;software engineering education","Programming;Software;Software engineering;Software measurement;Humans;Education;Testing","","","","14","","27 Oct 2011","","","IEEE","IEEE Conferences"
"A case of software engineering accreditation","Y. Matsumoto; O. Akiyama; O. Dairiki; T. Tamai","Musashi Institute of Technology, Japan; IBM Japan Limited, Japan; Nippon Steel Corporation, Japan; University of Tokyo, Japan",Proceedings 14th Conference on Software Engineering Education and Training. 'In search of a software engineering profession' (Cat. No.PR01059),"7 Aug 2002","2001","","","201","209","A trial software engineering accreditation system is being applied in Japan. The authors give a brief overview of the standard curriculum model that is followed by most computer science programs in Japanese universities today, and the current status of the accreditation systems now being applied to them. They report on the way in which they have tried to bridge the gap between industrial needs and undergraduate education in software engineering. Their plan for the trial software engineering accreditation system now being applied to one of these software engineering programs is outlined. Finally, the authors' efforts to build a body of knowledge for software engineering education are summarized.","1093-0175","0-7695-1059-0","10.1109/CSEE.2001.913845","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=913845","","Computer aided software engineering;Software engineering;Accreditation;Computer science education;Computer science;Educational programs;Guidelines;Bridges;Computer industry;Computer Society","","","","10","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Large-Scale Visualization Projects for Teaching Software Engineering","C. Müller; G. Reina; M. Burch; D. Weiskopf","University of Stuttgart; University of Stuttgart, Germany; University of Stuttgart, Germany; University of Stuttgart, Germany",IEEE Computer Graphics and Applications,"10 Aug 2012","2012","32","4","14","19","The University of Stuttgart's software engineering major complements the traditional computer science major with more practice-oriented education. Two-semester software projects in various application areas offered by the university's different computer science institutes are a successful building block in the curriculum. With this realistic, complex project setting, students experience the practice of software engineering, including software development processes, technologies, and soft skills. In particular, visualization-based projects are popular with students. Such projects offer them the opportunity to gain profound knowledge that would hardly be possible with only regular lectures and homework assignments.","1558-1756","","10.1109/MCG.2012.81","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6265050","Engineering education;VIsualization;Large-scale systems;Computer science education;Software development;Education courses;computer graphics;software engineering;computer science education;visualization","Engineering education;VIsualization;Large-scale systems;Computer science education;Software development;Education courses","Audiovisual Aids;Computer Graphics;Engineering;Humans;Software","6","","10","IEEE","10 Aug 2012","","","IEEE","IEEE Magazines"
"A curriculum development methodology for professional software engineers and its evaluation","K. Kobata; T. Uesugi; H. Adachi; M. Aoyama","Engineering Education Development Dept., DENSO E & TS TRAINING CENTER CORPORATION, Ohbu, Japan; Engineering Education Development Dept., DENSO E & TS TRAINING CENTER CORPORATION, Ohbu, Japan; ePF R&D Dept., DENSO CORPORATION, Kariya, Japan; Dep. of Software Engineering, Nanzan University, Seto, Japan","2014 IEEE International Conference on Teaching, Assessment and Learning for Engineering (TALE)","19 Mar 2015","2014","","","480","487","Professional software engineers are the key assets of the core competency of a company developing highly complicated safety-critical software-intensive automotive systems. Professional software engineers have been generally trained through an education and training program home-brewed in the company. However, the conventional curriculum of the program is developed in a rather ad hoc way, and hard to qualify the trainees. In this article, we propose a curriculum development methodology for professional software engineers based on goal model. We define a strategic goal of professional software engineers, and derive three tactical educational sub-goals of acquisition of advanced software engineering, the practice of software engineering and establishment of philosophy of leadership. We propose a methodology to develop a body of knowledge of automotive software engineering, curriculum, and associated teaching methods based on the educational goal model. We applied the methodology to the education and training program for automotive professional software engineers at DENSO. Comparing the previous program, we demonstrate the effectiveness of the proposed methodology.","","978-1-4799-7672-0","10.1109/TALE.2014.7062552","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7062552","Software Engineering Education;Goal Model;Goal-Oriented Analysis;Curriculum Development;Professional Software Engineer;Automotive Software Engineering","Decision support systems;Software;Knowledge engineering;Software engineering;Training;Conferences","","","","11","IEEE","19 Mar 2015","","","IEEE","IEEE Conferences"
"First Steps towards Exporting Education: Software Engineering Education Delivered Online to Professionals","K. D. Wendt; K. Reily; M. P. E. Heimdahl",University of Minnesota; University of Minnesota; University of Minnesota,2016 IEEE 29th International Conference on Software Engineering Education and Training (CSEET),"23 May 2016","2016","","","241","245","Large software organizations seek internal professional staff development beyond traditional corporate training in specific technical skills (i.e., a new programming language or tool). This paper describes the results of one effort of delivery: the offering of a non-credit small, private, online course (SPOC) in software design. Participants spanned those with formal degrees in Computer Science or Software Engineering to those with no formal education in the area. After completing the course, a survey was administered. Intention to enroll in further non-credit SPOC courses was found to be more likely than intention in formal degrees in the area. Additionally, the course content was highly valued by the participants. These findings show a need for further investigation into the value and opportunity of exported education: bringing University expertise out of the traditional classroom and directly into the hands of industry professionals via corporate training-style SPOC offerings.","2377-570X","978-1-5090-0765-3","10.1109/CSEET.2016.32","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7474491","Software Engineering Education;Software Design;Industry Education;Software Engineering Training;Exporting Education","Software engineering;Training;Industries;Organizations;Software design","","5","","19","IEEE","23 May 2016","","","IEEE","IEEE Conferences"
"A demonstration case study of software engineering senior project coordinating the international standard","N. Chotisarn; D. Sanpote","Software Engineering Valley, University of Phayao, Phayao, Thailand; Software Engineering Valley, University of Phayao, Phayao, Thailand","2017 International Conference on Digital Arts, Media and Technology (ICDAMT)","24 Apr 2017","2017","","","314","319","Nowadays, standards are the basis in various industries even in the software industry. There are diverse standards for software engineering (e.g. ISO/IEC 12207 series named Systems and software engineering - Software life cycle processes). Most of the software engineering students are required to submit a senior project before graduating. Most students' inability to complete their project can be caused by their lack of time management and poor scheduling in their life. The objective of this study was to raise the project completion rate by using the international standard ISO/IEC 29110 series named Software Engineering Lifecycle profiles for Very Small Entities (VSEs). The research environment was made up of 2 groups of students: the first group was a study group of students who were studying Basic profile of ISO/IEC 29110 at the same time of the senior project and the second group was a group of students who had not taken that course. There was an internal tool created to demonstrate in the classroom called PAPM29110 that was used to look at the percentage of the on-time completion of the projects compared with the late projects. The preliminary results showed that the second group of students who had not taken the ISO/IEC 29110 course finished their project much later than the first group of students who applied their knowledge gained from ISO/IEC 29110. In addition, a significant statistic method named Chi Square was used to testify the differences of benefits between studying ISO/IEC 29110 and not studying ISO/IEC 29110 at the end of the demonstration.","","978-1-5090-5210-3","10.1109/ICDAMT.2017.7904983","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7904983","ISO/IEC 29110;software engineering project;software engineering curriculum;software project management","Software;Software engineering;IEC Standards;ISO Standards;Industries;Standards organizations","","1","","10","IEEE","24 Apr 2017","","","IEEE","IEEE Conferences"
"Localized open source collaboration in software engineering education","K. Buffardi","Computer Science California, State University—Chico, Chico, California, USA",2015 IEEE Frontiers in Education Conference (FIE),"7 Dec 2015","2015","","","1","5","Involving computer science students in open source software projects provides opportunities for them to contribute to real products with more authentic scope than typical computer science assignments. However, the environment of collaborating with external, distributed teams also poses unique challenges and may distance students from the potential for valuable, direct contact and mentorship from software professionals. In addition, while the technology industry continues to grow, smaller communities have a vested interest in growing a culture for collaboration between students and local software developers. We formed a local open source organization to collaborate on a product by combining efforts from students and professionals. This paper describes the localized free and open source software (LFOSS) organization and reports initial findings from software engineering students' involvement.","","978-1-4799-8454-1","10.1109/FIE.2015.7344142","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7344142","computer science education;software engineering;industry collaboration;free and open source software (FOSS);humanitarian free and open source software (HFOSS);team projects","Software engineering;Hafnium compounds;Open source software;Collaboration;Computer science;Education","","11","","17","IEEE","7 Dec 2015","","","IEEE","IEEE Conferences"
"Causal Modeling, Discovery, & Inference for Software Engineering","R. Kazman; R. Stoddard; D. Danks; Yuanfang Cai","SEI/CMU and University of Hawaii, Honolulu, HI; Software Engineering Institute/CMU, Pittsburgh, PA; Department of Philosophy CMU, Pittsburgh, PA; Computer Science Dept., Drexel University, Philadelphia, PA",2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C),"24 Aug 2017","2017","","","172","174","This causal discovery analysis is intended as an initial step, and is certainly not the final word. For example, one could apply multiple causal discovery algorithms to measure the sensitivity of the learned structures to the use of the PC algorithm. Moreover, software projects exhibit significant dynamics over time, as code is written, refined, refactored, and so forth. We used static datasets that provide snapshots of the projects at particular moments in time. If we collect longitudinal data about similar variables, then we could start to uncover the underlying causal dynamics. One might also suspect that those dynamics could shift over time, as the software practices and philosophies change, as project members enter and leave, etc. Longitudinal data could also enable us to test for this type of causal non-stationarity. The key point that we have established here, however, is the first demonstration of the applicability and usefulness of causal discovery algorithms applied to observational software engineering datasets.","","978-1-5386-1589-8","10.1109/ICSE-C.2017.138","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7965293","correlation studies;causal inference;empirical software engineering","Computer bugs;Software engineering;Algorithm design and analysis;Software;Correlation;Software algorithms;Conferences","","1","","13","IEEE","24 Aug 2017","","","IEEE","IEEE Conferences"
"The American law institute's principles on software contracts and their ramifications for software engineering research: NIER track","J. Williams; J. H. Weber-Jahnke","University of Victoria, Victoria, BC, Canada; University of Victoria, Victoria, BC, Canada",2011 33rd International Conference on Software Engineering (ICSE),"10 Oct 2011","2011","","","972","975","The American Law Institute has recently published principles of software contracts that may have profound impact on changing the software industry. One of the principles implies a non-disclaimable liability of software vendors for any hidden material defects. In this paper, we describe the new principle, first from a legal and then from a software engineering point of view. We point out potential ramifications and research directions for the software engineering community.","1558-1225","978-1-4503-0445-0","10.1145/1985793.1985963","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6032565","american law institute;contract law;hidden defects;information technology law;legal interpretation;software contracts","Software;Materials;Contracts;Software engineering;Testing;Warranties;Certification","","","","13","","10 Oct 2011","","","IEEE","IEEE Conferences"
"Systematic Mapping: Artificial Intelligence Techniques in Software Engineering","H. Sofian; N. A. M. Yunus; R. Ahmad","Department of Software Engineering, Faculty of Computer Science and Information Technology, University of Malaya, Kuala Lumpur, Malaysia; Faculty of Business and Technology, University of Cyberjaya, Selangor, Cyberjaya, Malaysia; Department of Software Engineering, Faculty of Computer Science and Information Technology, University of Malaya, Kuala Lumpur, Malaysia",IEEE Access,"17 May 2022","2022","10","","51021","51040","Artificial Intelligence (AI) has become a core feature of today’s real-world applications, making it a trending topic within the software engineering (SE) community. The rise in the availability of AI techniques encompasses the capability to make rapid, automated, impactful decisions and predictions, leading to the adoption of AI techniques in SE. With industry revolution 4.0, the role of software engineering has become critical for developing productive, efficient, and quality software. Thus, there is a major need for AI techniques to be applied to enhance and improve the critical activities within the software engineering phases. Software is developed through intelligent software engineering phases. This paper concerns a systematic mapping study that aimed to characterize the publication landscape of AI techniques in software engineering. Gaps are identified and discussed by mapping these AI techniques against the SE phases to which they contributed. Many systematic mapping review papers have been produced only for a specific AI technique or a specific SE phase or activity. Hence, to our best of knowledge within the last decade, there is no systematic mapping review that has fully explored the overall trends in AI techniques and their application to all SE phases.","2169-3536","","10.1109/ACCESS.2022.3174115","Universiti Malaya(grant numbers:GPF097A-2020); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9771431","Artificial intelligence;machine learning;deep learning;data mining;software engineering;requirements engineering;analysis and design;software development;software testing;software maintenance;software deployment","Artificial intelligence;Software;Systematics;Software engineering;Data mining;Predictive models;Training","","7","","88","CCBYNCND","10 May 2022","","","IEEE","IEEE Journals"
"Work in progress - ‘Real World Problems’ as assessment of software engineering","S. T. Frezza","C.S.D.P., Computer and Information Science, Gannon University, Erie, PA, USA","2007 37th Annual Frontiers In Education Conference - Global Engineering: Knowledge Without Borders, Opportunities Without Passports","4 Jan 2008","2007","","","S4E-13","S4E-14","This project evaluated the effectiveness of using certification-like real-world problems for regular assessment of student performance in a software engineering content course. The approach utilized the Turning Pointtrade personal response system as a means to present ""Real World"" software engineering problems and anonymously assess student learning. The preliminary results indicated that the method was not useful for assessment, but may have promise for stimulating discussion and student learning.","2377-634X","978-1-4244-1083-5","10.1109/FIE.2007.4417879","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4417879","Personal Response System (PRS);Requirements Engineering;Software Engineering Education","Software engineering;Turning;Information science;Systems engineering and theory;Systems engineering education;Programming;Statistics;Feedback;Embedded computing;Embedded software","","","","1","IEEE","4 Jan 2008","","","IEEE","IEEE Conferences"
"The requirements engineering process model based on design for six sigma","M. F. Tchidi; Z. He","Management Sciences and engineering, Tianjin University, TJU, Tianjin, China; School of Management, Tianjin University, TJU, Tianjin, China",2010 2nd IEEE International Conference on Information Management and Engineering,"3 Jun 2010","2010","","","287","290","The software industry is facing many problems due to the inefficiency of methods or tools for process improvement, resulting in cost overruns in software engineering. The quality of the software becomes difficult to control; maintenance costs are high and system replacement is difficult. To overcome these problems, this paper introduces the Design for Six Sigma (DFSS) into the software requirement process. It analyzes the existing problems foundation of requirement engineering process, transforms existing processes and proposes the requirement engineering process model based on DFSS. Based on DFSS methods and techniques, the model combines the IDDOV (Identity, Define, Develop, Optimize, Verify) process with the practical situation of software requirements engineering process. It emphasizes the importance of software quality and their integration into the acquisition of various stages of quality characteristics. Quality Function Deployment (QFD) and Failure Mode And Effects Analysis (FMEA) are applied to insure customer requirements are adequately transformed into design requirements. At the same time the study explores the potential requirements and failure risks in order to improve the efficiency of software system development. In summary, the DFSS approach provided the software industry with structured process improvement strategy to reduce non-value adding activities and other problems.","","978-1-4244-5263-7","10.1109/ICIME.2010.5478088","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5478088","Design for Six Sigma;software industry;process improvement;requirement engineering process","Design engineering;Six sigma;Computer industry;Costs;Software quality;Quality function deployment;Software tools;Electrical equipment industry;Software engineering;Software maintenance","","11","","11","IEEE","3 Jun 2010","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE Approved Draft International Standard - Systems and software engineering--Systems and software assurance -- Part 4: Assurance in the life cycle","",,"ISO/IEC/IEEE P15026-4/DIS2, February 2021","4 Feb 2021","2021","","","1","48","This document provides guidance and recommendations for assurance of a selected claim about the system-of-interest by achieving the claim and showing the achievement. The guidance and recommendations are given in a System Assurance process view on top of ISO/IEC/IEEE 15288 and a Software Assurance process view on top of ISO/IEC/IEEE 12207.","","978-1-5044-7352-1","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9347844","","IEEE Standards;IEC Standards;ISO Standards;Software engineering;Systems engineering and theory;Quality assurance","","","","","","4 Feb 2021","","","IEEE","IEEE Standards"
"ISO/IEC/IEEE Draft International Standard - Systems and software engineering--Systems and software assurance -- Part 4: Assurance in the life cycle","",,"ISO/IEC/IEEE P15026-4/DIS, February 2020","24 Mar 2020","2020","","","1","51","This document provides guidance and recommendations for assurance of a selected claim about the system-of-interest by achieving the claim and showing the achievement. The guidance and recommendations are given in a System Assurance process view on top of ISO/IEC/IEEE 15288 and a Software Assurance process view on top of ISO/IEC/IEEE 12207.","","978-1-5044-6584-7","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9046310","","IEEE Standards;Software engineering;Systems engineering and theory;Product life cycle management;IEC Standards;ISO Standards","","","","","","24 Mar 2020","","","IEEE","IEEE Standards"
"Engineering Safety - and Security-Related Requirements for Software-Intensive Systems","D. Firesmith","Software Engineering Institute, Carnegie Mellon University, USA",2007 Sixth International IEEE Conference on Commercial-off-the-Shelf (COTS)-Based Software Systems (ICCBSS'07),"12 Mar 2007","2007","","","9","9","Summary form only given. Many software-intensive systems have significant safety ramifications and need to have their associated safety-related requirements properly engineered. It has been observed by several consultants, researchers, and authors that inadequate requirements are a major cause of accidents involving software-intensive systems. Yet in practice, there is very little interaction between the requirements and safety disciplines and little collaboration between their respective communities. Most requirements engineers know little about safety engineering, and most safety engineers know little about requirements engineering. Also, safety engineering typically concentrates on architectures and designs rather than requirements because hazard analysis typically depends on the identification of hardware and software components, the failure of which can cause accidents. This leads to safety-related requirements that are often ambiguous, incomplete, and even missing. The tutorial begins with a single common realistic example of a safety critical system that will be used throughout to provide good examples of safety-related requirements. The tutorial then provides an introduction to requirements engineering for safety engineers and an introduction to safety engineering for requirements engineers. The tutorial then provides clear definitions and descriptions of the different kinds of safety-related requirements and finishes with a practical process for producing them","","0-7695-2785-X","10.1109/ICCBSS.2007.15","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4127290","","Software safety;Accidents;Software engineering;Collaboration;Design engineering;Computer architecture;Hazards;Failure analysis;Hardware;Software systems","","4","","","IEEE","12 Mar 2007","","","IEEE","IEEE Conferences"
"Exploring the Relationship between Software Process Adaptive Capability and Organisational Performance","P. Clarke; R. V. O’Connor; B. Leavy; M. Yilmaz","School of Computing, Dublin City University, Ireland, and Lero—The Irish Software Research Centre; School of Computing, Dublin City University, Ireland, and Lero—The Irish Software Research Centre; Dublin City University Business School, Ireland; Çanyaka University, Ankara, Turkey",IEEE Transactions on Software Engineering,"8 Dec 2015","2015","41","12","1169","1183","Software development is a complex socio-technical activity, with the result that software development organisations need to establish and maintain robust software development processes. While much debate exists regarding the effectiveness of various software development approaches, no single approach is perfectly suited to all settings and no setting is unchanging. The capability to adapt the software process is therefore essential to sustaining an optimal software process. We designed an exploratory study to concurrently examine software process adaptive capability and organisational performance in 15 software development organisations, finding that companies with greater software process adaptive capability are shown to also experience greater business success. While our exploratory study of the complex relationship between these phenomena is limited in some respects, the findings indicate that software process adaptive capability may be worthy of further integration into software process engineering techniques. Software process adaptive capability may be an important organisational strength when deriving competitive advantage, and those responsible for the creation and evolution of software process models and methodologies may want to focus some of their future efforts in this area.","1939-3520","","10.1109/TSE.2015.2467388","Science Foundation Ireland(grant numbers:03/CE2/I303_1); Irish Software Engineering Research Centre; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7214314","Software engineering;Software engineering process;Software development;Software management;Software engineering;software engineering process;software development;software management","Software engineering;Software development;ISO Standards;IEC Standards;Software management","","48","","31","IEEE","20 Aug 2015","","","IEEE","IEEE Journals"
"Software engineering education in South Africa","B. Dwolatzky","School of Electrical and Information Engineering, University of the Witwatersrand, PO Box 542, Wits, 2050, Johannesburg",Transactions of the South African Institute of Electrical Engineers,"15 Jul 2021","2004","95","4","226","235","The Software Engineer is a key member of the software development team. This paper explores the skills needed by a Software Engineer, and discusses how people are educated to acquire these skills. Based on recommendations from international organisations, the paper argues that Software Engineering is a professional engineering qualification. The relationship between engineering accreditation and the educational outcomes of a Software Engineering curriculum is discussed. Compared to other engineering disciplines, Software Engineering is very new. There is very little practical experience anywhere in the world of how Software Engineers should be educated. Many South African Universities are beginning to introduce computer-related engineering programmes. In the paper a case study of Software Engineering education is presented, focussing on South Africa. The difficulties associated with structuring and delivering these programmes in South Africa are described, and ideas are put forward for dealing with these difficulties.","0038-2221","","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9487985","Software Engineering;Education;Engineering Curriculum Development","Software;Software engineering;Accreditation;Knowledge engineering;Task analysis;Software measurement;Proposals","","","","","","15 Jul 2021","","","SAIEE","SAIEE Journals"
"ISO/IEC/IEEE International Standard - Systems and software engineering -- Taxonomy of systems of systems","",,ISO/IEC/IEEE 21841:2019(E),"19 Jul 2019","2019","","","1","20","This document defines a normalized taxonomy for systems of systems (SoS) to facilitate communications among stakeholders. It also briefly explains what a taxonomy is and how it applies to the SoS to aid in understanding and communication. Taxonomies provide a means in many fields to classify and describe the relationships between the relevant elements being studied. The elements of the taxonomy, or taxa, form a partitioning or means of classification within that body of knowledge. In the context of systems of systems (SoS), the relevant elements are, by definition, systems themselves. Using essential characteristics to partition the various types of SoS provides an abbreviated nomenclature for thinking about SoS. Based on the taxonomies, different approaches to the engineering of systems of systems are possible, improving the efficiency and effectiveness of systems of systems engineering.;This document defines a normalized taxonomy for systems of systems (SoS) to facilitate communications among stakeholders. It also briefly explains what a taxonomy is and how it applies to the SoS to aid in understanding and communication. Taxonomies provide a means in many fields to classify and describe the relationships between the relevant elements being studied. The elements of the taxonomy, or taxa, form a partitioning or means of classification within that body of knowledge. In the context of systems of systems (SoS), the relevant elements are, by definition, systems themselves. Using essential characteristics to partition the various types of SoS provides an abbreviated nomenclature for thinking about SoS. Based on the taxonomies, different approaches to the engineering of systems of systems are possible, improving the efficiency and effectiveness of systems of systems engineering.","","978-1-5044-5965-5","10.1109/IEEESTD.2019.8766998","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8766998","systems engineering (SE);systems of systems (SoS);systems of systems engineering (SoSE);taxonomy;taxonomies;acknowledged SoS;collaborative SoS;directed SoS;virtual SoS","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Systems engineering and theory;Software systems;Taxonomy;Terminology;System of systems","","","","","","19 Jul 2019","","","IEEE","IEEE Standards"
"Master's Degrees in Software Engineering: An Analysis of 28 University Programs","A. Pyster; R. Turner; D. Henry; K. Lasfer; L. Bernstein","Stevens Institute of Technology, USA; Stevens Institute of Technology, USA; Stevens Institute of Technology, USA; Stevens Institute of Technology, USA; Stevens Institute of Technology, USA",IEEE Software,"25 Aug 2009","2009","26","5","94","101","The software engineering institute published the last reference curriculum for a master's in software engineering in 1991. In 2007, a coalition from academia, industry, and government began creating a new reference curriculum. An early step was to establish a baseline of graduate education by surveying 28 master's programs in software engineering. The survey was largely limited to US schools. Key findings showed that the universities viewed software engineering largely as a specialization of computer science, that faculty size is generally small with few dedicated professors, and that new master's programs continue to start despite the decrease in computer science majors over the past few years. We used the IEEE Computer Society's Software Engineering Body of Knowledge (SWEBOK) to structure our analysis of the 28 curricula, focusing primarily on courses and topics required or semirequired of all students. (A course is semirequired if there is at least a 50 percent chance a student must take it.) Major findings show wide variation in the depth and breadth of SWEBOK coverage in required and semirequired courses, less than 40 percent of all programs requiring an introductory course on software engineering, and many universities having required and semirequired courses that are peripheral to SWEBOK.","1937-4194","","10.1109/MS.2009.133","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5222804","software engineering;curriculum;Software Engineering Body of Knowledge;SWEBOK;computer science education","Software engineering;Taxonomy;Computer science;Aerospace engineering;Automotive engineering;Systems engineering and theory;Educational institutions;Educational programs;Radio access networks;Collaboration","","11","","8","IEEE","25 Aug 2009","","","IEEE","IEEE Magazines"
"The Influence of COCOMO on Software Engineering Education and Training","R. E. Fairley",Software Engineering Management Associates,19th Conference on Software Engineering Education & Training (CSEET'06),"8 May 2006","2006","","","193","200","This paper presents the evolution of the COCOMO models for software estimation from COCOMO 81 to Ada COCOMO to COCOMO II and describes the many ways in which COCOMO has influenced, and continues to influence, software engineering education and training.","2377-570X","0-7695-2557-1","10.1109/CSEET.2006.36","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1617347","","Software engineering;Management training;Costs;Industrial training;Project management;Engineering management;Continuing education;Job shop scheduling;Software tools;Guidelines","","2","","14","IEEE","8 May 2006","","","IEEE","IEEE Conferences"
"Second international workshop on product line approaches in software engineering: (PLEASE 2011)","J. Rubin; G. Botterweck; A. Pleuss; D. M. Weiss","IBM Research at Haifa, Israel; University of Limerick, Lero, Ireland; University of Limerick, Lero, Ireland; Iowa State University, USA",2011 33rd International Conference on Software Engineering (ICSE),"10 Oct 2011","2011","","","1204","1205","PLEASE workshop series focuses on exploring the present and the future of Software Product Line Engineering techniques. The main goal of PLEASE 2011 is to bring together industrial practitioner and software product line researchers in order to couple real-life industrial problems with concrete solutions developed by the community. We plan for an interactive workshop, where participants can apply their expertise to current industrial problems, while those who face challenges in the area of product line engineering can benefit from the suggested solutions. We also intend to establish ongoing, long-lasting relationships between industrial and research participants to the mutual benefits of both. The second edition of PLEASE is held in conjunction with the 33rd International Conference in Software Engineering (May 21-28, 2011, Honolulu, Hawaii).","1558-1225","978-1-4503-0445-0","10.1145/1985793.1986047","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6032637","product line engineering;software product lines;variability management","Software;Educational institutions;Conferences;USA Councils;Software engineering;Concrete;Publishing","","","","3","","10 Oct 2011","","","IEEE","IEEE Conferences"
"Software Engineering Practice in Computer Science Courses","S. Chatterjee","Department of Computer Science and Engineering, Jaypee Institute of Information Technology, Noida, Uttar Pradesh, India",19th Australian Conference on Software Engineering (aswec 2008),"3 Apr 2008","2008","","","611","616","This paper seeks to combine a traditional computer science course with software engineering process. A computer science course such as computer graphics, digital image processing, compiler or operating systems gives a chance to students working in a group to write a realistic large project of almost 3000 lines and make it function correctly. The course involves a team programming project. The software engineering lifecycle addresses issues on design, coding, documenting, unit testing and integration testing. Innovative and active learning based educational methods are adopted for teaching such a course.","2377-5408","978-0-7695-3100-7","10.1109/ASWEC.2008.4483252","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4483252","Software Engineering;Methods;Project","Software engineering;Computer science;Life testing;Software testing;Computer graphics;Digital images;Operating systems;Programming profession;Image coding;Education","","","","12","IEEE","3 Apr 2008","","","IEEE","IEEE Conferences"
"No Silver Bullet: Software Engineering Reloaded","S. Fraser; D. Mancl",Cisco Research; Alcatel-Lucent,IEEE Software,"7 Jan 2008","2008","25","1","91","94","A celebratory panel took place at the 22nd International Conference on object-oriented programming, systems, languages, and applications in Montreal. The occasion was the 20th anniversary of Fred Brooks' paper ""no silver bullet: essence and accidents of software engineering."" Fred suggested that useful solutions must address inherent complexity observing that object-oriented techniques have come closest to achieving this goal. David described a ""silver bullet"" as a technique that requires no training or experience to apply a silver bullet should find its mark without aim. Software engineering as a discipline has expanded significantly, both in terms of system complexity and the community's global extent. ""no silver bullet"" continues to be both an enjoyable must-read and an influential reference. People use languages without the ideas, so the object community still has much to do. It is nice to know that, when all else fails us, we have an innate decision-making tool to fall back on.","1937-4194","","10.1109/MS.2008.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4420077","software engineering;project management;information technology and systems;computing;organizational impact;software design;complexity;silver bullet;Frederick Brooks","Silver;Software engineering;Software tools;Books;Operating systems;Object oriented programming;Application software;Project management;Software design;Leg","","13","","","IEEE","7 Jan 2008","","","IEEE","IEEE Magazines"
"Observations on relationships between initial professional education for software engineering and systems engineering-a case study","I. Newman","Department of Computer Science, Loughborough University, Loughborough, Leicestershire, UK",Proceedings 14th Conference on Software Engineering Education and Training. 'In search of a software engineering profession' (Cat. No.PR01059),"7 Aug 2002","2001","","","172","181","This paper identifies some strong similarities between software engineering and systems engineering based on the experiences of creating a programme of initial professional education for systems engineers at the request of a major UK-based defence contractor. The paper uses the analysis of the requirements for initial professional education for software engineers put forward by Ford and Gibbs (1996) and describes some clear relationships between the teaching and learning requirements for the two subjects. Evidence is provided to show that the context, in terms of the indicators of professional maturity of the two disciplines is comparable. It is also shown that the skills needed are very similar and there are common knowledge areas (a fact already noted in the SWEBOK Stoneman draft). It is, therefore, suggested that aspects of the teaching approach used in the successful systems engineering course may be applicable for the initial professional education of software engineers. The paper explains the requirements and constraints for the systems engineering course and outlines the educational philosophy adopted, indicating how prior software engineering experience (practice and teaching) was used to guide the approach taken. Relevant experiences gained from running the course are summarised and some of the lessons that have been learned are evaluated for their potential application to software engineering.","1093-0175","0-7695-1059-0","10.1109/CSEE.2001.913840","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=913840","","Software engineering;Systems engineering and theory;Systems engineering education;Computer science education;Educational programs;Knowledge engineering;Software systems;Computer science;Electronic mail;Forward contracts","","2","","4","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Contructing and researching on software engineering course group","J. Guo; P. Yan; J. Xu","Computer Science and Engineering Chongqing, Three Gorges University, Chongqing, China; Computer Science and Engineering Chongqing, Three Gorges University, Chongqing, China; Mathematics and Statistics, Three Gorges University, Chongqing, China",2011 6th IEEE Joint International Information Technology and Artificial Intelligence Conference,"29 Sep 2011","2011","1","","442","444","In view of the demand for software professionals in current software industry and the teaching situation in universities, the necessity of researching and constructing software engineering course group is proposed; the basic principles of constructing software engineering course group is discussed, the knowledge system of software engineering courses group is analyzed, a three-segment two-lay course group is designed, the integration and division of the course contents is achieved, and the revision and recombination is promoted, the foundation is laided, in order to further improve the qua lit y o f personnel training and construction level of course group, and accomplish the scale effect of curriculum group construction.","","978-1-4244-8625-0","10.1109/ITAIC.2011.6030242","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6030242","Course Group;software engineering;knowledge system;engineering education","Software engineering;Software;Training;Educational institutions;Programming;Industries","","","","8","IEEE","29 Sep 2011","","","IEEE","IEEE Conferences"
"An Experience of Teaching HCI to Undergraduate Software Engineering Students","G. Feng; B. Luo","Software Institute, State Key Laboratory for Novel Software Technology, Nanjing University, China; Software Institute, State Key Laboratory for Novel Software Technology, Nanjing University, China",2012 IEEE 25th Conference on Software Engineering Education and Training,"23 Jul 2012","2012","","","125","129","Due to the more and more intense competition in software market, usability is gaining more and more attention. For software engineering students, learning and mastering human-computer interaction knowledge can help them design software products with higher usability. In this paper, we describe a preliminary experience of teaching HCI to undergraduate software engineering students in Nanjing University (NJU), including curriculum design, course implementation and improvements based on some feedback from students. We believe that this information is useful at how to teach HCI in a practical way, and we hope it can serve as guidance for other teachers struggling with similar course design issues.","2377-570X","978-1-4673-1592-0","10.1109/CSEET.2012.25","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6245022","","Human computer interaction;Software engineering;Usability;Prototypes;Educational institutions","","3","","10","IEEE","23 Jul 2012","","","IEEE","IEEE Conferences"
"Open Source Software: Lessons from and for Software Engineering","B. Fitzgerald","Lero-the Irish Software Engineering Research Centre, Iran",Computer,"6 Oct 2011","2011","44","10","25","30","Despite initial suggestions to the contrary, open source software projects exhibit many of the fundamental tenets of software engineering. Likewise, the existence of category-killer apps suggests that conventional software engineering can draw some lessons from OSS. Open source software can elicit strongly contrasting reactions. Advocates claim that OSS is high-quality software produced on a rapid time scale and for free or at very low cost by extremely talented developers. At the same time, critics characterize OSS as variable-quality software that has little or no documentation, is unpredictable as to stability or reliability, and rests on an uncertain legal foundation-the result of a chaotic development process that is completely alien to software engineering fundamental tenets and conventional wisdom.","1558-0814","","10.1109/MC.2011.266","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6018958","Open source software;Software engineering;Open innovation;Inner source;Global software development;Time-based release management","Software engineering;Globalization;Linux;Open source software;Technological innovation;Time frequency analysis","","13","","30","IEEE","15 Sep 2011","","","IEEE","IEEE Magazines"
"Interdisciplinary Project-Based Learning in Ergonomics for Software Engineers: A Case Study","A. B. Albu; K. Malakuti; H. Tuokko; W. Lindstrom-Forneri; K. Kowalski","Department of Electrical and Computer Engineering, University of Victoria, Victoria, BC, Canada; Department of Electrical and Computer Engineering, University of Victoria, Victoria, BC, Canada; Department of Electrical and Computer Engineering, University of Victoria, Victoria, BC, Canada; Department of Electrical and Computer Engineering, University of Victoria, Victoria, BC, Canada; Department of Electrical and Computer Engineering, University of Victoria, Victoria, BC, Canada",2008 The Third International Conference on Software Engineering Advances,"7 Nov 2008","2008","","","295","300","This paper discusses an interdisciplinary educational initiative led by an instructional team with backgrounds in engineering and psychology in the context of an ergonomics course for software engineers. Our case study evaluates the educational outcomes of a course project that dealt with the error analysis and prototype-level redesign of a software tool for elderly users. The paper presents the rationale for the choice of this project, the project organization, and the evaluation of project-related outcomes with respect to the course learning objectives.","","978-1-4244-3218-9","10.1109/ICSEA.2008.70","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4668123","project-based learning;software engineering;ergonomics;interdisciplinary education","Ergonomics;Software engineering;Design engineering;Psychology;Knowledge engineering;Humans;Computer aided instruction;Aging;Error analysis;Software prototyping","","2","","9","IEEE","7 Nov 2008","","","IEEE","IEEE Conferences"
"Software Engineering Expert System for Global Development","D. B. Simmons; N. K. Ma","Software Process Improvement Laboratory, Department of Computer Science, Texas A and M University, College Station, TX, USA; Software Process Improvement Laboratory, Department of Computer Science, Texas A and M University, College Station, TX, USA",2006 18th IEEE International Conference on Tools with Artificial Intelligence (ICTAI'06),"19 Dec 2006","2006","","","33","38","Software project control and software process improvement both depend on the ability to measure software development status. This paper introduces the software engineering expert system (SEES) tool where the software professional can gather metrics from CASE tool databases to reconstruct all activities in a software project from project initiation to project termination. SEES is Internet based and can be applied to help manage globally distributed projects","2375-0197","0-7695-2728-0","10.1109/ICTAI.2006.105","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4031877","project measurement;software engineering tools;project knowledge base","Software engineering;Expert systems;Software tools;Process control;Software measurement;Programming;Computer aided software engineering;Databases;Internet;Project management","","1","4","16","IEEE","19 Dec 2006","","","IEEE","IEEE Conferences"
"Towards a GSE international teaching network: Mapping Global Software Engineering courses","L. L. Fortaleza; T. Conte; S. Marczak; R. Prikladnicki","Instituto de Computação-ICOMP, Universidade Federal do Amazonas, Manaus, Brazil; Instituto de Computação-ICOMP, Universidade Federal do Amazonas, Manaus, Brazil; Faculdade de Informática, Pontifícia Universidade Católica do Rio Grande do Sul, Porto Alegre, Brazil; Faculdade de Informática, Pontifícia Universidade Católica do Rio Grande do Sul, Porto Alegre, Brazil",2012 Second International Workshop on Collaborative Teaching of Globally Distributed Software Development (CTGDSD),"28 Jun 2012","2012","","","1","5","Teaching Global Software Engineering is challenging since it is not trivial to simulate distance and the changes that distance brings into the traditional software development life cycle. Despite the challenge, the need to teach undergrad and graduate students the skills to work in such environment is well-known in academia. The goal of this paper is two-folded. First, we identify what has been thought, by whom and to whom by conducting a literature review. This review aims to consolidate the body of knowledge on the topic in order to help professors and professionals interested in teaching the subject. For instance, we found that 19 courses have been reported involving 25 countries in total since 1997. Most of the courses involves graduate students as the main audience, and mainly discuss challenges in distributed development. Our second goal is to propose the creation of a collaborative repository to store and to report teaching experiences on the topic helping the development and strengthening of the Teaching Network community.","","978-1-4673-1818-1","10.1109/CTGDSD.2012.6226944","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6226944","global software engineering;teaching;education;Software Engineering;literature review;community building","Education;Software engineering;Programming;Collaboration;Software;Cultural differences;Communities","","13","","33","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"Integrating Secure Software Assurance Content with SE2004 Recommendations","D. Shoemaker; A. Drommi; J. Ingalsbe; N. R. Mead","University of Detroit Mercy, USA; University of Detroit Mercy, USA; Ford Motor Company Limited, USA; Software Engineering Institute, USA",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","59","66","This study identifies the places where software assurance knowledge best fits with the elements of a standard software engineering curriculum. This is useful because there is currently no common understanding of the places in a traditional software engineering curriculum where software assurance should be taught. It would appear that the recommendations of the DHS CBK can be justified as a basis for teaching software engineering concepts for developing secure and assured software.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556950","Software assurance;Software engineering curriculum","Software engineering;Education;Software standards;Programming;Educational programs;Terrorism;Terminology;Curriculum development;Security;Guidelines","","","","10","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"What Makes a Great Manager of Software Engineers?","E. Kalliamvakou; C. Bird; T. Zimmermann; A. Begel; R. DeLine; D. M. German","Department of Computer Science, University of Victoria, Victoria, BC, Canada; Microsoft Research, Microsoft Corportation, Redmond, WA; Microsoft Research, Microsoft Corportation, Redmond, WA; Microsoft Research, Microsoft Corportation, Redmond, WA; Microsoft Research, Microsoft Corportation, Redmond, WA; Department of Computer Science, University of Victoria, Victoria, BC, Canada",IEEE Transactions on Software Engineering,"8 Jan 2019","2019","45","1","87","106","Having great managers is as critical to success as having a good team or organization. In general, a great manager is seen as fuelling the team they manage, enabling it to use its full potential. Though software engineering research studies factors that may affect the performance and productivity of software engineers and teams (like tools and skills), it has overlooked the software engineering manager. The software industry's growth and change in the last decades is creating a need for a domain-specific view of management. On the one hand, experts are questioning how the abundant work in management applies to software engineering. On the other hand, practitioners are looking to researchers for evidence-based guidance on how to manage software teams. We conducted a mixed methods empirical study of software engineering management at Microsoft to investigate what manager attributes developers and engineering managers perceive important and why. We present a conceptual framework of manager attributes, and find that technical skills are not the sign of greatness for an engineering manager. Through statistical analysis we identify how engineers and managers relate in their views, and how software engineering differs from other knowledge work groups in its perceptions about what makes great managers. We present strategies for putting the attributes to use, discuss implications for research and practice, and offer avenues for further work.","1939-3520","","10.1109/TSE.2017.2768368","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8094304","software engineering management;empirical studies;software companies","Software engineering;Software;Organizations;Knowledge engineering;Productivity;Interviews;Psychology","","32","","108","IEEE","2 Nov 2017","","","IEEE","IEEE Journals"
"A survey of controlled experiments in software engineering","D. I. K. Sjoeberg; J. E. Hannay; O. Hansen; V. B. Kampenes; A. Karahasanovic; N. . -K. Liborg; A. C. Rekdal","Dept. of Software Eng., Simula Res. Lab., Lysaker, Norway; Department of Software Engineering, Simula Research Laboratory, Lysaker, Norway; Department of Software Engineering, Simula Research Laboratory, Lysaker, Norway; Department of Software Engineering, Simula Research Laboratory, Lysaker, Norway; Department of Software Engineering, Simula Research Laboratory, Lysaker, Norway; BNP Paribas, Oslo, Norway; Unified Consulting, Oslo, Norway",IEEE Transactions on Software Engineering,"3 Oct 2005","2005","31","9","733","753","The classical method for identifying cause-effect relationships is to conduct controlled experiments. This paper reports upon the present state of how controlled experiments in software engineering are conducted and the extent to which relevant information is reported. Among the 5,453 scientific articles published in 12 leading software engineering journals and conferences in the decade from 1993 to 2002, 103 articles (1.9 percent) reported controlled experiments in which individuals or teams performed one or more software engineering tasks. This survey quantitatively characterizes the topics of the experiments and their subjects (number of subjects, students versus professionals, recruitment, and rewards for participation), tasks (type of task, duration, and type and size of application) and environments (location, development tools). Furthermore, the survey reports on how internal and external validity is addressed and the extent to which experiments are replicated. The gathered data reflects the relevance of software engineering experiments to industrial practice and the scientific maturity of software engineering research.","1939-3520","","10.1109/TSE.2005.97","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1514443","Index Terms- Controlled experiments;survey;research methodology;empirical software engineering.","Software engineering;Software maintenance;Application software;Conference proceedings;Computer Society;Recruitment;Computer industry;Programming;Software systems;Software metrics","","436","","52","IEEE","3 Oct 2005","","","IEEE","IEEE Journals"
"MEITREX - Gamified and Adaptive Intelligent Tutoring in Software Engineering Education","N. Meißner","Institute of Software Engineering, Stuttgart, Baden-Württemberg, Germany",2024 IEEE/ACM 46th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"20 Jun 2024","2024","","","198","200","Nowadays, learning management systems (LMSs) are established tools in higher education, especially in the domain of software engineering (SE). However, the potential of such educational tech-nologies has not been fully exploited, as student performance in SE education is still strongly dependent on feedback from time-constrained lecturers and tutors. Moreover, current LMSs are not designed for SE courses, as external SE tools are required to fulfill the requirements of lecturers such as programming and UML modeling features. Evolving these LMSs in the direction of intelligent tutoring could assist students in receiving automatic, individual feedback from the LMSs on their learning performance at any time. Also, gamified learning elements can serve to motivate students to engage with SE materials. Therefore, this paper presents an approach combining learning analytics, feedback, and interactive learning such as gamification in one LMS designed for SE education. The system could thus address diverse students with different backgrounds and motivational aspects and provide appropriate individual support to ensure effective SE education.","2574-1934","979-8-4007-0502-1","10.1145/3639478.3639804","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10554883","Software Engineering Education;Student Motivation;Intelligent Tutoring System;Learning Analytics;Gamification;Feedback","Learning management systems;Adaptive systems;Education;Unified modeling language;Programming profession;Software engineering","","","","43","","20 Jun 2024","","","IEEE","IEEE Conferences"
"SBSE4VM: Search Based Software Engineering for Variability Management","R. E. Lopez-Herrejon; A. Egyed","Systems Engineering and Automation, Johannes Kepler University Linz, Austria; Systems Engineering and Automation, Johannes Kepler University Linz, Austria",2013 17th European Conference on Software Maintenance and Reengineering,"15 Apr 2013","2013","","","441","444","SBSE4VM is an ongoing Lise Meitner Fellowship project sponsored by the Austrian Science Fund (FWF) that runs for two years. The driving goal of the project is to explore the application of Search Based Software Engineering techniques to reverse engineer, evolve, and fix inconsistencies in systems with variability.","1534-5351","978-0-7695-4948-4","10.1109/CSMR.2013.67","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6498506","Software Product Lines;Feature Orientation;Product Line Evolution;Search Based Software Engineering;Fixing Inconsistencies","Software;Feature extraction;Software engineering;Measurement;TV;Mobile communication;Reverse engineering","","4","","20","IEEE","15 Apr 2013","","","IEEE","IEEE Conferences"
"Software Engineering Education in the New World: What Needs to Change?","M. Bass","Institute for Software Research, Carnegie Mellon University, Pittsburgh, Pa, USA",2016 IEEE 29th International Conference on Software Engineering Education and Training (CSEET),"23 May 2016","2016","","","213","221","Software Engineering, as a discipline has made significant progress towards becoming an engineering profession over the last 45 years. As evidence of this the 3rd version of the guide to the Software Engineering Body of Knowledge was recently released. Additionally there are reference curricula for undergraduate and graduate education in software engineering. During the past 45 years the state of the practice has made significant progress as well. Some of that progress is reflected in the SWEBOK and associated curriculum, but the software engineering practice in the segment of industry that produces internet scale systems is not well supported by the guide to the SWEBOK, reference curriculum, or current software engineering degree programs. This paper presents a study of the current state of the practice in software engineering organizations and compares the results with the core body of knowledge recommended by the software engineering reference curriculum.","2377-570X","978-1-5090-0765-3","10.1109/CSEET.2016.34","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7474486","Software Engineering Education;Professional Degree Programs;Software Engineering Degree Programs;Big Data Degree Programs","Software engineering;Organizations;Software;Knowledge engineering;Interviews;Engineering profession","","12","","21","IEEE","23 May 2016","","","IEEE","IEEE Conferences"
"Discussion about an Undergraduate Course on Software Architecture","X. Li; T. Xu; C. Zhang","Software College, Nankai University, Tianjin, China; Computer Science & Technology College, China Civil Aviation University, Tianjin, China; Tianjin Science, Technology University, Tianjin, China",2008 International Conference on Computer Science and Software Engineering,"22 Dec 2008","2008","5","","616","619","This paper presents the content and pedagogy of software architecture course for undergraduate students. Adaptive outline and typical case studies are introduced into the course, work teams and class discussion ways are adopted in teaching. These measures help students obtain the systematic treatment of the concepts and practices at an architectural level of software design.","","978-0-7695-3336-0","10.1109/CSSE.2008.436","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4722977","Software Engineering Education;Software Architecture;Software Design;Software Case studies","Software architecture;Software engineering;Software design;Education;Computer science;Educational institutions;Programming;Technological innovation;Software measurement;Software development management","","","","23","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"1st International Workshop on Replication in Empirical Software Engineering Research (RESER)","C. D. Knutson; J. L. Krein; L. Prechelt; N. Juristo","Brigham Young University, USA; Brigham Young University, USA; Freie Universität Berlin, Germany; Universidad Politécnica de Madrid, Spain",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","461","462","The RESER 2010 workshop provides a venue in which empirical Software Engineering researchers may present and discuss theoretical foundations and methods of replication, as well as the results of replicated studies.","1558-1225","978-1-60558-719-6","10.1145/1810295.1810429","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062248","computer science;methods;replication;reporting;research;software engineering;validation;validity","Software engineering;Educational institutions;USA Councils;Conferences;Software;Computer science;Laboratories","","2","","10","","27 Oct 2011","","","IEEE","IEEE Conferences"
"Poster: Ethics-Aware Software Engineering","F. B. Aydemir; F. Dalpiaz","Utrecht University, The Netherlands; Utrecht University, The Netherlands",2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion),"30 Aug 2018","2018","","","228","229","Human interaction and behavior are at the core of most software engineering (SE) activities. Furthermore, software is created to fulfill human stakeholders' needs and wishes, and the resulting software is ultimately utilized (directly or indirectly) by human users. Today's software is highly intertwined with our lives, and it possesses an increasing ability to act and influence us. Besides the obvious example of self-driving cars and their potential harmfulness, more mundane software such as social networks may introduce bias, break privacy preferences, lead to digital addiction, etc. Additionally, the SE process itself is highly affected by ethical issues, such as diversity and business ethics. This paper introduces ethics-aware SE, a version of SE in which the ethical values of the stakeholders (including developers and users) are captured, analyzed, and reflected in software specifications and in the SE processes.","2574-1934","978-1-4503-5663-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449513","ethics;ethical software engineering;ethical design;ethics compliance;requirements engineering","Ethics;Software;Software engineering;Stakeholders;Organizations;Privacy","","","","8","","30 Aug 2018","","","IEEE","IEEE Conferences"
"A Snapshot of the State of Practice in Software Development for Medical Devices","C. Denger; R. L. Feldmann; M. Host; C. Lindholm; F. Shull","Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Fraunhofer USA Center, Experimental Software Engineering, MD, USA; Lund University, Sweden; Lund University, Sweden; Fraunhofer USA Center, Experimental Software Engineering, MD, USA",First International Symposium on Empirical Software Engineering and Measurement (ESEM 2007),"15 Oct 2007","2007","","","485","487","The medical device industry is a constantly growing domain which makes use of more and more software products. Given the importance to this industry of dependable software components, rigorous software engineering techniques would seem to have an important role to play. However, in a recent survey of the industry we found a lower than expected rate of adoption of certain sound software engineering practices. To ensure and improve the quality of developed software products, whether they are standalone applications or embedded in complex systems, both the medical device industry as well as software engineers have to take action. Our survey is a first step in this direction and may help in identifying appropriate programs and future research topics.","1949-3789","978-0-7695-2886-1","10.1109/ESEM.2007.54","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4343787","","Programming;Software engineering;Computer industry;Embedded software;Software quality;Application software;Safety;Databases;Software measurement;Acoustical engineering","","16","","3","IEEE","15 Oct 2007","","","IEEE","IEEE Conferences"
"What should students learn in their first (and often only) software engineering course?","J. Vallino","Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA",2013 26th International Conference on Software Engineering Education and Training (CSEE&T),"12 Sep 2013","2013","","","335","337","The questions that are proposed as the basis for academy panel sessions are important ones to ask. In the aggregate, they cover an enormous expanse of the software engineering landscape. The reality of undergraduate computing education is that the vast majority of students do not go through software engineering curricula where there is time to address the academy questions in some depth. Instead, they are in computer science or computer engineering programs, and receive their software engineering education in a single course. What students should really learn in this first, and often only, software engineering course is important because the majority of computing students will not see any other software engineering. The course designer will need to make judicious choices in selecting the material for this course because all of software engineering will not fit in just one course even if you try by using one of the classic software engineering tomes as the textbook. I do not know the right answer to the question I pose in the title of this position paper. I suspect that there is no one set of software engineering topics that should be included, but rather a range of topics to select from based on the purpose and perspective of the course. The answer to this question is important to everyone who has responsibility for providing the software engineering education for the next generation of computing students.","2377-570X","978-1-4673-5140-9","10.1109/CSEET.2013.6595273","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6595273","","Software engineering;Computer science;Education;Computers;Materials;Conferences;Teamwork","","6","","4","IEEE","12 Sep 2013","","","IEEE","IEEE Conferences"
"Nancy Mead and Software Engineering Education: Advancements through Action","J. H. Hayes; M. Biddle","Department of Computer Science, University of Kentucky, USA; Lexmark International, USA",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","244","249","Some researchers have had the good fortune to collaborate with practitioners to see their work applied. Some practitioners have had the opportunity to perform research. Some educators have the opportunity to perform research and apply ideas in the classroom. Few have been able to perform research, work with practitioners, be an educator, and be a practitioner. Nancy Mead has done all these, and software engineering education has been one of the fortunate benefactors. This paper presents an examination of Dr. Meadpsilas contributions to software engineering education, in terms of research and role modeling, by using her security quality requirements engineering (SQUARE) process as an organizing theme.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.11","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556972","Nancy Mead;software engineering education;industry collaboration","Software engineering;Security;Collaborative work;Computer industry;Government;Collaborative software;Computer science education;Computer science;Organizing;Educational programs","","1","","8","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"A software engineering senior design project inherited from a partially implemented software engineering class project","P. Brazier; A. Garcia; A. Vaca","Department of Computer Science, University of Texas-Pan American, Edinburgh, TX, UK; Department of Computer Science, University of Texas-Pan American, Edinburgh, TX, UK; Department of Computer Science, University of Texas-Pan American, Edinburgh, TX, UK","2007 37th Annual Frontiers In Education Conference - Global Engineering: Knowledge Without Borders, Opportunities Without Passports","4 Jan 2008","2007","","","F4D-7","F4D-12","For a computer science program in which students are required to complete one course in Software Engineering, it is impossible to create a polished finished product for a project of any significant size that can demonstrate all the phases of the project. This can be solved by requiring students to complete a full set of requirements and specifications. Develop design documents for only a subset of the requirements and an even more limited implementation of the design documents. The artifacts from such a class can then be used as the foundation for a senior capstone design course. This allows for the development of skills that are directly needed in the real world, in which a team is given a set of requirements to implement, or is assigned to an existing project to continue its development, or is assigned to a project team that maintains existing code. Anticipated skills developed by the student by such a capstone project are: the ability to read and understand requirements and specifications, the ability to understand preexisting designs and the design decisions that contributed to the design, the ability to understand existing code, the ability to enhance the code to complete a project based on the requirements, and the ability to evaluate preexisting documentation. This paper will describe such a software engineering class project that involved a client from another academic department to develop a non-trivial internet based software application, which supported the department's scheduling of faculty to classes, using an internet based web service to solve the linear programming problem that resulted from the constraints of the problem. The paper will then discuss the subsequent senior design project and implementation that followed.","2377-634X","978-1-4244-1083-5","10.1109/FIE.2007.4418071","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4418071","Software Engineering Project;Software Engineering Senior Design Project;Problem-based Learning","Software engineering;Software design;Computer science;Documentation;Web and internet services;Application software;Scheduling;Web services;Linear programming;Software maintenance","","4","","12","IEEE","4 Jan 2008","","","IEEE","IEEE Conferences"
"Engineering design for software: on defining the software engineering profession","J. L. Diaz-Herrera","School of Computing and Software Engineering, Southern Polytechnic State University, Marietta, GA, USA",31st Annual Frontiers in Education Conference. Impact on Engineering and Science Education. Conference Proceedings (Cat. No.01CH37193),"6 Aug 2002","2001","1","","T2D","1","Since the mid-1980s, software engineering has been accepted as a formal field of study in academia. Software engineering education is maturing from specialized courses in computer science, to numerous Master's programs, and more recently to the advent of undergraduate as well as PhD programs. What is new today is the widespread impetus from many fronts to consider software development as engineering profession. The notion of whether software development is engineering can be answered in a number of ways. In this paper, the authors look at generally accepted definitions of engineering and show their correspondence or applicability to software development. They demonstrate through a detailed analysis how prominent features that cut across all engineering disciplines are found in software engineering as well. They conclude with a discussion of the educational implications.","0190-5848","0-7803-6669-7","10.1109/FIE.2001.963880","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=963880","","Design engineering;Software design;Software engineering;Programming;Computer science education;Educational programs;Computer science;USA Councils;Certification;Engineering profession","","3","","26","IEEE","6 Aug 2002","","","IEEE","IEEE Conferences"
"5th International workshop on software engineering for Computational Science and Engineering (SE-CSE 2013)","J. C. Carver; T. Epperly; L. Höchstein; V. Maxville; D. Pfahl; J. Sillito","University of Alabama, USA; Lawrence Livermore National Laboratory, USA; Nimbis Services, USA; IVEC, Australia; University of Tartu, Estonia; University of Calgary, Canada",2013 35th International Conference on Software Engineering (ICSE),"26 Sep 2013","2013","","","1547","1548","Computational Science and Engineering (CSE) software supports a wide variety of domains including nuclear physics, crash simulation, satellite data processing, fluid dynamics, climate modeling, bioinformatics, and vehicle development. The increases importance of CSE software motivates the need to identify and understand appropriate software engineering (SE) practices for CSE. Because of the uniqueness of the CSE domain, existing SE tools and techniques developed for the business/IT community are often not efficient or effective. Appropriate SE solutions must account for the salient characteristics of the CSE development environment. SE community members must interact with CSE community members to understand this domain and to identify effective SE practices tailored to CSE's needs. This workshop facilitates that collaboration by bringing together members of the CSE and SE communities to share perspectives and present findings from research and practice relevant to CSE software and CSE SE education. A significant portion of the workshop is devoted to focused interaction among the participants with the goal of generating a research agenda to improve tools, techniques, and experimental methods for CSE software engineering.","1558-1225","978-1-4673-3076-3","10.1109/ICSE.2013.6606780","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6606780","Software Engineering;Computational Science;Computational Engineering","Conferences;Software;Communities;Software engineering;Scientific computing;Education;Business","","2","","6","IEEE","26 Sep 2013","","","IEEE","IEEE Conferences"
"Uncertainty management in software engineering: Past, present, and future","H. Ibrahim; B. H. Far; A. Eberlein; Y. Daradkeh","University of Calgary, Calgary, AB, Canada; University of Calgary, Calgary, AB, Canada; Department of Computer Science & Engineering, American University of Sharjah, UAE; University of Calgary, Calgary, AB, Canada",2009 Canadian Conference on Electrical and Computer Engineering,"19 Jun 2009","2009","","","7","12","Software development has significantly matured in the last decade. However, one of the critical challenges today is uncertainty inherent to every aspect of software development including requirement specifications, design, coding, and testing. In this paper, we propose a framework for uncertainty management in software engineering. The framework is used to model uncertainty inherent to software development activities and manage their consequences. The framework consists of four main phases: identification and prioritization, modeling and analysis, management and planning, and monitoring and evaluation. Commercial Off-The-Shelf (COTS)-based development is selected as an example to illustrate how the proposed framework is used in a simple but intuitive case study to represent uncertainty and manage its consequences.","0840-7789","978-1-4244-3509-8","10.1109/CCECE.2009.5090081","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5090081","Uncertainty management;Software Engineering;COTS-Based Development","Uncertainty;Engineering management;Software engineering;Programming;Software development management;Software design;Monitoring;Decision making;Bayesian methods;Software systems","","5","","20","IEEE","19 Jun 2009","","","IEEE","IEEE Conferences"
"Two Mistakes and Error-Free Software: A Confession","R. L. Glass",Computing Trends,IEEE Software,"24 Jun 2008","2008","25","4","96","96","The software development process and the resulting product are so complex that no error-detecting approach will ever be able to produce error-free software. The test coverage analyzer was a wonderful tool for measuring how well-tested a piece of software. First, the software being tested is instrumented so that the tool would capture which of the software's logic segments had been executed. Then a suite of test cases are run against that software and learned which segments had been executed, and how many times. The Test Coverage Analyzer concept, in whatever form it takes today, is still important and useful. And so are all the other error- removal processes we've developed over the years. But it will take a pretty elaborate combination of testing approaches to even let us produce truly reliable software.","1937-4194","","10.1109/MS.2008.102","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4548415","software engineering;software errors;error-free software;silver bullet;Test Coverage Analyzer","Software testing;Software engineering;Aerospace testing;Software tools;Logic testing;Combinatorial mathematics;Couplings;Engineering profession;Research and development;Databases","","3","","","IEEE","24 Jun 2008","","","IEEE","IEEE Magazines"
"Barely sufficient software engineering: 10 practices to improve your CSE software","M. A. Heroux; J. M. Willenbring","Sandia National Laboratories, USA; Sandia National Laboratories, USA",2009 ICSE Workshop on Software Engineering for Computational Science and Engineering,"5 Jun 2009","2009","","","15","21","Computational Science and Engineering (CSE) software is typically developed using research funding where the primary focus is research and development of advanced algorithms and modeling capabilities. As a result, formal software engineering is seldom a primary goal. CSE software developers intend to write good software, but often lack the training, resources or time to adopt advanced formal methods and practices. In this paper, we present a list of practices identified from the Trilinos project that we believe most CSE software teams can adopt and from which they can benefit.","","978-1-4244-3737-5","10.1109/SECSE.2009.5069157","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5069157","","Software engineering;Laboratories;Software algorithms;Software quality;Research and development;Application software;Software libraries;Automotive engineering;Programming;US Department of Energy","","14","","13","IEEE","5 Jun 2009","","","IEEE","IEEE Conferences"
"Reducing Friction in Software Development","P. Avgeriou; P. Kruchten; R. L. Nord; I. Ozkaya; C. Seaman","University of Groningen; University of British Columbia; Software Engineering Institute; Software Engineering Institute; Baltimore County, University of Maryland",IEEE Software,"29 Dec 2015","2016","33","1","66","73","Software is being produced so fast that its growth hinders its sustainability. Technical debt, which encompasses internal software quality, evolution and maintenance, reengineering, and economics, is growing such that its management is becoming the dominant driver of software engineering progress. It spans the software engineering life cycle, and its management capitalizes on recent advances in fields such as source code analysis, quality measurement, and project management. Managing technical debt will become an investment activity applying economic theories. It will effectively address the architecture level and will offer specific processes and tools employing data science and analytics to support decision making. It will also be an essential part of the software engineering curriculum. Getting ahead of the software quality and innovation curve will inevitably involve establishing technical-debt management as a core software engineering practice. This article is part of a special issue on the Future of Software Engineering.","1937-4194","","10.1109/MS.2016.13","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7367977","technical debt;software management;software economics;software quality;software engineering;software development;software architecture;maintenance and evolution;sustainability;education","Software development;Economics;Software engineering;Stakeholders;Sustainability;Maintenance engineering","","38","","13","IEEE","29 Dec 2015","","","IEEE","IEEE Magazines"
"Effectively using search-based software engineering techniques within model checking and its applications","J. S. Bradbury; D. Kelk; M. Green","Software Quality Research Laboratory, University of Ontario Institute of Technology, Oshawa, ONT, Canada; Software Quality Research Laboratory, University of Ontario Institute of Technology, Oshawa, ONT, Canada; Software Quality Research Laboratory, University of Ontario Institute of Technology, Oshawa, ONT, Canada",2013 1st International Workshop on Combining Modelling and Search-Based Software Engineering (CMSBSE),"23 Sep 2013","2013","","","67","70","In this position paper, we affirm that there are synergies to be gained by using search-based techniques within software model checking. We will show from the literature how meta-heuristic search based techniques can augment both the model checking process and its applications. We will provide evidence to support this assertion in the form of existing research work and open problems that may benefit from combining Search-Based Software Engineering (SBSE) techniques and software model checking.","","978-1-4673-6284-9","10.1109/CMSBSE.2013.6605713","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6605713","model checking;state space;search based software engineering","Model checking;Software;Software engineering;System recovery;Software algorithms;Search problems;Computer bugs","","1","","23","IEEE","23 Sep 2013","","","IEEE","IEEE Conferences"
"Soft Skills in Software Development Teams: A Survey of the Points of View of Team Leaders and Team Members","G. Matturro; F. Raschetti; C. Fontán","Departamento de Ingenieria de Software, Universidad ORT Uruguay, Montevideo, Uruguay; Departamento de Ingenieria de Software, Universidad ORT Uruguay, Montevideo, Uruguay; Departamento de Ingenieria de Software, Universidad ORT Uruguay, Montevideo, Uruguay",2015 IEEE/ACM 8th International Workshop on Cooperative and Human Aspects of Software Engineering,"27 Jul 2015","2015","","","101","104","Besides technical knowledge and experience, the so-called ""soft skills"" of team members are also an important factor in software engineering projects. The study of this subject is gaining the attention of researchers and practitioners in recent years. In this paper we report a field study in which we interviewed 35 software engineering practitioners from software companies in Uruguay to know their points of view about what are the soft skills they consider the most valued to have by the leader and the other members of software development teams. As a result, Leadership, Communication skills, Customer orientation, Interpersonal skills, and Teamwork are the most valued for team leaders, while Analytic, problem-solving, Commitment, responsibility, Eagerness to learn, Motivation, and Teamwork are the most valued ones for team members.","","978-1-4673-7031-8","10.1109/CHASE.2015.30","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7166098","Soft skills;software engineering;team leader;team members","Software;Software engineering;Teamwork;Companies;Problem-solving;Planning;Knowledge engineering","","24","","5","IEEE","27 Jul 2015","","","IEEE","IEEE Conferences"
"Continuing Prospects for an Engineering Discipline of Software","M. Shaw","Institute for Software Research, Carnegie Mellon University, USA",IEEE Software,"16 Oct 2009","2009","26","6","64","67","In her 1990 IEEE Software article ""Prospects for an Engineering Discipline of Software"" (Nov./Dec, pp. 15-24), Mary Shaw identified the key areas that the software development profession must address to become a true engineering discipline. That classic article made the magazine's 25th anniversary top picks list (Jan./Feb. 2009, pp. 9-11). Here, Mary reflects on the evolution of her thinking since the publication of ""Prospects"". The paper dealt with the topics of: programming progress; beyond programming; management of the software production; and progress toward an engineering discipline.","1937-4194","","10.1109/MS.2009.172","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5287012","software engineering;commercial practice;critical applications;development techniques;economic force;engineering discipline;expertise;information processing;professional specializations;routine practice;science;scientific basis;software engineering;software technology","Programming profession;Engineering management;Production","","13","","10","IEEE","16 Oct 2009","","","IEEE","IEEE Magazines"
"Signs of Agile Trends in Global Software Engineering Research: A Tertiary Study","G. K. Hanssen; D. Šmite; N. B. Moe","SINTEF ICT, Trondheim, Norway; NA; SINTEF ICT, Trondheim, Norway",2011 IEEE Sixth International Conference on Global Software Engineering Workshop,"3 Nov 2011","2011","","","17","23","In this paper we present preliminary findings from a tertiary study on global software engineering. In particular, we observe current trends in the software engineering research and perform an investigation of the role of agile topics in the GSE research literature. Our findings indicate that agility is one of the topics attracting attention in the research agenda for global software companies. In contrast to recent beliefs that agile and distributed are two incompatibilities Global Agile development becomes more and more accepted, a trend which we also see from the growing amount of research on GSE and agile. Finally we conclude that there are indications that both globalization and ""agilization"" of software companies are stable trends for the future but that there is a strong need for further studies on the particular challenges that distribution of work imposes on the principles of agile development.","2329-6313","978-1-4577-1839-7","10.1109/ICGSE-W.2011.12","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6065571","global software engineering;tertiary study","Software engineering;Programming;Systematics;Software;Conferences;Teamwork","","41","","23","IEEE","3 Nov 2011","","","IEEE","IEEE Conferences"
"Shifting the paradigms from teaching project management to teaching software project management at Jordan university of science and technology based on the IEEE software engineering management knowledge area","M. A. Radaideh","Jordan university of science and technology, Irbid, Jordan",2021 International Conference on Computational Science and Computational Intelligence (CSCI),"22 Jun 2022","2021","","","1072","1078","software engineers usually find themselves in project/Administrative/Operational management positions. Therefore, it is very important to include a senior software project management course in any software engineering curriculum. software engineers mostly experience planning Challenges when it comes to budgeting, scheduling, identifying and assessing potential risks, and communicating with their customers and team members. transforming the traditional project management education to a software project management education is crucial to equipping software engineers with adequate practical experience in the software Domain.This paper describes a senior software project management course that is based on the project management Body of knowledge (PMBOK Guide), and the IEEE software engineering Body of knowledge (SWEBOK-V3.0). It also attempts to answer several research questions that involves the main differences between the traditional project management approaches and the software project management approach, and the course compliance with the accreditation Criteria of the institute of the engineering and technology (IET) and the accreditation board for engineering and technology (ABET).","","978-1-6654-5841-2","10.1109/CSCI54926.2021.00227","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9799117","software engineering;project management;project management education;PM;PM education;software project management;software project management education;SPM;SPM education;software engineering Body of knowledge;SWEBOK-V3.0;agile software project management;and SCRUM software project management","Knowledge engineering;Scientific computing;Conferences;Education;Project management;Software;Accreditation","","1","","11","IEEE","22 Jun 2022","","","IEEE","IEEE Conferences"
"2nd International Workshop on Software Engineering Challenges for the Smart Grid (SE4SG 2013)","I. Gorton; H. Koziolek; Y. Liu; A. Koziolek; M. Salehie","Pacific Northwest National Laboratory, Richland, WA, USA; Concordia University, Montreal, Canada; Industrial Software Systems, ABB Corporate Research Center, Ladenburg, Germany; Karlsruhe Institute of Technology, Karlsruhe, Germany; Lero Software Engineering Research Centre, Limerick, Ireland",2013 35th International Conference on Software Engineering (ICSE),"26 Sep 2013","2013","","","1553","1554","The 2nd International Workshop on Software Engineering Challenges for the Smart Grid focuses on understanding and identifying the unique challenges and opportunities for SE to contribute to and enhance the design and development of the smart grid. In smart grids, the geographical scale, requirements on real-time performance and reliability, and diversity of application functionality all combine to produce a unique, highly demanding problem domain for SE to address. The objective of this workshop is to bring together members of the SE community and the power engineering community to understand these requirements and determine the most appropriate SE tools, methods and techniques.","1558-1225","978-1-4673-3076-3","10.1109/ICSE.2013.6606783","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6606783","Software Engineering;Smart Grid","Smart grids;Conferences;Communities;Software engineering;Software;Reliability;Industries","","","","","IEEE","26 Sep 2013","","","IEEE","IEEE Conferences"
"Software engineering education: following a moving target","D. Rosca; W. Tepfenhart; J. McDonald","Software Engineering Department, Monmouth University, West Long Branch, NJ, USA; Software Engineering Department, Monmouth University, West Long Branch, NJ, USA; Software Engineering Department, Monmouth University, West Long Branch, NJ, USA","Proceedings 16th Conference on Software Engineering Education and Training, 2003. (CSEE&T 2003).","2 Apr 2003","2003","","","129","139","This paper presents the main lessons learned over 16 years in offering a graduate degree in software engineering at Monmouth University. It covers the challenges in delivering a program that meets the needs of industry and students in a highly dynamic field. The evolution of the curriculum induced by the continuous advances in the field and industry practice is presented. This evolution is an example of a transition from a ""computer science curriculum with an engineering flavor"", towards a software engineering curriculum. The special meaning of continuous course content development in software engineering is argued through issues pertaining to dated textbooks, ever-changing programming languages, operating systems, and software tools. The paper also presents our experience in dealing with the diversity of the student body, and its influence on the curriculum and course content. We conclude with the presentation of future directions for this program.","1093-0175","0-7695-1869-9","10.1109/CSEE.2003.1191370","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1191370","","Software engineering;Project management;Quality management;Engineering management;Computer languages;Operating systems;Software tools;Computer science;History;Educational institutions","","","","9","IEEE","2 Apr 2003","","","IEEE","IEEE Conferences"
"Using ethnographic methods in software engineering research","H. Sharp; C. deSouza; Y. Dittrich","The Open University Walton Hall, Milton Keynes, Milton Keynes, UK; IBM Brazil, São Paulo, CP, Brazil; IT University of Copenhagen, Copenhagen S, Denmark",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","491","492","This tutorial provides an overview of the role of ethnography in Software Engineering research. It describes the use of ethnographic methods as a means to provide an in-depth understanding of the socio-technological realities surrounding everyday software development practice. The knowledge gained can be used to improve processes, methods and tools as well as develop observed industrial practices. The tutorial begins with a brief historical account of ethnography in the fields of Software Engineering, CSCW, Information Systems and other related areas. This sets the stage for a more in-depth discussion of methods for data collection and analysis used in ethnographic studies. It then describes how these methods can be and have been used by software engineering researchers to understand developers' work practices, to inform the development of processes, methods and tools and to evaluate the applicability of current processes, methods and tools. Finally, some practical issues concerning the selection and use of ethnographic methods by software engineers are discussed. Throughout the tutorial, examples from the presenters' experience illustrate the points made.","1558-1225","978-1-60558-719-6","10.1145/1810295.1810445","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062263","empirical software engineering;ethnography;qualitative methods;qualitative research","Software engineering;Software;Tutorials;Programming;Information systems;Context;Educational institutions","","2","","13","","27 Oct 2011","","","IEEE","IEEE Conferences"
"Engineering the software of robotic systems","F. Ciccozzi; D. Di Ruscio; I. Malavolta; P. Pelliccione; J. Tumova","Mälardalen University, Västerås, Sweden; University of L'Aquila, Italy; Vrije Universiteit Amsterdam, The Netherlands; Chalmers University of Technology, University of Gothenburg, Sweden; KTH Royal Institute of Technology, Sweden",2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C),"24 Aug 2017","2017","","","507","508","The production of software for robotic systems is often case-specific, without fully following established engineering approaches. Systematic approaches, methods, models, and tools are pivotal for the creation of robotic systems for real-world applications and turn-key solutions. Well-defined (software) engineering approaches are considered the ""make or break"" factor in the development of complex robotic systems. The shift towards well-defined engineering approaches will stimulate component supply-chains and significantly reshape the robotics marketplace. The goal of this technical briefing is to provide an overview on the state of the art and practice concerning solutions and open challenges in the engineering of software required to develop and manage robotic systems. Model-Driven Engineering (MDE) is discussed as a promising technology to raise the level of abstraction, promote reuse, facilitate integration, boost automation and promote early analysis in such a complex domain.","","978-1-5386-1589-8","10.1109/ICSE-C.2017.167","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7965406","Software Engineering;Robotics;Model-Driven Engineering","Software engineering;Systematics;Automation;Robot sensing systems;Model driven engineering","","8","","9","IEEE","24 Aug 2017","","","IEEE","IEEE Conferences"
"Industry/University software engineering collaborations for the successful reeducation of non-software professionals","H. J. C. Ellis; N. R. Mead; A. M. Moreno; S. B. Seidman","Rensselaer, Hartford, USA; Software Engineering Institute, USA; Universidad Politécnica de Madrid, Spain; New Jersey Institute of Technology, USA","Proceedings 16th Conference on Software Engineering Education and Training, 2003. (CSEE&T 2003).","2 Apr 2003","2003","","","44","51","Production of software is growing at a phenomenal rate worldwide. In addition, the increasingly global business climate has accelerated the need for business software. There are too few software engineers to produce and maintain software to meet this demand. One possible solution to correcting this shortfall is reeducating existing non-software employees to become software engineers. For the past two years, the Industry/University (UU) subgroup of the Working Group on Software Engineering Education and Training (WGSEET) has been investigating active collaborations between companies and universities in which employees without formal software education are reeducated to become software engineers. This paper reports on our findings by discussing our approach to the investigation, outlining the factors involved in successful collaboration construction and execution, and describing alumni views of the knowledge and skills transferred by the collaboration.","1093-0175","0-7695-1869-9","10.1109/CSEE.2003.1191349","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1191349","","Computer industry;Software engineering;Collaborative software;Software maintenance;Maintenance engineering;Industrial training;Collaborative work;Production;Acceleration;Collaboration","","7","","15","IEEE","2 Apr 2003","","","IEEE","IEEE Conferences"
"Insanity, Hiring, and the Software Industry","S. Tockey",Construx Software,Computer,"13 Nov 2015","2015","48","11","96","101","Software project and product outcomes strongly suggest that the software industry still suffers from dismal performance. A brief survey of job postings reveals a significant gap between what hiring managers of software developer positions are asking for and what they actually need.","1558-0814","","10.1109/MC.2015.318","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7328661","software education;software development;software engineering;software industry;software testing;software requirements;Computing Education","Software development;Product development;Software testing;Complexity theory;Knowledge engineering;Software engineering","","4","","8","IEEE","13 Nov 2015","","","IEEE","IEEE Magazines"
"Generic Skills in Software Engineering Master Thesis Projects: Towards Rubric-Based Evaluation","R. Feldt; M. Höst; F. Lüders","Systems and Software Engineering, Blekinge Institute of Technology, Ronneby, Sweden; Computer Science, Lund University, Lund, Sweden; School of Innovation, Design and Engineering, Mälardalen University, Vasteras, Sweden",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","12","15","There has been much recent interest in how to help students in higher education develop their generic skills, especially since this is a focus of the Bologna process that aims to standardize European higher education. However, even though the Master thesis is the final and often crucial part of a graduate degree and requires many generic skills very little research has directly focused on them. In particular, there is a lack of such knowledge for engineering education programs. In this paper we present results from a survey where we asked 23 students from three different Swedish universities about which generic skills are needed and developed in a Master thesis project in Software Engineering. One outcome of our analysis is that there is a lack of understanding on how to define, and thus examine, generic skills in software engineering thesis projects.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.54","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812668","Software Engineering;Master Thesis;Generic Skills;Bologna;Rubrics","Software engineering;Systems engineering education;Computer science education;Computer science;Technological innovation;Design engineering;Educational technology;Educational programs;Engineering education;Large-scale systems","","10","","7","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"Blockchain-Oriented Software Engineering: Challenges and New Directions","S. Porru; A. Pinna; M. Marchesi; R. Tonelli","Department of Electrical and Electronic Engineering, University of Cagliari; Department of Electrical and Electronic Engineering, University of Cagliari; Department of Electrical and Electronic Engineering, University of Cagliari; Department of Electrical and Electronic Engineering, University of Cagliari",2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C),"3 Jul 2017","2017","","","169","171","In this work, we acknowledge the need for software engineers to devise specialized tools and techniques for blockchain-oriented software development. Ensuring effective testing activities, enhancing collaboration in large teams, and facilitating the development of smart contracts all appear as key factors in the future of blockchain-oriented software development.","","978-1-5386-1589-8","10.1109/ICSE-C.2017.142","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7965292","blockchain;software engineering;smart contracts;cryptocurrencies","Software;Software engineering;Testing;Contracts;Measurement;Law;Unified modeling language","","196","1","14","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"Research on Software Life Cycle Model Suitable for Aerospace System Engineering","C. Dong; H. Fang; H. Zhang; Y. Wang; X. Ling","Beijing Institute of Aerospace Long March Aircraft, Beijing, China; Beijing Institute of Aerospace Long March Aircraft, Beijing, China; Beijing Institute of Aerospace Long March Aircraft, Beijing, China; Beijing Institute of Aerospace Long March Aircraft, Beijing, China; Beijing Institute of Aerospace Long March Aircraft, Beijing, China",2021 IEEE 12th International Conference on Software Engineering and Service Science (ICSESS),"31 Aug 2021","2021","","","300","303","China’s aerospace products are known all over the world for their high efficiency and high quality, and aerospace software plays an important role in aerospace system engineering. However, the traditional Software Life Cycle Model is not suitable for the high-efficiency and high-quality development requirements of aerospace products. This paper summarizes the characteristics of the aerospace system engineering and the characteristics of aerospace software, and proposes a rapid iterative development model based on mature technical solutions. Using this model to develop aerospace software products can solve efficiency and quality issues at the same time, opening up new ideas for aerospace software development. And the effectiveness of the model has been proved through practice.(Abstract)","2327-0594","978-1-6654-1506-4","10.1109/ICSESS52187.2021.9522355","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9522355","aerospace software;Software Life Cycle Model;rapid iterative development model","Conferences;Systems engineering and theory;Software;Aerospace engineering;Software engineering","","","","6","IEEE","31 Aug 2021","","","IEEE","IEEE Conferences"
"Victor R. Basili's contributions to software quality","F. Shull; C. Seaman; M. Zelkowltz","Fraunhofer Center for Experimental Software Engineering, Maryland, Maryland; Information systems, University of Maryland; Fraunhofer Center for Experimental Software Engineering, Maryland",IEEE Software,"16 Jan 2006","2006","23","1","16","18","This article deals with Victor R. Basili's contributions to software quality. Basili's contributions cover three broad areas: research in the 1970s and early 1980s on software measurement and the Goal Question Metric (GQM) model, research in the 1980s and 1990s on these measurement ideas' maturation into a software engineering model of empirical studies, including the development of the Quality Improvement Paradigm (QIP) and the influence of the NASA Goddard Space Flight Center Software Engineering Laboratory, and research since 1990 in the Experience Factory as a model for creating learning organizations for continuous software process improvement. Some of Basili's most important contributions are in measuring software development processes and products and gifted the community with an invaluable tool: the GQM approach. The GQM approach is based on the assumption that for an organization to measure its products and processes usefully, it must first specify goals for itself and its projects","1937-4194","","10.1109/MS.2006.33","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1576650","software quality;Victor Basili;Quality Improvement Paradigm;Software Engineering Laboratory;Goal Question Metric","Software quality;Software engineering;Laboratories;Software measurement;Space technology;Particle measurements;Project management;Programming;Production facilities;NASA","","9","","","IEEE","16 Jan 2006","","","IEEE","IEEE Magazines"
"Software process engineering: Strengths, weaknesses, opportunities and threats","M. S. Emami; N. B. Ithnin; O. Ibrahim","Faculty of Computer Science and Information Systems, University Technology of Malaysia, Skudai, Johor, Malaysia; Faculty of Computer Science and Information Systems, University Technology of Malaysia, Skudai, Johor, Malaysia; Faculty of Computer Science and Information Systems, University Technology of Malaysia, Skudai, Johor, Malaysia",INC2010: 6th International Conference on Networked Computing,"14 Jun 2010","2010","","","1","5","Software process engineering has been the challenging in the past 40 years, in the sense that it has been the underpinning of software engineering. On the other hand it has been one of the fundamental and much importance notions in this field; however, the improvement of software process has been the most challenging in software engineering. In the sense, several software process models have been proposed but none of them pay any concrete attention to the security assessment during the software process. Paying less attention to this fact could ultimately cause devastating on public life and national assets. In this paper we intend to analyze the SDLC models to find out the strength, weaknesses, opportunities and threats within these models specially with focus on security aspects and as a result of this research work we show that none of these models have any concrete attention to the software product security.","","978-89-88678-20-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5484845","Software Security;Software Process Engineering;SDLC","Software engineering;Software performance;Software quality;Programming profession;Computer science;Information systems;Software testing;System testing;Software maintenance;Concrete","","1","","31","","14 Jun 2010","","","IEEE","IEEE Conferences"
"A Tool to Facilitate Calibrated Peer Reviews in Software Engineering Education","B. Tenbergen","Department of Computer Science, State University of New York at Oswego, Oswego, New York, United States",2024 36th International Conference on Software Engineering Education and Training (CSEE&T),"10 Sep 2024","2024","","","1","3","In previous work, we have provided a substantive amount of evidence that shows that Calibrated Peer Reviews to facilitate a feeling of “quality” in software engineering students have a strongly positive impact on student learning. Peer reviews repeatedly expose students to examples of different quality and force students to articulate engineering tradeoffs. Using calibration examples of different quality guides students in their evaluation of peer solutions and fosters an appreciation between good and bad solutions to exercise problems in requirements engineering and testing. The result is a significant improvement in test scores and theory retention, however, the overhead for the instructor to facilitate the peer review process outweighs the time saved for grading. In this article, we introduce “CPRtool” to automate collection and distribution of student solutions and peer feedback.","2377-570X","979-8-3503-7897-9","10.1109/CSEET62301.2024.10663024","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10663024","Quality Assurance;Requirements Engineering;Software Engineering Education;Calibrated Peer Review;Peer Assessment;Peer Learning","Reviews;Force;Education;Calibration;Requirements engineering;Software engineering;Testing","","","","12","IEEE","10 Sep 2024","","","IEEE","IEEE Conferences"
"Putting the ""engineering"" into ""software engineering""","P. Kruchten","University of British Columbia, Vancouver, Canada",2004 Australian Software Engineering Conference. Proceedings.,"27 Sep 2004","2004","","","2","8","Is software development really a form of engineering? Or is it just some kind of elaborate craftsmanship? Are we just fooling ourselves thinking that we are doing engineering? If so, it is certainly not from lack of trying hard over the last 20 years. But may be we tackled the problem from the wrong end: we tried to impose techniques from other engineering disciplines onto software development models without understanding the real nature of software. We analyze the similarities and the differences, and pinpoints the key discriminants (lack of fundamental laws, technology churn, no manufacturing stage) that make software endeavours somewhat different than, for example, those in civil or mechanical engineering. We look at a few recent developments that help fill the gaps: iterative development and model-driven design. And we use Frank Gero's function-behaviour-structure framework to help us contrast software engineering with other engineering disciplines.","","0-7695-2089-8","10.1109/ASWEC.2004.1290452","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1290452","","Software engineering;Programming;Mechanical engineering;Software standards;Physics;Costs;Bridges;Pulp manufacturing;Standards development;Application software","","10","","24","IEEE","27 Sep 2004","","","IEEE","IEEE Conferences"
"Implementation of practical exercises in software engineering education to improve the acquirement of functional and non-functional competences: A field report about project-based learning in software engineering","A. Soska; I. Schroll-Decker; J. Mottok","LaS-Laboratory for Safe and Secure Systems, OTH Regensburg, Regensburg, Germany; LaS-Laboratory for Safe and Secure Systems, OTH Regensburg, Regensburg, Germany; LaS3 - Laboratory for Safe and Secure Systems, OTH Regensburg, Regensburg, Germany",2014 International Conference on Interactive Collaborative Learning (ICL),"22 Jan 2015","2014","","","338","345","Software Engineering is a very volatile profession that requires a variety of theoretical as well as practical skills. In addition to expertise technical knowledge, graduates have to have a variety of social, methodical and personal competences. The acquirement of these non-functional competences are getting more and more important for a successful software engineer. To fulfill these requirements, it is necessarily important to prepare future professionals already during their college course of education. This paper presents exercises for a software engineering lecture with the goal to strengthen the students' practical experiences and to support the development of their non-functional competences. The developed exercises impart technical knowledge and encourage the students to improve their self-organized and lifelong learning. Thereby they are facing practical issues in all steps of the software engineering process while working on an inter semester project.","","978-1-4799-4437-8","10.1109/ICL.2014.7017795","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7017795","software engineering education;project-based learning;software engineering exercises;competences","Software engineering;Unified modeling language;Education;Software systems;Interviews;Collaborative work","","2","","10","IEEE","22 Jan 2015","","","IEEE","IEEE Conferences"
"Undergraduate software engineering education: the body of knowledge, existing programs and accreditation","E. Sinderson; L. Spirkovska","University of California, Santa Cruz, USA; University of California, Santa Cruz, USA",Proceedings 14th Conference on Software Engineering Education and Training. 'In search of a software engineering profession' (Cat. No.PR01059),"7 Aug 2002","2001","","","221","230","The software engineering body of knowledge being developed by the Software Engineering Institute is examined. In particular, the curricular recommendations for an undergraduate degree program as put forward by the Working Group on Software Engineering Education and Training are considered. Five undergraduate degree programs from Australia, the United States, and the United Kingdom are then compared to the recommended curricula and each other. Accreditation requirements are discussed, and several likely candidates for accreditation are identified among the programs surveyed. Finally, some likely ways in which this area will develop over the next several years are considered.","1093-0175","0-7695-1059-0","10.1109/CSEE.2001.913847","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=913847","","Software engineering;Educational programs;Accreditation;Professional societies;FAA;Programming;Certification;Licenses;Computer Society;Iron","","2","","21","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"A Software Engineering Course with an Emphasis on Software Processes and Security","R. G. Epstein","Department of Computer Science, West Chester University of Pennsylvania, West Chester, PA, USA",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","67","73","This paper describes an undergraduate course in software engineering which introduces students to a range of approaches to developing software. This course is a required course in the Computer Science major. Special emphasis is given to PSP, CMMI, agile processes, and Open Source software development. Students work on a team project which involves developing a software process for a pretend company. The course also devotes attention to the strengths and weaknesses of various processes in terms of developing secure software. Students are asked to address security concerns in the second of their two team projects. Serving as a basic introduction to software engineering, this course also covers important issues relating to professional responsibilities, ethics and work culture. In many ways, the course introduces students to the human dimensions of engineering software.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.19","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556951","software processes;security;professional responsibilities","Software engineering;Security;Open source software;Coordinate measuring machines;Computer science;Software design;Capability maturity model;Industrial training;Programming profession;Silver","","1","","24","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"SE4HPCS'15: The 2015 International Workshop on Software Engineering for High Performance Computing in Science","J. C. Carver; N. Chue Hong; P. Ciancarini","University of Alabama, USA; Software Sustainability Institute, University of Edinburgh, UK; University of Bologna, Italy",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","1003","1004","HPC software is developed and used in a wide variety of scientific domains including nuclear physics, computational chemistry, crash simulation, satellite data processing, fluid dynamics, climate modeling, bioinformatics, and vehicle development. The increase in the importance of this software motivates the need to identify and understand appropriate software engineering (SE) practices for HPC architectures. Because of the variety of the scientific domains addressed using HPC, existing SE tools and techniques developed for the business/IT community are often not efficient or effective. Appropriate SE solutions must account for the salient characteristics of the HPC, research oriented development environment. This situation creates a need for members of the SE community to interact with members of the scientific and HPC communities to address this need. This workshop facilitates that collaboration by bringing together members of the SE, the scientific, and the HPC communities to share perspectives and present findings relevant to research, practice, and education. A significant portion of the workshop is devoted to focused interaction among the participants with the goal of generating a research agenda to improve tools, techniques, and experimental methods regarding SE for HPC science.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.324","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203149","Software Engineering;Computational Science;Computational Engineering;High Performance Computing","Software;Conferences;Software engineering;Computer architecture;Scientific computing;Computational modeling;High performance computing","","","","7","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Studying the impact of evolution in R libraries on software engineering research","C. Ramirez; M. Nagappan; M. Mirakhorli","Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA",2015 IEEE 1st International Workshop on Software Analytics (SWAN),"2 Apr 2015","2015","","","29","30","Empirical software engineering has become an integral and important part of software engineering research in both academia and industry. Every year several new theories are empirically validated by mining and analyzing historical data from open source and closed source projects. Researchers rely on statistical libraries in tools like R, Weka, SAS, SPPS, and Matlab for their analysis. However, these libraries like any software library undergo periodic maintenance. Such maintenance can be to improve performance, but can also be to alter the core algorithms behind the library. If indeed the core algorithms are changed, then the empirical results that have been compiled with the previous versions may not be current anymore. However, this problem exists only if (a) statistical libraries are constantly edited and (b) the results they produce are difference from one version to another. Hence in this paper, we first explore if either of the above two conditions hold true for one library in the statistical package R. We find that both conditions are true in the case of the randomForest method in the randomForest package.","","978-1-4673-6923-7","10.1109/SWAN.2015.7070486","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7070486","Empirical software engineering;scientific tools;mining software repositories","Libraries;Software engineering;MATLAB;Communities;Data mining;Synthetic aperture sonar","","2","","12","IEEE","2 Apr 2015","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE Draft International Standard - Software and systems engineering--Software testing--Part 1: Concepts and definitions","",,"ISO/IEC/IEEE P29119-1/DIS, December 2020","22 Feb 2021","2021","","","1","69","","","978-1-5044-7422-1","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9360670","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Systems analysis and design;Software testing;Terminology","","","","","","22 Feb 2021","","","IEEE","IEEE Standards"
"Independent accreditation for software engineering programs?","V. Jovanovic; D. Shoemaker; L. Steenkamp","University of Detroit Mercy, USA; University of Detroit Mercy, USA; University of Detroit Mercy, USA",Proceedings 14th Conference on Software Engineering Education and Training. 'In search of a software engineering profession' (Cat. No.PR01059),"7 Aug 2002","2001","","","75","76","Professional societies in IT and accreditation bodies of engineering and computer science may be in dispute while international recognition of professionals is necessary. Can a possibly independent accreditation body, aligned with the proposed IFIP Standard on IT Professionalism, help the software engineering profession?.","1093-0175","0-7695-1059-0","10.1109/CSEE.2001.913822","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=913822","","Accreditation;Software engineering;Application software;Knowledge engineering;Programming profession;Project management;Licenses;Professional societies;Computer science;Software standards","","","","","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Perspectives on the Gap Between the Software Industry and the Software Engineering Education","D. Oguz; K. Oguz","Department of Software Engineering, Yasar University, Izmir, Turkey; Department of Computer Engineering, Izmir University of Economics, Izmir, Turkey",IEEE Access,"30 Aug 2019","2019","7","","117527","117543","The gap between the software industry and software engineering education was first mentioned three decades ago, in 1989. Since then, its existence has been regularly reported on and solutions to close it have been proposed. However, after thirty years this gap resists all efforts for closure. In this study we assert that the gap between industry and academia exists for several reasons that are related and intertwined. To take a broader look at the problem from the perspective of all related entities, we (i) provide a detailed overview of the profession and identify the entities, (ii) extract the causes that stem from these entities and discuss what each entity should do, (iii) report and analyze the results of a questionnaire that has been conducted with students and recent graduates, (iv) emphasize the highlights of the interviews conducted with students, recent graduates and academics, (v) and compile a list of skills that are sought by the industry by analyzing the software engineering job advertisements. We further contribute to finding solutions by considering all entities involved, which provides an opportunity to access all of them, so that each can find out what they can do to acknowledge and narrow the gap. Our study concludes that the gap requires constant attention and hard work for all of the entities involved, and therefore all should be on the lookout for new technologies, learn to embrace the changes and adapt to them, so that the gap is kept at a minimum.","2169-3536","","10.1109/ACCESS.2019.2936660","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8808915","Software engineering education;education gap;engineering curriculum","Software;Software engineering;Industries;Education;Knowledge engineering;Interviews;Teamwork","","35","","61","CCBY","21 Aug 2019","","","IEEE","IEEE Journals"
"Using community-based projects in software engineering education","R. Roshandel; J. Gilles; R. LeBlanc","Computer Science & Software Engineering, Seattle University, Seattle, WA, USA; Computer Science & Software Engineering, Seattle University, Seattle, WA, USA; Computer Science & Software Engineering, Seattle University, Seattle, WA, USA",2011 24th IEEE-CS Conference on Software Engineering Education and Training (CSEE&T),"16 Jun 2011","2011","","","472","476","Over the past six years, Seattle University's Master of Software Engineering program has adopted a common community-based software engineering project as the basis for class projects in a sequence of required and elective courses. These related projects offer a unifying experience for students in the program, allow in-depth treatment of course topics on a real software project, address needs of local non-profit organizations, and better prepare the students for their professional careers through civic engagement and leadership.","2377-570X","978-1-4577-0348-5","10.1109/CSEET.2011.5876127","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5876127","","Software engineering;Communities;Software;Organizations;Data models;Prototypes;Education","","4","","5","IEEE","16 Jun 2011","","","IEEE","IEEE Conferences"
"Re-founding software engineering practice - The SEMAT initiative","B. Dwolatzky","Joburg Centre for Software Engineering (JCSE), University of the Witwatersrand, Johannesburg, South Africa",Proceedings of the 2012 4th IEEE Software Engineering Colloquium (SE),"19 Jul 2012","2012","","","1","3","In 2009 a group of leading international Software Engineering thinkers, authors and methodologists began collaborating on an initiative to “Re-found” Software Engineering. Ivar Jacobson (Use Cases, UML, RUP), Bertrand Meyer (Design-by-Contract and the OO Language Eiffel) and Richard Soley (CEO of the Object Management Group (OMG)) established the SEMAT (Software Engineering Method and Theory) Initiative. Supporters of the initiative have signed a declaration somewhat reminiscent of the famous Agile Manifesto. Over the past two years a great deal of work has been carried out on defining the “kernel of widely-agreed elements”. It holds out the promise of fundamentally changing the discipline of software engineering. This short paper describes the current status of SEMAT and explores opportunities for the SA Software Engineering community to become active participants in this initiative.","","978-1-4673-1647-7","10.1109/SE.2012.6242347","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6242347","Software Engineering;SEMAT;Methods;Practice;Kernel","Software engineering;Kernel;Jacobian matrices;Communities;Programming;Unified modeling language","","1","","6","IEEE","19 Jul 2012","","","IEEE","IEEE Conferences"
"IEEE Software Engineering Standards: A Student's Version","R. H. Thayer; A. D. McGettrick","Software Management Training Limited Liability Company; University of Strathclyde, UK",20th Conference on Software Engineering Education & Training (CSEET'07),"16 Jul 2007","2007","","","229","236","This paper describes the uses of software engineering standards in a university curriculum. The paper points out the importance of software engineering standards, the issues relating to their use in software engineering and computer science courses, and which of these courses would benefit from using these standards. This information is documented in a new textbook, the IEEE software engineering standards: a students' version published by the IEEE Computer Society Press in 2007. This textbook lists the standards necessary to support the software engineering laboratory and other software courses. The book also provides a detailed description of each of these listed standards that have been tailored to match the requirements of a university course in software development. These tailored standards are based on the ""look and feel"" of as well as the structure of the IEEE's commercial software engineering standards. In addition, the book is ""salted"" with stories from both software development work places and the university classroom, both of which provide illustrations relating to some of the problems in developing software, and in some cases solutions to these problems.","2377-570X","0-7695-2893-7","10.1109/CSEET.2007.28","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4271610","","Software standards;Software engineering;Standards development;Programming;Books;Management training;Computer Society;Knowledge engineering;Communication system control;Personnel","","2","","","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"Exploration on internationalizing software engineering education","W. Xing","School of Software Engineering, Beijing Jiaotong University, Beijing, China","2012 2nd International Conference on Consumer Electronics, Communications and Networks (CECNet)","17 May 2012","2012","","","2585","2588","The internationalization of higher education has been a dominant trend of most universities, meanwhile the need of qualified international software engineers is pressing as the rapid development of software industry. The study on internationalizing software engineering education has been becoming an urgent issue to the universities in China. In this paper, the main problems on the way to internationalize software engineering education are analyzed. Based on these problems, the School of Software Engineering in Beijing Jiaotong University is making some exploration on pushing Chinese software engineering education internationalization, which is presented in the paper. The achievements may be taken as a reference and example to speed up the process of internationalization of software engineering education in China.","","978-1-4577-1415-3","10.1109/CECNet.2012.6202126","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6202126","Software engineer training;Internationalization;Higher engineering education","Educational institutions;Software;Training;Software engineering;Standards;Industries","","","","5","IEEE","17 May 2012","","","IEEE","IEEE Conferences"
"2nd International Workshop on Software Engineering Research and Industrial Practice (SER&IP 2015)","J. Bishop; R. Shukla; F. Shull; S. Sen","Microsoft Research Connections, Redmond, USA; Infosys Labs Infosys Limited, India; Software Solutions Division, Carnegie Mellon University Software Engineering Inst., Arlington, USA; Simula Research Laboratory, Norway",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","1007","1008","Differing perceptions and expectations are obstaclesto collaboration between software engineering (SE) researchersand practitioners: Researchers often have a view thatpractitioners are reluctant to share real data. Practitionersbelieve that researchers are mostly working on topics which aredivorced from real industrial needs. Researchers believe thatpractitioners are looking for quick fixes. Practitioners have aview that case studies in research do not represent thecomplexities of real projects. Researchers may expect a few yearsto do research on a problem whereas practitioners expect a quicksolution that pays off immediately.Researchers and practitioners need to identify the gaps and todiscover the ways to collaborate to strengthen SE research andindustrial practice (IP). The main purpose of this workshop is tobring together researchers and practitioners to discuss thecurrent state of SE research and IP and to enhance collaborationbetween them. The SER&IP 2015 workshop provided a platformto share success stories of SE research-practice partnerships aswell as to discuss the challenges, through a day-long agenda ofkeynotes, paper presentations and round table discussions.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.352","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203151","Software engineering research;industrial practice;researchers;practitioners;collaboration;challenges","Conferences;Industries;Software engineering;Collaboration;Software;Business;Australia","","","","5","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Research and practice on software engineering undergraduate curriculum NJU-SEC2006","E. Ding; B. Luo; D. Zhang; J. Ge; D. Shao; H. Wang","State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China; State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China; State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China; State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China; State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China; State Key Laboratory of Novel Software Technology, Nanjing University, Nanjing, China",2011 24th IEEE-CS Conference on Software Engineering Education and Training (CSEE&T),"16 Jun 2011","2011","","","492","496","Training a large number of qualified software engineers is a great challenge for universities, and curriculum design is an important issue. Based on IEEE-CS/ACM SE2004, Nanjing University in China designs the software engineering undergraduate curriculum NJU-SEC2006. There are three main concerns about the curriculum design. Firstly, the knowledge delivering sequence is designed to match the different scales (small/medium/large) software development. Secondly, the knowledge of professional practices is integrated into courses throughout the whole undergraduate program. Thirdly, traditional computer science courses are reformed according to the situation of China. NJU-SEC2006 has been executed for years, and received positive feedback from students, instructors and employers.","2377-570X","978-1-4577-0348-5","10.1109/CSEET.2011.5876131","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5876131","","Software engineering;Programming;Teamwork;Training;Software systems","","2","","6","IEEE","16 Jun 2011","","","IEEE","IEEE Conferences"
"Whither (away) Software Engineers in SBSE?","C. L. Simons","Department of Computer Science and Creative Technologies, University of West of England, Bristol, UK",2013 1st International Workshop on Combining Modelling and Search-Based Software Engineering (CMSBSE),"23 Sep 2013","2013","","","49","50","This challenges and open problems paper discusses the role of software engineers when combining modeling with Search-Based Software Engineering (SBSE). With SBSE techniques increasingly providing insights into difficult software modeling problems, the role of the software engineer might be thought of as diminishing. However, given the crucial role of the model understanding in SBSE, we argue that the role of the software engineer will become more important through interactive SBSE, although exploiting this interaction remains a challenge for the field.","","978-1-4673-6284-9","10.1109/CMSBSE.2013.6604437","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6604437","Software Engineers;Search-Based Software Engineering;Interaction","Software;Computational modeling;Unified modeling language;Software engineering;Solid modeling;Measurement;Search problems","","2","","13","IEEE","23 Sep 2013","","","IEEE","IEEE Conferences"
"Managing the performance of software engineering professionals","L. Peters",Software Consultants International Limited,"Proceedings 16th Conference on Software Engineering Education and Training, 2003. (CSEE&T 2003).","2 Apr 2003","2003","","","338","","This tutorial is directed at Software Engineering Managers and Senior Software Engineers in position of leadership, essentially anyone who is charged with evaluating and improving the performance of Software Professionals (both Software Engineering Managers and Software Engineers). It aims to provide attendees with a method they can employ in their own organizations at whatever level they deem appropriate in order to improve the performance of the high technology professionals reporting to them.","1093-0175","0-7695-1869-9","10.1109/CSEE.2003.1191400","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1191400","","Engineering management;Software engineering;Software performance;Software tools;Psychology;Appropriate technology;Software measurement;Management training","","","","","IEEE","2 Apr 2003","","","IEEE","IEEE Conferences"
"Engineering a Software Supported Health Risk Appraisal Method: A Joint Effort between Academia and Health Care Industry","S. Skevoulis; J. Campedelli; K. Holdsworth; J. Verel; S. Tavales","Department of Computer Science, Seidenberg School of Computer Science and Information Systems, Pace University, USA; Department of Computer Science, Seidenberg School of Computer Science and Information Systems, Pace University, USA; Department of Computer Science, Seidenberg School of Computer Science and Information Systems, Pace University, USA; Department of Computer Science, Seidenberg School of Computer Science and Information Systems, Pace University, USA; Department of Computer Science, Seidenberg School of Computer Science and Information Systems, Pace University, USA",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","113","116","This paper describes a software engineering educational experience and collaboration between the Seidenberg School of Computer Science at Pace University (SCSIS) and Pfizer Incpsilas Clinical Applications Team. The goal of the project was to develop a Coronary Heart Disease Risk Factor Calculator (CHD-RFC) utilizing all the experience acquired during a software engineering seminar course . Developed with the patient in mind, the tool provides powerful features such as three CHD risk algorithm choices, a health report, and a progress chart. The project, the tool and the social implications of a software-assisted health risk appraisal method are discussed.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.19","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812683","Software Engineering;Health Care Industry;Risk Appraisal Software Tool","Appraisal;Medical services;Computer industry;Cardiac disease;Software engineering;Cardiovascular diseases;Computer science;Application software;Software tools;Blood pressure","","1","","8","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"Strategic Decision Spectrum for Software Engineering","S. -K. Kim","Macao Polytechnic University, Macau",2023 IEEE International Conference on Industrial Engineering and Engineering Management (IEEM),"1 Feb 2024","2023","","","1708","1712","The paper deals with the business approach for the software engineering domain. Software engineering is a combined with engineering and business perspectives. Although the domain of software engineering is broad, design and managing software development process are the major portion of the software engineering. This research aims to develop a strategy framework that can assist firms in selecting the most suitable software development process for their needs. The paper introduces the concept of the strategic spectrum, which proposes a range of software development options that align with the strategic fit of an organization. This research aims to develop a strategy framework that can assist firms in selecting the most suitable software development process for their needs. The strategic spectrum which is the proposition of the proper software development within the strategic fit has been introduced for help firms to design their own customized software development processes based on their capabilities and market needs.","","979-8-3503-2315-3","10.1109/IEEM58616.2023.10406807","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10406807","Software engineering;software development;strategic fit;development process;strategic decision making","Decision making;Organizations;Industrial engineering;Software;Software engineering","","","","17","IEEE","1 Feb 2024","","","IEEE","IEEE Conferences"
"Evaluating the effectiveness of systems and software engineering methods, processes and tools for use in defense programs","M. Pennotti; R. Turner; F. Shull","School of Systems and Enterprises, Stevens Institute of Technology, Hoboken, NJ, USA; School of Systems and Enterprises, Stevens Institute of Technology, Hoboken, NJ, USA; Fraunhofer Center of Experimental Software Engineering, University of Maryland, College Park, MD, USA",2009 3rd Annual IEEE Systems Conference,"17 Apr 2009","2009","","","319","322","The systems engineering research center university affiliated research center (SERC-UARC) at Stevens Institute has been tasked to evaluate the effectiveness of the systems and software engineering processes, methods and tools (MPTs) used in US department of defense acquisition and development programs. This paper presents the selection and evaluation process, describes its evolution based on changing sponsor needs, and presents additional information on the characterization of MPTs for evaluation.","","978-1-4244-3462-6","10.1109/SYSTEMS.2009.4815819","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4815819","software engineering;methods, processes and tools;quick response environment;system acquisition","Software engineering;Systems engineering and theory;USA Councils;Best practices;Maintenance engineering;Design engineering;Educational institutions;Costs;Engines;Weapons","","2","","3","IEEE","17 Apr 2009","","","IEEE","IEEE Conferences"
"Comparing the Popularity of Testing Careers Among Canadian, Chinese, and Indian Students","L. F. Capretz; P. Waychal; J. Jia","Dept. of Electrical & Computer Eng, Western University, London, Canada; CRICPE, Western Michigan University, Kalamazoo, USA; School of Software, Beihang University, Beijing, China",2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"19 Aug 2019","2019","","","258","259","Despite its importance, software testing is, arguably, the least understood part of the software life cycle and still the toughest to perform correctly. Many researchers and practitioners have been working to address the situation. However, most of the studies focus on the process and technology dimensions and only a few on the human dimension of testing, in spite of the reported relevance of human aspects of software testing. Testers need to understand various stakeholders' explicit and implicit requirements, be aware of how developers work individually and in teams, and develop skills to report test results wisely to stakeholders.These multifaceted qualifications lend vitality to the human dimension in software testing. Exploring this human dimension carefully may help understand testing in a better way.","2574-1934","978-1-7281-1764-5","10.1109/ICSE-Companion.2019.00103","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8802862","human-factors-in-software-engineering;software-engineering;software-testing-careers;empirical-software-engineering;human-dimension;cross-cultural-study","Engineering profession;Software engineering;Software testing;Software;Stakeholders;Complexity theory","","3","","5","IEEE","19 Aug 2019","","","IEEE","IEEE Conferences"
"Assessing Iterative Practical Software Engineering Courses with Play Money","K. Mindermann; J. -P. Ostberg; S. Wagner","University of Stuttgart, Institute of Software Technology; University of Stuttgart, Institute of Software Technology; University of Stuttgart, Institute of Software Technology",2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C),"23 Mar 2017","2016","","","754","755","Changing our practical software engineering course from the previous waterfall model to a more agile and iterative approach created more severe assessment challenges. To cope with them we added an assessment concept based on play money. The concept not only includes weekly expenses to simulate real running costs but also investments, which correspond to assessment results of the submissions. This concept simulates a startup-like working environment and its financing in an university course. Our early evaluation shows that the combination of the iterative approach and the play money investments is motivating for many students. At this point we think that the combined approach has advantages from both the supervising and the students point of view. We planned more evaluations to better understand all its effects.","","978-1-4503-4205-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883395","Practical course;play money;finance;iterative","Investment;Software engineering;Software;Education;Iterative methods;Agile software development;Companies","","","","2","","23 Mar 2017","","","IEEE","IEEE Conferences"
"Design of a Graduate level Software Engineering Program with a Product Perspective and a Product Management Specialization","P. Pawar; S. Balasubramaniam; A. Ramachandran","Dept. of Computer Science & Information Systems, BITS Pilani –, Pune, India; Independent Consultant, Bangalore, India; Dept. of Computer Science & Information Systems, BITS Pilani –, Bangalore, India",2023 IEEE 35th International Conference on Software Engineering Education and Training (CSEE&T),"31 Aug 2023","2023","","","152","157","While Software Engineering practice in the industry had matured well over the second half of the twentieth century, the first two decades of this millennium have witnessed disruptive growth of the field arising out of the evolution of new problem domains (e.g., intelligent applications and data management) as well as diverse deployment patterns (e.g., cloud, mobile and embedded devices). More subtle and impactful for practitioners is the change in perspective and approach-from a project-driven lifecycle to a product-driven lifecycle of software. Academic programs have kept up with the former set of changes as evidenced in curricular aspects or components such as DevOps, Mobile Application Development, Cloud-Native Application Development, Data Engineering, Big Data Systems, Software Engineering for AI, etc. But there is a distinct lack of representation of the product perspective or approach and the emerging role of Product Management in typical University-level Software Engineering programs and curricula. We propose to address this gap by identifying-and then incorporating into a curriculum-the following:(i)requirements and features of a Software Product Life Cycle,(ii)practices of a product-driven approach to Software Engineering, and(iii)competencies of a Software Product Manager.We show how these aspects can be addressed by a graduate level Software Engineering program with an optional specialization in Software Product Management targeted at practicing Software Engineers. We present the design of such a program in sufficient detail along with validation from industry and comparison with other programs.","2377-570X","979-8-3503-2202-6","10.1109/CSEET58097.2023.00032","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10229385","Software Engineering;Program Curriculum;Software product life-cycle;Software product management;Product Manager Competencies;Product-Driven Software Engineering;Practicing Software Engineers","Industries;Big Data;Mobile communication;Data engineering;Software;System software;Artificial intelligence","","","","25","IEEE","31 Aug 2023","","","IEEE","IEEE Conferences"
"Educational software engineering: Where software engineering, education, and gaming meet","T. Xie; N. Tillmann; J. de Halleux","Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Microsoft Research, Redmond, WA, USA; Microsoft Research, Redmond, WA, USA","2013 3rd International Workshop on Games and Software Engineering: Engineering Computer Games to Enable Positive, Progressive Change (GAS)","17 Oct 2013","2013","","","36","39","We define and advocate the subfield of educational software engineering (i.e., software engineering for education), which develops software engineering technologies (e.g., software testing and analysis, software analytics) for general educational tasks, going beyond educational tasks for software engineering. In this subfield, gaming technologies often play an important role together with software engineering technologies. We expect that researchers in educational software engineering would be among key players in the education domain and in the coming age of Massive Open Online Courses (MOOCs). Educational software engineering can and will contribute significant solutions to address various critical challenges in education especially MOOCs such as automatic grading, intelligent tutoring, problem generation, and plagiarism detection. In this position paper, we define educational software engineering and illustrate Pex for Fun (in short as Pex4Fun), one of our recent examples on leveraging software engineering and gaming technologies to address educational tasks on teaching and learning programming and software engineering skills.","","978-1-4673-6263-4","10.1109/GAS.2013.6632588","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6632588","","Software engineering;Education;Games;Encoding;Software;Programming profession","","17","","24","IEEE","17 Oct 2013","","","IEEE","IEEE Conferences"
"Service learning in software engineering and maintenance","P. K. Linos; C. Bailey-Kellogg","Computer Science and Software Engineering Department, Butler University, Indianapolis, USA; Department of Computer Science, Purdue University, West Lafayette, USA","International Conference on Software Maintenance, 2003. ICSM 2003. Proceedings.","7 Oct 2003","2003","","","336","","We discuss a service-learning program called EPICS (engineering projects in community service). More specifically, we describe an effort to incorporate EPICS within computer science and computer engineering curricula at Purdue University and Butler University, respectively.","1063-6773","0-7695-1905-9","10.1109/ICSM.2003.1235440","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1235440","","Software engineering;Software maintenance;Computer science;Educational institutions;Law;Legal factors;Conference management;Engineering students;Joining processes;Databases","","1","","3","IEEE","7 Oct 2003","","","IEEE","IEEE Conferences"
"Applying Software Engineering Standards in Very Small Entities: From Startups to Grownups","C. Y. Laporte; M. Munoz; J. Mejia Miranda; R. V. O’Connor","École de technologie supérieure; Centro de Investigación en Matemáticas; Dublin City University, Lero—The Irish Software Research Centre; Dublin City University, Lero—The Irish Software Research Centre",IEEE Software,"25 Dec 2017","2018","35","1","99","103","Very small entities (VSEs) are organizations with up to 25 people. The ISO/IEC 29110 series of standards and guides target VSEs with little or no experience or expertise in selecting the appropriate processes from lifecycle standards and tailoring them to a project’s needs. This article gives an overview of ISO/IEC 29110, some examples of VSEs that have implemented it, and those implementations’ results.","1937-4194","","10.1109/MS.2017.4541041","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8239934","software engineering standards;ISO/IEC 29110;very small entities;software engineering;software development;Invited Content","IEC Standards;ISO Standards;Software engineering;Software development;Standards organizations","","40","","9","IEEE","25 Dec 2017","","","IEEE","IEEE Magazines"
"Innovation of Software Engineering Course with the Background of Engineering Education Professional Certification","F. GuanBo; J. Yue","Computer Science Department, Purdue University Fort Wayne, Fort Wayne, Indiana, United States; Software Technology Department, Dalian Neusoft University of Information, Dalian, China",2021 16th International Conference on Computer Science & Education (ICCSE),"21 Oct 2021","2021","","","628","631","Taking the practice teaching of software engineering an example, this paper discusses the innovative teaching design of the practice course of software engineering under the background of “new engineering” and “engineering education certification”. With the aim of training students to solve complex engineering problems, this paper elaborates on the overall design, teaching effect, reflection and improvement of the course teaching, in order to provide reference for the teaching reform under the relevant training objectives of new engineering.","2473-9464","978-1-6654-1468-5","10.1109/ICCSE51940.2021.9569509","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9569509","Software Engineering Course;Engineering Education Professional Certification;OBE;CDIO","Technological innovation;Reflection;Engineering education;Certification;Software engineering","","1","","5","IEEE","21 Oct 2021","","","IEEE","IEEE Conferences"
"Reflections on software engineering education","H. van Vilet","Vrije Universiteit Amsterdam, Amsterdam, Noord-Holland, NL",IEEE Software,"8 May 2006","2006","23","3","55","61","The ""engineering"" focus in software engineering education leaves instructors vulnerable to several traps. It also misleads students as to SE's essential human and social dimensions. Here, the author discusses how this limited conception of SE contributes to five assumptions that can trap SE educators: (i) an SE course needs an industrial project. (ii) SE is like other branches of engineering. (iii) Planning in SE is poorly done relative to other fields. (iv) The user interface is part of low-level design. (v) SWEBOK represents the state of the practice.","1937-4194","","10.1109/MS.2006.80","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1628941","software engineering;education","Reflection;Software engineering;Educational institutions;Electrical capacitance tomography;Engineering education;Organizing;Knowledge engineering;Guidelines;Educational programs;Humans","","35","","28","IEEE","8 May 2006","","","IEEE","IEEE Magazines"
"Unified Software Method: An Engineering Approach to Software Engineering","S. Mercier; M. Lavoie; R. Champagne","Ecole de Technologie Supérieure, Montreal, QUE, Canada; Ecole de Technologie Supérieure, Montreal, QUE, Canada; Ecole de Technologie Supérieure, Montreal, QUE, Canada",2006 30th Annual IEEE/NASA Software Engineering Workshop,"12 Feb 2007","2006","","","89","96","In this paper, we propose an engineering approach to software engineering called ""Unified Software Method"" (USM). The goal pursued through this work in progress is to offer complete traceability between software requirements and the resulting software application for any kind of application and as a result, establish accountability of a practitioner's work. This paper presents an introduction to USM and focuses mainly on how USM can apply traceability to maintain synchronization between a software application and the relevant documents such as requirements, architecture, design, code, test, and executable","1550-6215","0-7695-2624-1","10.1109/SEW.2006.38","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4090249","","Software engineering;Application software;Documentation;Aging;Software maintenance;Computer architecture;Humans;Software testing;Degradation;Accidents","","","","22","IEEE","12 Feb 2007","","","IEEE","IEEE Conferences"
"Integrating Open Source Software into software engineering curriculum: Challenges in selecting projects","S. S. Gokhale; T. Smith; R. McCartney","Department of Computer Science & Engineering, University of Connecticut, Storrs, CT; Department of Computer Science & Engineering, University of Connecticut, Storrs, CT; Department of Computer Science & Engineering, University of Connecticut, Storrs, CT",2012 First International Workshop on Software Engineering Education Based on Real-World Experiences (EduRex),"28 Jun 2012","2012","","","9","12","Software Engineering (SE) projects that emphasize maintenance and evolution can emulate industrial challenges and prepare students for careers in the software industry. Designing maintenance-centric SE projects, however, is difficult because software code upon which these projects must be based is not readily available. Open Source Software (OSS) can alleviate this issue by offering a rich and varied volume of code. This rich diversity of OSS projects, however, presents the greatest hurdle in seamlessly selecting suitable projects for integration. To better understand the scope of this diversity, initially, we propose to manually select uniformly difficult projects of appropriate complexity. Ultimately, based on the experiences and insights acquired through the manual selection, we envision the development of a systematic methodology based on software metrics to ease the project selection process. Such a systematic methodology will pave the way for the adoption of the OSS-based approach at peer institutions, bringing us a step closer to injecting realism into SE projects.","","978-1-4673-1805-1","10.1109/EduRex.2012.6225697","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6225697","Open Source Software;Maintenance;Evolution;Software Metrics;Predictive Models","Maintenance engineering;Complexity theory;Predictive models;Documentation;Open source software;Measurement","","9","","14","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"Work in progress - a game-based learning system for software engineering education","Wei-Fan Chen; Wen-Hsiung Wu; Tsung-Li Wang; Chung-Ho Su","Pennsylvania State University, University Park, PA, US; NA; Shu-Te University, Kaohsiung, TW; Shu-Te University, Kaohsiung, TW",2008 38th Annual Frontiers in Education Conference,"22 Dec 2008","2008","","","T2A-12","T2A-13","This study develops and evaluates a game-based learning system for a software engineering course. The game-based system adopts a role-playing strategy proposed by a digital game-based learning model and is designed based on the educational theory of Technological Pedagogical Content Knowledge that integrates pedagogical knowledge, content knowledge, and technological knowledge. By using the system, students learn about the process of software development in a team-based environment. In this learning environment, learners play different characters, such as a project leader, a system analyst, a system designer, or a programmer. The learners are also able to conduct collaborative activities with other team members during the software development process. To evaluate the effectiveness of the system, thirty-four undergraduate students in a software engineering course were recruited to evaluate the system via a questionnaire. The survey results indicated that students had a positive learning attitude toward the system usage.","2377-634X","978-1-4244-1969-2","10.1109/FIE.2008.4720349","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4720349","Digital game-based learning;Software engineering education;System development and evaluation;Technological pedagogical content knowledge","Learning systems;Software engineering;Systems engineering education;Educational technology;Programming;Game theory;Collaborative software;Software prototyping;Prototypes;Recruitment","","5","","9","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Software engineering - what has it done for you?","D. G. Griffiths","Internal Venturing in Business Systems, Ipswich, UK",Proceedings Seventh International Software Metrics Symposium,"7 Aug 2002","2001","","","362","362","","1530-1435","0-7695-1043-4","10.1109/METRIC.2001.915543","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=915543","","Software engineering;Computer industry;Engineering management;Delay;Research and development management;Software development management;Heat engines;Software quality;Mission critical systems;Software systems","","","","","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Managing Software's Impact","M. van Genuchten; L. Hatton",VitalHealth Software; Oakwood Computing Associates,IEEE Software,"30 Jun 2015","2015","32","4","15","17","As a review of past articles in IEEE Software's Impact department shows, software economics largely determines a software product's success, and volume plays a key role.","1937-4194","","10.1109/MS.2015.99","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7140700","software development;software engineering;software economics;software size;software mileage","Software maintenance;Economics;Software development;Software quality;Software engineering","","","","15","IEEE","30 Jun 2015","","","IEEE","IEEE Magazines"
"Decomposing Composition: Service-Oriented Software Engineers","M. B. Blake","George town University, USA",IEEE Software,"5 Nov 2007","2007","24","6","68","77","This article deals with software development life cycles to support development in service-centric software systems. The explosion of information technology (including service-oriented architecture) and its underlying capabilities has led to the evolution of software development life cycles over the past three decades. Software engineers are continuously exploring approaches to software and system development that are domain, application, and technology independent. Early approaches included waterfall life cycles that promote creating concrete requirements before any significant design or development occurs.","1937-4194","","10.1109/MS.2007.162","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4375245","Service-Oriented Computing;Service-Oriented Architecture;Software Engineering","Design engineering;Software systems;Engineering management;Maintenance engineering;Software engineering;Software development management;Web services;Software testing;Programming;Application software","","27","2","14","IEEE","5 Nov 2007","","","IEEE","IEEE Magazines"
"Towards a Competence Profile for Automotive Software Engineering","R. Reising; Y. Sedelmaier","Faculty of Mechanical and Automotive Engineering, Coburg University of Applied Sciences and Arts, Coburg, Germany; Faculty of Electrical Engineering and Informatics, Coburg University of Applied Sciences and Arts, Coburg, Germany",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","4","The automotive industry currently is undergoing changes in various aspects. Among the most prominent are new technologies like electric drive or artificial intelligence, especially for autonomous driving. Additionally, connecting the vehicles with each other and the infrastructure becomes more important. Finally, the way of developing and manufacturing vehicles is changing. All these changes impact higher education for future automotive software engineers. This paper considers the competences that should be taught in automotive software engineering (ASE), especially from the viewpoint of the automotive industry. It summarizes surveys, interviews and discussions up to now. It becomes apparent that there is no common agreement on what ASE education should cover (and what not). To support the discussion on ASE education, we propose a framework for content in ASE.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206205","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206205","competence profile;automotive software engineering;higher education","Automotive engineering;Software engineering;Unified modeling language;Modeling;Software;Education;Conferences","","2","","20","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"Crowdsourcing in Software Engineering: Models, Motivations, and Challenges","T. D. LaToza","Dept. of Computer Science, Fairfax, USA",2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP),"19 Aug 2019","2019","","","301","301","Over the past several years, crowdsourcing has entered software engineering practice. While most work is still done through traditional development, contract development, and outsourcing, software projects today increasingly use crowdsourcing for a variety of purposes, including fixing defects, testing their software, or gathering alternative designs for a new user interface. Through mechanisms such as competition sites, expertise sharing sites, bug bounties, and online labor markets, crowdsourcing has begun to reshape the ways in which developers contribute to software projects. This talk explores the models of crowdsourcing that have been applied to software development to date and outlines some of the opportunities that exist for the future.","","978-1-7281-1760-7","10.1109/ICSE-SEIP.2019.00043","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8804422","crowdsourcing, programming teams, software management, open source software development","Software;Crowdsourcing;Software engineering;Computational modeling;Programming;Computer bugs","","7","","1","IEEE","19 Aug 2019","","","IEEE","IEEE Conferences"
"Towards a Taxonomy of Replications in Empirical Software Engineering Research: A Research Proposal","C. V. C. d. Magalhães; F. Q. B. d. Silva",NA; NA,2013 3rd International Workshop on Replication in Empirical Software Engineering Research,"14 Nov 2013","2013","","","50","55","Goal: We present a research proposal that aims to collect, analyze, and synthesize data towards the construction of a taxonomy of replications in empirical software engineering research. Method: We propose a cross-sectional survey with researchers that performed replications of empirical studies in software engineering. The population of participants is comprised of all researchers that published replications in software engineering and that were identified in a recently published mapping study. Expected Results: We expect to collect data from researchers that have performed different types of replications in order to support the definition of types or categories of replication using a grounded approach. Conclusion: We expect that the study proposed in this article will motivate a discussion in the empirical software engineering community about the need for a clear cut classification of types of replications among other definitions that will be investigated.","","978-0-7695-5121-0","10.1109/RESER.2013.10","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6664731","replication types;taxonomy of replications;survey research;empirical software engineering","Software engineering;Taxonomy;Instruments;Conferences;Proposals;Communities;Context","","2","","20","IEEE","14 Nov 2013","","","IEEE","IEEE Conferences"
"Teaching a service course in software engineering","H. L. Welch","Computer & Software Engineering Programs, Milwaukee School of Engineering, Milwaukee, WI, USA","2007 37th Annual Frontiers In Education Conference - Global Engineering: Knowledge Without Borders, Opportunities Without Passports","4 Jan 2008","2007","","","F4B-6","F4B-11","The development of stand-alone software engineering curricula has spawned the need for a reevaluation of the survey courses designed to introduce software engineering to the non-software engineer (e.g. computer engineers or computer scientists). The Guidelines for Undergraduate Degree Programs in Software Engineering (SE2004) and the Software Engineering Body of Knowledge (SWEBOK) are two widely accepted guidelines for knowledge areas within software engineering. This paper will examine the recommendations in these guidelines and suggest an appropriate subset of course topic areas and depth of coverage for a software engineering service course. The syllabus for senior-level 4-credit quarter-long service course in software engineering for computer engineers will be presented along with anecdotal evidence of its success as the course is taught at the Milwaukee School of Engineering (MSOE). Recent curriculum changes in computer engineering at MSOE have shifted the software engineering service course from 4-credits in the senior year to 3-credits in the sophomore year and the proposed syllabus for this new course will be presented as well.","2377-634X","978-1-4244-1083-5","10.1109/FIE.2007.4418062","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4418062","Body of knowledge;Software engineering;Survey","Education;Software engineering;Guidelines;Design engineering;Programming;Computer science;Standardization;Software design;Software systems;Assembly systems","","2","","13","IEEE","4 Jan 2008","","","IEEE","IEEE Conferences"
"Reflection processes in the teaching and learning of human aspects of software engineering","O. Hazzan; J. E. Tomayko","Department of Education in Technology and Science, Technion-Israel Institute of Technology, Haifa, Israel; School of Computer Science and the Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA","17th Conference on Software Engineering Education and Training, 2004. Proceedings.","30 Mar 2004","2004","","","32","38","We illustrate how reflection is introduced into the teaching and learning of the human aspects of software engineering. We start with explaining the rationale for a reflective mode of thinking and its fitness to the field of software engineering. Then we outline in detail the agenda of a course that deals with human aspects of software engineering. It is suggested that the intertwining of a reflective mode of thinking into the education of software engineers in general and especially into a course that focuses on human aspects of software engineering enhance students' understanding of the essence of the discipline as well as their professional performance in the field.","1093-0175","0-7695-2099-5","10.1109/CSEE.2004.1276507","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1276507","","Humans;Software engineering;Programming;Software systems;Educational technology;Computer science;Reflection;Application software;Computer science education;Cities and towns","","7","","8","IEEE","30 Mar 2004","","","IEEE","IEEE Conferences"
"Work in Progress: Effectiveness of Collaboration within a Secure Software Engineering Course for SE and Computing Students","S. Ludi","Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA",Proceedings. Frontiers in Education. 36th Annual Conference,"5 Mar 2007","2006","","","15","16","With the popularity of the Internet, a continuous threat exists that PC's will come under attack. The increased availability of software on new, mobile platforms and embedded systems have resulted in an ongoing call for the need for secure systems. A graduate course in secure software engineering was developed at the Rochester Institute of Technology. The courses are part of a college-level Master's degree in Computer Security and Information Assurance, whose students have backgrounds in software engineering in addition to other computing disciplines. This paper describes the course structure and the effects that the varying backgrounds of the students have on teamwork, the project, and performance","2377-634X","1-4244-0256-5","10.1109/FIE.2006.322304","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4116885","collaboration;security;software engineering education;undergraduate education","Collaborative software;Collaborative work;Software engineering;Computer security;Educational institutions;Teamwork;Information security;Computer science education;Educational programs;Systems engineering education","","1","","4","IEEE","5 Mar 2007","","","IEEE","IEEE Conferences"
"Execution Plan for Software Engineering Education in Taiwan","J. Lee; A. Liu; Y. C. Cheng; S. -P. Ma; S. -J. Lee","Department of Computer Science and Information Engineering, National Taiwan University, Taipei, Taiwan; Department of Electrical Engineering, National Chung Cheng University, Chiayi, Taiwan; Department of Computer Science and Information Engineering, National Taipei University of Technology, Taipei, Taiwan; Department of Computer Science and Engineering, National Taiwan Ocean University, Keelung, Taiwan; Department of Computer Science and Information Engineering, National Taiwan University, Taipei, Taiwan",2012 19th Asia-Pacific Software Engineering Conference,"18 Feb 2013","2012","1","","749","753","The main purpose of this paper is to provide a snapshot of the current status of our two-phase-eight-year nation-wide effort in improving the software engineering education in Taiwan. In the first phase of this program (2004 - 2008), the number of universities that regularly offer software engineering courses grew from 63 to 92 while the number of offered courses grew from 159 to 406. The main objective of the second phase (2010 - 2014) was set to establish and implement the core competences of software engineering in our module programs. Seven capabilities are identified to form the SE core competences, including think computationally, teamwork in software development and maintenance, build abstractions and perform problem domain decompositions, analyze and model complex systems involved various domains, develop, review and verify complex systems involved various domains, create user-friendly interfaces based on user experiences, and manage and evolve large-scale design and development efforts. Multiple actions have also been taken to enhance the core competences of students in ICT-related programs in Taiwan, including developing practical course material, holding training courses for the educators, providing onsite lecturing support, and delivering industrial-oriented practical courses.","1530-1362","978-1-4673-4930-7","10.1109/APSEC.2012.142","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6462740","Software engineering education;Software engineering core competence;Curriculum design and implementation","Software;Educational institutions;Industries;Software engineering;Training;Materials","","2","","5","IEEE","18 Feb 2013","","","IEEE","IEEE Conferences"
"Web Based Software Modeling Exercises in Large-Scale Software Engineering Courses","B. Demuth; D. Weigel","Technische Universität Dresden, Germany; Technische Universität Dresden, Germany",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","138","141","We present a Web based elearning system to support software modeling exercises in large-scale software engineering courses. Students get the task to create a domain model based one given textual specification of an application domain. They have to specify the domain model by a UML class diagram and import it into the elearning system. The system verifies the student's solution and compares it with a set of predetermined sample solutions. This approach is a first step towards an automatic testing of object-oriented models under the conditions of university classes with a large number of students. We discuss it and report about initial experiences in using the elearning system.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.38","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812687","eLearning;UML;domain model;software modeling exercise","Large-scale systems;Software engineering;Object oriented modeling;Electronic learning;Automatic testing;Unified modeling language;Systems engineering education;Software systems;Application software;Programming profession","","3","","4","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"End-Users vs Software Practitioners: Recruitment Challenges and Strategies in Software Engineering Research","W. Wang; D. Hidellaarachchi; J. Grundy; H. Khalajzadeh; H. O. Obie; A. Madugalla","Dept of Software Systems and Cybersecurity, Monash University, Australia; Dept of Software Systems and Cybersecurity, Monash University, Australia; Dept of Software Systems and Cybersecurity, Monash University, Australia; School of Information Technology, Deakin University, Melbourne, Australia; Dept of Software Systems and Cybersecurity, Monash University, Australia; Dept of Software Systems and Cybersecurity, Monash University, Australia",2024 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC),"16 Oct 2024","2024","","","400","411","This paper shares insights from our first-hand experience with key recruitment challenges encountered in software engineering research, focusing on two distinct participant groups: end-users and software practitioners. By conducting a reflective analysis, we emphasise the particular challenges we faced when engaging these groups during empirical study recruitment phases. Significant challenges we faced in recruiting end-users include ensuring authenticity, maintaining engagement, achieving demographic diversity, and addressing privacy concerns. Conversely, we faced different challenges when recruiting software practitioners, including sourcing the right expertise, utilising online recruiting platforms, navigating time constraints, aligning incentives, obtaining a representative sample, and coordinating with remote and distributed teams. By detailing the strategies we employed to address these challenges, this paper contributes practical knowledge to enhance the efficacy and inclusiveness of research practices, ultimately fostering more robust software engineering research outcomes.","1943-6106","979-8-3503-6613-6","10.1109/VL/HCC60511.2024.00063","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10714544","User Recruitment;Software Engineering;Project Management;Agile Methodologies;Software Practitioners","Knowledge engineering;Visualization;Privacy;Navigation;Focusing;Software;Software reliability;Time factors;Recruitment;Software engineering","","","","60","IEEE","16 Oct 2024","","","IEEE","IEEE Conferences"
"IEEE Draft Standard Adoption of ISO/IEC 26513:2009 – Systems and Software Engineering – Requirements for Testers and Reviewers of User Documentation","",,"IEEE P26513/D1, December 2009","29 Jan 2019","2009","","","1","69","This standard provides requirements for the test and review of software user documentation as part of the life cycle processes. It defines the documentation process from the viewpoint of the documentation tester and reviewer. It specifies process for use in testing and reviewing of user documentation, and provides the minimum requirements for these activities. It is relevant to roles involved in testing and development of software and user documentation, including project managers, usability experts and information developers, in addition to testers and reviewers. It applies to both printed documentation and on-screen documentation, and is applicable to user documentation for systems including hardware.","","978-0-7381-6402-1","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8629350","software user documentation;usability testing;documentation review;editing;information management","IEEE Standards;Software engineering;ISO Standards;IEC Standards;Systems engineering and theory","","","","","","29 Jan 2019","","","IEEE","IEEE Standards"
"Teaching Successful ""Real-World"" Software Engineering to the ""Net"" Generation: Process and Quality Win!","W. L. Honig","Loyola University Chicago, USA",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","25","32","Software engineering skills are critical for students seeking careers as software developers. However, academic course content often fails to teach practical, ""real-world"" software engineering as it is done in large organizations. Further, the proclivities of the current generation leave students disinclined to the disciplines of process and quality. Academics seldom use the team software process (TSP), a leading methodology of global industries. Four years of data indicate that student teams using TSP can achieve industry levels of productivity and reasonable quality levels. Further, results from 23 teams and over 200 students indicate that these Net-generation students developed an understanding for the value of discipline, data collection, metrics, and quality measures. The team software process is recommended to other academic programs seeking to bring real-world software engineering into the classroom and improve teaching for the Net generation.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.38","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556946","software engineering;metrics;software quality;software productivity;team software development;TSP;PSP","Education;Software engineering;Computer industry;Programming profession;Quality management;Productivity;Job shop scheduling;Engineering profession;Character generation;Game theory","","6","","13","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"Infusing software architecture into software engineering curricula","M. Lutz; A. Sanchez","Department of Software Engineering, Rochester Institute of Technology, USA; Department of Computer and Information Sciences, University of North Florida, USA",18th Conference on Software Engineering Education & Training (CSEET'05),"8 Dec 2008","2005","","","259","259","This workshop will bring together faculty who are infusing architectural concepts into computing courses for an exchange of ideas as to successful and promising approaches. The scope will span the range from those with a single undergraduate software engineering course to dedicated software engineering programs. To help ensure a successful workshop, participants will be asked to submit a short, one-page position paper outlining their involvement in software architecture and their experiences in teaching this material.","2377-570X","0-7695-2324-2","10.1109/CSEET.2005.22","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4698935","","Software architecture;Software engineering;Education;Computer architecture;Software systems;Educational products","","","","","IEEE","8 Dec 2008","","","IEEE","IEEE Conferences"
"A SOA Based Software Engineering Design Approach in Service Engineering","W. D. Yu; C. H. Ong","Computer Engineering Department, San Jose State University Foundation, San Jose, CA, USA; Computer Engineering Department, San Jose State University Foundation, San Jose, CA, USA",2009 IEEE International Conference on e-Business Engineering,"1 Dec 2009","2009","","","409","416","Service-oriented architecture (SOA) is for flexibility and reuse, and enables organizations to easily integrate systems, data, applications and processes through the linking of services. SOA also addresses the critical security and privacy issues. This paper focuses on the investigation and studies on SOA based software engineering methods in the service engineering environment. Among the various SOA related software design and development methods available, service-oriented modeling and architecture (SOMA) service architectural environment is chosen as the target platform in the study. A web based service oriented ubiquitous Healthcare (u-Healthcare) software system was designed and implemented using the set of the software engineering methods developed in the study to gain empirical knowledge and experience on applying the approach to construct SOA service software.","","978-0-7695-3842-6","10.1109/ICEBE.2009.64","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5342081","SOA;Service Engineering;SOMA;Software Engineering","Service oriented architecture;Software engineering;Software design;Design engineering;Application software;Joining processes;Data security;Privacy;Computer architecture;Medical services","","6","","11","IEEE","1 Dec 2009","","","IEEE","IEEE Conferences"
"Workshop on Collaborative Software Product Line Engineering","D. M. Weiss; D. Li","Department of Computer Science, Iowa State University, Ames, IA, USA; FISCAN, First Research Institute of Ministry of Public Security, Beijing, China",2012 IEEE 25th Conference on Software Engineering Education and Training,"23 Jul 2012","2012","","","77","78","Software Product Line Engineering (SPLE) is a promising process for software development that has started to mature in the past ten years. Early indications are that it provides an improvement in productivity of about 3 to 1 over the software production and sustainment cycle of systems [2]. Although SPLE has been effective for early adopters, we still need to continue research to provide evidence of the effectiveness of SPLE, to find ways to improve SPLE technology and processes, and to establish strategies, methods, and capabilities for teaching SPLE and for training practitioners. Collaborative SPLE provides opportunities and challenges for researchers, educators and practitioners. Our goal is to create a Laboratory for Collaborative Software Product Line Engineering (LCSPLE) with worldwide membership that is willing and able to work towards making SPLE a mature technology that is widely used, that is, moving it from an early adopter technology to a majority technology, used in industry and taught in the universities. This workshop will start the process of creating the LCSPLE by bringing together, for the first time, a group of people who share its goal.","2377-570X","978-1-4673-1592-0","10.1109/CSEET.2012.28","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6245010","software engineering;software product line engineering;laboratory","Software;Conferences;Educational institutions;Laboratories;Industries;Training;Collaborative software","","2","","3","IEEE","23 Jul 2012","","","IEEE","IEEE Conferences"
"Applying pantomime and reverse engineering techniques in software engineering education","V. L. Pavlov; N. Boyko; A. Babich; O. Kuchaiev; S. Busygin","International Software and Productivity Engineering Institute; University of Florida, USA; International Software and Productivity Engineering Institute; International Software and Productivity Engineering Institute; University of Florida, USA","2007 37th Annual Frontiers In Education Conference - Global Engineering: Knowledge Without Borders, Opportunities Without Passports","4 Jan 2008","2007","","","T1E-1","T1E-5","During the past six years, the authors have experimented with various modeling and quality control techniques while teaching software engineering to university students. The first group of experiments compared UML to natural languages (e.g. english); the second group modeled the entire software development process as a sequence of translations from more abstract languages to more formal languages (e.g. from english to UML, from UML to C++, etc.). In these experiments the authors and their students discovered new approaches to increasing productivity of software developers. On this basis, the authors have developed the framework that extends traditional development processes. The framework is built upon two simple, yet powerful principles: reverse semantic traceability (RST) and speechless modeling. The authors have over two years of experience of using RST in computing curricula, and also have over six years of experience of applying speechless Modeling in teaching computer science and software engineering. Both approaches resulted in improving the quality of education and generated positive feedback from students. Some students started to practice the authors' framework in their professional careers. In this paper, the authors present their experience of integrating RST and speechless modeling into university computer science/software engineering curricula.","2377-634X","978-1-4244-1083-5","10.1109/FIE.2007.4418054","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4418054","Software Engineering Curricula;Pantomime;Speechless modeling;Reverse Semantic Traceability","Reverse engineering;Software engineering;Unified modeling language;Natural languages;Computer science;Control engineering education;Quality control;Programming;Formal languages;Productivity","","1","","7","IEEE","4 Jan 2008","","","IEEE","IEEE Conferences"
"Coaching agile software projects: tutorial proposal - ICSE 2010","O. Hazzan; Y. Dubinsky","Department of Education in Technology and Science, Technion-Israel Institute of Technology, Haifa, Israel; IBM Haifa Research Laboratory, Haifa, Israel",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","481","482","Our tutorial for ICSE 2010 focuses on coaching agile software teams. Based on eight years of experience guiding agile software projects in the academia and industry, we focus in the tutorial on a coaching framework for agile software projects. The tutorial participants become familiar with coaching practices and gain experience with some of the practices. The tutorial has two main parts. In the first part, we present the coaching framework, including the goals, structure, and guiding principles. In the second part, we focus on the following central themes in agile development processes which, we suggest, are appropriate to be included in such a coaching framework: Teamwork and collaboration, time and measures, learning and reflection, and change and leadership. Since 2003, we have facilitated this tutorial and similar ones in different settings (industry, academia, conferences). The coaching framework, as well as the themes, case studies, and analysis approach presented in the tutorial, are summarized in our book Agile Software Engineering published by Springer in 2008 (Hazzan and Dubinsky, 2008).","1558-1225","978-1-60558-719-6","10.1145/1810295.1810440","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062258","agile software development;coaching;learning processes;retrospective;software engineering;software project management","Tutorials;Software;Programming;Software engineering;Teamwork;Reflection;Education","","1","","1","","27 Oct 2011","","","IEEE","IEEE Conferences"
"Cognitive Load Drivers in Large Scale Software Development","D. Helgesson; E. Engström; P. Runeson; E. Bjarnason","Dept. of Computer Science, Lund University, Lund, Sweden; Dept. of Computer Science, Lund University, Lund, Sweden; Dept. of Computer Science, Lund University, Lund, Sweden; Dept. of Computer Science, Lund University, Lund, Sweden",2019 IEEE/ACM 12th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"29 Aug 2019","2019","","","91","94","Software engineers handle a lot of information in their daily work. We explore how software engineers interact with information management systems/tools, and to what extent these systems expose users to increased cognitive load. We reviewed the literature of cognitive aspects, relevant for software engineering, and performed an exploratory case study on how software engineers perceive information systems. Data was collected through five semistructured interviews. We present empirical evidence of the presence of cognitive load drivers, as a consequence of tool use in large scale software engineering.","2574-1837","978-1-7281-2239-7","10.1109/CHASE.2019.00030","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816966","Cognition;Cognitive Load;Software Development;Software Engineering;Software Development Tools;Software Engineering Tools;Industrial Case Study","Interviews;Tools;Software engineering;Software;Task analysis;Computer science;Bandwidth","","5","","13","IEEE","29 Aug 2019","","","IEEE","IEEE Conferences"
"SO/IEC/IEEE Draft Standard for Software and Systems Engineering--Software Testing--Part 1: Concepts and Definitions","",,"ISO/IEC/IEEE P29119-1/DIS, September 2012","21 Sep 2012","2012","","","1","64","The scope of this standard is the testing of software-intensive systems.Software is present in many of the products we use today and these products are getting more and more complex; for example a calendar on your PC, an electronic game, a mobile telephone, a car, or an aircraft. Software-intensive systems may describe a pure software system or may consist of a number of subsystems, such as hardware, network, documentation, data, data repository systems, license agreements, descriptions of manual processes, and of course, software.This standard supports testing across the entire software development lifecycle, from static testing of requirements, specifications and other documentation, unit or component testing that is typically carried out by developers, integration testing of program modules, system testing of integrated systems, and user acceptance testing that is usually carried out by end-users. It also supports testing during maintenance cycles that typically occur after release.","","978-0-7381-7340-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6309995","","IEEE standards;Software engineering","","","","","","21 Sep 2012","","","IEEE","IEEE Standards"
"Workshop on emerging trends in software metrics: (WETSoM 2011)","G. Concas; M. Di Penta; E. Tempero; H. Zhang","Department of Electrical and Electronic Engineering, University of Cagliari, Italy; Department of Engineering, University of Sannio, Italy; Department of Computer Science, University of Auckland, New Zealand; School of Software, Tsinghua University, Beijing, China",2011 33rd International Conference on Software Engineering (ICSE),"10 Oct 2011","2011","","","1224","1225","The Workshop on Emerging Trends in Software Metrics aims at bringing together researchers and practitioners to discuss the progress of software metrics. The motivation for this workshop is the low impact that software metrics has on current software development. The goals of this workshop are to critically examine the evidence for the effectiveness of existing metrics and to identify new directions for development of software metrics.","1558-1225","978-1-4503-0445-0","10.1145/1985793.1986057","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6032649","complexity;software metrics;software quality","Conferences;Software;Software metrics;Software engineering;Educational institutions;Object oriented modeling","","","","5","","10 Oct 2011","","","IEEE","IEEE Conferences"
"Software Quality in Academic Curriculum: A Case Study in Turkey","O. T. Pusatli; S. Misra","Department of Mathematics and Computer Science, Cankaya University, Ankara, Turkey; Department of Computer Engineering, Federal University of Technology, Minna, Nigeria",2012 12th International Conference on Computational Science and Its Applications,"6 Aug 2012","2012","","","162","166","A variety of courses are taught in the undergraduate programs of computer science, computer engineering, software engineering and information system engineering. The preferred choices of the software industry are for hiring engineers for their companies from these disciplines, related to this fact, the emphasis on quality in software given to the associated departments' students, hence on quality objectives in software process, are studied. With this aim, a survey of the curricula of these branches in the top ten Turkish universities is undertaken. Our observations show software quality is not considered commonly as a core course except in software engineering, while the computer engineering departments provide the majority of the graduates to the industry. The results may be interpreted as suggesting that a reason for loose monitoring of standards in the software industry may be associated with this observation because graduates with transcripts on quality are few in number.","","978-1-4673-1691-0","10.1109/ICCSA.2012.40","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6257631","software quality education;software engineering;computer engineering;undergraduate curriculum","Educational institutions;Software engineering;Software quality;Computers;Industries;Information systems","","","","33","IEEE","6 Aug 2012","","","IEEE","IEEE Conferences"
"Teamwork and trust: universities, industry and the professional software engineer","R. Duley; S. P. Maj; D. Veal","Edith Cowan University, Perth, Australia; Edith Cowan University, Perth, Australia; Edith Cowan University, Perth, Australia",Proceedings 14th Conference on Software Engineering Education and Training. 'In search of a software engineering profession' (Cat. No.PR01059),"7 Aug 2002","2001","","","153","161","Universities are faced with the challenge of providing for the future professional software engineer (PSE) the same quality and intensity of educational experience they have traditionally provided in support of the other engineering disciplines. Computing curricula in Australia have tended to emphasize the scientific and computer engineering side, the hardware side, of computing but the advent of the PSE demands new approaches to curricular design involving new topics and a product-based, rather than theory-based, emphasis. Since the graduate PSE will tend to be industrially oriented, a large practical content will be desirable in the course. This, in turn, will nor only raise educational issues within academia but also challenge long-held industrial attitudes towards universities, their students and graduates. This paper discusses some of the difficulties industry and the universities face in meeting these challenges.","1093-0175","0-7695-1059-0","10.1109/CSEE.2001.913837","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=913837","","Teamwork;Educational institutions;Computer industry;Australia;Software quality;Accreditation;Collaborative software;Banking;Design engineering;Hardware","","","","32","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE Draft International Standard - Software Engineering - Software Life Cycle Processes - Maintenance","",,"ISO/IEC/IEEE P14764/DIS, January 2021","25 Jan 2021","2021","","","1","43","","","978-1-5044-7333-0","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9335696","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Porduct life cycle management","","","","","","25 Jan 2021","","","IEEE","IEEE Standards"
"Aspects of Software Quality Assurance in Open Source Software Projects: Two Case Studies from Apache Project","D. Wahyudin; A. Schatten; D. Winkler; S. Biffl","Institute for Software Engineering and Interactive Systems, University of Technology, Vienna, Vienna, Austria; Institute for Software Engineering and Interactive Systems, University of Technology, Vienna, Vienna, Austria; Institute for Software Engineering and Interactive Systems, University of Technology, Vienna, Vienna, Austria; Institute for Software Engineering and Interactive Systems, University of Technology, Vienna, Vienna, Austria",33rd EUROMICRO Conference on Software Engineering and Advanced Applications (EUROMICRO 2007),"17 Sep 2007","2007","","","229","236","Open source software (OSS) solutions provide mission- critical services to industry and government organizations. However, empirical studies on OSS development practices raise concerns on risky practices such as unclear requirement elicitation, ad hoc development process, little attention to quality assurance (QA) and documentation, and poor project management. Event then the ability to produce high quality products in such an environment may seem surprising and thus warrants an investigation on effective QA mechanism in OSS projects. This paper provides a preliminary exploration to improve our understanding of software quality practices in different types of OSS projects. We propose a framework of QA in an OSS project, elicit OSS stakeholder value propositions for QA, and derive performance indicators. For an initial empirical evaluation we applied these indicators to 5 releases of 2 large Apache projects (Tomcat and MyFaces) to analyze the extent to which QA aspects are commonly performed during development process.","2376-9505","978-0-7695-2977-6","10.1109/EUROMICRO.2007.19","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4301084","Open Source Software and Software Quality;Distributed Software Development;Value Based Software;Engineering;Product Evolution","Software quality;Open source software;Software engineering;Programming;Computer industry;Government;Quality assurance;Web server;Application software;Collaborative software","","7","","10","IEEE","17 Sep 2007","","","IEEE","IEEE Conferences"
"Automotive software engineering","M. Broy","Institut für Informatik, Technische Universität München, Munich, Germany","25th International Conference on Software Engineering, 2003. Proceedings.","28 May 2003","2003","","","719","720","Information technology has become the driving force of innovation in many areas of technology and also in cars. Embedded software controls the functions of cars, supports and assists the driver and realizes systems for information and entertainment. Software in automobiles is today one of the great challenges for software engineering. On modem cars we find all issues of software systems in a nutshell. It is a challenge for software and systems engineering.","0270-5257","0-7695-1877-X","10.1109/ICSE.2003.1201259","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1201259","","Automotive engineering;Software engineering;Software systems;Information technology;Technological innovation;Embedded software;Control systems;Automobiles;Modems;Systems engineering and theory","","22","","","IEEE","28 May 2003","","","IEEE","IEEE Conferences"
"From Quantum Software Handcrafting to Quantum Software Engineering","G. Bisicchia; J. García-Alonso; J. M. Murillo; A. Brogi","Department of Computer Science, University of Pisa, Pisa, Italy; Quercus Software Engineering Group, University of Extremadura, Cáceres, Spain; Quercus Software Engineering Group, University of Extremadura, Cáceres, Spain; Department of Computer Science, University of Pisa, Pisa, Italy","2024 IEEE International Conference on Software Analysis, Evolution and Reengineering - Companion (SANER-C)","15 Aug 2024","2024","","","149","150","Quantum Computing holds the potential to change our world. Following the quantum wave, software engineers have recognised the opportunity to establish a new discipline of Quantum Software Engineering. Despite the significant progress achieved, Quantum Computing's widespread adoption still faces critical hurdles. In this paper, we outline two of these challenges. (1) Quantum programming continues to be a complex art mastered by a select few experts. We suggest that the primary culprit can be pinpointed in the absence of high-level quantum software abstractions which forces developers to work with low-level quantum concepts and reason in terms of matrix multiplications. (2) The scarce collaboration among quantum software engineers resulted in a lack of platform and software interoperability. While a diversity of research proposals fuels scientific progress, it can hinder the development and adoption of innovative technologies, potentially fragmenting the collective efforts and confining them within isolated research groups. We believe that overcoming these issues is crucial for fostering innovation, advancing Quantum Software Engineering, and Quantum Computing as a whole.","","979-8-3503-5157-6","10.1109/SANER-C62648.2024.00026","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10621693","Quantum Computing;Software Engineering;Quantum Software Engineering;Quantum Abstractions","Technological innovation;Quantum computing;Collaboration;Programming;Software;Proposals;Fuels","","","","18","IEEE","15 Aug 2024","","","IEEE","IEEE Conferences"
"Ontology based framework for reverse engineering of conventional softwares","M. P. S. Bhatia; A. Kumar; R. Beniwal","Division of Computer Engineering, Netaji Subhas Institute Of Technology, Delhi, India; Department of Computer Engineering, Delhi Technological Universitys DTU, Delhi, India; Division of Computer Engineering, Netaji Subhas Institute Of Technology, Delhi, India",2016 3rd International Conference on Computing for Sustainable Global Development (INDIACom),"31 Oct 2016","2016","","","3645","3648","In contemporary years, integration among research areas of semantic web technologies and software engineering took place due to the reason of developers being present at different virtual, cultural, and geographical locations. Due to this amalgamation, a new collaborated field has emerged known as Semantic Web Enabled Software Engineering. This field presents researchers ample opportunities to probe issues and challenges, which are originated due to their amalgamation. Among such issues, one is the reverse engineering of conventional softwares using ontologies. This research paper presents a framework and discusses the implementation approach to resolve to the above issue.","","978-9-3805-4421-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7724942","Conventional Software;Ontology;Reverse Engineering;Semantic Web;Software Engineering","Ontologies;Reverse engineering;Maintenance engineering;Software engineering;Resource description framework;Software systems","","1","","18","","31 Oct 2016","","","IEEE","IEEE Conferences"
"FAIR Enough: A Vision for Research Objects in Empirical Software Engineering Studies","D. Fucci","Blekinge Institute of Technology, Karlskrona, Sweden",2024 IEEE/ACM International Workshop on Methodological Issues with Empirical Studies in Software Engineering (WSESE),"11 Oct 2024","2024","","","64","67","In recent years, the software engineering research community has been fostering Open Science through several ini-tiatives. Although the transparency fostered in Open Science can address some of the concerns related to appropriate study design and data analysis methods, the community still needs to fully embrace a set of guidelines for managing research data, such as FAIR principles. A fundamental aspect of FAIR is the Research Object-i.e., a bundle of re-search artifacts and their metadata. In this paper, I show an example of a Research Object and discuss how formalized metadata can benefit the community.","","979-8-4007-0567-0","10.1145/3643664.3648201","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10707616","FAIR;Software Engineering Research;Empirical Studies;Ontology;Metadata","Data analysis;Conferences;Metadata;Software engineering;Guidelines","","","","13","CCBY","11 Oct 2024","","","IEEE","IEEE Conferences"
"ASLA: reverse engineering approach for software license information retrieval","T. Tuunanen; J. Koskinen; T. Karkkainen","Department of Mathematical Information Technology, University of Jyväskylä, Jyvaskyla, Finland; Department of Computer Science and Information Systems, University of Jyväskylä, Jyvaskyla, Finland; Department of Mathematical Information Technology, University of Jyväskylä, Jyvaskyla, Finland",Conference on Software Maintenance and Reengineering (CSMR'06),"10 Apr 2006","2006","","","4 pp.","294","Software maintenance and reuse require identification of the applied software licenses. The information needs of maintainers and reusers can be supported by reverse engineering tools at different information retrieval levels. The paper presents a reverse engineering approach called ASLA for retrieving license information typically used in OSS. User needs, system architecture, tool features, and tool evaluation are presented. The implemented tool features include support for identifying source file dependencies and licenses in source files. The tool is evaluated against another tool for license information extraction. ASLA supports the same programming languages as GCC. License identification coverage is good and the tool is extendable","1534-5351","0-7695-2536-9","10.1109/CSMR.2006.10","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1602380","reverse engineering;open source software;software licenses;component-based software reuse.","Reverse engineering;Licenses;Information retrieval;Open source software;Software maintenance;Computer architecture;Data mining;Information analysis;Cascading style sheets;Information technology","","7","1","13","IEEE","10 Apr 2006","","","IEEE","IEEE Conferences"
"Learning Effectiveness of Team Discussions in Various Software Engineering Education Courses","M. Shuto; H. Washizaki; K. Kakehi; Y. Fukazawa; S. Yamato; M. Okubo","Waseda University, Tokyo, Japan; Waseda University, Tokyo, Japan; Waseda University, Tokyo, Japan; Waseda University, Tokyo, Japan; Ehime University, Ehime, Japan; NEC Management Partner, Tokyo, Japan",2016 IEEE 29th International Conference on Software Engineering Education and Training (CSEET),"23 May 2016","2016","","","227","231","Students working in teams to complete software tasks is an effective method to learn necessary skills. Previously we examined the educational effectiveness as a function of personal characteristics, but the findings were inconclusive. Because we hypothesize that team discussions impact learning and are related to educational effectiveness, this study investigates the influence of team discussions on learning effectiveness in various types of software engineering education courses. Students' responses to questionnaires about how much students contribute to discussions indicate that learning effectiveness and the number of remarks during a discussion are related. Additionally, upon comparing two learning courses (a system development course and a IT management course), two antithetical results are elucidated. We expect that this research will help improve the effectiveness of educators leading student team discussions.","2377-570X","978-1-5090-0765-3","10.1109/CSEET.2016.31","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7474488","project-based learning;software engineering education;communication;coordination","Software engineering;Dispersion;Correlation;Software;Knowledge engineering;Cognition;Conferences","","8","","16","IEEE","23 May 2016","","","IEEE","IEEE Conferences"
"System Thinking: Educating T-Shaped Software Engineers","B. Boehm; S. K. Mobasser","Center for Systems and Software Engineering, University of Southern California, Los Angeles, CA, USA; Center for Systems and Software Engineering, University of Southern California, Los Angeles, CA, USA",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","333","342","With respect to system thinking, a T-shaped person is one who has technical depth in at least one aspect of the system's content, and a workable level of understanding of a fair number of the other system aspects. Many pure computer science graduates are strongly I-shaped, with a great deal of depth in software technology, but little understanding of the other disciplines involved in such areas as business, medicine, transportation, or Internets of Things. This leaves them poorly prepared to participate in the increasing numbers of projects involving multi-discipline system thinking, and in strong need of software skills. We have developed and evolved an MS-level software engineering curriculum that enables CS majors to become considerably more T-shaped than when they entered. It includes courses in software management and economics, human-computer interaction, embedded software systems, systems and software requirements, architecture, and V&V, and a two-semester, real-client team project course that gives students experience in applying these skills. We find via feedback on the students' internships and job experiences that they and their employers have high rates of success in job offers and job performance.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.166","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7202983","Software Engineering;Systems Engineering;System Thinking;T-shaped;Curriculum;Education and Training;The Incremental Commitment Spiral Model","Software;Software engineering;Hardware;Stakeholders;Aircraft;Aircraft propulsion","","7","","15","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"The software engineering body of knowledge for professional engineering in Canada","R. D. Dony; P. Botman; W. E. Briggs; R. Haggart; P. A. Taylor","School of Engineering University, Guelph, ONT, Canada; True North Systems Consulting, Vancouver, BC, Canada; Department Electrical & Computer Engr., University of New Brunswick, Fredericton, NB, Canada; Oloria Enterprises, Inc., Ottawa, ONT, Canada; Department Computing & Software, McMaster University, Hamilton, ONT, Canada",IEEE CCECE2002. Canadian Conference on Electrical and Computer Engineering. Conference Proceedings (Cat. No.02CH37373),"7 Aug 2002","2002","2","","743","748 vol.2","In response to the need to define the academic requirements for licensing professional engineers in Canada, the Canadian Engineering Qualifications Board formed a committee whose mandate was to define the core and supplemental bodies of knowledge for software engineering. Some of the issues and the outcome of the software engineering committee's deliberations are presented in this paper. After examining a number of inputs including national and provincial examination syllabi and curricula of accredited software engineering programs in Canada, a number of core topic areas were defined. These are: discrete mathematics, data structures and algorithms, software development (includes software engineering process, requirements design, construction, testing, maintenance, and configuration management), system reliability and safety, digital systems, computer architecture, operating systems, file and database, and systems and control. these topics generally match well with the existing examination syllabi and curricula. the supplemental areas are less well-defined and include depth in core subjects, depth in areas of specialization, and breadth in application domains.","0840-7789","0-7803-7514-9","10.1109/CCECE.2002.1013034","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1013034","","Software engineering;Knowledge engineering;Licenses;Qualifications;Mathematics;Data structures;Software algorithms;Programming;Process design;Algorithm design and analysis","","","","14","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Propagating Requirement Change into Software High Level Designs towards Resilient Software Evolution","N. Ibrahim; W. M. N. W. Kadir; S. Deris","Software Engineering Department Computer Science and Information System, Universiti Teknologi Malaysia, Malaysia; Software Engineering Department Computer Science and Information System, Universiti Teknologi Malaysia, Malaysia; Software Engineering Department Computer Science and Information System, Universiti Teknologi Malaysia, Malaysia",2009 16th Asia-Pacific Software Engineering Conference,"28 Dec 2009","2009","","","347","354","Uncertain and incomplete requirements throughout the whole software life cycle contribute to volatility of the requirements. In a situation where the volatile requirement is changed to satisfy stakeholder needs, all the affected requirements and other impacted software artefacts (such as designs, codes, and tests) must be identified and changed accordingly. This paper introduces an approach to facilitate both engineers and users in propagating changes from requirements to the software high-level designs during software development and evolution. The two main pillars of this approach, namely product metamodel and process model are described in details. Firstly, the metamodel highlights on explicit conceptual model for volatile requirement and its characteristics. Next, the focus will be placed on the systematic process model specified using the SPEM that offers guidelines to perform the requirement change process. The applicability of the product metamodel and its elements are evaluated using the IFAMMS case study application.","1530-1362","978-0-7695-3909-6","10.1109/APSEC.2009.55","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5358735","Volatile Requirement;Change Propagation;Software High Level Designs;Software Evolution","Software design;Software systems;Software engineering;Programming;Computer science;Information systems;Software testing;Design engineering;Guidelines;Application software","","6","1","23","IEEE","28 Dec 2009","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE International Standard - Software engineering -- Guidelines for the application of ISO 9001:2015 to computer software","",,ISO/IEC/IEEE 90003:2018(E),"5 Dec 2018","2018","","","1","86","This document provides guidance for organizations in the application of ISO 9001:2015 to the acquisition, supply, development, operation and maintenance of computer software and related support services. This document does not add to or otherwise change the requirements of ISO 9001:2015. The guidelines provided in this document are not intended to be used as assessment criteria in quality management system registration/certification. The application of this document is appropriate to software that is: part of a commercial contract with another organization, a product available for a market sector, used to support the processes of an organization, embedded in a hardware product, or related to software services. Some organizations may be involved in all the above activities; others may specialize in one area. Whatever the situation, the organization's quality management system should cover all aspects (software related and non-software related) of the business. This document identifies the issues that should be addressed and is independent of the technology, life cycle models, development processes, sequence of activities and organizational structure used by an organization. Additional guidance and frequent references to the ISO/IEC JTC 1/SC 7 software engineering standards are provided to assist in the application of ISO 9001:2015, in particular ISO/IEC/ IEEE 12207:2017.;This document provides guidance for organizations in the application of ISO 9001:2015 to the acquisition, supply, development, operation and maintenance of computer software and related support services. This document does not add to or otherwise change the requirements of ISO 9001:2015. The guidelines provided in this document are not intended to be used as assessment criteria in quality management system registration/certification. The application of this document is appropriate to software that is: part of a commercial contract with another organization, a product available for a market sector, used to support the processes of an organization, embedded in a hardware product, or related to software services. Some organizations may be involved in all the above activities; others may specialize in one area. Whatever the situation, the organization’s quality management system should cover all aspects (software related and non-software related) of the business. This document identifies the issues that should be addressed and is independent of the technology, life cycle models, development processes, sequence of activities and organizational structure used by an organization. Additional guidance and frequent references to the ISO/IEC JTC 1/SC 7 software engineering standards are provided to assist in the application of ISO 9001:2015, in particular ISO/IEC/ IEEE 12207:2017.","","978-1-5044-5306-6","10.1109/IEEESTD.2018.8559961","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8559961","Quality Management; Quality Assurance; Quality Control; Quality Plan; Documentation; Software Quality; Project Management; Configuration Management; Release; Review; Defect; Customer Satisfaction; Testing; Verification; Validation; Management Review","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software quality;Software project management;Quality assessment","","1","","","","5 Dec 2018","","","IEEE","IEEE Standards"
"Improving the software quality — an educational approach","V. Bozhikova; M. Stoeva; B. Georgiev; D. Nikolaeva","Department of Software and Internet Technologies, Technical University of Varna, Varna, Bulgaria; Department of Software and Internet Technologies, Technical University of Varna, Varna, Bulgaria; Department of Software and Internet Technologies, Technical University of Varna, Varna, Bulgaria; Department of Software and Internet Technologies, Technical University of Varna, Varna, Bulgaria",2017 XXVI International Scientific Conference Electronics (ET),"30 Nov 2017","2017","","","1","4","The term ""quality software"" refers to software that is easy to maintain and evolve. The presence of Anti-Patterns and Patterns is recognized as one of the effective ways to measure the quality of modern software systems. The paper presents an approach which supports the software analysis, development and maintenance, using techniques that generate the structure of Software Design Patterns, find Anti-Patterns in the code and perform Code Refactoring. The proposed approach is implemented in a software tool, which could support the real phases of software development and could be used for educational purposes, to support ""Advanced Software Engineering"" course.","","978-1-5386-1753-3","10.1109/ET.2017.8124337","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8124337","Software Engineering;Software Design Patterns;Software Anti-Patterns;Software Refactoring","Tools;Software quality;Maintenance engineering;Software design;Software engineering;Production","","1","","10","IEEE","30 Nov 2017","","","IEEE","IEEE Conferences"
"Fostering 21 Century Learning and Innovation Competencies Through Students' Online Collaborative Activities in Software Engineering Courses","A. Adorjan; M. Nunez-Del-Prado","Universidad ORT Uruguay, Montevideo, Uruguay; Universidad del Pacífico, Lima, Peru",2018 IEEE World Engineering Education Conference (EDUNINE),"30 Aug 2018","2018","","","1","4","Software Engineering is one of the main disciplines that frames the path of future Software Engineers and other Engineering careers such as Computer Science, Information Systems, Business Engineering, among others. Software Engineering courses present new pedagogical challenges through developing students competencies such as critical thinking, communication, collaboration, and creativity. Depending on the Engineering career the Software Engineering course tends to be whether more technical. Thus, in certain careers, the course stresses on business more than on technical aspects. Consequently, for mixing both technical and business points of view through collaborative activities, we experience a new approach to teach complementary learning goals and transversal competencies. In this paper, we describe the experience from the students' point of view of the Software Engineering course in Universidad del Pacífico Peru and Universidad ORT Uruguay. Students' from both universities carried out the same software development project, using different approaches. Based on this dynamic, students were able to compare, in general terms, two very different scenarios, although they are close regarding Software Engineering. Thus, they noticed a clear difference in the extent and depth of development of the study case. This is useful and beneficial for both parties since it allows to have other perspectives.","","978-1-5386-4889-6","10.1109/EDUNINE.2018.8450987","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8450987","Software Engineering;Collaborative Activities;education;International education activities","Software engineering;Software;Business;Unified modeling language;Collaboration;Object oriented modeling;Engineering profession","","2","","11","IEEE","30 Aug 2018","","","IEEE","IEEE Conferences"
"Utilizing open source software in teaching practice-based software engineering courses","M. Dorodchi; N. Dehbozorgi","Department of Computer Science, University of North Carolina, Charlotte, NC, USA; Department of Computer Science, University of North Carolina, Charlotte, NC, USA",2016 IEEE Frontiers in Education Conference (FIE),"1 Dec 2016","2016","","","1","5","Software engineering courses face the challenge of covering all the stages of analysis, development, maintenance, and support while addressing practical issues such as dealing with large codebase. Free and open source software (FOSS) and more specifically humanitarian free and open source software (HFOSS) have been used by many educators to bring many add-ons to computer science education such as innovation and motivation. In addition, FOSS/HFOSS could give a better understanding of real world projects to students. In this work, we are looking at some activities developed for teaching upper division undergraduate and graduate software engineering courses using open source software projects and analyze the impacts of using this approach on students.","","978-1-5090-1790-4","10.1109/FIE.2016.7757683","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7757683","Software Engineering;Open Source","Open source software;Software engineering;Education;Hafnium compounds;Linux","","7","","15","IEEE","1 Dec 2016","","","IEEE","IEEE Conferences"
"Masters-Level Software Engineering Education and the Enriched Student Context","J. G. Hall; L. Rapanotti","Department of Computing and Communications, The Open University, UK; Department of Computing and Communications, The Open University, UK",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","311","314","Currently, adult higher education software engineering pedagogy isolates the student in a controlled environment during delivery, with application of their learning temporally distant from their professional practice. Delivering software engineering teaching that is immediately relevant to professional practice remains an open challenge. In this paper, we discuss a new pedagogical model which addresses this problem by embedding the validation of the student's learning within their rich professional context. We discuss our experience of applying the model to the design and delivery of a new post-graduate software development module, a core component in our new software engineering Masters qualification at the Open University, UK, a market leader in adult higher education at a distance.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.162","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7202979","software engineering education;Masters;distance education","Software engineering;Education;Context;Software;Context modeling;Unified modeling language;Knowledge engineering","","2","","9","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Software Startups in growth phase SE practices adopted to SEE","O. Cico","Norwegian University of Science and Technology, Trondheim, Norway",2020 IEEE/ACM 42nd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"1 Dec 2020","2020","","","238","241","Context: Software has become ubiquitous in every corner of modern societies. During the last five decades, software engineering has also changed significantly to advance the development of various types and scales of software products. In this context, Software Engineering Education plays an essential role in keeping students updated with software technologies, processes, and practices that are popular in industries. Aim: In this PhD work, I want to answer the following research questions: To what extent software engineering trends are present in software engineering education? In which way software startup in growth phase characteristics can be transferred into software engineering education context? What is the impact of software startup engineering in the curriculum and to software engineering students? Method: I utilize literature review and mix-methods approaches (quantitative and qualitative data and methods triangulation) in gathering empirical evidence. More precisely, I split my research method into two phases. The first phase of the research will acquire knowledge and insight based on the existing literature review. The second research phase will split the focus in two directions. Firstly, I shall gather empirical evidence on how software startup practices are present in software engineering education. Secondly, I will conduct parallel investigations into SE practices in growth phase software startups. Expected Results: I argue that software startup engineering practices are an ultimate tool for software engineering education approaches. I expect students to acquire software engineering skills in a more realistic context while using software startup in growth phase practices.","2574-1926","978-1-4503-7122-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9270366","Software Engineering;Software Startups;Empirical Studies;Software Engineering Education","Software;Software engineering;Market research;Education;Systematics;Bibliographies;Teamwork","","1","","20","","1 Dec 2020","","","IEEE","IEEE Conferences"
"Software Engineering Curriculum: A systematic mapping study","M. M. Qadir; M. Usman","Department of Computer Science and Software Engineering, International Islamic University, Islamabad, Pakistan; Department of Computer Science and Software Engineering, International Islamic University, Islamabad, Pakistan",2011 Malaysian Conference in Software Engineering,"26 Jan 2012","2011","","","269","274","Software Engineering (SE) discipline has come a long way since the 1968 NATO conference when the term SE was first used. Lot of work has been done for developing and revising SE curriculum and body of knowledge (e.g. SE 2004, GSwE2009, SWEBOK efforts). Different universities are developing and revising SE program and curricula at graduate and undergraduate levels all over the world. Large number of SE curriculum related efforts are being published in conferences such as CSEET, FIE and REET etc. There is a need to see the state of the art of this abundant literature. In this paper, we report a systematic mapping study conducted to synthesize and aggregate the SE curriculum related reported efforts and to provide a broad overview of the area. Systematic mapping studies are performed to evaluate quantity and types of primary studies in an area of interest in an unbiased and systematic manner.","","978-1-4577-1531-0","10.1109/MySEC.2011.6140682","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6140682","Software Engineering Curriculum;Systematic Mapping Study","Software engineering;Systematics;Education;Accreditation;Data mining;Databases;Abstracts","","4","","6","IEEE","26 Jan 2012","","","IEEE","IEEE Conferences"
"Software Engineering Education at TCS Induction - An Experience Report","S. Skandan; M. Sidhardhan","Tata Consultancy Services Limited, Trivandrum, Kerala, India; Tata Consultancy Services Limited, Trivandrum, Kerala, India",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","16","19","The paper takes a look at the software engineering education and evaluation model followed in the induction program for fresh engineering graduates at Tata Consultancy Services Ltd. It describes how the induction program fulfils the objective of bridging the gap between what the academia supplies and what the industry demands. It also elaborates the evolution of the evaluation process followed in the program. The current evaluation model incorporates a blended approach using case studies and online exams. Small groups of trainees are assessed based on their case study deliverables. Online exams in which trainees solve problems close to real-world scenarios are conducted at the end of each phase to assess individual performance. These assessments happen in a staged manner and ensure continuous and comprehensive evaluation. Further the performance analysis of trainees from various institutes also helps in giving inputs to improve talent acquisition in the organization. The TCS software engineering education and evaluation model is a continuously evolving model to meet the demands of the rapidly growing and changing IT industry.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.33","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812669","TCS Induction;Blended evaluation;SE evaluation;software engineering","Software engineering;Programming profession;Object oriented modeling;Educational programs;Recruitment;Object oriented programming;Performance analysis;Continuing education;Computer industry;Asia","","1","","","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"Draw a Software Engineer Test - Preliminary Attempts to Investigate University Students’ Perceptions of Software Engineering Professions","C. M. Cutrupi; I. Zanardi; L. Jaccheri","Department of Computer Science, Norwegian University of Science and Technology, Trondheim, Norway; Faculty of Informatics, Università della Svizzera Italiana, Lugano, Switzerland; Department of Computer Science, Norwegian University of Science and Technology, Trondheim, Norway","2024 IEEE/ACM Workshop on Gender Equality, Diversity, and Inclusion in Software Engineering (GEICSE)","28 Aug 2024","2024","","","45","46","The Draw-A-Software-Engineer Test (DASET) is a research tool employed to study children’s perceptions of societal norms, gender biases, and stereotypes. In this particular study involving nine university students, participants were asked to draw a software engineer and provide descriptive analyses through a questionnaire. The results demonstrated that students effectively conveyed their mental models and recognized stereotypes associated with Software Engineering (SE). The study concludes that the DASET is valuable in understanding students’ self-perceptions in the context of SE, with future research aiming to explore this aspect further.","","979-8-4007-0575-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10647149","gender stereotypes;software engineering;university students;drawa-software-engineer test;drawing;thematic analysis;coding","Conferences;Software;Encoding;Cognitive science;Software engineering;Gender issues","","","","6","","28 Aug 2024","","","IEEE","IEEE Conferences"
"ChatGPT's Aptitude in Utilizing UML Diagrams for Software Engineering Exercise Generation","S. Speth; N. Meißner; S. Becker","Institute of Software Engineering University of Stuttgart, Stuttgart, Germany; Institute of Software Engineering University of Stuttgart, Stuttgart, Germany; Institute of Software Engineering University of Stuttgart, Stuttgart, Germany",2024 36th International Conference on Software Engineering Education and Training (CSEE&T),"10 Sep 2024","2024","","","1","5","The integration of Artificial Intelligence (AI) tech-nologies into educational settings has paved the way for inno-vative teaching and learning approaches. In Software Engineering (SE) education, using Unified Modeling Language (UML) diagrams is a fundamental teaching element for understanding complex software systems. This research addresses ChatGPT's ability to utilize UML class and sequence diagrams to create SE modeling exercises. We use ChatGPT to generate exercises based on the information from uploaded UML diagrams by analyzing textual UML representations such as Mermaid and graphical diagrams. The research explores ChatGPT's ability to synthesize UML-specific information from class and sequence diagrams, enabling the generation of various exercises tailored to strengthen conceptual understanding and practical application. Furthermore, we investigate generating graphical UML class and sequence diagrams based on natural language as input. By bridging the gap between AI -driven natural language understanding and the comprehension of UML diagrams, this study highlights the potential of ChatGPT to improve SE education. Our concise findings address educators, practitioners, and other researchers engaged in the field of SE education with a special focus on UML.","2377-570X","979-8-3503-7897-9","10.1109/CSEET62301.2024.10663027","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10663027","AI-Generated Exercises;UML Modeling;Model Comprehension;ChatGPT;Software Engineering Education","Reviews;Unified modeling language;Education;Manuals;Learning (artificial intelligence);Chatbots;Software systems;Data mining;Engineering education;Software engineering","","1","","9","IEEE","10 Sep 2024","","","IEEE","IEEE Conferences"
"Combining software engineering education and empirical research via instrumented real-client team project courses","B. Boehm; S. Koolmanojwong","Center for Systems and Software Engineering (CSSE), University of Southern California (USC), Los Angeles, CA, USA; Center for Systems and Software Engineering (CSSE), University of Southern California (USC), Los Angeles, CA, USA",2014 IEEE 27th Conference on Software Engineering Education and Training (CSEE&T),"19 May 2014","2014","","","209","211","Real-client, team project courses provide excellent opportunities for performing empirical research in software engineering (SE). Compared to empirical research on large, multi-year SE projects, a course with several team projects per year is the SE research equivalent of the fruit fly in species evolution research. Although their predictive power for large-project SE is more suggestive than definitive, the research results generally provide useful contributions to human knowledge in the SE area.","2377-570X","978-1-4799-4970-0","10.1109/CSEET.2014.6816808","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6816808","","Software engineering;Software;Unified modeling language;Modeling;Spirals;Tutorials;Education","","1","","4","IEEE","19 May 2014","","","IEEE","IEEE Conferences"
"Software engineering tools classification based on SWEBOK taxonomy and software profile","W. Roongkaew; N. Prompoon","Department of Computer Engineering, Chulalongkorn University, Bangkok, Thailand; Department of Computer Engineering, Chulalongkorn University, Bangkok, Thailand",2013 Second International Conference on Informatics & Applications (ICIA),"31 Oct 2013","2013","","","122","128","In the field of software engineering, it is necessary for users to use various software engineering tools for developing quality software throughout the Software Development Life Cycle (SDLC). Currently, there are many software engineering tools served various aspects of software processes. User may need to select tool for a particular purpose. Selecting a suitable tool from software engineering point of view is a challenge issue. Therefore, we propose an approach for software engineering tool retrieval that is accurate and appropriate for the users' type of usage. We use the categories of software engineering tools specified by IEEE's Software Engineering Body of Knowledge as headings and software tool profile for classifying the tools, and use the K-Means on Batch mode algorithm for classification. This classification before the retrieval step allows the retrieval to have more precision than the classic information retrieval approach, and this method can be applied to searches in other fields with a given taxonomy.","","978-1-4673-5256-7","10.1109/ICoIA.2013.6650241","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6650241","SWEBOK;Classification;Software engineering;Software engineering tool","Software engineering;Software;Mathematical model;Knowledge engineering;Indexes;Equations;Information retrieval","","","","13","IEEE","31 Oct 2013","","","IEEE","IEEE Conferences"
"Resources for Agile Software Development in the Software Engineering Course","L. Williams; S. E. Smith; M. Rappa","North Carolina State University, USA; North Carolina State University, USA; North Carolina State University, USA",18th Conference on Software Engineering Education & Training (CSEET'05),"8 Dec 2008","2005","","","236","238","Agile software development is an emerging topic in software engineering. Industrial use of agile techniques is growing faster than our educational resources are being updated. Using an open courseware platform, OpenSeminar, we provide course resources for software engineering students about agile software development methodologies. These resources include readings, sites, lab exercises, lectures, examples, testing practices, and testing frameworks","2377-570X","0-7695-2324-2","10.1109/CSEET.2005.26","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4698929","","Software engineering;Programming profession;Automatic testing;Courseware;Project management;Monopoly;Collaboration;Dynamic programming;Seminars;Databases","","2","","1","IEEE","8 Dec 2008","","","IEEE","IEEE Conferences"
"Preliminary Exploration of Incorporating Industrial Software Curriculum into University Software Engineering Education","X. Yang; J. Zhang; W. Cai; C. Ran; H. Huang","Shanghai AchieveFun Info Tech Co., Ltd., Shanghai, China; School of Computer and Communication Engineering, Changsha University of Science and Technology College of Information Science and Technology Hunan Normal University, Changsha, China; School of Computer and Communication Engineering, Changsha University of Science and Technology, Changsha, China; School of Computer and Communication Engineering, Changsha University of Science and Technology, Changsha, China; School of Computer and Communication Engineering, Changsha University of Science and Technology, Changsha, China","2022 IEEE International Conference on Teaching, Assessment and Learning for Engineering (TALE)","14 Jun 2023","2022","","","680","683","Culturing industrial software talents is an urgent issue in China. Currently, there is no systematic education program from the perspective of discipline standards and feedback from the industry. Based on the specific conditions of the current domestic university software engineering education and industry, combined with the preliminary exploration in the education and industry circles, the authors propose a competency description plan and three types of curriculum design for university teachers and industry professionals to collaborate in cultivating industrial software talents. The competency specification is based on the CC2020 competency model, the knowledge, skills, and disposition requirements for the effective and efficient completion of industrial software-related tasks. The first type of courses is culturing abstract thinking skills integrated with existing software engineering courses. The second type of courses is specialized courses related to industrial software, including theory and ability practice. The third type of courses is based on problem and project learning. Students practice knowledge and skills to solve problems and complete projects, develop interdisciplinary collaboration capabilities, and improve and adjust their dispositions.","2470-6698","978-1-6654-9117-4","10.1109/TALE54877.2022.00117","Ministry of Education; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10148272","abstraction;competency model;industrial software;interdisciplinary collaboration;software engineering education","Industries;Systematics;Collaboration;Software;Task analysis;Engineering education;Standards","","","","14","IEEE","14 Jun 2023","","","IEEE","IEEE Conferences"
"Teaching Practical Software Engineering and Global Software Engineering: Case Study and Recommendations","D. Petkovic; R. Todtenhoefer; G. Thompson","CS Department, SFSU; University of Applied Sciences, Fulda, Germany; SFSU, java.net",Proceedings. Frontiers in Education. 36th Annual Conference,"5 Mar 2007","2006","","","19","24","In this paper we present the innovative methods and experiences from several years of teaching practical software (SW) engineering at the Computer Science Departments of San Francisco State University (SFSU), USA in conjunction with the University of Applied Sciences, Fulda University, Germany. The key objectives and desired outcomes of our course were to train future SW developers, technical leads and managers in practical SW engineering practices, including global SW engineering, where team members work in different locations. Our key approach was to combine and synchronize class teaching about SW engineering methods and processes with actual SW development work in a setting designed to simulate a small SW company. Students were divided in ""local"" groups of 4-6 members, each forming a small SW ""company"" in charge of developing a complete working WWW application as a final class project. Several groups of students at SFSU were ""virtually"" paired with groups of students at Fulda University, whom they never met face to face, to form ""global"" groups, thus simulating global SW engineering in a realistic setting. Students developed their final projects incorporating five well-defined milestones typical for SW development lifecycle. All student groups (including global ones) produced impressive final project applications and gave very positive feedback on this class","2377-634X","1-4244-0256-5","10.1109/FIE.2006.322377","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4116857","Software Engineering Education;Distributed Software Development;Global Software Engineering;Outsourcing Software Development","Software engineering;Education;Teamwork;Computer science;Globalization;Disaster management;Collaborative software;Management training;World Wide Web;Application software","","19","","9","IEEE","5 Mar 2007","","","IEEE","IEEE Conferences"
"Co-design of the Business and Software Architectures: A Systems Engineering and Model-Driven Method","X. Cui","Beijing Aerospace Control Center, Beijing, China","2010 11th ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing","26 Jul 2010","2010","","","209","214","Software architecture design plays a crucial role for both the software and business success. Most of the existing methods conduct software architecture design driven by the key software requirements, facing the challenges of creating architectures from scratch and aligning with the high-level business goals. In this paper we propose the BASAD (Business And Software Architecture co-Design) method to facilitate alleviating the difficulty of software architecture design and achieving the high-level business goals. The method addresses the business and software architecture design in an integrated process from a systems engineering perspective, leveraging the SysML and UML modeling languages and the automated model transformation from the business architectures to the software architectures, so that provide pragmatic support for the architecture co-design.","","978-1-4244-7421-9","10.1109/SNPD.2010.39","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5521525","software architecture design;business architecture;systems engineering;model-driven","Software architecture;Systems engineering and theory;Software design;Computer architecture;Design engineering;Software systems;Unified modeling language;Software engineering;Artificial intelligence;Distributed computing","","","","21","IEEE","26 Jul 2010","","","IEEE","IEEE Conferences"
"A Comparison of Natural Language Understanding Platforms for Chatbots in Software Engineering","A. Abdellatif; K. Badran; D. E. Costa; E. Shihab","Department of Computer Science and Software Engineering, Data-Driven Analysis of Software (DAS) Lab, Concordia University, Montréal, QC, Canada; Department of Computer Science and Software Engineering, Data-Driven Analysis of Software (DAS) Lab, Concordia University, Montréal, QC, Canada; Department of Computer Science and Software Engineering, Data-Driven Analysis of Software (DAS) Lab, Concordia University, Montréal, QC, Canada; Department of Computer Science and Software Engineering, Data-Driven Analysis of Software (DAS) Lab, Concordia University, Montréal, QC, Canada",IEEE Transactions on Software Engineering,"16 Aug 2022","2022","48","8","3087","3102","Chatbots are envisioned to dramatically change the future of Software Engineering, allowing practitioners to chat and inquire about their software projects and interact with different services using natural language. At the heart of every chatbot is a Natural Language Understanding (NLU) component that enables the chatbot to understand natural language input. Recently, many NLU platforms were provided to serve as an off-the-shelf NLU component for chatbots, however, selecting the best NLU for Software Engineering chatbots remains an open challenge. Therefore, in this paper, we evaluate four of the most commonly used NLUs, namely IBM Watson, Google Dialogflow, Rasa, and Microsoft LUIS to shed light on which NLU should be used in Software Engineering based chatbots. Specifically, we examine the NLUs’ performance in classifying intents, confidence scores stability, and extracting entities. To evaluate the NLUs, we use two datasets that reflect two common tasks performed by Software Engineering practitioners, 1) the task of chatting with the chatbot to ask questions about software repositories 2) the task of asking development questions on Q&A forums (e.g., Stack Overflow). According to our findings, IBM Watson is the best performing NLU when considering the three aspects (intents classification, confidence scores, and entity extraction). However, the results from each individual aspect show that, in intents classification, IBM Watson performs the best with an F1-measure$>$>84%, but in confidence scores, Rasa comes on top with a median confidence score higher than 0.91. Our results also show that all NLUs, except for Dialogflow, generally provide trustable confidence scores. For entity extraction, Microsoft LUIS and IBM Watson outperform other NLUs in the two SE tasks. Our results provide guidance to software engineering practitioners when deciding which NLU to use in their chatbots.","1939-3520","","10.1109/TSE.2021.3078384","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9426404","Software chatbots;natural language understanding platforms;empirical software engineering","Chatbot;Task analysis;Software engineering;Software;Feature extraction;XML;Java","","43","","86","IEEE","7 May 2021","","","IEEE","IEEE Journals"
"Collaborative Repositories in Model-Driven Engineering [Software Technology]","J. Di Rocco; D. Di Ruscio; L. Iovino; A. Pierantonio","Department of Information Engineering, Computer Science, and Mathematics, University of L'Aquila's; Department of Information Engineering, Computer Science, and Mathematics, University of L'Aquila's; Department of Information Engineering, Computer Science, and Mathematics, University of L'Aquila's; Department of Information Engineering, Computer Science, and Mathematics, University of L'Aquila's",IEEE Software,"23 Apr 2015","2015","32","3","28","34","Recently proposed model repositories aim to support specific needs--for example, collaborative modeling, the ability to use different modeling tools in software life-cycle management, tool interoperability, increased model reuse, and the integration of heterogeneous models.","1937-4194","","10.1109/MS.2015.61","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7093036","model-driven engineering;MDE;model repositories;software engineering;software development;MDEForge","Unified modeling language;Software engineering;Adaptation models;Collaboration;Model driven engineering;Interoperability;Software development","","52","","7","IEEE","23 Apr 2015","","","IEEE","IEEE Magazines"
"Curious software engineering experience","B. V. Bernal","Dept. of Software Engineering & Game Design, Kennesaw State University, Marietta, GA, USA",2017 IEEE World Engineering Education Conference (EDUNINE),"4 May 2017","2017","","","24","27","It is paramount for software engineers to develop the skills and background necessary to effectively work, communicate and innovate on an international scale. Our growing global world needs an increasingly diverse workforce. The effects of the globalization have been felt in the software engineering arena through software engineering projects realized by diverse professionals located in different continents with different industrial background, culture, time zone, and even language. During 2014 and 2015, Kennesaw State University (KSU) faculty from Marietta, GA, USA traveled to La Salle University in Arequipa, Peru to deliver special Software Engineering (SWE) winter programs. The programs provided opportunities to study the student's understanding of software engineering terms, knowledge, and practices in two different international arenas, KSU and La Salle. This paper discusses details and results of the winter programs executed by KSU bi-lingual faculty to La Salle participants with limited English understanding. A cycle of knowledge building emerged from the two cultures in the preparation and execution of the courses. The student participants aligned their knowledge and understanding of their Latin American software engineering practices to the new perspective given in the program. The experience educated faculty and participants of the agreements, differences, and challenges to the software architecture and game development curriculum, terminology, and development trends. The process of the collaborative knowledge distribution and assimilation that was built and experienced in the courses was surveyed with the student's views about pre-understandings, personal comprehension, opinions and final assimilation of the course content.","","978-1-5090-4886-1","10.1109/EDUNINE.2017.7918174","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7918174","Software Engineering Curriculum;Language Barriers;Models of Software Engineering Education","Education;Software;Knowledge engineering;Collaboration;Games;Software architecture","","1","","8","IEEE","4 May 2017","","","IEEE","IEEE Conferences"
"Preparing Students for Software Engineering Research","I. Richardson","Lero-the Irish Software Engineering Research Centre and Department of Computer Science and Information Systems, University of Limerick, Ireland",20th Conference on Software Engineering Education & Training (CSEET'07),"16 Jul 2007","2007","","","367","367","Discussions of software engineering education tend to focus on the needs of industry and the preparation of graduates for professional careers. This is understandable, and may even be appropriate, but what about those who hope to go on to do research in software engineering - how well are we catering for them?","2377-570X","0-7695-2893-7","10.1109/CSEET.2007.40","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4271628","","Software engineering;Computer science;Information systems;Programming;Birds;Feathers;Computer science education;Computer industry;Engineering profession;Mathematics","","2","","","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"Proposed Concepts for a Tool for Multidimensional Performance Modeling in Software Engineering Management","P. Bourque; V. Stroian; A. Abran","Ecole de Technologie Supérieure, Canada; Ecole de Technologie Supérieure, Canada; Ecole de Technologie Supérieure, Canada",2006 IEEE International Symposium on Industrial Electronics,"29 Jan 2007","2006","4","","3252","3257","A major difficulty with current organizational performance models in software engineering management is to represent many possible viewpoints quantitatively and in a consolidated manner, while at the same time keeping track of the values of the individual dimensions of performance. The models currently proposed do not meet the analytical requirements of software engineering management when various viewpoints must be taken into account concurrently. This paper presents a selection of multidimensional models of performance in software engineering and in management. It then describes the proposed concepts for a tool for multidimensional performance modeling in software engineering management. The tool would adopt an organizational framework of performance and build upon an open, generic and geometrical approach to performance modeling called QEST. It would also enable the user to select different visualization techniques to analyze data. In addition, the proposed tool would allow the user to iteratively define, collect and analyze multidimensional measures at each life cycle phase, and even enter potential results for subsequent phases. The initial test bed of the proposed tool would be the repository of project data of the International Software Benchmarking Standards Group (ISBSG)","2163-5145","1-4244-0496-7","10.1109/ISIE.2006.296138","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4078914","Performance modeling;Multidimensional management models;Visualization;Software engineering management;International Software Benchmarking Standards Group;ISBSG;QEST","Multidimensional systems;Software engineering;Engineering management;Solid modeling;Data visualization;Data analysis;Phase measurement;Software testing;Software tools;Benchmark testing","","2","2","25","IEEE","29 Jan 2007","","","IEEE","IEEE Conferences"
"SWS-ASE: Leveraging Web Service-based Software Engineering","U. Dinger; R. Oberhauser; C. Reichel","TU Dresden and Siemens AG, Dresden, Germany; Aalen University, Aalen, Germany; ETH Zurich, Siemens AG, Zurich, Switzerland",2006 International Conference on Software Engineering Advances (ICSEA'06),"19 Dec 2006","2006","","","26","26","Web Service (WS)-based integration is a broadly accepted technique to address the heterogeneity in current software systems. With regard to the growing complexity of state-of-the-art software engineering (SE) processes, Semantic WS (SWS) can be a strategy to manage the heterogeneous SE software tools and inherent cross-dependencies in an automated way. This paper presents an interoperable tool approach for Automated Software Engineering (ASE) which comprises a distributed SE process management framework based on SWS. It includes plug-ins to visualize the generated workflows as well as to manage the feature dependencies of SE choices, e.g., with regard to quality criteria. Application of the SWS-ASE infrastructure within industrial use cases yielded significant improvements in areas such as reliability, usability, and efficiency. Within this paper, the results of such a use case are discussed and depicted in detail.","","0-7695-2703-5","10.1109/ICSEA.2006.261282","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4031811","Software Engineering;Semantic Web Services;Software Automation;Reasoning;Ontology;Feature Modeling;Software Tools;Computer-Aided Software Engineering","Software engineering;Semantic Web;Software tools;Engineering management;Application software;Usability;Reliability engineering;Automation;Software systems;Visualization","","4","","21","IEEE","19 Dec 2006","","","IEEE","IEEE Conferences"
"Use of the Essence and Kuali-Beh to Structure Software Engineering Courses","G. G. Ibarguengoitia; H. Oktaba","Universidad Nacional Autonoma de Mexico, Coyoacan, Distrito Federal, MX; Faculty of Sciences UNAM Mexico City, Mexico",2016 4th International Conference in Software Engineering Research and Innovation (CONISOFT),"26 May 2016","2016","","","47","52","Software Engineering course design at undergraduate or master level faces the problem of how to present to students, in a schematic and simple way, the Software Engineering knowledge and practices. Essence and its annex B Kuali-Beh can help to solve this problem. In this paper, the experience of how to structure Software Engineering courses using Essence and Kuali-Beh concepts for undergraduate and master degree is presented.","","978-1-5090-1074-5","10.1109/CONISOFT.2016.16","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7477910","Software Engineering course;Essence;Kuali-beh","Software engineering;Kernel;Knowledge engineering;Bibliographies;Stakeholders;Planning","","1","","9","IEEE","26 May 2016","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE International Standard - Systems and software engineering--Systems and software assurance -- Part 4: Assurance in the life cycle","",,ISO/IEC/IEEE 15026-4:2021(E),"28 May 2021","2021","","","1","48","This document provides guidance and recommendations for assurance of a selected claim about the system-of-interest by achieving the claim and showing the achievement. The guidance and recommendations are given in a System Assurance process view on top of ISO/IEC/IEEE 15288 and a Software Assurance process view on top of ISO/IEC/IEEE 12207.;This document provides guidance and recommendations for assurance of a selected claim about the system-of-interest by achieving the claim and showing the achievement. The guidance and recommendations are given in a System Assurance process view on top of ISO/IEC/IEEE 15288 and a Software Assurance process view on top of ISO/IEC/IEEE 12207.","","978-1-5044-7493-1","10.1109/IEEESTD.2021.9444258","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9444258","","IEEE Standards;ISO Standards;IEC Standards;ISO Standards;Software engineering;System analysis and design;Product life cycle management","","","","","","28 May 2021","","","IEEE","IEEE Standards"
"Software engineering in a nutshell for Electrical Engineering students","M. von Schwerin","Faculty of Electrical Engineering and Information Technology, University of Applied Sciences, Ulm, Germany",2014 IEEE Global Engineering Education Conference (EDUCON),"5 Jun 2014","2014","","","788","793","Nearly all electrical engineers develop software or do at least a little programming in their everyday professional life. The curricula of Electrical Engineering Bachelor Programs usually include only little time for acquiring software engineering skills. Therefore, in this contribution a concept for a compact course is introduced which includes the main topics of software engineering and focuses on the software development skills which are usually expected from an engineer. The course is based on software modeling using UML, deployment of design patterns, code generation especially for embedded systems and using model driven architecture principles. This basic knowledge is applied to a programming project in robotics. Starting with a Lego NXT robot - without Lego softwarethe ARM 7 processor is addressed directly by the developed software. Beginning with a Platform Independent Model, the students design the system in UML using an appropriate tool. A Transformation Description Model and a Platform Description Model are provided so that the executable system can be generated. Profiles for real-time systems may be included in order to consider the real-time requirements. The project should apply a particular process model e.g. a simple VModel so that the students get used to realizing software projects using a process framework. The course including the lab can be taught in e.g. 12 weeks with 4 teaching hours per week.","2165-9567","978-1-4799-3191-0","10.1109/EDUCON.2014.6826184","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6826184","Software Engineering Course;Electrical Engineering;Model Driven Architecture;Embedded Systems","Unified modeling language;Robots;Software;Computational modeling;Real-time systems;Object oriented modeling;Software engineering","","1","","6","IEEE","5 Jun 2014","","","IEEE","IEEE Conferences"
"Educating Software Engineering Managers","L. Peters",Software Consultants International Limited,"Proceedings 16th Conference on Software Engineering Education and Training, 2003. (CSEE&T 2003).","2 Apr 2003","2003","","","78","85","The term, ""Software Engineering,"" has been in use for more than 30 years. In that time, the software community has undergone many changes including the introduction of new programming languages, new analysis and design methods and more advanced, easier to use development environments. Even with all these improvements, software continues to be a source of problems and increased risk for most corporations. If the ""software problem"" were truly of a technical nature, the problems (e.g. late delivery, cost overruns, low quality) would have been largely solved. More recently, the source of these problems has been attributed to the people who direct software development and maintenance efforts - the Software Engineering Manager. This paper examines the nature of Software Engineers, the skills needed to effectively manage them, presents a method for solving most intractable problems associated with managing Software Engineers and discusses the educational issues associated with training effective Software Engineering Managers.","1093-0175","0-7695-1869-9","10.1109/CSEE.2003.1191353","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1191353","","Software engineering;Engineering management;Management training;Computer languages;Design methodology;Software quality;Costs;Programming;Software maintenance;Software development management","","1","","22","IEEE","2 Apr 2003","","","IEEE","IEEE Conferences"
"Five days of empirical software engineering: The PASED experience","M. Di Penta; G. Antoniol; D. M. Germán; Y. -G. Guéhéneuc; B. Adams","University of Sannio, Benevento, Italy; École Polytechnique de Montréal, Quebec, Canada; University of Victoria, Victoria, BC, Canada; École Polytechnique de Montréal, Quebec, Canada; École Polytechnique de Montréal, Quebec, Canada",2012 34th International Conference on Software Engineering (ICSE),"28 Jun 2012","2012","","","1255","1258","Acquiring the skills to plan and conduct different kinds of empirical studies is a mandatory requirement for graduate students working in the field of software engineering. These skills typically can only be developed based on the teaching and experience of the students' supervisor, because of the lack of specific, practical courses providing these skills. To fill this gap, we organized the first Canadian Summer School on Practical Analyses of Software Engineering Data (PASED). The aim of PASED is to provide — using a “learning by doing” model of teaching — a solid foundation to software engineering graduate students on conducting empirical studies. This paper describes our experience in organizing the PASED school, i.e., what challenges we encountered, how we designed the lectures and laboratories, and what could be improved in the future based on the participants' feedback.","1558-1225","978-1-4673-1067-3","10.1109/ICSE.2012.6227017","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6227017","Empirical Software Engineering;Software Engineering Education","Educational institutions;Software engineering;Software;Data mining;Laboratories;Organizing","","","","13","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"An Initiative to Improve Reproducibility and Empirical Evaluation of Software Testing Techniques","F. G. De Oliveira Neto; R. Torkar; P. D. L. Machado","Software Practices Lab., Universidade Federal de Campina Grande, Campina Grande, PB, BR; Dept. of Computer Science and Engineering, Chalmers and the University of Gothenburg, Gothenburg, Sweden; Software Practices Laboratory, Federal University of Campina Grande, Campina Grande, Brazil",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","575","578","The current concern regarding quality of evaluation performed in existing studies reveals the need for methods and tools to assist in the definition and execution of empirical studies and experiments. However, when trying to apply general methods from empirical software engineering in specific fields, such as evaluation of software testing techniques, new obstacles and threats to validity appears, hindering researchers' use of empirical methods. This paper discusses those issues specific for evaluation of software testing techniques and proposes an initiative for a collaborative effort to encourage reproducibility of experiments evaluating software testing techniques (STT). We also propose the development of a tool that enables automatic execution and analysis of experiments producing a reproducible research compendia as output that is, in turn, shared among researchers. There are many expected benefits from this Endeavour, such as providing a foundation for evaluation of existing and upcoming STT, and allowing researchers to devise and publish better experiments.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.197","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203016","Empirical Software Engineering;Software Testing;Reproducibility in Software Engineering","Software engineering;Software testing;Software;Collaboration;Guidelines;Conferences","","7","","13","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Using a model framework in developing and delivering a family of software engineering project courses","D. Port; B. Boehm","Center for Software Engineering, University of Southern California, USA; Center for Software Engineering, University of Southern California, USA",Proceedings 14th Conference on Software Engineering Education and Training. 'In search of a software engineering profession' (Cat. No.PR01059),"7 Aug 2002","2001","","","44","55","The University of Southern California (USC) teaches a two-semester real-client project course as a core course in USC's MSCS-SE (Master of Science in Computer Science and Software Engineering) degree program. The course has evolved rapidly, each year introducing many changes in order to satisfy the course stakeholder's win conditions. The course has also been our primary experimental testbed for evolving our MBASE (Model-Based Architecting and Software Engineering) model integration framework. In turn, this framework, along with the CRESST (Center for Research on Evaluation, Standards and Student Testing) cognitive demands analysis has served as an effective means of managing the course's rapid evolution. A further test of the framework has been its application to undergraduate software engineering project courses at other institutions. This paper provides a description and examples of USC's experience in constructing and evolving a family of software engineering project courses based on the MBASE software engineering model integration framework. A discussion of course needs, use of software engineering models, a description of MBASE, use of the CRESST model of learning objectives, course development and experiences are presented. The approach has been used successfully at Columbia University and to a lesser degree at other institutions. Much of the current and historical materials and resources described in this paper are freely available for educational use.","1093-0175","0-7695-1059-0","10.1109/CSEE.2001.913819","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=913819","","Software engineering;Object oriented modeling;Educational programs;Software testing;Education;Application software;Project management;Engineering management;System testing;Documentation","","8","","23","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Research Publication Trends in Software Engineering","S. F. Sahito; A. R. Gilal; R. A. Abro; A. Waqas; K. Shaikh","Department of Computer Science, Sukkur IBA University, Sukkur, Sindh, Pakistan; Department of Computer Science, Sukkur IBA University, Sukkur, Sindh, Pakistan; Department of Computer Science, Sukkur IBA University, Sukkur, Sindh, Pakistan; Department of Computer Science, Sukkur IBA University, Sukkur, Sindh, Pakistan; Department of Computer Science, Sukkur IBA University, Sukkur, Sindh, Pakistan","2019 13th International Conference on Mathematics, Actuarial Science, Computer Science and Statistics (MACS)","6 Mar 2020","2019","","","1","4","There has been outstanding growth in the field of Software Engineering. With this emergence, scholars of this area worked hard to produce researches that would really be effective in the progress of Software Engineering. New researchers always face number of problems while initiating any work. Lack of proper guideline and being progressing field, it becomes crucial to provide such detailed and up-to-date information about latest research publication trends in Software Engineering. This research has been conducted in order to address this problem and help the researcher community by providing them guidance. While conducting this study, about 57 research articles published only in 2018 have been considered from renowned Journal of Software Engineering. On the basis of title, abstract, content, contribution form, area, occurrences and citation, those articles are evaluated. Results show that software testing is on hype while comparing with development, maintenance, refactoring and management. MS scholars and PhD students surely get advantage after getting such information. This study is more focused on providing guidelines so that scholar community can emerge in a better way.","","978-1-7281-4956-1","10.1109/MACS48846.2019.9024767","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9024767","Software Engineering;software testing;software development;software maintenance;publications","Market research;Software;Software testing;Software engineering;Maintenance engineering;Computer bugs","","1","","26","IEEE","6 Mar 2020","","","IEEE","IEEE Conferences"
"Towards Quantum Software Requirements Engineering","T. Yue; S. Ali; P. Arcaini","Simula Research Laboratory, Oslo, Norway; Simula Research Laboratory, Oslo Metropolitan University, Oslo, Norway; National Institute of Informatics, Tokyo, Japan",2023 IEEE International Conference on Quantum Computing and Engineering (QCE),"30 Nov 2023","2023","02","","161","164","Quantum software engineering (QSE) is receiving increasing attention, as evidenced by increasing publications on topics, e.g., quantum software modeling, testing, and debugging. However, in the literature, quantum software requirements engineering (QSRE) is still a software engineering area that is relatively less investigated. To this end, in this paper, we provide an initial set of thoughts about how requirements engineering for quantum software might differ from that for classical software after making an effort to map classical requirements classifications (e.g., functional and extra-functional requirements) into the context of quantum software. Moreover, we provide discussions on various aspects of QSRE that deserve attention from the Quantum software engineering community.","","979-8-3503-4323-6","10.1109/QCE57702.2023.10201","Research Council of Norway(grant numbers:299827); ERATO(grant numbers:JPMJER1603); JST(grant numbers:JPMJMI20B8); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10313750","quantum software engineering;requirements engineering;requirements","Quantum computing;Debugging;Software;Requirements engineering;Software engineering;Testing","","1","","22","IEEE","30 Nov 2023","","","IEEE","IEEE Conferences"
"Awareness and Comprehension in Software/Systems Engineering Practice and Education: Trends and Research Directions","M. Schots; C. Werner; M. Mendonça","Systems Engineering and Computing Program, COPPE, Federal University of Rio de Janeiro, Rio de Janeiro, Brazil; Systems Engineering and Computing Program, COPPE, Federal University of Rio de Janeiro, Rio de Janeiro, Brazil; Computer Science Department, Federal University of Bahia, Rio de Janeiro, Brazil",2012 26th Brazilian Symposium on Software Engineering,"25 Oct 2012","2012","","","186","190","The creation of tools, techniques and methodologies to support the manipulation of large data sets has been receiving special attention of both scientific and industrial communities, in order to discover new ways of dealing with the underlying information, including learning purposes, identification of patterns, decision making support, amongst others. However, making use of computing resources to enhance awareness and understanding of software information and the software itself is still a challenge in software/systems engineering, since it involves the identification of suitable mechanisms, adequate abstractions, and studies on stimulation of the human perceptive and cognitive abilities. This paper presents some of the challenges in this context, based on current trends of software development lifecycle, program comprehension, and software engineering education. At the end, a special focus is given on ongoing research on using and improving current mechanisms for supporting software reuse practices and software comprehension in general.","","978-0-7695-4868-5","10.1109/SBES.2012.25","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6337872","software engineering;awareness;program comprehension;software visualization;software engineering education;grand challenges","Software;Software engineering;Education;Visualization;Conferences;Industries;Data visualization","","1","","40","IEEE","25 Oct 2012","","","IEEE","IEEE Conferences"
"Model-Based Adaptation of Behavioral Mismatching Components","C. Canal; P. Poizat; G. Salaün","LCC, Universidad de Málaga, Málaga, Spain; IBISC FRE 3190 CNRS, Université d’Évry Val d’Essonne, Evry, France; IBISC FRE 3190 CNRS, Universite d'Evry Val d'Essonne, Tour Evry 2, Evry, France",IEEE Transactions on Software Engineering,"1 Aug 2008","2008","34","4","546","563","Component-Based Software Engineering focuses on the reuse of existing software components. In practice, most components cannot be integrated directly into an application-to-be, because they are incompatible. Software Adaptation aims at generating, as automatically as possible, adaptors to compensate mismatch between component interfaces, and is therefore a promising solution for the development of a real market of components promoting software reuse. In this article, we present our approach for software adaptation which relies on an abstract notation based on synchronous vectors and transition systems for governing adaptation rules. Our proposal is supported by dedicated algorithms that generate automatically adaptor protocols. These algorithms have been implemented in a tool, called Adaptor, that can be used through a user-friendly graphical interface.","1939-3520","","10.1109/TSE.2008.31","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4527252","Software Engineering;Requirements/Specifications;Design Tools and Techniques;Software Architectures;Interoperability;Interface definition languages;Software Construction;Software Engineering;Requirements/Specifications;Design Tools and Techniques;Software Architectures;Interoperability;Interface definition languages;Software Construction","Adaptation model;Irrigation;Protocols;Middleware;Software engineering;Proposals;Assembly systems;Software tools;Contracts;Petri nets","","89","","63","IEEE","23 May 2008","","","IEEE","IEEE Journals"
"Towards Mixed-Reality in Software Engineering of Safety-Critical Systems","E. S. Grant; A. Nag Ramaseri Chandra; W. Valentine; M. S. Velashani","School of Electrical Engineering and Computer Science, University of North Dakota, Grand Forks, USA; School of Electrical Engineering and Computer Science, University of North Dakota, Grand Forks, USA; School of Electrical Engineering and Computer Science, University of North Dakota, Grand Forks, USA; School of Electrical Engineering and Computer Science, University of North Dakota, Grand Forks, USA","2019 IEEE International Conference on Electrical, Computer and Communication Technologies (ICECCT)","17 Oct 2019","2019","","","1","6","Software engineering safety-critical systems exact a high cost because of the required system reliability. Safety-critical systems are characterized by the resulting harm or loss of life should such unanticipated system failure occur. This demand for high reliability has fostered the application of various approaches towards realizing this system reliability. Some of these approaches include model-driven development methodologies, application domain profile modeling, formal specification techniques, and various rigorous testing techniques. Software engineering researchers seek new and innovative techniques towards increasing safety-critical systems development. One emerging technique that may provide new prospects for developing highly reliable safety-critical software systems is that of mixed-reality, which is a combination of virtual and augmented realities. In this report a framework for the use of mixed-reality in safety-critical software system development is presented. This proposed mixed-reality software engineering methodology incorporates model-driven techniques along with formal specification techniques and builds on prior work in defining a model-driven software development methodology.","","978-1-5386-8158-9","10.1109/ICECCT.2019.8869427","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8869427","software engineering;formal specification;virtual reality;augmented reality;model-driven development","Unified modeling language;Software engineering;Software systems;Virtual reality;Solid modeling;Reliability","","","","16","","17 Oct 2019","","","IEEE","IEEE Conferences"
"Opportunistic problem solving in software engineering","P. N. Robillard",École Polytechnique de Montréal,IEEE Software,"31 Oct 2005","2005","22","6","60","67","Software development is a complex, mainly cognitive endeavor. Studying these cognitions can improve software processes, but this is an ambitious task. The topic is broad, and the software engineering domain is still maturing. Positioning software engineering activities within a holistic view of the software process helps us compare it with other engineering disciplines. In this way, we can better define what is specific to software engineering and how to quantitatively and qualitatively measure these activities.","1937-4194","","10.1109/MS.2005.161","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1524916","Software engineering;software process;process assessment;process qualitative and quantitative measurements;cognitive actions;process practices;cognitive synchronization;synchronization meeting","Problem-solving;Software engineering;IEC standards;Design engineering;ISO standards;Capability maturity model;Software maintenance;Product development;Humans;Engineering management","","19","","14","IEEE","31 Oct 2005","","","IEEE","IEEE Magazines"
"1st International workshop on combining modelling and search-based software engineering (CMSBSE 2013)","M. Harman; R. F. Paige; J. R. Williams","CREST Centre, University College London, London, UK; Department of Computer Science, University of York, York, UK; Department of Computer Science, University of York, York, UK",2013 35th International Conference on Software Engineering (ICSE),"26 Sep 2013","2013","","","1513","1514","Modelling plays a vital and pervasive role in software engineering: it provides means to manage complexity via abstraction, and enables the creation of larger, more complex systems. Search-based software engineering (SBSE) offers a productive and proven approach to software engineering through automated discovery of near-optimal solutions to problems, and has proven itself to be effective on a wide variety of software-and systems engineering problems. CMSBSE 2013 was a forum allowing researchers from both communities to meet, discuss synergies and differences, and present topics related to the intersection of search and modelling. Particular goals of CMSBSE were to highlight that SBSE and modelling have substantial conceptual and technical synergy, and to identify and present opportunities in which they can be combined, whilst also aiming to grow the community working in this area.","1558-1225","978-1-4673-3076-3","10.1109/ICSE.2013.6606763","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6606763","Modelling;Search-based software engineering","Software engineering;Conferences;Modeling;Communities;Educational institutions;Search problems;Software","","1","","14","IEEE","26 Sep 2013","","","IEEE","IEEE Conferences"
"Using Generative Artificial Intelligence Tools in Software Engineering Courses","S. Datta","Department of Engineering University of Houston- Clear Lake Houston, USA",2024 36th International Conference on Software Engineering Education and Training (CSEE&T),"10 Sep 2024","2024","","","1","2","This pilot study focuses on allowing students to use generative Artificial intelligence (AI) tools for their learning and assignments. Therefore, the study looks to improve the assignments to assess their learning. Students in their course have both formative and summative assessments. Both these assessments consist of writing, quizzes, and presentations. These students are both from the undergraduate and graduate levels. The study seeks to make the assessments sustainable for all teaching levels. The change in writing assessment would help to assess students better. The assignments are tested on ChatGPT and Bard to check if a student gets a passing grade using an AI tool.","2377-570X","979-8-3503-7897-9","10.1109/CSEET62301.2024.10663042","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10663042","Generative Artificial Intelligence;Software Engineering;Assessment;AI tools","Generative AI;Education;Learning (artificial intelligence);Writing;Chatbots;Software engineering","","","","4","IEEE","10 Sep 2024","","","IEEE","IEEE Conferences"
"Green software engineering with agile methods","M. Dick; J. Drangmeister; E. Kern; S. Naumann","Institute for Software Systems, Trier University of Applied Sciences, Birkenfeld, Germany; Institute for Software Systems, Trier University of Applied Sciences, Birkenfeld, Germany; Institute for Software Systems, Trier University of Applied Sciences, Birkenfeld, Germany; Institute for Software Systems, Trier University of Applied Sciences, Birkenfeld, Germany",2013 2nd International Workshop on Green and Sustainable Software (GREENS),"23 Sep 2013","2013","","","78","85","The energy consumption of information and communication technology (ICT) is still increasing. Since several concepts regarding hardware solutions for Green IT exist, the contribution of software to Green IT is still not well investigated. This comprises the production and the usage impact of software on energy consumption. In our paper, we discuss this contribution. Especially, we present a model that integrates Green IT aspects into software engineering processes with agile methods in order to produce “greener” software from scratch.","","978-1-4673-6267-2","10.1109/GREENS.2013.6606425","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6606425","Software Engineering;Green IT;Green Software Engineering;Agile Methods","Software;Green products;Software engineering;Sustainable development;Biological system modeling;Measurement;Energy consumption","","31","","34","IEEE","23 Sep 2013","","","IEEE","IEEE Conferences"
"Teaching how to engineer software","H. D. Rombach","Department of Telecommunication Engineering, Faculty of Electronic and Computer Engineering, Universiti Teknikal Malaysia, Melaka, Malaysia","Proceedings 16th Conference on Software Engineering Education and Training, 2003. (CSEE&T 2003).","2 Apr 2003","2003","","","30","31","","1093-0175","0-7695-1869-9","10.1109/CSEE.2003.1191344","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1191344","","Education;Software engineering;Computer science;Software quality;Software measurement;Acoustical engineering;Mathematics;Computer industry;Concrete;Knowledge engineering","","","","","IEEE","2 Apr 2003","","","IEEE","IEEE Conferences"
"The role of inspection in software quality assurance","D. L. Parnas; M. Lawford","Software Quality Research Laboratory, University of Limerick, Limerick, Ireland; Software Quality Research Laboratory, Department of Computing and Software, McMaster University, Hamilton, ONT, Canada",IEEE Transactions on Software Engineering,"26 Aug 2003","2003","29","8","674","676","Due to the complexity of the code, software is released with many errors. In response, both software practitioners and software researchers need to improve the reputation of the software. Inspection is the only way to improve the quality of software. Inspection methods can be more effective but success depends on having a sound and systematic procedure for conducting the inspection. The Workshop on Inspection in Software Engineering (WISE), a satellite event of the 2001 Computer Aided Verification (CAV '01) Conference, brought together researchers, practitioners, and regulators in the hope of finding effective approaches to software inspection. The workshop included invited lectures and paper presentations in the form of panel discussions on all aspects of software inspection. Submissions explained how practitioners and researchers were performing inspections, discussed the relevance of inspections, provided evidence of how inspections could be improved through refinement of the inspection process and computer aided tool support and explained how careful design of software could make inspections easier or more effective.","1939-3520","","10.1109/TSE.2003.1223642","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1223642","","Inspection;Software quality;Computer bugs;Software debugging;Software engineering;Satellites;Regulators;Software design;Software performance;Software tools","","58","","","IEEE","26 Aug 2003","","","IEEE","IEEE Journals"
"Improving software engineering courses with case study approach","Y. Jia","Department of Computer and Information Engineering, Wuhan Polytechnic University, Wuhan, Hubei, China",2010 5th International Conference on Computer Science & Education,"30 Sep 2010","2010","","","1633","1636","Research evidences show that the case study approach has produced a paradigm shift in the way we develop, support, and distribute software. This shift is not only redefining the software industry but also the way we teach and learn in our software engineering courses. Case approach is an opportunity for students to learn the software engineering concepts and skills we teach. This paper discusses case approach as bazaars of learning that offer a meaningful learning context. We present the teaching and learning framework we used in the case study and report on our experiences, lessons learned, and some practical problems we encountered. Our grading and evaluation approach show that the students did relatively well as bug hunters and reporters. Results from two online surveys indicate that students are motivated in participating in case study. And they are willing to participate in project activities long after their graduation. The study reveals one possible way software engineering educators can teach and integrate case approach into their formal curricular structure.","","978-1-4244-6005-2","10.1109/ICCSE.2010.5593593","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5593593","education;software engineering;case study","Education;Software engineering;Object oriented modeling;Software systems;Collaboration;Knowledge engineering","","4","","8","IEEE","30 Sep 2010","","","IEEE","IEEE Conferences"
"Member Checking in Software Engineering Research: Lessons Learned from an Industrial Case Study","R. E. S. Santos; C. V. C. Magalhaes; F. Q. B. da Silva","Centro de Informatica, Universidade Federal de Pernambuco, Brazil; Centro de Informatica, Universidade Federal de Pernambuco, Brazil; Centro de Inf., Universidade Federal de Pernambuco, Recife, PE, BR",2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM),"11 Dec 2017","2017","","","187","192","Context. Member checking can be defined as a research phase performed during a qualitative research in which the researcher compares her interpretations and understanding obtained from the data analysis with the view-points of participants to increase accuracy and consistency of results. This is an important step for any qualitative research. However, considering a sample of 66 case studies developed and published in the context of software engineering, only 10 studies briefly described the use of this technique. Method. In this article, we present a set of lessons learned obtained from planning and performing member checking to validate the results of an industrial case study performed in a large software company. Results. Member checking was effective to validate the findings obtained from the qualitative case study and was also useful to reveal important information not observed in the data analysis process. It has also shown to be effective to observe divergences among different groups of participants. Conclusion. We described how the member checking can be performed, and discussed seven lessons learned in this process. We expect that our experience can be useful to software engineering researchers while performing this research phase in case studies.","","978-1-5090-4039-1","10.1109/ESEM.2017.29","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8170101","Qualitative Research;Case Study;Member Checking;Software Engineering","Software;Data analysis;Multiskilling;Software engineering;Data collection;Interviews;Encoding","","2","","16","IEEE","11 Dec 2017","","","IEEE","IEEE Conferences"
"Using ontology to enhance requirement engineering in agile software process","S. Sitthithanasakul; N. Choosri","College of Arts, Media and Technology, Chiang Mai University, Chiang Mai, Thailand; College of Arts, Media and Technology, Chiang Mai University, Chiang Mai, Thailand","2016 10th International Conference on Software, Knowledge, Information Management & Applications (SKIMA)","4 May 2017","2016","","","181","186","One of the most important factors when determining the success of the Agile software development process is requirement engineering. Ontology is a well - known knowledge representation tool in knowledge management application. This paper contributes the investigation of its usage in the software development process. We propose the novel use of ontology to enhance requirement engineering in the Agile process to improve communication between software development team and stakeholders.","","978-1-5090-3298-3","10.1109/SKIMA.2016.7916218","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7916218","Ontology;Ontology framework;Agile process;Requirement engineering and Enhance software process","Ontologies;Software;Unified modeling language;Stakeholders;Tools;Documentation;Requirements engineering","","13","","17","IEEE","4 May 2017","","","IEEE","IEEE Conferences"
"Software Engineering in Small Software Companies: Consolidating and Integrating Empirical Literature Into a Process Tool Adoption Framework","M. Tuape; V. T. Hasheela-Mufeti; A. Kayanda; J. Porras; J. Kasurinen","Department of Software Engineering, Lappeenranta-Lahti University of Technology, Lappeenranta, Finland; Department of Computing, Mathematical and Statistical Sciences, University of Namibia, Windhoek, Namibia; Information Systems Department, College of Business Education, Dar es Salaam, Tanzania; Department of Software Engineering, Lappeenranta-Lahti University of Technology, Lappeenranta, Finland; Department of Software Engineering, Lappeenranta-Lahti University of Technology, Lappeenranta, Finland",IEEE Access,"27 Sep 2021","2021","9","","130366","130388","Small software companies face numerous challenges of complexity, unstructured software development processes and scarce resources. This notwithstanding, the companies have dominated the software market by 80 percent. The practice and products of these companies are still persistently marred by quality issues arising from the processes, with evidence indicating that process tools do not fit the unique contexts in which they operate. Significant strides have been made to transform software development practice; however, the challenges are still apparent. Hence the need to establish how knowledge areas are applied in process practice, understand the context of software development and its implication in practice, how process tools are utilised in practice and evaluate the quality of research in software literature. The researchers undertook a systematic mapping study to determine the state of practice in the empirical literature on software engineering of SSCs by examining and classifying 1096 publications. Other than the finding that research quality was low and affecting generalisation and transferability, the results also revealed exciting findings, which we finally consolidated and integrated to develop two contributions (i) a software development process adoption theoretical framework that provides essential insights into understanding software development and (ii) a 3-point guideline for research quality. By solving the adoption of process tools in software development, this paper presents one of the most significant contributions to transforming practice in software development and research in small software companies.","2169-3536","","10.1109/ACCESS.2021.3113328","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9540679","Small software companies;software development practice;software process tools systematic mapping studies","Software;Companies;Software engineering;Tools;Business;Systematics;Standards","","4","","149","CCBY","16 Sep 2021","","","IEEE","IEEE Journals"
"A Systematic Mapping Study of Diversity in Software Engineering: A Perspective from the Agile Methodologies","K. Kohl Silveira; R. Prikladnicki","School of Technology, PUCRS, Porto Alegre, Brazil; School of Technology, PUCRS, Porto Alegre, Brazil",2019 IEEE/ACM 12th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"29 Aug 2019","2019","","","7","10","Diversity is being discussed intensively by different knowledge areas. Some studies show that diversity builds better teams, delivers better results, and more. Cognitive diversity is linked to better outcomes, and studies show that cognitive diversity is influenced by identity diversity (e.g., gender, race, age, etc.), mainly when tasks are related to problem-solving and prediction. The discussions about diversity in Software Engineering are increasing as well. There is a known lack of representativeness from some groups when we talk about identity diversity as, for example, gender and race. To support diversity in Software Engineering is valuable and it is especially relevant once we are dealing with problem-solving. In this work, we are interested in understanding how the subject is being conducted in Software Engineering-related research and more specifically, in Agile Methodologies. For that we conducted a Systematic Mapping, so we can have an overview of the research area through classification and counting contributions related to the subject. The outcome is an inventory of papers on how Diversity is being discussed in Software Engineering and Agile Methodologies. We list the most common publication venues, the frequency publication through the years, the main areas in software engineering that are interested in the subject and finally, a first discussion on how Agile Methodologies and their intrinsic characteristics can support better deliveries from more diverse development teams.","2574-1837","978-1-7281-2239-7","10.1109/CHASE.2019.00010","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8816976","Software Engineering;Software Development;Agile;Diversity;Heterogeneous Teams","Cultural differences;Software engineering;Software;Systematics;Problem-solving;Conferences;Task analysis","","22","","11","IEEE","29 Aug 2019","","","IEEE","IEEE Conferences"
"HoliCoW: Automatically Breaking Team-Based Software Projects to Motivate Student Testing","P. Zhang; J. White; D. C. Schmidt","Vanderbilt University, Nashville, TN; Vanderbilt University, Nashville, TN; Vanderbilt University, Nashville, TN",2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C),"23 Mar 2017","2016","","","436","439","Intensive testing is often applied by professional software engineers to assure the quality of enterprise information technology (IT) systems. For example, Netflix's Simian Army consists of services that generate various types of failures, detect abnormal conditions, and test the ability of cloud-based enterprise IT software to survive them. Although software engineering students should be taught these types of rigorous testing techniques, it is often hard to motivate students to produce high-quality test suites for their assignments since classroom environments lack the harsh outcomes of unexpected system failures. This paper provides two contributions to work on strengthening coding and testing skills of software engineering students by aligning educational environment more closely with real-world industries. First, we describe the Holistic Code-Wrecker (HoliCoW), which is our testing method and tool that simulates production environments through forced logical error injections into student projects. The modified versions are then run against regression tests written by students, and the test results are analyzed to determine the robustness of original software. Second, this paper describes preliminary results from our ongoing experience applying HoliCoW to Software Engineering project courses at Vanderbilt University, where the tool is used to automatically evaluate student software project submissions to determine whether regression tests they define detect errors injected into their code.","","978-1-4503-4205-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883330","Software engineering education;software testing;software error injection","Software;Testing;Software engineering;Production;Software reliability;Hardware","","1","","5","","23 Mar 2017","","","IEEE","IEEE Conferences"
"From Craft to Engineering: Software Development and Schema Theory","M. Burgin","Department of Mathematics, University of California, Los Angeles, Los Angeles, CA, USA",2009 WRI World Congress on Computer Science and Information Engineering,"24 Jul 2009","2009","7","","787","791","This paper analyses new conditions of software functioning and demands caused by these conditions. To satisfy the demands and to allow software developers to work on a higher level of software engineering instead of simply following the craft of software development, we consider such theoretical models of software and hardware systems as grid automata and structural, interaction and computational schemas. Operations with grid automata and schemas represent operations in software design and maintenance.","","978-0-7695-3507-4","10.1109/CSIE.2009.397","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5170423","software engineering;adaptation;interaction;grid automaton;structural schema;shema operation","Computer science;Software systems;Functional programming;Object oriented programming;Software engineering;Computer industry;Hardware;Automata;Software tools;Application software","","1","","7","IEEE","24 Jul 2009","","","IEEE","IEEE Conferences"
"Variability and Reproducibility in Software Engineering: A Study of Four Companies that Developed the Same System","B. C. D. Anda; D. I. K. Sjøberg; A. Mockus","Department of Informatics, University of Oslo, Oslo, Norway; Simula Research Laboratory, Lysaker, Norway; Department of Software Technology Research, Avaya Laboratories Research, NJ, USA",IEEE Transactions on Software Engineering,"2 Jun 2009","2009","35","3","407","429","The scientific study of a phenomenon requires it to be reproducible. Mature engineering industries are recognized by projects and products that are, to some extent, reproducible. Yet, reproducibility in software engineering (SE) has not been investigated thoroughly, despite the fact that lack of reproducibility has both practical and scientific consequences. We report a longitudinal multiple-case study of variations and reproducibility in software development, from bidding to deployment, on the basis of the same requirement specification. In a call for tender to 81 companies, 35 responded. Four of them developed the system independently. The firm price, planned schedule, and planned development process, had, respectively, “low,” “low,” and “medium” reproducibilities. The contractor's costs, actual lead time, and schedule overrun of the projects had, respectively, “medium,” “high,” and “low” reproducibilities. The quality dimensions of the delivered products, reliability, usability, and maintainability had, respectively, “low,” ""high,” and “low” reproducibilities. Moreover, variability for predictable reasons is also included in the notion of reproducibility. We found that the observed outcome of the four development projects matched our expectations, which were formulated partially on the basis of SE folklore. Nevertheless, achieving more reproducibility in SE remains a great challenge for SE research, education, and industry.","1939-3520","","10.1109/TSE.2008.89","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4693714","Software engineering life cycle;software quality;software project success;software process;multiple-case study.;General;Life cycle;Software Quality/SQA;Multiple-case study","Reproducibility of results;Software engineering;Programming;Job shop scheduling;Software quality;Computer industry;Costs;Software measurement;Systems engineering and theory;Usability","","54","","94","IEEE","2 Dec 2008","","","IEEE","IEEE Journals"
"Issues in student valuing of software engineering best practices","S. T. Frezza","Software Engineering, Gannon University, Erie, PA, USA",2016 IEEE Frontiers in Education Conference (FIE),"1 Dec 2016","2016","","","1","4","This paper outlines the need for valuing of software engineering skills as a means to improve software engineering education. It presents a brief introduction to affective domain learning, and a survey of the education literature on software engineering skills related to software testing and quality assurance, which suggests that the competencies and skills needed extend beyond cognitive-domain learning. It then proposes a means for studying student valuing of these `best practice' skill areas.","","978-1-5090-1790-4","10.1109/FIE.2016.7757556","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7757556","Affective Domain;Software Engineering;Best Practices","Best practices;Software engineering;Education;Software testing;Software;Instruments","","4","","25","IEEE","1 Dec 2016","","","IEEE","IEEE Conferences"
"Research Software Engineering in 2030","D. S. Katz; S. Hettrick","NCSA & CS & ECE & iSchool, University of Illinois Urbana Champaign, Urbana, IL, USA; Software Sustainability Institute, University of Southampton, Southampton, UK",2023 IEEE 19th International Conference on e-Science (e-Science),"25 Sep 2023","2023","","","1","2","This position paper for an invited talk on the “Future of eScience” discusses the Research Software Engineering Movement and where it might be in 2030. Because of the authors' experiences, it is aimed globally but with examples that focus on the United States and United Kingdom.","2325-3703","979-8-3503-2223-1","10.1109/e-Science58273.2023.10254813","Alfred P. Sloan Foundation(grant numbers:10073); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10254813","research software;research software engineer;research software engineering","Software;Software engineering","","","","9","IEEE","25 Sep 2023","","","IEEE","IEEE Conferences"
"A Dynamic Framework for Software Engineering Education Curriculum to Reduce the Gap between the Software Organizations and Software Educational Institutions","G. Subrahmanyam",Satyam Computer Services ltd,2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","248","254","Rapid advancements in the software industry along with increasing software business demands are creating a gap between the software educational institutes and software industry. Time to time curriculums is being changed to reduce the gap and increase the focus as per need of time and demands. Software industry knows the requirements of the business (customers for IT) and software institutes can instigate the discipline to the need of software industry by collaboration. This will make sure that industry gets the suitable talent and software engineering students get the suitable opportunities to work with industries. As part of collaboration, we have presented here the 7 intelligence modules to enhance the current curriculum mechanism in order to bring the levels of software education closure to software industry, which is a win-win situation.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.8","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812705","","Software engineering;Educational institutions;Computer industry;Collaborative software;Computer architecture;Collaborative work;Industrial training;Computer science education;Educational products;Technological innovation","","11","","6","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"Software engineering occupational stress and knowledge sharing in the context of Global Software Development","A. Amin; S. Basri; M. F. Hassan; M. Rehman","Department of Computer and Information Sciences, Universiti Teknologi Petronas, Bandar Seri Iskandar, Tronoh, Perak, Malaysia; Department of Computer and Information Sciences, Universiti Teknologi Petronas, Bandar Seri Iskandar, Tronoh, Perak, Malaysia; Department of Computer and Information Sciences, Universiti Teknologi Petronas, Bandar Seri Iskandar, Tronoh, Perak, Malaysia; Department of Computer and Information Sciences, Universiti Teknologi Petronas, Bandar Seri Iskandar, Tronoh, Perak, Malaysia",2011 National Postgraduate Conference,"23 Jan 2012","2011","","","1","4","The success of a software development project does not only rely on technical support but also depends on human and social factors. The human side of software development has been ignored in the past decade or so, which calls for increasing our efforts to understand this side of software engineering. Human knowledge and creativity is the cornerstone for software development. However, this human knowledge has lesser or no value when it is isolated or individualized; hence knowledge sharing becomes critical for the success of software projects. The dilemma with knowledge sharing is that there are many impediments to it. One such impediment can be occupational stress which has increased after the globalization of software engineering. In the context of Global Software Development (GSD), the objective of this paper is to highlight the impact of software engineering occupational stress on knowledge sharing. To highlight this important relationship a thorough literature survey has been conducted and the results of the survey are presented in this paper.","","978-1-4577-1884-7","10.1109/NatPC.2011.6136269","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6136269","Knowledge Sharing;Occupational Stress;Software Engineering;Global Software Development GSD","Software;Software engineering;Stress;Knowledge engineering;Programming;Occupational stress;Organizations","","8","","47","IEEE","23 Jan 2012","","","IEEE","IEEE Conferences"
"Poster: Analyzing the Transactive Memory in Teaching Software Engineering","S. Kleanthous; G. M. Kapitsaki","University of Cyprus, Nicosia, Cyprus; Panepistemio Kyprou, Nicosia, Nicosia, CY",2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion),"30 Aug 2018","2018","","","145","146","Software Engineering education requires offering to students practical experience via collaboration with the industry and working in teams. At the same time, students require different skills and knowledge at different levels of their studies, i.e. undergraduate versus postgraduate. In this context, Transactive Memory, referring to the shared store of knowledge, affects the dynamics in groups influencing the teaching outcome. In this paper, we present the process that we have employed in University of Cyprus, for teaching Software Engineering courses to bachelor and master students. We describe the process of team building, the different roles, and how the group dynamics can affect Transactive Memory.","2574-1934","978-1-4503-5663-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449472","Software Engineering education;transactive memory system;project manager","Software engineering;Software;Education;Task analysis;Project management;Collaboration;Industries","","1","","8","","30 Aug 2018","","","IEEE","IEEE Conferences"
"Teaching Software Technology and Social Economics with Hybrid Methods","J. J. Cusick","Board of Trustees Henry George School of Social Science, New York, USA & Kobe, Japan",2023 IEEE 35th International Conference on Software Engineering Education and Training (CSEE&T),"31 Aug 2023","2023","","","195","196","This paper illustrates the use of multiple educational channels focused on conveying software and technology topics to diversify interest, relevancy, and interconnectedness with historical and contemporary economic themes. Interdisciplinary panels, custom online tools, and ongoing publications - including a blog — are combined to create a hybrid educational approach anchored in both software development and technology to spotlight their effects on the economy. This program brings key software ideas to a largely non-technical audience and advances the awareness of Software Engineering to adult learners globally.","2377-570X","979-8-3503-2202-6","10.1109/CSEET58097.2023.00044","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10229375","education methods;software engineering;software development;software technology;history of science;economics;Henry George;land value tax;equity","Economics;Industries;Education;Blogs;Software;Faces;Software engineering","","","","15","IEEE","31 Aug 2023","","","IEEE","IEEE Conferences"
"IEEE/ISO/IEC Approved Draft International Standard - Software and systems engineering -- Software testing -- Part 3: Test documentation","",,"ISO/IEC/IEEE P29119-3_FDIS, June2021","26 Jul 2021","2021","","","1","98","The purpose of the ISO/IEC/IEEE 29119 series of software testing standards is to define an internationally-agreed set of standards for software testing that can be used by any organization when performing any form of software testing. ISO/IEC/IEEE 29119-3 includes templates and examples of test documentation. The templates are arranged within clauses reflecting the overall test process description structure in ISO/IEC/IEEE 29119-2, i.e. by the test process in which they are being produced. Annex A outlines the contents of each document and maps each document to ISO/IEC/IEEE 29119-2. Annex B contains an overview of the examples. Annexes C to R contain examples of the application of the templates. Annex S provides mappings to existing standards. Annex T explains the use of the term Test Model in this document. The Bibliography for this part of ISO/IEC/IEEE 29119 is at the end of the document. ISO/IEC/IEEE 29119-3 supports dynamic testing, functional and non-functional testing, manual and automated testing, and scripted and unscripted testing. The documentation templates defined in ISO/IEC/IEEE 29119-3 can be used in conjunction with any software development lifecycle model.","","978-1-5044-7832-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9495333","29119;29119-1;software testing;Test Planning Process;Test Plan;verification and validation.","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software testing;Systems engineering and theory;Documentation","","","","","","26 Jul 2021","","","IEEE","IEEE Standards"
"IEEE/ISO/IEC Draft International Standard - Software and systems engineering -- Software testing -- Part 3: Test documentation","",,ISO/IEC/IEEE P29119-3/D3_January 2021,"28 Jan 2021","2021","","","1","90","The purpose of the ISO/IEC/IEEE 29119 series of software testing standards is to define an internationally-agreed set of standards for software testing that can be used by any organization when performing any form of software testing. ISO/IEC/IEEE 29119-3 includes templates and examples of test documentation. The templates are arranged within clauses reflecting the overall test process description structure in ISO/IEC/IEEE 29119-2, i.e. by the test process in which they are being produced. Annex A outlines the contents of each document and maps each document to ISO/IEC/IEEE 29119-2. Annex B contains an overview of the examples. Annexes C to R contain examples of the application of the templates. Annex S provides mappings to existing standards. Annex T explains the use of the term Test Model in this document. The Bibliography for this part of ISO/IEC/IEEE 29119 is at the end of the document. ISO/IEC/IEEE 29119-3 supports dynamic testing, functional and non-functional testing, manual and automated testing, and scripted and unscripted testing. The documentation templates defined in ISO/IEC/IEEE 29119-3 can be used in conjunction with any software development lifecycle model.","","978-1-5044-7341-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9340095","29119;29119-1;software testing;Test Planning Process;Test Plan;verification and validation.","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software testing;Systems engineering and theory","","","","","","28 Jan 2021","","","IEEE","IEEE Standards"
"Metrics of Graph Abstraction for Component-Based Software Architecture","G. Wei; X. Zhong-Wei; X. Ren-Zuo","College of Mathematics and Computer Science, Jianghan University, Wuhan, China; State Key Laboratory of Software Engineering, Wuhan University of China, Wuhan, China; State Key Laboratory of Software Engineering, Wuhan University of China, Wuhan, China",2009 WRI World Congress on Computer Science and Information Engineering,"24 Jul 2009","2009","7","","518","522","The challenges for building the component-based software architecture are how to estimate the assembly of reusable software components and make the properties forecast to the associated architecture. To address these issues, this paper discerns the assembly patterns of components and proposes using graph theory to depict the component-based architecture at first. Then, the component assembly graph has been defined as the abstract representation of the component assembly in the architecture, which is a key factor in determining the suitable architectural structure. Based on such graph theory, some metrics have been defined to measure the components assembly. At the end, the paper discusses how to optimize the architecture from component level, which also shows the graph theory should be paid attention to for the software engineering in future.","","978-0-7695-3507-4","10.1109/CSIE.2009.697","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5170373","Software Component;Component-based Software Architecture;Component Assembly;Software Engineering","Software architecture;Computer architecture;Graph theory;Software engineering;Software systems;Computer science;Assembly systems;Software measurement;Risk management;Topology","","4","","13","IEEE","24 Jul 2009","","","IEEE","IEEE Conferences"
"To Get Good Student Ratings should you only Teach Programming Courses? Investigation and Implications of Student Evaluations of Teaching in a Software Engineering Context","A. Knutas; T. Hynninen; M. Hujala","LUT University, Lappeenranta, Finland; South-Eastern Finland University of Applied Sciences, Mikkeli, Finland; LUT University, Lappeenranta, Finland",2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"7 May 2021","2021","","","253","260","Student evaluations of teaching (SET) are commonly used in universities for assessing teaching quality. However, previous literature shows that in software engineering students tend to rate certain topics higher than others: In particular students tend to value programming and software construction over software design, software engineering models and methods, or soft skills. We hypothesize that these biases also play a role in SET responses collected from students. The objective of this study is to investigate how the topic of a software engineering course affects the SET metrics. We accomplish this by performing multilevel regression analysis on SET data collected in a software engineering programme. We analyzed a total of 1295 student evaluations from 46 university courses in a Finnish university. The results of the analysis verifies that the student course evaluations exhibit similar biases as distinguished by previous software engineering education research. The type of the course can predict a higher SET rating. In our dataset, software construction and programming courses received higher SET ratings compared to courses on software engineering processes, models, and methods.","","978-1-6654-0138-8","10.1109/ICSE-SEET52601.2021.00035","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9402161","quality of teaching;student evaluation of teaching;software engineering education;multilevel modelling","Training;Systematics;Software design;Education;Software;Programming profession;Software engineering","","1","","52","IEEE","7 May 2021","","","IEEE","IEEE Conferences"
"Secure Sourcing of COTS Products: A Critical Missing Element in Software Engineering Education","N. R. Mead; A. Kohnke; D. Shoemaker","Carnegie Mellon University, Pittsburgh, PA, USA; Cybersecurity & Information Systems, University of Detroit Mercy, Detroit, MI, USA; Cybersecurity & Information Systems, University of Detroit Mercy, Detroit, MI, USA",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","5","The aim of this paper is to publicize both the challenge and potential solution for the integration of secure supply chain risk management content into conventional software engineering programs. Specifically, software engineering programs typically do not teach how to ensure that the code produced and sold in commercial off-the-shelf (COTS) products hasn't been compromised through the sourcing process. We propose four instructional modules and topics based on established principles that can form the basis of a comprehensive course to address secure sourcing of COTS products.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206233","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206233","secure sourcing;software engineering education;supply chain risk management;SCRM;commercial off-the-shelf;COTS","Software;Supply chains;Software engineering;Organizations;Task analysis;Contracts;Education","","2","","11","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"IEEE Draft Internation Standard - Systems and Software Engineering -- Systems and Software Assurance -- Part 4: Assurance in the Life Cycle","",,ISO/IEC/IEEE CD3 P15026-4,"3 Jul 2019","2019","","","1","47","This document provides guidance and recommendations for assurance of a selected claim about the system-of-interest by achieving the claim and showing the achievement. The guidance and recommendations are given in a System Assurance process view on top of ISO/IEC/IEEE 15288 and a Software Assurance process view on top of ISO/IEC/IEEE 12207.","","978-1-5044-5962-4","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8755349","","IEEE Standards;Software engineering;Systems analysis and design;Quality assurance","","","","","","3 Jul 2019","","","IEEE","IEEE Standards"
"Enriching software engineering courses with service-learning projects and the open-source approach","Chang Liu","School of Electrical Engineering and Computer Science, Ohio University, Athens, OH, USA","Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.","19 Dec 2005","2005","","","613","614","Real-world software engineers deal with complex problem. Yet many software engineering courses do not involve projects of enough complexity to give students such experience. We sense that service-learning projects, while difficult to manage and sustain, can serve a crucial role in this regard. Through trials in a senior-level software engineering course, we discovered that the open-source approach works well to enable students to work on large, multiple-term service-learning projects. We developed GROw, a cross-term, cross-team educational software process to meet the challenges of adopting complex, real-world projects in one-term courses, and to sustain service learning.","1558-1225","1-59593-963-2","10.1109/ICSE.2005.1553612","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1553612","","Software engineering;Open source software;Educational programs;Computer science education;Computer science;Project management;Information science;Computer industry;Costs;Bifurcation","","3","","8","","19 Dec 2005","","","IEEE","IEEE Conferences"
"Panel: Software Engineering for Everyone","M. Barker","Division of Information Science, Nara Institute of Science and Technology, Ikoma, Japan",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","2","This panel focuses on what topics and methods are needed to teach software engineering to the rest of the world, since software technology now touches everyone's lives. What does Joe Public need to know about software engineering, what are the best ways to expose them to those concepts and skills, and how do we plan to spread these basics beyond our boundaries, beyond our community of software engineering educators and trainers? The main results of this panel will be an identified list of the top concepts that need to be publicized, a set of approaches to making those concepts easy to learn for everyone, and a marketing or publicity plan to start that process.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206198","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206198","software engineering;education;training;public awareness;outreach","Software engineering;Training;Software;Google;Modeling;Biological system modeling","","","","2","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"Experiences With Gap-Bridging Software Engineering Industry-Academia Collaborative Education Program","M. K. Sabariah; V. Effendy; J. H. Husen; D. H. Fadhlurrohman; R. Setyawansyah","Bachelor of Software Engineering, Telkom University, Bandung, Indonesia; Bachelor of Software Engineering, Telkom University, Bandung, Indonesia; Bachelor of Software Engineering, Telkom University, Bandung, Indonesia; Bachelor of Software Engineering, Telkom University, Bandung, Indonesia; PT. Telkom Indonesia, Bandung, Indonesia",2023 IEEE 35th International Conference on Software Engineering Education and Training (CSEE&T),"31 Aug 2023","2023","","","168","172","University-level software engineering education faces the challenge of providing both fundamental concepts while delivering to their students the latest trend in tools and practices. However, software engineering programs may not be capable of solving those challenges with their own resources. In this paper, we present our experience in solving those challenges by cooperating with an industrial partner by developing a collaboration program to provide knowledge of the latest industrial software engineering practice. We discovered that the program has several other benefits besides providing knowledge of industrial software engineering practice. However, challenges and concerns still need to be solved and addressed to ensure the proper execution of the collaboration program.","2377-570X","979-8-3503-2202-6","10.1109/CSEET58097.2023.00035","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10229434","software engineering education;undergraduate education issues;industry-academia collaboration","Knowledge engineering;Industries;Education;Government;Collaboration;Market research;Accreditation","","","","22","IEEE","31 Aug 2023","","","IEEE","IEEE Conferences"
"Essence-Based, Goal-Driven Adaptive Software Engineering","J. S. Park","Industrial and Systems Engineering Department and Computer Science Department, Korea Advanced Institute of Science and Technology, Daejeon, Korea",2015 IEEE/ACM 4th SEMAT Workshop on a General Theory of Software Engineering,"30 Jul 2015","2015","","","33","38","The OMG Essence standard has recently been published as the kernel for software engineering methods [1]. We show that the Essence view of software engineering is reminiscent of a nondeterministic, multidimensional finite state machine, and that the Essence lends support to a semi-Markov decision process model of software engineering which, in practice, facilitates a goal-driven adaptive software engineering. We develop an activity-state mapping algorithm and a goal-activity cover algorithm based on the Essence, which can help automate the health monitoring of project states and the adaptive planning of project activities in a software engineering project.","","978-1-4673-7052-3","10.1109/GTSE.2015.12","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7169393","Essence kernel;adaptive software engineering;software engineering method;stochastic decision process;set cover problem","Software engineering;Kernel;Software algorithms;Jacobian matrices;Conferences","","5","","39","IEEE","30 Jul 2015","","","IEEE","IEEE Conferences"
"MCDM- Based Framework to Solve Decision Making Problems in Software Engineering","A. Kumar; K. Kaur","USIC&T Guru Gobind Singh Indraprastha University, New Delhi, India; USIC&T Guru Gobind Singh Indraprastha University, New Delhi, India",2022 3rd International Conference on Issues and Challenges in Intelligent Computing Techniques (ICICT),"20 Mar 2023","2022","","","1","5","A reliable decision-making system can help software engineers effectively to manage the software development process. A lot of decisions must be taken throughout the software development process, such as selecting design concepts and selecting alternative solutions. However, most of the decision-making problems encountered in software engineering are relevant to the multiple criteria which need to be considered simultaneously. Multi-criteria decision making (MCDM) has evolved as an efficient method in the software industry for integrating stakeholder values and technical information throughout software development. The contribution of this study is many folds. First, this study presents previous research contributions on applying MCDM methods in software engineering. Second, this work conducts a comparative study of numerous MCDM methods applied in software engineering and other prominent MCDM methods that might be used in software engineering. Third, this study proposes an MCDM based framework for solving various types of decision-making problems in software engineering. Fourth, this paper also presents some future research directions on applications of MCDM methods in software engineering.","","978-1-6654-8268-4","10.1109/ICICT55121.2022.10064599","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10064599","Software Engineering;MCDM;MCDM Methods","Industries;Decision making;Machine learning;Reliability engineering;Software;Software reliability;Stakeholders","","2","","14","IEEE","20 Mar 2023","","","IEEE","IEEE Conferences"
"A Conceptual Framework to Integrate Fault Prediction Sub-Process for Software Product Lines","C. Catal; B. Diri","Information Technologies Institute, TUBITAK Marmara Research Center, Kocaeli, Turkey; Department of Computer Engineering, Yildiz Technical University, Istanbul, Turkey",2008 2nd IFIP/IEEE International Symposium on Theoretical Aspects of Software Engineering,"24 Jun 2008","2008","","","99","106","Software product line engineering is a growing recent paradigm to develop similar products using reusable core assets such as architecture and test cases. The general aim is to enhance quality and decrease development costs. Current software product line engineering frameworks apply only a few quality assurance activities but today's single-system engineering has much more quality assurance activities that can be adapted to software product lines. In this study, software fault prediction sub- process is integrated into software product line engineering framework and the key activities are defined. This approach will improve quality and enhance testing process for software product lines.","","978-0-7695-3249-3","10.1109/TASE.2008.15","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4549891","Software product lines;software fault prediction;domain engineering;application engineering","Application software;Software quality;Quality assurance;Software reusability;Software testing;Design engineering;Software engineering;Computer architecture;Inspection;Information technology","","2","","19","IEEE","24 Jun 2008","","","IEEE","IEEE Conferences"
"Competence-Oriented Elaboration of Software Engineering Education","D. Landes","Coburg University of Applied Sciences and Arts, Coburg, Germany",2024 36th International Conference on Software Engineering Education and Training (CSEE&T),"10 Sep 2024","2024","","","1","1","Software engineering requires quite a few competences, technical ones along with non-technical ones. This talk presents some examples of how several interlinked modules in software engineering education were modified, refined and enriched over time. Starting out from largely instructive lectures, the modules were enriched with activating elements that aim at making students discover several relevant issues in software engineering by themselves. Thus, they better understand the rationale behind the methods and techniques that are available for resolving these issues. For instance, students work on a group exercise which clarifies that capturing requirements from stakeholders is a communication process. This is followed by several additional assignments in which student teams prepare and conduct a requirements elicitation session with largely realistic external customers. Besides, we offer additional learning elements in an adaptive digital learning environment, in particular short learning videos. This allows students to revisit topics they did not understand properly or to dive deeper into specific issues in a self-directed fashion. This is supported by AI technology which recommends learning elements that best serve the individual needs and characteristics of the individual learner.","2377-570X","979-8-3503-7897-9","10.1109/CSEET62301.2024.10662986","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10662986","Software engineering education;active learning;inductive learning;self-directed learning;technical competences;non-technical competences","Education;Stakeholders;Artificial intelligence;Software engineering;Videos","","","","0","IEEE","10 Sep 2024","","","IEEE","IEEE Conferences"
"A Novel Approach to Knowledge Sharing in Software Systems Engineering","S. B. Lee; S. G. Shiva","University of Memphis, USA; University of Memphis, USA",2009 Fourth IEEE International Conference on Global Software Engineering,"7 Aug 2009","2009","","","376","381","There are many stakeholders in the information technology (IT) domain, including the business community and software development and support staff. A high degree of collaboration and knowledge sharing is required to take a system from business concept to production implementation in complex organizations where numerous teams are involved in the software engineering process. Much of historical knowledge management strategy has a technology focus with knowledge collected, organized, and disseminated with a push or pull approach. An approach that considers common technology implementations, such as intranets, document management systems, and email, and how those can be exploited with little or no introduction of new processes or tools to promote knowledge sharing is suggested. Human and social aspects are considered fundamental to the success of a solution that leverages current technology implementations and capitalizes on the relationships that exist and are created among individuals in the context of software engineering work.","2329-6313","978-0-7695-3710-8","10.1109/ICGSE.2009.59","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5196963","knowledge management;software engineering","Software systems;Knowledge engineering;Systems engineering and theory;Software engineering;Knowledge management;Information technology;Programming;Collaborative software;Production systems;Technology management","","2","","18","IEEE","7 Aug 2009","","","IEEE","IEEE Conferences"
"Distributed Software Engineering in Collaborative Research Projects","M. Derntl; D. Renzel; P. Nicolaescu; I. Koren; R. Klamma","Advanced Community Information Systems (ACIS), RWTH Aachen University, Aachen, Germany; Advanced Community Information Systems (ACIS), RWTH Aachen University, Aachen, Germany; Advanced Community Information Systems (ACIS), RWTH Aachen University, Aachen, Germany; Advanced Community Information Systems (ACIS), RWTH Aachen University, Aachen, Germany; Advanced Community Information Systems (ACIS), RWTH Aachen University, Aachen, Germany",2015 IEEE 10th International Conference on Global Software Engineering,"3 Sep 2015","2015","","","105","109","Collaborative research projects involve distributed construction of software prototypes as part of the project methodology. A major challenge thereby is the need to establish a developer community that shall effectively and efficiently align development efforts with requirements offered by researchers and other stakeholders. These projects are inherently different in nature compared to commercial software projects. The literature offers little research on this aspect of software engineering. In this paper, we outline the challenges in this context and present a methodology for distributed software engineering in collaborative research projects. The methodology covers all major aspects of the software engineering process including requirements engineering, architecture, issue tracking, and social aspects of developer community building in collaborative projects. The methodology can be tailored to different project contexts and may provide support in planning software engineering work in future projects.","2329-6313","978-1-4799-8409-1","10.1109/ICGSE.2015.12","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7224487","Distributed software engineering;Collaborative research projects;Open source software;Requirements engineering;Development infrastructure;Continuous integration;Methodology","Software;Software engineering;Instruments;Collaboration;Force","","2","","26","IEEE","3 Sep 2015","","","IEEE","IEEE Conferences"
"Modeling in Software Engineering","J. M. Atlee; R. France; G. Georg; A. Moreira; B. Rumpe; S. Zschaler","David R. Cheriton, University of Waterloo, Waterloo, ONT, Canada; Department of Computer Science, Colorado State University, Fort Collins, CO, USA; Department of Computer Science, Colorado State University, Fort Collins, CO, USA; Universidade Nova de Lisboa, Caparica, Portugal; Software Systems Engineering Laboratory, Brunswick, Germany; Technische Universität Dresden, Dresden, Germany",29th International Conference on Software Engineering (ICSE'07 Companion),"4 Jun 2007","2007","","","113","114","The software modeling community is primarily concerned with reducing the gap between problem and software implementation through the use of models that describe complex systems at multiple levels of abstraction and from a variety of perspectives. A model is an abstraction of some aspect of an existing or planned system. Models are created to serve particular purposes, for example, to present a human-understandable description of some aspect of a system or to present information in a form that can be mechanically analyzed.","","0-7695-2892-9","10.1109/ICSECOMPANION.2007.53","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4222705","","Software engineering;Computer science;Programming;Model driven engineering;Collaborative software;Formal specifications;Software systems;Systems engineering and theory;Multimedia systems;Information analysis","","5","","0","IEEE","4 Jun 2007","","","IEEE","IEEE Conferences"
"Exporting Studio: Critical Issues to Successfully Adopt the Software Studio Concept","D. Root; M. Rosso-Llopart; G. Taran","Master of Software Engineering Programs, Institute for Software Research, School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA; Master of Software Engineering Programs, Institute for Software Research, School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA; Master of Software Engineering Programs, Institute for Software Research, School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","41","48","In 1989 the professional masters of software engineering (MSE) program at Carnegie Mellon initiated a new approach to graduate level software projects: the software development studio. In 2002 the studio concept was first exported under a cooperative program to teach software engineering at an international partner university. However, CMU quickly determined that student projects, at this partner, lacked progress compared to their CMU counterparts. This paper will focus on the critical lessons that were learned from this ldquoexportrdquo that not only has helped this partnership but also others that are just starting.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.21","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556948","adopt software studio concept;software engineering projects;cooperative program","Software engineering;Programming;Educational programs;Project management;Software systems;Computer science education;Gas insulated transmission lines;Computer science;History;Software development management","","7","","8","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"2nd International Workshop on Software Engineering Methods in Spreadsheets (SEMS 2015)","F. Hermans; R. F. Paige; P. Sestoft","Software Engineering Research Group, Delft University of Technology, Delft, The Netherlands; Department of Computer Science, University of York, York, United Kingdom; Software Engineering Research Group, Delft University of Technology, Delft, The Netherlands",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","1005","1006","Spreadsheets are heavily used in industry, becausethey are easily written and adjusted, using an intuitive visual interface. They often start out as simple tools; however, over time spreadsheets can become increasingly complex, up to the point where they become complicated and inflexible. In many ways, spreadsheet are similar to software: both concern the storage and manipulation of data and the presentation of results to the user. Because of this similarity, many methods and techniques from software engineering can be applied to spreadsheets. The role of SEMS, the International Workshop on Software Engineering Methods in Spreadsheets is to explore the possibilities of applying successful methods from software engineering to spreadsheets. Some, like testing and visualization, have been tried before and can be built upon. For methods that have not yet been tried on spreadsheets, SEMS will serve as a platform for early feedback. The SEMS program included an industrial keynote, ""spreadsheet stories"" (success or failure), short and long research papers,a good mix of industrial and academic researchers, as well as lively discussion and debate.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.325","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203150","","Conferences;Software engineering;Industries;Committees;Electronic mail;Software;Testing","","1","","","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Incorporating CC2020 and SWECOM Competencies into Software Engineering Curricula: A Tutorial","J. Impagliazzo; P. Bourque; N. R. Mead","School of Engineering and Applied Science, Hofstra University, Hempstead, NY, USA; École de Technologie Supérieure, Université du Québec, Montréal, QC, Canada; Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","3","Professional organizations are developing a new overview curricular document titled “Computing Curricula 2020” (CC2020). This project captures the status of computing education and practice and it suggests directions for the future of computing education as it might evolve in the 2020s and beyond. Regarding software engineering, a prior workshop held at CSEE&T 2017 became a catalyst for activities that began in the early part of 2018 by producing a set of draft software engineering competencies based on the SE2014 report. These draft competencies became a part of the CC2020 project, and they should stimulate further refinement that can form a basis for a new software engineering curricular report as a successor to SE2014. After the authors present an overview of the CC2020 project and industry expectations of software engineering graduates, all participants will engage in discussions on ways to refine existing software engineering competencies using CC2020 and the software engineering competency model (SWECOM). They will also explore ways to prepare the software engineering community for new educational curricular guidelines for the future. The authors anticipate full audience involvement and participation in formulating this vision.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206238","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206238","Software engineering education;Competency-based education;CC2020;SWECOM;SE2014","Software engineering;Tutorials;Guidelines;Industries;Information technology;Computational modeling","","","","9","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"Problem-based learning. An experience on the inclusion of quality problems in Educational Software Engineering","Y. R. Peña; J. R. Hechavarría Hernández; M. L. Vázquez","Faculty of Mathematics and Informatics, University of Holguin, Holguin, Cuba; Faculty of Architecture and Design, Catholic University of Santiago de Guayaquil, Guayaquil, Ecuador; Faculty of Mathematical and Physical Sciences, University of Guayaquil, Guayaquil, Ecuador",2018 World Engineering Education Forum - Global Engineering Deans Council (WEEF-GEDC),"31 Jan 2019","2018","","","1","6","This article presents an experience developed with students of fourth year of the Computer Engineering major with the support of educative software in the teaching-learning process of quality problems in Software Engineering. It also incorporates a procedure as a guide during their laboratory practices to perform the process of quality measurement to software selected as case studies with the support of the tool developed. It shows that the development of educative software based on the pedagogical model of Problem-Based Learning, PBL, promotes in university students the motivation towards the search and production of knowledge in virtual spaces and environments with innovative characteristics. The results of the analysis of opinions of specialists in software development, as well as of professors who teach the subject, indicate that the computer tool contributes to self-improvement through the requirement of the use of specialized tools in quality issues in order to perform the or the roles in the execution of a project, mainly in the workflows dedicated to quality management.","","978-1-5386-7764-3","10.1109/WEEF-GEDC.2018.8629761","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8629761","quality;quality metrics;problem-based learning;software engineering;educational software","Software;Tools;Software measurement;Task analysis;Software engineering;Education","","4","","13","IEEE","31 Jan 2019","","","IEEE","IEEE Conferences"
"Towards the integration of model-driven engineering, software product line engineering, and software configuration management","F. Schwägerl; T. Buchmann; S. Uhrig; B. Westfechtel","Applied Computer Science I, University of Bayreuth, Bayreuth, Germany; Applied Computer Science I, University of Bayreuth, Bayreuth, Germany; Applied Computer Science I, University of Bayreuth, Bayreuth, Germany; Applied Computer Science I, University of Bayreuth, Bayreuth, Germany",2015 3rd International Conference on Model-Driven Engineering and Software Development (MODELSWARD),"12 Nov 2015","2015","","","1","14","Model-Driven Software Engineering (MDSE), Software Product Line Engineering (SPLE) and Software Configuration Management (SCM) have been established as independent disciplines to ease different aspects of software development. The usage of models as high-level abstractions promises to increase productivity, while software product lines manage variability within a family of similar software products; software configuration management systems manage evolution and support collaborative development. In this paper, we explore the state of the art regarding the pairwise combinations MDSE/SPLE, SPLE/SCM, and MDSE/SCM and show that an integrated solution combining all three disciplines is missing. We present a conceptual framework to integrate MDSE, SPLE and SCM uniformly based on a filtered editing model. The framework implies a number of advantages, namely unconstrained variability, a reduction of cognitive complexity, improved consistency, tool independence, and a higher level of automation. Our formalism is based on a uniform versioning model for temporal, cooperative, and logical versioning of models. By an example, we show the feasibility of our approach.","","978-989-758-136-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7323079","Model-Driven Software Engineering;Software Product Lines;Software Configuration Management","Unified modeling language;Software;Aerospace electronics;Software product lines;Biological system modeling;Object oriented modeling;Computational modeling","","","","38","","12 Nov 2015","","","IEEE","IEEE Conferences"
"Reporting about industrial strength software engineering courses for undergraduates","M. Gehrke; H. Giese; U. A. Nickel; J. Niere; M. Tichy; J. P. Wadsack; A. Zundorf","Department of Mathematics and Computer Science, Software Engineering Group, University of Paderborn, Paderborn, Germany; Department of Mathematics and Computer Science, Software Engineering Group, University of Paderborn, Paderborn, Germany; Department of Mathematics and Computer Science, Software Engineering Group, University of Paderborn, Paderborn, Germany; Department of Mathematics and Computer Science, Software Engineering Group, University of Paderborn, Paderborn, Germany; Department of Mathematics and Computer Science, Software Engineering Group, University of Paderborn, Paderborn, Germany; Department of Mathematics and Computer Science, Software Engineering Group, University of Paderborn, Paderborn, Germany; Institute of Software, Technical University of Braunschweig, Brunswick, Germany",Proceedings of the 24th International Conference on Software Engineering. ICSE 2002,"23 May 2005","2002","","","395","405","How do you organize an ""industrial strength"" one semester educational programming project for up to 200 second year students? This paper reports on four years of experience with such projects at the University of Paderborn and the University of Braunschweig. Key properties of our project design are: starting with an existing large application, regular hard deadlines with peer reviews and presentations to a large audience, working in groups, applying project and configuration management tools, a standard system architecture with interchangeable components and competing software agents, quality assurance and standard conformance testing through final overall system integration spanning all groups, and exposure to real-world project threats.","","1-58113-472-X","10.1145/581388.581389","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1007985","","Computer industry;Software engineering;Software standards;Programming profession;Application software;Quality management;Project management;Computer architecture;Software agents;Quality assurance","","7","","17","","23 May 2005","","","IEEE","IEEE Conferences"
"Software Business Education for Software Engineers: Towards an Integrated Curriculum","J. Kontio; M. Ahokas; P. Poyry; J. Warsta; M. M. Makela; P. Tyrvainen","Helsinki University of Technology, Finland; University of Oulu, Finland; University of Turku, Finland; Helsinki University of Technology, Finland; University of Jyväskylä, Finland; Helsinki University of Technology, Finland",19th Conference on Software Engineering Education and Training Workshops (CSEETW'06),"26 Jun 2006","2006","","","5","5","All software is developed to create value to its stakeholders. Software engineering decisions and business value are closely linked with each other: technical decisions may have a profound impact on the business potential of software. Yet, software engineering education usually does not provide students with sufficient knowledge on business-related issues. We believe that the general business education is too abstract and unfocused to address the specific characteristics of software business. This paper suggests specific areas of business competencies that should be integrated into the software engineering curriculum. In addition, we compare these topics with software business curricula in three Finnish universities.","","0-7695-2647-0","10.1109/CSEETW.2006.15","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1644076","","Software engineering;Maintenance engineering;Programming;Educational products;Sufficient conditions;Software maintenance;Uncertainty;Conferences;Computer science education;Computer science","","5","","9","IEEE","26 Jun 2006","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE Draft International Standard - Systems and Software Engineering -- Life Cycle Processes --Requirements Engineering","",,"ISO/IEC/IEEE DIS P29148, September 2017","23 Jan 2018","2018","","","1","100","This document contains provisions for the processes and products related to the engineering of requirements for systems and software products and services throughout the life cycle. It defines the construct of a good requirement, provides attributes and characteristics of requirements, and discusses the iterative and recursive application of requirements processes throughout the life cycle. This document provides additional guidance in the application of requirements engineering and management processes for requirements-related activities in ISO/IEC/IEEE 12207 and ISO/IEC/IEEE 15288. Information items applicable to the engineering of requirements and their content are defined. The content of this document can be added to the existing set of requirements-related life cycle processes defined by ISO/IEC/IEEE 12207 or ISO/IEC/IEEE 15288, or can be used independently.","","978-1-5044-4653-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8267470","requirement;requirement characteristics;concept of operations;ConOps;operational concept;OpsCon;prototyping;software requirements specification;system;system requirements specification;SyRS","IEEE Standards;IEC Standards;ISO Standards;Software engineering;Systems engineering and theory;Requirements engineering","","","","","","23 Jan 2018","","","IEEE","IEEE Standards"
"Software engineering in the 21st century - a view from the trenches","C. J. Horn",NA,"Proceedings 16th Conference on Software Engineering Education and Training, 2003. (CSEE&T 2003).","2 Apr 2003","2003","","","33","33","","1093-0175","0-7695-1869-9","10.1109/CSEE.2003.1191346","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1191346","","Software engineering;Engineering management;Educational institutions;Environmental management;Software development management;Computer industry;Computer science;Programming profession;Planets;Software testing","","","","","IEEE","2 Apr 2003","","","IEEE","IEEE Conferences"
"Inferring approximated models for integration testing of component-based software","A. Elsafi; D. N. A. Jawawi; A. Abdelmaboud","Department of Software Engineering, Universiti Teknologi Malaysia, Johor Bahru, Malaysia; Department of Software Engineering, Universiti Teknologi Malaysia, Johor Bahru, Malaysia; Department of Software Engineering, Universiti Teknologi Malaysia, Johor Bahru, Malaysia",2014 8th. Malaysian Software Engineering Conference (MySEC),"18 Dec 2014","2014","","","67","71","Recently, component-based software has earned widespread notice and acceptance as a method that facilitates the development of today's large, complex and very critical systems by integrating prefabricated small pieces of software called components or COTS. Components integration becomes an essential stage in the component-based software development Lifecycle. Testing components after integration is an important activity. Due to the unavailability of source code of integrated components and due to the lack of component information, integration testing becomes more difficult and very complex task. Furthermore, the formal models of integrated components are not always available. Therefore, we need to extract/learn them from test observations. This paper proposed an improvement on the existing learning algorithm to infer a model of integrated components in a more efficient way in order to bring down the worst case time complexity. Preliminary result from case study demonstrated the applicability of our refined algorithm.","","978-1-4799-5439-1","10.1109/MySec.2014.6985990","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6985990","model inference;active learning;component-based software;integration testing;reverse engineering","Software;Testing;Approximation algorithms;Software engineering;Adaptation models;Inference algorithms;Algorithm design and analysis","","2","","22","IEEE","18 Dec 2014","","","IEEE","IEEE Conferences"
"Exploration and practice of training mode of outstanding software engineers","L. -n. Lin; P. Ding; S. -y. Chen","School of Software Engineering, South China University of Technology, Guangzhou, Guangdong, CN; School of Software Engineering, South China University of Technology, Guangzhou, Guangdong, CN; School of Software Engineering, South China University of Technology, Guangzhou, Guangdong, CN",2014 9th International Conference on Computer Science & Education,"16 Oct 2014","2014","","","948","952","From the point of view of a practitioner of “The Plan for Educating and Training Outstanding Engineers (PETOE)”, the features and the problems in the practices of the plan, which emerge at the state demonstrated school of software, are analyzed. Based on the CDIO approach, a mode for the training of outstanding software engineers is presented, which includes the trinity of lecture-based, project-based, and research-based teaching. As is shown in the results of the practices, the mode not only can enhance the students' understanding of the SWEBOK and the practice teaching system, but also can meet the demands of the CDIO syllabus completely.","","978-1-4799-2951-1","10.1109/ICCSE.2014.6926602","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6926602","CDIO;PETOE;Outstanding Mode of Training Software Engineer;SWEBOK;Practice teaching system","Computers;Knowledge engineering;Technological innovation;Personnel;Training;Hidden Markov models;Teamwork","","","","5","IEEE","16 Oct 2014","","","IEEE","IEEE Conferences"
"A Conversation with Barry Boehm: Recollections from 50 Years of Software Engineering","H. Erdogmus; N. Medvidović","Electrical and computer engineering, Carnegie Mellon University; Computer Science Department, University of Southern California",IEEE Software,"27 Sep 2018","2018","35","5","14","19","Barry Boehm speaks with IEEE Software about his experiences throughout the history of software engineering. This article is part of a theme issue on software engineerings 50th anniversary.","1937-4194","","10.1109/MS.2018.3571249","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8474492","history of software engineering;Barry Boehm;software development;software engineering","Software engineering;History","","","","6","IEEE","27 Sep 2018","","","IEEE","IEEE Magazines"
"An Immersive Future for Software Engineering — Avenues and Approaches","V. S. Sharma; R. Mehra; V. Kaulgud; S. Podder","Accenture Labs, Bangalore, India; Accenture Labs, Bangalore, India; Accenture Labs, Bangalore, India; Accenture Labs, Bangalore, India",2018 IEEE/ACM 40th International Conference on Software Engineering: New Ideas and Emerging Technologies Results (ICSE-NIER),"23 Aug 2018","2018","","","105","108","Software systems are increasingly becoming more intricate and complex, necessitating new ways to be able to comprehend and visualize them. At the same time, the nature of software engineering teams itself is changing with people playing more fluid roles often needing seamless and contextual intelligence, for faster and better decisions. Moreover, the next-generation of software engineers will all be post-millennials, which may have totally different expectations from their software engineering workplace. Thus, we believe that it is important to have a re-look at the way we traditionally do software engineering and immersive technologies have a huge potential here to help out with such challenges. However, while immersive technologies, devices and platforms, have matured in past few years, there has been very little research on studying how these technologies can influence software engineering. In this paper, we introduce how traditional software engineering can leverage immersive approaches for building, delivering and maintaining next-generation software applications. As part of our initial research, we present an augmented-reality based prototype for project managers, which provides contextual and immersive insights. Finally, we also discuss important research questions that we are investigating further as part of our immersive software engineering research.","","978-1-4503-5662-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8444850","Software Delivery;Immersive Experience;Augmented Reality;Virtual Reality","Software engineering;Software systems;Visualization;Tools;Augmented reality","","","1","22","","23 Aug 2018","","","IEEE","IEEE Conferences"
"Software Re-engineering: An Overview","M. Majthoub; M. H. Qutqut; Y. Odeh","Faculty of Information Technology Applied Science, Private University, Amman, Jordan; Faculty of Information Technology Applied Science, Private University, Amman, Jordan; Faculty of Information Technology Applied Science, Private University, Amman, Jordan",2018 8th International Conference on Computer Science and Information Technology (CSIT),"11 Oct 2018","2018","","","266","270","The core of software re-engineering is to enhance or change existing software so it can be understood, managed, and reused as new software. When the system's software architecture and platforms become absolute and need to be changed, re-engineering is needed. The importance of software re-engineering lies in its ability to recover and reuse things which are already existing in an outdated system. This will obviously lower the cost of system maintenance and set up the basis for future software development. This paper presents brief overview of software re-engineering and highlights its future path.","","978-1-5386-4152-1","10.1109/CSIT.2018.8486173","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8486173","software;software re-engineering;reverse engineering;forward engineering","Software;Reverse engineering;Aging;Information technology;Documentation;Software algorithms;Computer science","","6","","9","IEEE","11 Oct 2018","","","IEEE","IEEE Conferences"
"Cost effectiveness analysis in software engineering","H. Erdogmus","Kalemun Research Inc., Ottawa, Canada",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","479","480","The tutorial presented an approach that leverages well-known economic and financial concepts for evaluating the cost effectiveness of software development processes and techniques. Software engineering studies often report separately on the costs and benefits of a phenomenon of interest, and rarely adequately address the combined bottom line implications. In particular, tensions between quality and productivity are hard to reconcile, making objective, high-level insights elusive. To address this need, the tutorial focused on quantitative methods for synthesizing co-dependent cost-benefit effects and analyzing the resulting behaviors.","1558-1225","978-1-60558-719-6","10.1145/1810295.1810439","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062257","cost effectiveness;cost-benefit analysis;productivity;software economics;software quality","Productivity;Software engineering;Tutorials;Economics;Software;Biological system modeling;Measurement","","","","5","","27 Oct 2011","","","IEEE","IEEE Conferences"
"A Theory of Value for Value-Based Feature Selection in Software Engineering","P. Rodríguez; C. Urquhart; E. Mendes","M3S Group, University of Oulu, Oulu, Finland; Faculty of Business and Law, Manchester Metropolitan University, Manchester, U.K; Department of Computer Science and Engineering, Blekinge Institute of Technology, Karlskrona, Sweden",IEEE Transactions on Software Engineering,"14 Feb 2022","2022","48","2","466","484","Value-Based Software Engineering stresses the role of value in software related decisions. In the context of feature selection, software features judged to provide higher value take priority in the development process. This paper focuses on what value means when selecting software features. Using grounded theory, we conducted and analyzed semi-structured interviews with 21 key stakeholders (decision-makers) from three software/software-intensive companies, within a context where value-based decision-making was already established. Our analysis led to the building of a theory of value for value-based feature selection that identifies the nature of value propositions considered by key stakeholders when selecting software features (i.e., decision-making criteria for deciding upon software features, as suggested by Boehm (2003)). We found that some value propositions were common to all three company cases (core value propositions), whereas others were dependent upon the context in which a company operates, and the characteristics of the product under development (specific value propositions). Moreover, value propositions vary according to the stakeholder group and the type of feature being assessed. Our study provides significant insight into value in the context of feature selection, and generates new concepts around value-based feature selection such as new value propositions.","1939-3520","","10.1109/TSE.2020.2989666","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9088281","Value-based software engineering (VBSE);value proposition;decision-making criteria;grounded-theory;theory development;feature selection;release planning;requirements engineering;decision-making;decision-making theory;software value;software products;software-intensive systems","Software;Feature extraction;Stakeholders;Companies;Decision making;Software engineering;Planning","","6","","78","IEEE","6 May 2020","","","IEEE","IEEE Journals"
"Integrating agent-oriented enterprise software engineering into software engineering curriculum","G. Pour","Department of Computer Engineering, San Jose State University Foundation, San Jose, CA, USA",32nd Annual Frontiers in Education,"14 Jan 2003","2002","3","","S2G","S2G","Agent-oriented enterprise software engineering (AOESE) has emerged as a promising approach to developing Web-based enterprise software systems. AOESE is based on developing and evolving enterprise software systems from selected pre-engineered and pre-tested software agents, and then assembling them within appropriate software architectures. We view agent-oriented software engineering as an extension of conventional component-based software engineering, and software agents as next-generation software components. Software agents offer greater flexibility and adaptability than traditional components. However, making transition to agent-oriented enterprise software engineering requires software engineers to learn a new set of technical skills. To provide such a learning opportunity, the author has created a new course sequence that integrates both agent-oriented enterprise software engineering and component-based enterprise software engineering into software engineering curriculum. A new course in the sequence is intended to provide students with the opportunity to acquire a good understanding of the key concepts and principles of agent-oriented enterprise software engineering, and the new opportunities and challenges involved in developing Web-based multi-agent systems. The course is designed to help build a solid foundation for integration of research into education in the area of agent-oriented enterprise software engineering. The course has special emphasis on developing architectures and frameworks for Web-based multi-agent enterprise systems rather than developing single agent. In this paper, the author shares her experience of developing the course, and presents the course organization, its components, and the future plans for the course.","0190-5848","0-7803-7444-4","10.1109/FIE.2002.1158672","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1158672","","Software engineering;Software agents;Application software;Software systems;Assembly systems;Software architecture;Software reusability;Computer science education;Multiagent systems;Solids","","2","","10","IEEE","14 Jan 2003","","","IEEE","IEEE Conferences"
"On software engineering repositories and their open problems","D. Rodriguez; I. Herraiz; R. Harrison","University of Alcala, Alcala de Henares, Spain; Technical University of Madrid, Madrid, Spain; Oxford Brookes University, Oxford, UK",2012 First International Workshop on Realizing AI Synergies in Software Engineering (RAISE),"2 Jul 2012","2012","","","52","56","In the last decade, a large number of software repositories have been created for different purposes. In this paper we present a survey of the publicly available repositories and classify the most common ones as well as discussing the problems faced by researchers when applying machine learning or statistical techniques to them.","","978-1-4673-1753-5","10.1109/RAISE.2012.6227971","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6227971","quality;software engineering repositories;preprocessing software engineering data;data quality","Software engineering;Data mining;Estimation;Software algorithms;Measurement;Open source software","","25","","34","IEEE","2 Jul 2012","","","IEEE","IEEE Conferences"
"Security Expert Recommender in Software Engineering","S. Bayati","ISOM Department, University of Auckland, Auckland, New Zealand",2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C),"23 Mar 2017","2016","","","719","721","Software engineering is a complex filed with diverse specialties. By the growth of Internet based applications, information security plays an important role in software development process. Finding expert software engineers who have expertise in information security requires too much effort. Stack Overflow is the largest social Q&A Website in the field of software engineering. Stack Overflow contains developers' posts and answers in different software engineering areas including information security. Security related posts are asked in conjunction with various technologies, programming languages, tools and frameworks. In this paper, the content and metadata of Stack Overflow is analysed to find experts in diverse software engineering security related concepts using information security ontology.","","978-1-4503-4205-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883383","Information Security;Software Engineering;Stack Overflow;Recommender System;Expert Recommendation;Ontology","Software;Information security;Software engineering;Data mining;Computer bugs;Ontologies","","","","22","","23 Mar 2017","","","IEEE","IEEE Conferences"
"Enhancing the software engineering curriculums: A case study of the Jordanian Universities","S. Hanna; H. Jaber; F. A. Jaber; T. A. Shalaby; A. Almasalmeh","Department of Software Engineering and Department of Computer Science, Philadelphia University, Jordan; Department of Software Engineering and Department of Computer Science, Philadelphia University, Jordan; Department of Software Engineering and Department of Computer Science, Philadelphia University, Jordan; Department of Software Engineering and Department of Computer Science, Philadelphia University, Jordan; Department of Software Engineering and Department of Computer Science, Philadelphia University, Jordan",2014 IEEE 27th Conference on Software Engineering Education and Training (CSEE&T),"19 May 2014","2014","","","84","93","Software Engineering is about creating high-quality software in a systematic, controlled, and efficient manner. Although the Software Engineering discipline had been recognized since 1968, there is still no agreement among the Universities worldwide about what should be included in the Software Engineering curriculums or study plans. This problem has resulted in that different knowledge areas are being taught to the Software Engineering students in different universities. Also this problem has resulted in that many universities now include courses in the Software Engineering curriculum that are not related to Software Engineering. A case study of the Jordanian Universities had proved that more than 60% of the courses taught at the Software Engineering departments of the Jordanian Universities are non Software Engineering related courses. An analysis had been conducted to compare the current Software Engineering courses taught at the different Jordanian Universities and the guidance provided by the ACM/IEEE about what should constitute an undergraduate Software Engineering education. Also an analysis of the Software Engineering courses taught at different countries such as UK and USA had been conducted where these countries were chosen because they contain many of the top ranked Universities in the world. The analysis had resulted in determining the knowledge areas that should be added to the curriculum of each Jordanian University. Enhancing the curriculum will result in a SE graduates that are equipped with the needed knowledge to join the software market.","2377-570X","978-1-4799-4970-0","10.1109/CSEET.2014.6816785","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6816785","","Educational institutions;Software engineering;Software;Computers;Computer science;Knowledge engineering","","2","","20","IEEE","19 May 2014","","","IEEE","IEEE Conferences"
"Analysis of the original cause of software distrust","J. Zhan; X. Zhou; J. Zhao","School of Management and Engineering, Nanjing University, Nanjing, China; School of Management and Engineering, Nanjing University, Nanjing, China; School of Management and Engineering, Nanjing University, Nanjing, China",The 2nd International Conference on Software Engineering and Data Mining,"9 Aug 2010","2010","","","240","245","With increasing demands of software functions, software system becomes so complex and fragile that it often performs in an unexpected way. How to guarantee the software trustworthiness in the various open running environments is a challenge in the software engineering practice and research. To explain why software is untrustworthy, this paper focuses on the process and the original cause of software distrust. With analysis of implications and relationships of software distrust, failure, defect, fault and error, the distrustable factor is proposed to denote the underlying cause of software distrust, and the software distrust chain is presented to illustrate the process of software distrust, meanwhile, a case study is exemplified the distrust chain. In addition, the distrustable factors are identified from three aspects (i.e. technique, management and human) according to an oriental system methodology-WSR approach.","","978-89-88678-22-0","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5542917","software distrust;distrust chain;distrustable factor","Software systems;Failure analysis;Humans;Programming;Software performance;Software maintenance;Terminology;Performance analysis;Engineering management;Software engineering","","","","26","","9 Aug 2010","","","IEEE","IEEE Conferences"
"Software Engineering Education – An Australian Higher Education Perspective","A. Mahmood; Q. Z. Sheng","School of Computing, Macquarie University, Sydney, NSW, Australia; School of Computing, Macquarie University, Sydney, NSW, Australia",2024 IEEE International Conference on Software Services Engineering (SSE),"18 Sep 2024","2024","","","268","272","Software engineering, as a discipline, emerged in the wake of the software crisis since both software developers and the inadequacy of conventional development methods failed to tackle the complexity of large-scale software development projects. This not only resulted in spending of more time and finances than what was originally estimated for developing a particular software but also the end product, in case if got realized, turned out to be of much lower quality. Software engineering, therefore, came to the rescue with its initial boost from the NATO Software Engineering Conferences (of the NATO Science Committee) in 1968 and 1969. As a systematic and intelligent approach to software development, software engineering utilizes the engineering principles, methods, techniques, and tools for designing, developing, and maintaining state-of-the-art software possessing key characteristics, including but not limited to, being highly safe, secure, reliable, usable, and accessible. Being a skilled software engineer mandates possessing a diverse range of technical and practical skills, and which needs to be imparted in an ideal world via a software engineering-based educational program. In particular, the key aim of this paper is to discuss the prevalent trends of software engineering education in the Australia's higher education landscape.","","979-8-3503-6851-2","10.1109/SSE62657.2024.00048","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10664214","Software engineering;Australian higher education;curriculum development;services engineering","Knowledge engineering;Systematics;Shape;Reliability engineering;Market research;Software;Software reliability","","","","7","IEEE","18 Sep 2024","","","IEEE","IEEE Conferences"
"Adopting Model-Eliciting Activities in an Undergraduate Software Engineering Course Through Real-World Projects","Y. Lee; J. Yang; Y. R. Kim","Dept. Computational Engineering, and Mathematical Sciences, Texas A&M University-San Antonio, San Antonio, TX, USA; Dept. Computational Engineering, and Mathematical Sciences, Texas A&M University-San Antonio, San Antonio, TX, USA; Dept. Curriculum and Instruction, Texas A&M University-San Antonio, San Antonio, TX, USA",2023 IEEE Frontiers in Education Conference (FIE),"5 Jan 2024","2023","","","1","5","This innovative practice work in progress paper discusses the integration of Model-Eliciting Activities (MEA) into in software engineering (SE) classes, and the challenges faced in preparing and delivering these activities. The preparation and implementation of MEA in SE classes can be challenging, as it requires creating self-assessable MEA questions that simulate real-world problems, ensuring the integration of MEA in SE course topics, providing feedback, and analyzing learning outcomes. In this research, the authors address these challenges and gain practical experience in designing and implementing MEA in SE classes. The authors conducted experiments over two consecutive semesters in SE courses that cover topics such as requirement solicitation, design and implementation, software testing techniques, secure software, and software quality assurance. They incorporated MEA questions that simulate real-world problems into both face-to-face and online classes, ensuring the integration of MEA in SE course topics, providing feedback, and analyzing the learning gains. This paper contributes to the distribution of MEA application for SE courses. It presents the authors' experiences, challenges, reports evaluations, and findings in implementing MEA in SE courses. Overall, this paper provides insights into the effective integration of MEA into SE courses, and the benefits it can bring to students' learning outcomes.","2377-634X","979-8-3503-3642-9","10.1109/FIE58773.2023.10343438","National Science Foundation (NSF)(grant numbers:1832433); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10343438","software engineering;computer science education;model-electing activity;MEA","Software testing;Computer aided instruction;Software quality;Software measurement;Software engineering","","1","","10","IEEE","5 Jan 2024","","","IEEE","IEEE Conferences"
"Software Engineering Education, Training, and Research: The Legacy of Nancy Mead","D. J. Bagert; D. N. Port; H. Saideian","Southeast Missouri State, USA; Univ. of Hawaii, Manoa, USA; NA",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","238","243","The contributions of Nancy R. Mead have greatly shaped what software engineering education and training (SWEET) is today. This paper contains three tributes to Dr. Mead, each focusing on a different aspect of her legacy. The first tribute provides an overall view of her work in the SWEET field. The second essay describes her research contributions in SWEET. The final section discusses her role in the development of this conference and the challenges of building upon the solid foundations that Nancy Mead has provided the field.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.34","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556971","software engineering education;history;Nancy Mead","Software engineering;Industrial training;Computer science education;Educational programs;Computer industry;Organizing;Meetings;Solids;Collaborative work;Scheduling","","","","14","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"Applied software engineering education","C. Varol; C. Bayrak","Computer Science Department, University of Arkansas, Little Rock, Little Rock, AR, USA; Computer Science Department, University of Arkansas, Little Rock, Little Rock, AR, USA",2005 6th International Conference on Information Technology Based Higher Education and Training,"19 Dec 2005","2005","","","T3C/25","T3C/29","If we are to consider evaluating the available workforce under the spectrums of time, cost, and reliability, the theoretical teaching of software engineering fundamentals is not sufficient to provide the skills and knowledge expectations of the employers. Besides the specialized knowledge, the non-technical skills such as the communication ability within the group for partitioning, assigning, and monitoring task progress are required as part of the background. However, these skills are generally omitted while teaching software engineering due to lack of time, environment, and/or resources. Since traditional lectures are lacking of practical ways of creating software, the focus of this research is to present our experiments during a client-sponsored project in an applied classroom environment at the University of Arkansas at Little Rock (UALR). Our goal is to provide not only the differences between the theoretical and practical education, but also the impact of a real client and the vital considerations and conditions taken by the development team in order to prevent failure in the project are expressed. Finally, to measure the outcome of the applied teaching and conduct future enhancements, a pre and post-knowledge assessment were conducted.","","0-7803-9141-1","10.1109/ITHET.2005.1560250","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1560250","Client-Sponsored Project;Focus Group;Software Engineering Education;Software Management;Software Requirements","Software engineering;Systems engineering education;Educational institutions;Costs;Monitoring;Reliability theory;Project management;Technology management;Engineering management;Educational technology","","4","","7","IEEE","19 Dec 2005","","","IEEE","IEEE Conferences"
"Educating non-programmers to flexible, communicative software engineers in a 10 month training program","P. Becker-Pechau; W. . -G. Bleek; C. Lilienthal; A. Schmolitzky","Department for Informatics, Software-Engineering Group, University of Hamburg, Germany; Department for Informatics, Software-Engineering Group, University of Hamburg, Germany; It-wps Workplace Solutions GmbH, Hamburg, Germany; Department for Informatics, Software-Engineering Group, University of Hamburg, Germany","17th Conference on Software Engineering Education and Training, 2004. Proceedings.","30 Mar 2004","2004","","","98","103","Financial services companies which heavily depend on IT, still face a shortage of well-educated software engineers. Of the two principal ways to react to this, either by training employees who are already IT-professionals or by introducing talented and interested nonprogrammers to software engineering, the latter was chosen by a large insurance company in Hamburg, Germany. This experience report points out why and how this approach, realized as a trainee program with a well-balanced mix of both technical and soft skills, could be as successful as it eventually turned out to be.","1093-0175","0-7695-2099-5","10.1109/CSEE.2004.1276517","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1276517","","Programming;Software engineering;Employment;Insurance;Educational programs;Software design;Informatics;Continuing education;User interfaces;Collaborative work","","3","","10","IEEE","30 Mar 2004","","","IEEE","IEEE Conferences"
"Guest Editors' Introduction: Software Engineering Curriculum Development","M. J. Lutz; D. Bagert","Rochester Institute of Technology, USA; Rose Hulman Institute of Technology, USA",IEEE Software,"13 Nov 2006","2006","23","6","16","18","The first software engineering programs were at the graduate level, primarily as terminal master's degrees for those already developing commercial and industrial software. By the early 1990s, educators began to consider software engineering's role at the undergraduate level. This special issue's articles reflect the common foundations of both baccalaureate and master's programs as well as diverse approaches to teaching software engineering. This article is part of a special issue on Software Engineering Curriculum Development.","1937-4194","","10.1109/MS.2006.164","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4012618","Software engineering education","Software engineering;Curriculum development;Computer science education;Educational programs;North America;Programming;Computer science;Educational products;Accreditation;Computer Society","","4","","3","IEEE","13 Nov 2006","","","IEEE","IEEE Magazines"
"The Use of Industry Training Strategies in a Software Engineering Course: An Experience Report","C. Portela; A. Vasconcelos; S. Oliveira; M. Souza","Informatics Center (CIn), Federal University of Pernambuco; Informatics Center (CIn), Federal University of Pernambuco; Post-graduate Program of Computer Science (PPGCC), Federal University of Pará; Department of Computer Science (DCC), Federal University of Minas Gerais",2017 IEEE 30th Conference on Software Engineering Education and Training (CSEE&T),"7 Dec 2017","2017","","","29","36","The software industry presents dissatisfaction in relation to the level of recently graduated professionals. Consequently, software companies end up investing in the training of these professionals in order to develop skills related to the software development process. This paper presents an experience report of an adaptation of industry training practices in a course of Software Engineering (SE). Initially, we mapped SE topics of the ACM/IEEE curriculum guidelines to the specific practices of the CMMI-DEV model. Then, we carried out a survey of training strategies with 10 consultants in Software Process Improvement (SPI), who also act as SE professors. Finally, these strategies have been adapted and incorporated in a SE Course. We compared the impact of these learning strategies in relation to traditional teaching approaches, regarding the student perception of learning. We observed an increase of approximately 20 percent in student perception of learning in relation to the SE topics with industry training strategies.","2377-570X","978-1-5386-2536-1","10.1109/CSEET.2017.16","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8166680","industry training strategies;software engineering teaching;software engineering learning","Training;Software;Industries;Software engineering;Guidelines;Companies","","10","","16","IEEE","7 Dec 2017","","","IEEE","IEEE Conferences"
"Developments in Global Software Engineering Education","T. Clear; S. Beecham; J. Barr; M. Daniels; M. Oudshoorn; J. Noll","School of Engineering, Computer & Mathematical Sciences, Auckland University of Technology, Auckland, New Zealand; Dept of Computer Systems, Uppsala University, Uppsala, Sweden; Lero - The Irish Software Research Centre, University of Limerick, Limerick, Ireland; Dept of Computer Science and Computer Networking, Wentworth Institute of Technology, Boston, USA; Ithaca College, Ithaca, New York, USA; Lero - The Irish Software Research Centre, University of Limerick, Limerick, Ireland",2016 IEEE Frontiers in Education Conference (FIE),"1 Dec 2016","2016","","","1","4","An ITiCSE 2015 conference working group report has recently delivered a comprehensive systematic review of the literature addressing the challenges and solutions in teaching global software engineering courses. In this panel session, a group of authors of that report will review the findings, and present their own views on teaching such courses, the pros and cons and their own motivations and experiences, together with strategies that have proven effective. We argue that these courses are critical for preparing students for practice as software engineers in today's global settings, but they are certainly not for the faint-hearted. After the review and presentation of position statements by panelists there will be a question and answer session with the audience and a discussion elaborating on the next frontiers in research and practice for global software engineering education.","","978-1-5090-1790-4","10.1109/FIE.2016.7757471","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7757471","Global Software Engineering Education;Distributed teams;Authentic learning","Software engineering;Education;Software;Collaboration;Cultural differences;Systematics;Games","","1","","6","IEEE","1 Dec 2016","","","IEEE","IEEE Conferences"
"IEEE Draft International Standard - Software Engineering -- Guidelines for the Application of ISO 9001:2008 to Computer Software","",,"IEEE P90003-2014, February 2015","27 Mar 2015","2015","","","1","63","","","978-0-7381-9630-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7070637","","IEEE Standards;Software engineering;IEC standards;ISO standards;Product life cycle management","","","","","","27 Mar 2015","","","IEEE","IEEE Standards"
"A Framework for Emotion-Oriented Requirements Change Handling in Agile Software Engineering","K. Madampe; R. Hoda; J. Grundy","HumaniSE Lab, Department of Software Systems and Cybersecurity, Faculty of Information Technology, Monash University, Clayton, VIC, Australia; HumaniSE Lab, Department of Software Systems and Cybersecurity, Faculty of Information Technology, Monash University, Clayton, VIC, Australia; HumaniSE Lab, Department of Software Systems and Cybersecurity, Faculty of Information Technology, Monash University, Clayton, VIC, Australia",IEEE Transactions on Software Engineering,"15 May 2023","2023","49","5","3325","3343","Background: Requirements Changes (RCs) – the additions/modifications/deletions of functional/non-functional requirements in software products – are challenging for software practitioners to handle. Handling some changes may significantly impact the emotions of the practitioners. Objective: We wanted to know the key challenges that make RC handling difficult, how these impact the emotions of software practitioners, what influences their RC handling, and how RC handling can be made less emotionally challenging. Method: We followed a mixed-methods approach. We conducted two survey studies, with 40 participants and 201 participants respectively. The presentation of key quantitative data was followed by descriptive statistical analysis, and the qualitative data was analysed using Strauss–Corbinian Grounded Theory, and Socio–Technical Grounded Theory analysis techniques. Findings: We found (1) several key factors that make RC handling an emotional challenge, (2) varying emotions that practitioners feel when it is challenging to handle RCs, (3) how stakeholders, including practitioners themselves, peers, managers and customers, influence the RC handling and how practitioners feel due to the stakeholder influence, and (4) practices that can be used to better handle RCs. Conclusion: Some challenges are technical and some are social which also belong to aspects of agile practice, emotional intelligence, and likely belong to cognitive intelligence. Therefore, to better handle RCs with positive emotions in socio–technical environments, agility, emotional intelligence, and cognitive intelligence need to work in synergy with each other.","1939-3520","","10.1109/TSE.2023.3253145","Monash Faculty of IT scholarship; ARC(grant numbers:DP200100020); ARC Laureate Fellowship(grant numbers:FL190100035); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10061282","Affects;agile;changes;emotions;emotional intelligence;human factors;job-related affective well-being scale;mixed-methods;requirements;software engineering;socio-technical grounded theory;software teams;well-being;workplace awareness","Software;Stakeholders;Emotional responses;Codes;Software engineering;Productivity;Statistical analysis","","5","","65","IEEE","6 Mar 2023","","","IEEE","IEEE Journals"
"The Practice Training in the Software Engineering Education","P. Huang; M. Chen; S. Chen","College of Information Science & Technology, Hainan University, Hainan, China; College of Information Science & Technology, Hainan University, Hainan, China; College of Information Science & Technology, Hainan University, Hainan, China",2008 The 9th International Conference for Young Computer Scientists,"12 Dec 2008","2008","","","2636","2640","Software engineering, like the other engineering disciplines, faces increasing pressure to provide students with those skills required both to succeed in their first professional job and to engage in lifelong learning. This is a curriculum design challenge that requires considerable deliberation. As a reflection of the movement in higher education from teacher-centered to student-centered learning, many methods, such as the application of situated cognition theory, were adopted in our course of software engineering. The practice training was proposed in the semester-long software engineering course to meet the goals that help students to understand further about the software engineering theory and put it into use with personal meaning. The process of the practice training was elaborated in the paper. A bulletin board was built for resource sharing on a local server. All the students enrolled in the course were divided into several teams for project cooperation. After the training an interview study of students was conducted for ascertaining how they felt the process changed the way they learned and the issues they encountered in working. Three issues were concluded according to the products the students performed in the practice training. The recommendations about how to improve the process were also provided in this paper.","","978-0-7695-3398-8","10.1109/ICYCS.2008.443","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4709394","Software engineering;teaching model;student-centered learning;situated cognition theory;practice training","Software engineering;Cognition;Application software;Assembly;Computer science education;Educational institutions;Information science;Educational technology;Resource management;Design engineering","","1","","16","IEEE","12 Dec 2008","","","IEEE","IEEE Conferences"
"Redesigning an Undergraduate Software Engineering Course for a Large Cohort","C. Iacob; S. Faily","School of Computing, University of Portsmouth, Portsmouth, United Kingdom; Department of Computing and Informatics, Bournemouth University, Poole, United Kingdom",2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"26 Aug 2018","2018","","","163","171","Teaching Software Engineering on an undergraduate programme is challenging, particularly when dealing with large numbers of students. On one hand, a strong understanding of software and good programming skills are prerequisites. On the other hand, the scale of the projects developed as part of undergraduate programmes do not always make the need for engineering obvious. Encouraging teamwork when students have little professional experience also adds to the level of complexity when delivering material. In this paper, we present a study on the redesign of a second year undergraduate course on Software Engineering for a large cohort.","","978-1-4503-5660-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445194","Software engineering;teamwork;education","Software engineering;Education;Testing;Software design;Teamwork;Tools","","","","13","","26 Aug 2018","","","IEEE","IEEE Conferences"
"Software Development Environments for Scientific and Engineering Software: A Series of Case Studies","J. C. Carver; R. P. Kendall; S. E. Squires; D. E. Post","Department of Computer Science and Engineering, Mississippi State University, USA; Software Engineering Institute, Carnegie Mellon University, Qatar; Sun Microsystems, USA; Computing Modernization Office",29th International Conference on Software Engineering (ICSE'07),"4 Jun 2007","2007","","","550","559","The need for high performance computing applications for computational science and engineering projects is growing rapidly, yet there have been few detailed studies of the software engineering process used for these applications. The DARPA High Productivity Computing Systems Program has sponsored a series of case studies of representative computational science and engineering projects to identify the steps involved in developing such applications (i.e. the life cycle, the workflows, technical challenges, and organizational challenges). Secondary goals were to characterize tool usage and identify enhancements that would increase the programmers' productivity. Finally, these studies were designed to develop a set of lessons learned that can be transferred to the general computational science and engineering community to improve the software engineering process used for their applications. Nine lessons learned from five representative projects are presented, along with their software engineering implications, to provide insight into the software development environments in this domain.","1558-1225","0-7695-2828-7","10.1109/ICSE.2007.77","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4222616","","Programming;Software engineering;Application software;High performance computing;Software performance;Productivity;Supercomputers;Acoustical engineering;Computer science;Sun","","102","1","15","IEEE","4 Jun 2007","","","IEEE","IEEE Conferences"
"A framework for software product engineering","K. Nori; N. Swaminathan","Business Systems and Cybernetics Centre, Tata Consultancy Services Limited, India; Business Systems and Cybernetics Centre, Tata Consultancy Services Limited, India",2006 13th Asia Pacific Software Engineering Conference (APSEC'06),"26 Mar 2007","2006","","","285","292","Software engineering today is heavily focused on the ideas of process maturity and continuous improvement. Processes are designed to deliver products. Process engineering should ideally rest on theoretical foundations of sound product engineering; however the field is currently lacking such foundations. Drawing inspiration from compiler design, we present a systematic framework for software product engineering that develops the product through successive levels of realization. The framework separates the concerns in software development by relating each level to a knowledge domain and localizing exactly on those qualities that become manifest in that knowledge domain. The basis of the framework is a mathematical model for reasoning about the correctness of realization schemes as well as the transformations between levels, so that each level preserves previously created qualities while adding new desired qualities. We also discuss some of the practical aspects of implementing this approach.","1530-1362","0-7695-2685-3","10.1109/APSEC.2006.5","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4137429","","Acoustical engineering;Software engineering;Continuous improvement;Process design;Product design;Engineering drawings;Software systems;Design engineering;Programming;Mathematical model","","11","","3","IEEE","26 Mar 2007","","","IEEE","IEEE Conferences"
"On the education of future software engineers","P. Ciancarini","Dipartimento di Scienze dell'Informazione, University of Bologna, Italy","Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.","19 Dec 2005","2005","","","649","650","The education of software engineers more and more addresses organizational and management issues, like for instance modeling the business structure and environment which receives a new software system. The teaching to software engineering students of modeling technologies based on standards like UML and the rational unified process, stressing the focus on designing business-oriented management of software services, raises novel questions than need to be addressed.","1558-1225","1-59593-963-2","10.1109/ICSE.2005.1553630","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1553630","","Unified modeling language;Software engineering;Software systems;Internet;Software design;Engineering management;Software standards;Computer science education;Computer industry;Programming profession","","","","9","","19 Dec 2005","","","IEEE","IEEE Conferences"
"The software engineering of agent-based intelligent adaptive systems","L. Sterling; T. Juan","Department of Computer Science & Software Engineering, University of Melbourne, VIC, Australia; Department of Computer Science & Software Engineering, University of Melbourne, VIC, Australia","Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.","19 Dec 2005","2005","","","704","705","Future software systems will be intelligent and adaptive. They will have the ability to seamlessly integrate with smart applications that have not been explicitly designed to work together. Traditional software engineering approaches offer limited support for the development of intelligent systems. To handle the tremendous complexity and the new engineering challenges presented by intelligence, adaptiveness and seamless integration, developers need higher-level development constructs. Agent concepts are natural to describe intelligent adaptive systems. Agent-based technologies have been incorporating software engineering practices, and have matured to offer useful insights and concrete practices to mainstream software engineers. This tutorial presents the state of the art in agent development from a software engineering perspective, focusing on practices that are applicable today. We have walked the audience through analysis, design and verification of a portion of a real-world problem, a smart home network. We show how agent concepts more naturally match the engineering challenges of such systems like trust between adaptive components. The audience had a hands-on experience with analyzing, and designing parts of the smart home network and learn how to incorporate agent technologies into their current projects.","1558-1225","1-59593-963-2","10.1109/ICSE.2005.1553672","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1553672","","Software engineering;Intelligent systems;Intelligent agent;Adaptive systems;Artificial intelligence;Concrete;Application software;Smart homes;Multiagent systems;Protocols","","1","","4","","19 Dec 2005","","","IEEE","IEEE Conferences"
"Guide to the Software Engineering Body of Knowledge (SWEBOK) and the Software Engineering Education Knowledge (SEEK) - a preliminary mapping","P. Bourque; F. Robert; J. M. Lavoie; A. Lee; S. Trudel; T. C. Lethbridge","École de Technologie Supérieure, Canada; École de Technologie Supérieure, Canada; Trisotech, Inc., Canada; Software Test, Educational & Productivity Solutions, Texas Instrumenits, Inc., USA; Centre de Recherche informatique de Montreal, Inc., Canada; School of Information, Technology and Engineering, University of Ottawa, Canada",10th International Workshop on Software Technology and Engineering Practice,"26 Feb 2004","2002","","","8","23","This paper is the result of a workshop held in Montreal in October 2002 during the Software Technology and Practice Conference (STEP 2002). The purpose of the paper is to present a preliminary mapping of two related but distinct software engineering body of knowledge initiatives, and also a list of proposals to improve them: the guide to the Software Engineering Body of Knowledge (SWEBOK) and the Software Engineering Education [body of] Knowledge (SEEK). The SWEBOK guide is aimed at identifying and describing the body of knowledge of a software engineering professional who has an undergraduate degree and four years of experience. The intended audiences of the SWEBOK Guide include industry, academia and policy-making organizations. The SEEK is aimed at delimiting the knowledge that professionals teaching software engineering agree is necessary for anyone to obtain an undergraduate degree in this field. The mapping shows that, though there are no major ""school of thought"" divergences between the two bodies of knowledge, there are a number of differences in the details of each breakdown in terms of vocabulary, level of detail, decomposition approach and topics encompassed.","","0-7695-1878-8","10.1109/STEP.2002.1267595","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1267595","","Software engineering;Conferences;Educational technology;Knowledge engineering","","6","","5","IEEE","26 Feb 2004","","","IEEE","IEEE Conferences"
"From an International Classroom to a Distributed Work Environment: Student Perspectives on Global Software Engineering","S. Vasilache","Tsukuba Daigaku, Tsukuba, Ibaraki, JP","2018 IEEE International Conference on Teaching, Assessment, and Learning for Engineering (TALE)","17 Jan 2019","2018","","","825","828","Global software engineering is an established field and software engineering educators must teach the software developers of tomorrow, who will work in distributed work environments, how to deal with temporal, geographical and sociocultural differences. This paper highlights several issues in software engineering teaching, as well as practicalities of software development, from the perspective of a group of students belonging to various cultural backgrounds.","2470-6698","978-1-5386-6522-0","10.1109/TALE.2018.8615225","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8615225","multicultural instruction;global software engineering;software development process","Software engineering;Software;Education;Cultural differences;Sensitivity;Online services;Australia","","2","","7","IEEE","17 Jan 2019","","","IEEE","IEEE Conferences"
"IEEE Standard Adoption of ISO/IEC 15026-4--Systems and Software Engineering--Systems and Software Assurance--Part 4: Assurance in the Life Cycle","",,IEEE Std 15026-4-2013,"27 Aug 2013","2013","","","1","43","Guidance and recommendations for conducting selected processes, activities, and tasks for systems and software products requiring assurance claims for properties selected for special attention (called critical properties) are given in this adoption of ISO/IEC 15026-4:2012. IEEE Std 15026-4™-2013 specifies a property-independent list of processes, activities and tasks to achieve the claim and show the achievement of the claim. IEEE Std 15026-4-2013 establishes the processes, activities, tasks, guidance, and recommendations in the context of a defined life cycle model and set of life cycle processes for system and/or software life cycle management.;Guidance and recommendations for conducting selected processes, activities, and tasks for systems and software products requiring assurance claims for properties selected for special attention (called critical properties) are given in this adoption of ISO/IEC 15026-4:2012. IEEE Std 15026-4-2013 specifies a property-independent list of processes, activities and tasks to achieve the claim and show the achievement of the claim. IEEE Std 15026-4-2013 establishes the processes, activities, tasks, guidance, and recommendations in the context of a defined life cycle model and set of life cycle processes for system and/or software life cycle management.","","978-0-7381-8576-7","10.1109/IEEESTD.2013.6587253","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6587253","adoption;argument;assurance case;claim;dependability;evidence;IEEE 15026-4;integrity level;property;reliability;safety;security;software assurance;software engineering;system assurance;systems engineering","IEEE standards;Software assurance;Software engineering;Quality assurance;Software security","","1","","27","","27 Aug 2013","","","IEEE","IEEE Standards"
"ISO/IEC/IEEE Draft International Standard - Systems and Software Engineering -- Taxonomies of Systems of Systems (SoS)","",,"ISO/IEC/IEEE/ P21841/FDIS, April 2019","23 Apr 2019","2019","","","1","20","This document defines a normalized taxonomy for systems of systems (SoS) to facilitate communications among stakeholders. It also briefly explains what a taxonomy is and how it applies to the SoS to aid in understanding and communication. Taxonomies provide a means in many fields to classify and describe the relationships between the relevant elements being studied. The elements of the taxonomy, or taxa, form a partitioning or means of classification within that body of knowledge. In the context of systems of systems (SoS), the relevant elements are, by definition, systems themselves. Using essential characteristics to partition the various types of SoS provides an abbreviated nomenclature for thinking about SoS. Based on the taxonomies, different approaches to the engineering of systems of systems are possible, improving the efficiency and effectiveness of systems of systems engineering.","","978-1-5044-5745-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8697163","systems engineering (SE);systems of systems (SoS);systems of systems engineering (SoSE);taxonomy;taxonomies;acknowledged SoS;collaborative SoS;directed SoS;virtual SoS","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Systems engineering and theory;Taxonomy","","","","","","23 Apr 2019","","","IEEE","IEEE Standards"
"Usability in software development: Frameworks comparison between IKnowU and user behavior analysis framework (UBAF)","N. A. Razak; M. Ghazali","Department of Software Engineering, Faculty of Computer Science and Information Systems, Universiti Teknologi Malaysia, Skudai, Johor, Malaysia; Department of Software Engineering, Faculty of Computer Science and Information Systems, Universiti Teknologi Malaysia, Skudai, Johor, Malaysia",2011 Malaysian Conference in Software Engineering,"26 Jan 2012","2011","","","330","335","Software engineering (SE) and human-computer interaction (HCI) are often regarded as two separate entities while the fact is the two share many similarities and should affect each other to produce a better product or software. In this paper, we compare two component frameworks that integrate both HCI and SE together. Our aim is to understand how each framework considers usability in the software development, and, to identify the strengths and weaknesses of both frameworks. The two component frameworks are IKnowU and UBAF. Comparison of these two frameworks can be useful for researchers as we can the four important criteria — model, architecture, usability work and process, that make of a framework which has usability as its paramount objective.","","978-1-4577-1531-0","10.1109/MySEC.2011.6140693","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6140693","Human-computer interaction;software engineering;framework comparison;human-computer interaction and software engineering integration;human-centred software engineering;usability","Usability;Human computer interaction;Unified modeling language;Analytical models;Software engineering;Data models;Context modeling","","2","","16","IEEE","26 Jan 2012","","","IEEE","IEEE Conferences"
"An overview of the current state of software engineering in embedded automotive electronics","B. Gruszczynski","Embedded Software Development, IAV Automotive Engineering, Inc., Ann Arbor, MI, USA",2006 IEEE International Conference on Electro/Information Technology,"4 Dec 2006","2006","","","377","381","Automotive electronics have grown exponentially in the past decade. Most of the functionality found in these electronic devices is performed by software on microcontroller devices ranging from 8- to 32-bits. This paper will address the current state of that software, including design techniques, programming languages, test methodologies, and standards for software development","2154-0373","0-7803-9592-1","10.1109/EIT.2006.252190","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4017727","Embedded;Microcontrollers;modeling;software engineering;software standards","Software engineering;Automotive electronics;Software performance;Microcontrollers;Software design;Computer languages;Software testing;Software standards;Standards development;Programming","","2","","11","IEEE","4 Dec 2006","","","IEEE","IEEE Conferences"
"Process Improvement from an Academic Perspective: How Could Software Engineering Education Contribute to CMMI Practices?","A. M. Moreno; M. -I. Sánchez-Segura; F. Medina-Dominguez; G. Cuevas",Universidad Politécnica de Madrid; Universidad Carlos III de Madrid; Universidad Carlos III de Madrid; Universidad Politécnica de Madrid,IEEE Software,"13 Jun 2014","2014","31","4","91","97","Educating software engineers is a long-standing challenge. This article addresses the issue by examining the overlap between the software engineering educational standards (SE 2004 and GSwE 2009) and one of the most well-known software process improvement models (CMMI-DEV). The resulting data are useful to both industry and academia for improving the software engineering practice. The software industry can take advantage of these results when setting up process improvement goals and training programs, and academia can use the findings to round out software engineering core knowledge in undergraduate and graduate programs.","1937-4194","","10.1109/MS.2013.70","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6509869","software engineering education;software process improvement;education;software engineering","Process control;Software development;Process management;Project management;Monitoring","","1","","13","IEEE","29 Apr 2013","","","IEEE","IEEE Magazines"
"Targeted Scrum: Applying Mission Command to Agile Software Development","D. P. Harvie; A. Agah","Department of Electrical Engineering and Computer Science, University of Kansas, Lawrence, KS; Department of Electrical Engineering and Computer Science, University of Kansas, Lawrence, KS",IEEE Transactions on Software Engineering,"12 May 2016","2016","42","5","476","489","Software engineering and mission command are two separate but similar fields, as both are instances of complex problem solving in environments with ever changing requirements. Our research hypothesis is that modifications to agile software development based on inspirations from mission command can improve the software engineering process in terms of planning, prioritizing, and communication of software requirements and progress, as well as improving the overall software product. Targeted Scrum is a modification of Traditional Scrum based on three inspirations from Mission Command: End State, Line of Effort, and Targeting. These inspirations have led to the introduction of the Product Design Meeting and modifications of some current Scrum meetings and artifacts. We tested our research hypothesis using a semester-long undergraduate level software engineering class. Students developed two software projects, one using Traditional Scrum and the other using Targeted Scrum. We then assessed how well both methodologies assisted the software development teams in planning and developing the software architecture, prioritizing requirements, and communicating progress. We also evaluated the software product produced by both methodologies. We found that Targeted Scrum did better in assisting the software development teams in the planning and prioritization of the requirements. However, Targeted Scrum had a negligible effect on improving the software development teams external and internal communications. Finally, Targeted Scrum did not have an impact on the product quality by the top performing and worst performing teams. Targeted Scrum did assist the product quality of the teams in the middle of the performance spectrum.","1939-3520","","10.1109/TSE.2015.2489654","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7296686","Scrum, Mission Command;Line of Effort;Product Design Meeting;Agile;Empirical Software Engineering;Scrum;mission command;line of effort;product design meeting;agile;empirical software engineering","Software;Planning;Scrum (Software development);Product design;Software engineering;Force","","17","","34","IEEE","12 Oct 2015","","","IEEE","IEEE Journals"
"Approach on Aspect-Oriented Software Reverse Engineering at Requirements Level","Y. Su; X. -W. Zhou; M. -Q. Zhang","Electronic Technology Dept., Engineering Institute of Armed Police Force, Xi'an, China; Electronic Technology Dept., Engineering Institute of Armed Police Force, Xi'an, China; Electronic Technology Dept., Engineering Institute of Armed Police Force, Xi'an, China",2008 International Conference on Computer Science and Software Engineering,"22 Dec 2008","2008","2","","321","324","The framework of aspect-oriented software reverse engineering is proposed for the solution of comprehension and evolution problems of crosscutting properties in legacy system. Based on it, an approach of use-cases driven formal concept analysis is discussed. The goal of this approach is recovering systempsilas crosscutting concerns on requirements level. With the approach, execution profiles of legacy system are analyzed using concept lattices and the invoked computational units that traverse system's use-case models can be identified. Finally, they can be abstracted into early-aspects for re-engineering of the legacy systems with AOSD (Aspect-Oriented Software Development). Compared with existing aspect-mining techniques, which are mainly applied for refactoring legacy system's program source codes, this given approach is more effective when it is used for comprehending and evolving legacy system on higher abstract level. The results of case study show that quite a few crosscutting properties of legacy system can be recovered at requirements level with the introduced domain knowledge.","","978-0-7695-3336-0","10.1109/CSSE.2008.834","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4722062","Software Reverse Engineering;Aspect-Oriented;Early-Aspect;Requirement;Crosscutting Concerns","Reverse engineering;Software systems;Data mining;Software engineering;Programming;Computer science;Lattices;Design engineering;Pattern analysis;Jacobian matrices","","","","9","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Artificial Intelligence Techniques in Software Engineering for Automated Software Reuse and Design","D. P. Wangoo","Department of CSE & IT, Amity School of Engineering and Technology Amity University, Noida, Uttar Pradesh, India",2018 4th International Conference on Computing Communication and Automation (ICCCA),"29 Jul 2019","2018","","","1","4","Mining of software engineering data have proved successful for reusability of components in software development. Artificial Intelligence improves a large application domain of software engineering activities. Intelligent knowledge discovery integrates Artificial Intelligence with Data Mining for intelligent computing of software engineering tasks. The integration of artificial intelligence with data mining for supporting software engineering applications leads to Software Intelligence. This paper analyzes three artificial intelligence techniques that uses data mining, business intelligence, machine learning for promoting automated software reuse for software construction and overall software development. The business intelligence tools are used for intelligent knowledge discovery of code that will be used for reusability of applications and components. An analysis of several AI techniques in software reuse domain of software engineering is discussed for automated software reuse and identification of potential research prospects in the field.","2642-7354","978-1-5386-6947-1","10.1109/CCAA.2018.8777584","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8777584","Software Reuse;Artificial Intelligence (AI);Business Intelligence (BI);Software Intelligence (SI)","Software engineering;Artificial intelligence;Data mining;Software reusability;Task analysis;Business intelligence","","14","","15","IEEE","29 Jul 2019","","","IEEE","IEEE Conferences"
"Software Engineering Education From Indian Perspective","R. Mahanti; P. K. Mahanti","Department of Computer Science & Engineering, Birla Institute of Technology, Ranchi, India; Department of CSAS, University of New Brunswick, Saint John's, Canada",18th Conference on Software Engineering Education & Training (CSEET'05),"8 Dec 2008","2005","","","111","117","Software is omnipresent in today's world. India is a hub to more than 1000 software companies. The software industry is a major employment providing industry in India. As a wholly intellectual artifact, software development is among the most labor demanding, intricate, and error-prone technologies in human history. Software's escalating vital role in systems of pervasive impact presents novel challenges for the education of software engineers. This paper focuses on the current status of software engineering education in India and suggestions for improvement so as to best suit the software industry's needs","2377-570X","0-7695-2324-2","10.1109/CSEET.2005.30","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4698915","","Software engineering;Computer industry;Software quality;Programming;Industrial training;Employment;Humans;History;Systems engineering education;Embedded software","","6","","8","IEEE","8 Dec 2008","","","IEEE","IEEE Conferences"
"3rd International workshop on games and software engineering: Engineering computer games to Enable Positive, Progressive Change (GAS 2013)","K. M. L. Cooper; W. Scacchi; A. I. Wang","University of Texas at Dallas, Richardson, USA; University of California, Irvine, Irvine, USA; Norwegian University of Science and Technology, Trondheim, Norway",2013 35th International Conference on Software Engineering (ICSE),"26 Sep 2013","2013","","","1521","1522","We present a summary of the 3rd ICSE Workshop on Games and Software Engineering: Engineering Computer Games to Enable Positive, Progressive Change in this article. The full day workshop is planned to include a keynote speaker, panel discussion, and paper presentations on game software engineering topics related to requirements specification and verification, software engineering education, re-use, and infrastructure. The accepted papers are overviewed here.","1558-1225","978-1-4673-3076-3","10.1109/ICSE.2013.6606767","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6606767","Game engineering;software engineering","Games;Educational institutions;Software engineering;Conferences;Artificial intelligence;Software","","1","","","IEEE","26 Sep 2013","","","IEEE","IEEE Conferences"
"Research on Grouping Strategy in Series Course Projects of Software Engineering","W. Yan-qing; H. Hu-jie; N. Ze-hui; H. Cheng; H. Zeng-hua","School of Software, Harbin Institute of Technology, Harbin, China; School of Software, Harbin Institute of Technology, Harbin, China; School of Software, Harbin Institute of Technology, Harbin, China; School of Software, Harbin Institute of Technology, Harbin, China; School of Software, Harbin Institute of Technology, Harbin, China",2008 International Conference on Computer Science and Software Engineering,"22 Dec 2008","2008","5","","168","170","In order to address such problems as ""random grouping"" and ""low consistency"" when our students are conducting their series course projects of software engineering, ""stability factor"" was put forward to evaluate the stability of a group and to assess the collaboration efficiency of the members in it. A Web-based MIS also was developed to help teachers do real-time supervision during the course projects. When complying with this framework, the quality of practical teaching can be assured, learning outcome will be enhanced, and the scientific encouraging policy will make a positive influence upon cultivating studentspsila team-working capability as well as their collaboration consciousness.","","978-0-7695-3336-0","10.1109/CSSE.2008.120","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4722869","software engineering;course project;grouping strategy;collaborative learning;MIS","Software engineering;Stability;Technological innovation;Education;Collaborative software;Collaborative work;Computer science;International collaboration;Data structures;Databases","","","","6","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"The Software Engineering Initiative of DLR: Overcome the Obstacles and Develop Sustainable Software","C. Haupt; M. Meinel; T. Schlauch","German Aerospace Center (DLR), Berlin, Germany; German Aerospace Center (DLR), Braunschweig, Germany; German Aerospace Center (DLR), Berlin, Germany",2018 IEEE/ACM 13th International Workshop on Software Engineering for Science (SE4Science),"30 Aug 2018","2018","","","16","19","Software is a vital part of modern research. The competence to develop sustainable software becomes increasingly important for research organizations. The DLR - a large research organization in Germany - has set up a software engineering initiative to address typical obstacles in this regard such as missing long-term funding, lack of incentives, or missing knowledge about essential software development practices. In this paper, we describe the concept and activities of the initiative as well as discuss the impact of these activities on the identified obstacles.","","978-1-4503-5748-7","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449016","Research Software Engineering;Obstacles;Maintenance;Community","Software;Software engineering;Tools;Sustainable development;Training;Guidelines;Organizations","","","","7","","30 Aug 2018","","","IEEE","IEEE Conferences"
"Software Engineering Projects in Distant Teaching","P. Bouillon; J. Krinke; S. Lukosch","Fern Universität Hagen, Germany; Fern Universität Hagen, Germany; Fern Universität Hagen, Germany",18th Conference on Software Engineering Education & Training (CSEET'05),"8 Dec 2008","2005","","","147","154","Software engineering education is most often complemented by a software engineering project where a team of students has to develop a large software system. At a distance teaching university such projects challenge the students in communication, coordination, and collaboration, because team members work in different places, many miles away from each other. We present an ECLIPSE-based unified platform that leverages available tools and solutions and discuss the problems involved. Besides using plug-ins that support the students during implementation, our platform integrates a collaborative distant education environment and a software project management system that eases the students' collaboration in the software engineering project","2377-570X","0-7695-2324-2","10.1109/CSEET.2005.31","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4698919","","Software engineering;Collaborative work;Software systems;Collaborative software;Systems engineering education;Educational programs;Computer aided instruction;Project management;Programming profession;Software maintenance","","13","","10","IEEE","8 Dec 2008","","","IEEE","IEEE Conferences"
"Using Ontologies to Aid the Teaching of Software Engineering","S. P.G.; A. Balakrishnan","University of Hyderabad, Hyderabad, India; Coimbatore Institute of Technology, Coimbatore, India",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","224","231","The software industry today expects software engineers to be skilled at both technical and managerial issues. Technical issues include understanding requirements, design methodologies and writing test plans and test cases besides software skills. Non-technical issues are those related to communication, team work and managing time. Thus, software engineering besides being a science is also an art. Teaching students to apply software engineering thus becomes challenging as it involves not only teaching the techniques but also getting them to appreciate and imbibe the skills in their work life. Software engineering is being taught as a subject of study for post-graduate students. Although, its impractical to teach every student all the techniques and methodologies, it is required that the student understands and experiences the subject and develops the attitude and skill set required. This is dependent to a large extent on factors like the course framework, course time and the aptitude of the class. Hence,it is necessary to tune the teaching to the constitution of the class and at the same time achieve basic goals that are set for the course. Also, there is need for coordination among courses, wherever there isomer than one course taught. To meet this, we propose building a software engineering course framework.The framework consists of one, an ontology of the SE course and two, the class capacity. We then map between the two in order to define teaching methodologies, the areas of focus and the level of knowledge to be imparted. Such a framework, can be used across courses and can help assimilate teaching aids and material as well as aid in better teaching of SE.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.32","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812702","Ontology;Course Primitives","Ontologies;Education;Software engineering;Software testing;Computer industry;Engineering management;Design methodology;Writing;Art;Constitution","","","","12","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"Ten Years of the Agile Software Factory for Software Engineering Education and Training","R. C. Green; J. T. Chao","Department of Computer Science, Bowling Green State University, Bowling Green, OH; Department of Computer Science, Bowling Green State University, Bowling Green, OH",2017 IEEE 30th Conference on Software Engineering Education and Training (CSEE&T),"7 Dec 2017","2017","","","182","186","The Agile Software Factory (ASF) was created in the Department of Computer Science at Bowling Green State University nearly ten years ago to promote the use of agile methods, improve student education through service-learning opportunities, and to facilitate community engagement by handling the many software requests that regularly arrive in the department. In pursuit of these goals, the ASF has had many successes and faced challenges in a variety of areas. This paper describes the history of the ASF along with the multiple successes and challenges that it has faced over the years. Future plans to continue fulfilling the educational mission of the ASF while widening its impact are also discussed, including the creation of a student mentorship program, promoting software engineering research, and sponsoring software engineering related events.","2377-570X","978-1-5386-2536-1","10.1109/CSEET.2017.36","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8166700","agile software development;software factory;software engineering;service learning;real-world projects","Software;Production facilities;Software engineering;Training;Computer science;Personnel;Organizations","","3","","14","IEEE","7 Dec 2017","","","IEEE","IEEE Conferences"
"Instructor's Acceptance of Games Utilization in Undergraduate Software Engineering Education: A Pilot Study in Turkey","O. Albayrak","Ankara, Turkey",2015 IEEE/ACM 4th International Workshop on Games and Software Engineering,"30 Jul 2015","2015","","","43","49","The adoption and success of serious games for educational purposes partially depend on instructor related factors. This study proposes a simple hypothetical model on the factors that influence the instructor's acceptance of the utilization of games (whether serious or not) in undergraduate software engineering education. The suggested model is tested by means of a pilot questionnaire conducted in Turkey. Data collected from 30 instructors revealed that ""the number of hours per week the instructor plays game"", ""instructor's experience in using games for educational purposes in general"", and ""instructor's experience in designing games"" have significant impact on the instructor's decision to use games in software engineering education. We found no significant impact of ""instructor's previous research experience in education"", ""intention to conduct future research on education"", and ""awareness of games used in teaching software engineering"". The suggested model significantly predicted the dependent variable with R2 = 0.798.","","978-1-4673-7046-2","10.1109/GAS.2015.15","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7169468","serious games;software engineering education;instructor's acceptance of game use","Games;Education;Software engineering;Correlation;Software;Sociology","","4","","27","IEEE","30 Jul 2015","","","IEEE","IEEE Conferences"
"Management of Composites in Software Engineering Environments","J. Estublier; G. Vega; T. Leveque","Laboratoire Informatique de Grenoble, Grenoble, France; Laboratoire Informatique de Grenoble, Grenoble, France; Laboratoire Informatique de Grenoble, Grenoble, France",2008 15th Asia-Pacific Software Engineering Conference,"22 Dec 2008","2008","","","545","552",".Design and development scalability, in any engineering, requires information hiding and a specific composition mechanism in which composite items are made-up of other items. This paper shows that scalability is currently ill supported and that software engineering composites are rather special with respect to other engineering disciplines. Indeed, a software engineering composite is simultaneously a model element, an engineering artifacts and a real object, which is unprecedented in the history of engineering. This paper analyzes the requirements that composites must satisfy in order to support scalability in software engineering. We have developed CADSE (Computer Aided Domain Specific Environment) in which composites are first class elements from which workspaces, concurrent engineering and view point support are provided. The paper discusses our experience with using the proposed system over the last years.","1530-1362","978-0-7695-3446-6","10.1109/APSEC.2008.17","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4724589","Software engineering environments;models;development","Environmental management;Engineering management;Software engineering;Scalability;Software development management;Software design;Design engineering;History;Concurrent computing;Concurrent engineering","","","","23","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Communication, Knowledge and Co-ordination Management in Globally Distributed Software Development: Informed by a scientific Software Engineering Case Study","A. Taweel; B. Delaney; T. N. Arvanitis; L. Zhao","University of Binningham, UK; University of Binningham, UK; University of Binningham, UK; University of Binningham, UK",2009 Fourth IEEE International Conference on Global Software Engineering,"7 Aug 2009","2009","","","370","375","With the global distribution of scientific and software engineering skills and with the need to foster multidisciplinary research collaboration across organisations result in teams dispersed separated by time and distance. However to attain the potential benefits of such collaboration, there is a critical need for a better management of communication, knowledge and co-ordination across distributed teams. The importance of these factors is becoming increasingly known to organisations requiring them to develop methods and enabling mechanisms in need for more successful and efficient collaboration outcomes. This paper discusses and emphasises the importance of managing these factors in distributed software engineering projects based on experiences drawn from an international scientific research and software engineering project (ePCRN). It presents their impact on the collaborative process and how they may hinder the progress of the software development process. It also presents the methods and mechanisms used in the project to address some of these factors","2329-6313","978-0-7695-3710-8","10.1109/ICGSE.2009.58","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5196962","Global Software Development;coordination management;scientific multidisciplinary collaboration;global software engineering","Knowledge management;Software development management;Engineering management;Programming;Software engineering;Project management;Collaborative software;International collaboration;Collaborative work;Collaborative tools","","16","","28","IEEE","7 Aug 2009","","","IEEE","IEEE Conferences"
"Software mangineeringment: teaching project management from software engineering perspective","A. Tomer","Software Engineering Department, Kinneret College on the Sea of Galilee Tzemach, Israel",2014 IEEE Global Engineering Education Conference (EDUCON),"2 Oct 2014","2014","","","1","7","Software Engineers are often promoted to management positions, based on their engineering excellence, lacking management knowledge, which is not always part of their undergraduate SE program. Moreover, very early in their career software engineers face management issues, when they are required to meet budget and schedule, to assess potential risks, to make make/buy decisions or to maintain effective communications over globally-dispersed teams. These combined jobs may be referred to as ""Software Mangineeringment"". General Project Management education does not equip these engineers with enough relevant practice for the software domain. This article describes an undergraduate course which combines the general project management theory and practice with software-specific practices. The course framework is the guide to Project Management Body of Knowledge (PMBOK® Guide), which includes 42 projects management processes organized categorized into 9 Knowledge Areas. The course extends these processes with many practices taken from a large variety of software engineering resources. The course is also delivered as an industrial seminar targeted at software managers in their initial management steps.","2165-9567","978-1-4799-3191-0","10.1109/EDUCON.2014.6914698","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6914698","Software Engineering;Project Management;PMBOK","Software;Project management;Software engineering;Organizations;Schedules;Context;Standards","","6","","36","IEEE","2 Oct 2014","","","IEEE","IEEE Conferences"
"Software Mangineeringment: Teaching Project Management from software engineering perspective","A. Tomer","Software Engineering Department, Kinneret College on the Sea of Galilee, Tzemach, Israel",2015 IEEE Global Engineering Education Conference (EDUCON),"30 Apr 2015","2015","","","5","11","Software Engineers are often promoted to management positions, based on their engineering excellence, lacking management knowledge, which is not always part of their undergraduate SE program. Moreover, very early in their career software engineers face management issues, when they are required to meet budget and schedule, to assess potential risks, to make make/buy decisions or to maintain effective communications over globally-dispersed teams. These combined jobs may be referred to as “Software Mangineeringment”. General Project Management education does not equip these engineers with enough relevant practice for the software domain. This article describes an undergraduate course which combines the general project management theory and practice with software-specific practices. The course framework is the guide to Project Management Body of Knowledge (PMBOK® Guide), which includes 42 projects management processes organized categorized into 9 Knowledge Areas. The course extends these processes with many practices taken from a large variety of software engineering resources. The course is also delivered as an industrial seminar targeted at software managers in their initial management steps.","2165-9567","978-1-4799-1908-6","10.1109/EDUCON.2015.7095942","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7095942","Software Engineering;Project Management;PMBOK","Software;Project management;Software engineering;Organizations;Schedules;Context;Standards","","2","","36","IEEE","30 Apr 2015","","","IEEE","IEEE Conferences"
"What Does Industry Suggest to Academia on Software Engineering Education?","D. Akdur","ASELSAN Inc., Ankara, Türkiye",2022 7th International Conference on Computer Science and Engineering (UBMK),"28 Oct 2022","2022","","","37","42","Software professionals might face difficulties after beginning their careers due to misalignment of the skills learnt during their university education. Although Software Engineering (SE) is shaped by both the industry and academia, whose goals and contributions are different, there are some mismatches in perceptions of software practitioners about academic activities; hence, the level of Industry Academia Collaboration (IAC) in software industry is low compared to other industrial sectors. To investigate the skills gaps and understand different opinions of practitioners to increase such IACs, we conducted an online survey. 628 software practitioners, whose undergraduate degree was completed in Turkey, responded to the survey. In this study, we explored the suggestion of software practitioners on SE education. We believe that this study sheds light on improving mutual understanding to close the gaps between academia and industry.","2521-1641","978-1-6654-7010-0","10.1109/UBMK55850.2022.9919527","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9919527","software engineering education;curriculum;industry academia collaboration;empirical evidence;survey","Industries;Computer science;Correlation;Engineering profession;Education;Collaboration;Software","","2","","25","IEEE","28 Oct 2022","","","IEEE","IEEE Conferences"
"Software engineering economics: background, current practices, and future directions","H. Erdogmus; B. W. Boehm; W. Harrison; D. J. Reifer; K. J. Sullivan","Institute for Information Technology, National Research Council, Ottawa, ONT, Canada; Center for Software Engineering, University of Southern California, Los Angeles, CA, USA; Department of Computer Science, Portland State University, Portland, OR, USA; Reifer Consultants, Inc., Torrance, CA, USA; Department of Computer Science, University of Virginia, Charlottesville, VA, USA",Proceedings of the 24th International Conference on Software Engineering. ICSE 2002,"23 May 2005","2002","","","683","684","The field of software economics seeks to develop technical theories, guidelines, and practices of software development based on sound, established, and emerging models of value and value-creation - adapted to the domain of software development as necessary. The premise of the field is that software development is an ongoing investment activity - in which developers and managers continually make investment decisions requiring the expenditure of valuable resources, such as time, talent, and money. The overriding aim of this activity is to maximize the value added subject to an equitable distribution among the participating stakeholders. The goal of the paper is to expose the audience to this line of thinking and introduce the tools pertinent to its pursuit. The paper is designed to be self-contained and will cover concepts from introductory to advanced. Both practitioners and researchers with an interest in the impact of value considerations in software decision-making will benefit from attending it.","","1-58113-472-X","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1008028","","Software engineering;Programming;Investments;Software development management;Decision making;Software quality;Computer science;Financial management;Permission;Software design","","1","","1","","23 May 2005","","","IEEE","IEEE Conferences"
"Systematic Mapping Study on Security Approaches in Secure Software Engineering","R. A. Khan; S. U. Khan; H. U. Khan; M. Ilyas","Department of Computer Science and IT, Software Engineering Research Group, University of Malakand, Chakdara, Pakistan; Department of Computer Science and IT, Software Engineering Research Group, University of Malakand, Chakdara, Pakistan; Department of Accounting and Information Systems, College of Business and Economics, Qatar University, Doha, Qatar; Department of Computer Science and IT, Software Engineering Research Group, University of Malakand, Chakdara, Pakistan",IEEE Access,"17 Feb 2021","2021","9","","19139","19160","In the modern digital era, software systems are extensively adapted and have become an integral component of human society. Such wide use of software systems consists of large and more critical data that inevitably needs to be secured. It is imperative to make sure that these software systems not only satisfy the users' needs or functional requirements, but it is equally important to make sure the security of these software systems. However, recent research shows that many software development methods do not explicitly include software security measures during software development as they move from demand engineering to their final losses. Integrating software security at each stage of the software development life cycle (SDLC) has become an urgent need. Tackling software security, various methods, techniques, and models have been suggested and developed, however, only a few of them provide strong evidence for building secure software applications. The main purpose of this research is to study security measures in the context of the development of secure software (SSD) during the study of systematic mapping (SMS). Based on the inclusion and exclusion criteria, 116 studies were selected. After the data extraction from the selected 116 papers, these were classified based on the quality assessment, software security method, SDLC phases, publication venue, and SWOT analysis. The results indicate that this domain is still immature and sufficient research work needs to be carried out particularly on empirically evaluated solutions.","2169-3536","","10.1109/ACCESS.2021.3052311","Qatar National Library, Doha, Qatar; Qatar University(grant numbers:IRCC-2020-009); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9328095","Software security;secure software development;secure software engineering;software development life cycle;security approaches;systematic mapping study","Software;Security;Buildings;Software systems;Software measurement;Systematics;Software engineering","","34","","111","CCBY","18 Jan 2021","","","IEEE","IEEE Journals"
"A Global and Competition-Based Model for Fostering Technical and Soft Skills in Software Engineering Education","O. Gotel; V. Kulkarni; M. Say; C. Scharff; T. Sunetnanta","Pace University, New York, USA; University of Delhi, New Delhi, India; Institute of Technology of Cambodia, Phnom Penh, Cambodia; Pace University, New York, USA; Mahidol University, Bangkok, Thailand",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","271","278","The project experience described in this paper builds upon three years of running global software development projects in an educational setting. It explicitly addresses some of the difficulties we have experienced in the past in getting students to deliver a quality software product at the end of a typical semester-long course in which software engineering is taught for the first time while a capstone project is concurrently undertaken. The initiative is unique in that it brings undergraduate, graduate and industry students together in a synergistic manner to capitalize upon individual learning needs and prior skill sets. To focus upon quality, coaches and auditors support traditional student teams with critical technical tasks. Working from identical requirements, a five-way competition affords multiple perspectives, improving the requirements, encouraging design diversity and so increasing the likelihood of the client receiving a deployable product. The fact that the development teams are in different geographic locations and that the software is required for a Cambodian client places soft skills entirely at the forefront. One of the software systems developed during this experience was selected by the client and is now successfully deployed in Cambodia. The paper reports on an educational model that has been seen to deliver results.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.36","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812708","Global Software Development;Software Engineering Education;Software Quality;Student Competition;Technical and Soft Skills","Software engineering;Software systems;Programming;Computer science;Cities and towns;Collaborative work;Collaborative software;Educational technology;Software quality;Computer science education","","18","","20","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"Games for learning: bridging game-related education methods to software engineering knowledge areas","M. R. De Almeida Souza; L. Furtini Veado; R. Teles Moreira; E. Magno Lages Figueiredo; H. A. X. Costa","Computer Science Department, Federal University of Minas Gerais, Belo Horizonte, Brazil; Computer Science Department, Federal University of Minas Gerais, Belo Horizonte, Brazil; Computer Science Department, Federal University of Minas Gerais, Belo Horizonte, Brazil; Computer Science Department, Federal University of Lavras, Belo Horizonte, Brazil; Computer Science Department, Federal University of Lavras, Belo Horizonte, Brazil",2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering Education and Training Track (ICSE-SEET),"24 Aug 2017","2017","","","170","179","The use of games in software engineering education is not new. However, recent technologies have provided new opportunities for using games and their elements to enhance learning and student engagement. The goal of this paper is twofold. First, we discuss how game related methods have been used in the context of software engineering education by means of a systematic mapping study. Second, we investigate how these game related methods support specific knowledge areas from software engineering. The systematic mapping study identified 106 primary studies describing the use of serious games, gamification and game development in software engineering education. Based on this mapping, we aimed to track the learning goals of each primary study to the knowledge areas defined in ACM/IEEE curricular recommendations. As a result, we observed that ""Software Process"", ""Software Design"" and ""Profession Practice"" are the most recurring knowledge areas explored by game related approaches in software engineering education. We also uncover possible research opportunities for game-related education methods.","","978-1-5386-2671-9","10.1109/ICSE-SEET.2017.17","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7964342","software engineering education;game-based learning;gamification;game development based learning","Games;Software engineering;Software;Education;Knowledge engineering;Context;Systematics","","6","","34","IEEE","24 Aug 2017","","","IEEE","IEEE Conferences"
"Safety from Ethical Hazards: Prospects for a Contribution from Software Engineering","K. Wallnau","Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA",2018 IEEE/ACM 1st International Workshop on Software Engineering for Cognitive Services (SE4COG),"2 Sep 2018","2018","","","15","17","In this paper, I argue that while normative ethical concerns such as fairness and accountability must be addressed in the design of intelligent software, these concerns are far removed from traditional software engineering practice. After reviewing representative illustrations of such ethical hazards arising from the use of intelligent applications, I discuss current practices that might contribute to software engineering practices to assure that intelligent software is safe to use, i.e., free of ethical hazard.","","978-1-4503-5740-1","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8452783","Algorithmic intelligence;smart applications;cognitive services;psychosocial risk","Software;Hazards;Software engineering;Software algorithms;Machine learning;Ethics","","","","30","","2 Sep 2018","","","IEEE","IEEE Conferences"
"Teaching Software Quality in an Interdisciplinary Course of Engineering","R. M. d. Figueiredo; A. B. de Sales; L. C. M. Ribeiro Jr.; L. A. F. Laranjeira; A. Rocha","NA; FGA - Faculdade UnB Gama UnB - Universidade de Brasilia - Brasilia/DF, Brasília, Brasil; FGA - Faculdade UnB Gama UnB - Universidade de Brasilia - Brasilia/DF, Brasília, Brasil; FGA - Faculdade UnB Gama UnB - Universidade de Brasilia - Brasilia/DF, Brasília, Brasil; FGA - Faculdade UnB Gama UnB - Universidade de Brasilia - Brasilia/DF, Brasília, Brasil",2010 Seventh International Conference on the Quality of Information and Communications Technology,"3 Dec 2010","2010","","","144","149","The undergraduate course in Software Engineering that was created in the University of Brasilia is the first undergraduate level course of this nature in Brazil. The focus of this program is on the development and on the quality of software and it is based on models for improvement of the software development process such as the Capability Maturity Model Integrated (CMMI) and the Reference Model of the Program for the Improvement of Brazilian Software Process (MR-MPS) and on the recommendations provided by specialized documents such as Software Engineering Education Knowledge (SEEK). It contains disciplines covering the main processes, methods and techniques of software development. The Software Engineering (SE) curriculum is composed of: (a) a common core of disciplines (shared with the other three engineering programs), (b) a set of disciplines for overall training in SE, (c) a set of optional disciplines that allow the student to pursue a specific area within the field of SE, (d) a set of complementary disciplines, and (e) other activities that generate credit. The pedagogical objective of this combination is to allow flexibility, enabling multi and interdisciplinary compositions that empower students to be co-responsible for their overall course and particular area of interest. In this context, the graduates will be able to use their newly-acquired knowledge in SE to define and apply a systematic, disciplined and quantifiable approach in the development, operation and maintenance of software, i.e., to apply engineering principles to software construction.","","978-1-4244-8539-0","10.1109/QUATIC.2010.28","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5654795","software engineering course;software quality;interdisciplinary;teaching software quality","Software;Software engineering;Knowledge engineering;Biological system modeling;Programming;Training","","4","","19","IEEE","3 Dec 2010","","","IEEE","IEEE Conferences"
"The Role of Empirical Study in Software Engineering","V. R. Basili","University of Maryland and Fraunhofer Center of Experimental Software Engineering, MD, USA",2006 30th Annual IEEE/NASA Software Engineering Workshop,"12 Feb 2007","2006","","","3","6","Although most scientific and engineering disciplines view empiricism as a basic aspect of their discipline, that view has not been the tradition in software engineering. There should be a symbiotic relationship between the development of theories and empirical studies that test and evolve that theory. This talk discusses of the role of empirical study in the understanding and improvement of the software product and process. It offers a personal, historical perspective of the use of empiricism through a series of example applications that demonstrate the various roles that empiricism can play. The examples are taken from the author's own experience and include the use of empirical study to improve an organization's product quality and productivity in the Software Engineering Laboratory at NASA/Goddard and to evaluate and evolve the effectiveness of various software technologies for use in improving the dependability of software. It also suggests research directions for empirical study in software engineering.","1550-6215","0-7695-2624-1","10.1109/SEW.2006.34","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4090238","","Software engineering;NASA;Conferences;Software quality;Symbiosis;Testing;Application software;Productivity;Space technology","","1","","","IEEE","12 Feb 2007","","","IEEE","IEEE Conferences"
"Social Network Analysis for Global Software Engineering: Exploring Developer Relationships from a Fine-Grained Perspective","N. Novielli; S. Marczak","Dept. of Computer Science, Università degli Studi di Bari ‘Aldo Moro’, Bari, Italy; Dept. of Computer Science, Università degli Studi di Bari ‘Aldo Moro’, Bari, Italy",2013 IEEE 8th International Conference on Global Software Engineering Workshops,"30 Sep 2013","2013","","","47","48","Software development is a collaborative activity in which social relationships among those involved throughout the life cycle are paramount for achieving the project goals. For instance, communication with, awareness of, and trust in others are relevant and necessary to facilitate collaboration. The identification of social relationships and their patterns can help us to better understand the dynamics of a project team. This understanding is crucial when working in a global setting where members have to virtually establish relationships and collaborate with remote colleagues. Social network analysis allows us to reveal relationship patterns in a fine-grained level. This tutorial provides basic concepts and measures on social network analysis and discusses their application in global software engineering. Practicing on a dataset from a real distributed software project is also part of this tutorial. The tutorial is suitable for anyone interested in global software development and the social relationships established among software developers in distributed teams.","2329-6313","978-0-7695-5055-8","10.1109/ICGSEW.2013.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6613451","global software engineering;collaboration patterns;social network analysis","Tutorials;Software;Collaboration;Software engineering;Social network services;Atmospheric measurements;Particle measurements","","3","","5","IEEE","30 Sep 2013","","","IEEE","IEEE Conferences"
"Using Wikis to Support Teamwork Skills in Software Engineering Courses","M. Al-Yahya","College of Computer and Information Sciences, King Saud University, Riyadh, Saudi Arabia",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","142","149","One of the essential learning outcomes for software engineering students is to be able to work effectively in a team. A challenge facing academia is how to facilitate the development of these skills in students. One common approach is to involve students in collaborative activities such as group projects. However, working in a group does not necessarily imply that students develop the desired teamwork skills. In this study, we demonstrate how wikis can be used to support the development of students' teamwork skills in the context of software engineering projects. Students taking a software engineering course at the IT Department at King Saud University used the wiki to deliver their group project. The results of this study suggest that wikis can contribute to the development of students' teamwork skills by facilitating collaborative work and making team dynamics transparent. Students felt that the experience helped develop and demonstrate their teamwork skills.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.30","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812688","Wiki;Teamwork;Software Engineering Project","Teamwork;Software engineering;Collaborative work;Programming;Collaboration;Computer science education;Educational institutions;Software systems;Computer industry;Collaborative software","","5","","15","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"A Systematic Mapping Study of Value-Based Software Engineering","N. Salleh; F. Mendes; E. Mendes","Computer Science Department, International Islamic University, Malaysia; Faculty of Information Technology & Electrical Engineering, University of Oulu, Finland; Faculty of Computing, Blekinge Institute of Technology, Karlskrona, Sweden",2019 45th Euromicro Conference on Software Engineering and Advanced Applications (SEAA),"21 Nov 2019","2019","","","404","411","Integrating value-oriented perspectives into the principles and practices of software engineering is critical to ensure that software development and management activities address all key stakeholders' views and also balance short-and-long-term goals. This is put forward in the discipline of Value-Based Software Engineering (VBSE). In this paper, a mapping study of VBSE is detailed. We classify evidence on VBSE principles and practices, research methods, and the research types. This mapping study includes 134 studies located from online searches, and backward snowballing of references. Our results show that VB Requirements Engineering (22%) and VB Planning and Control (19%) were the two principles and practices mostly investigated in the VBSE literature, whereas VB Risk Management, VB People Management and Value Creation (3% respectively) were the three less researched. In terms of the research method, the most commonly employed method is case-study research. In terms of research types, most of the studies (28%) proposed solution technique(s) without empirical validation.","","978-1-7281-3421-5","10.1109/SEAA.2019.00067","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8906755","value-based software engineering;systematic mapping;VBSE principles and practices","Software engineering;Software;Databases;Planning;Systematics;Requirements engineering;Stakeholders","","4","","23","IEEE","21 Nov 2019","","","IEEE","IEEE Conferences"
"Software Engineering Lab - an Essential Component of a Software Engineering Curriculum","M. Balaban; A. Sturm","Computer Science, Ben Gurion University of the Negev, Israel; Software and Information Systems Engineering, Ben Gurion University of the Negev, Israel",2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"26 Aug 2018","2018","","","21","30","The goal of Software Engineering (SE) education is to teach theory and practice of software sciences, with an ultimate practical goal. Quite surprisingly, although standard SE programs include many hands-on courses, they do not include practical lab courses in software development and maintenance, as common in other engineering disciplines. A capstone project course, that is standard in most SE programs, cannot function as an instructive SE-lab course since it does not enable effective teaching and cannot replace a planned SE-development experiment. This paper describes an SE-lab course that creates lab conditions, where students are faced with a deliberately challenging, planned SE development and management tasks, and the course staff provides team-based guidance. The paper analyzes the lab ideals, principles and goals, explains how they are realized in the lab content, and presents its evaluation from the students and the instructors' viewpoints.","","978-1-4503-5660-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445179","Software Engineering Education;Lab;Questionnaire","Training;Servers;Machinery;History;Organizations","","","","11","","26 Aug 2018","","","IEEE","IEEE Conferences"
"An extension of SEMEST: the online software engineering measurement tool","Shuangshuang Zhang; Yingxu Wang","Theoretical and Empirical Software Engineering Research Center, Department of Electrical and Computer Engineering, University of Calgary, Calgary, AB, Canada; Theoretical and Empirical Software Engineering Research Center, Department of Electrical and Computer Engineering, University of Calgary, Calgary, AB, Canada",Canadian Conference on Electrical and Computer Engineering 2004 (IEEE Cat. No.04CH37513),"1 Nov 2004","2004","3","","1519","1522 Vol.3","Software engineering measurement and metrics are key technologies toward quantitative software engineering. Current software measurement tools are application specific and usually cover only one or a few measures/metrics in software engineering. To address this problem, a comprehensive software engineering measurement expert system tool (SEMEST) was developed. In order to enhance the current version of SEMEST, SEMEST+ is designed by extending the power and performance of its earlier version. SEMEST+ is a Web-based software measurement expert tool to provide a comprehensive set of software measures and metrics in a rigorous way. The extensions of SEMEST are focused on updating the knowledge base and its performance. First, measurements for different application domains and roles of software engineering are added to the knowledge base. This extension enables SEMEST+ to support five domains of software engineering measurement, i.e., goal-, process-, category-, domains-, and roles-oriented measurement, and their analysis. Second, we adopt data mining technologies to analyze large sets of measurement data collected from the software industry. For example, data on defects and productivity may be analyzed and benchmarked by using the tool. Third, recommendations can be derived based on the measurement results in order to improve an organization's practice and the quality of work products.","0840-7789","0-7803-8253-6","10.1109/CCECE.2004.1349695","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1349695","","Software engineering;Software measurement;Application software;Current measurement;Expert systems;Software tools;Data mining;Computer industry;Mining industry;Productivity","","2","","7","IEEE","1 Nov 2004","","","IEEE","IEEE Conferences"
"Edge4Real: A Cost-Effective Edge Computing based Human Behaviour Recognition System for Human-Centric Software Engineering","D. Shao; X. Liu; B. Cheng; Y. Wang; T. Hoang","School of Information Technology, Deakin University, Geelong, Australia; School of Information Technology, Deakin University, Geelong, Australia; School of Information Technology, Deakin University, Geelong, Australia; School of Information Technology, Deakin University, Geelong, Australia; School of Information Technology, Deakin University, Geelong, Australia",2020 35th IEEE/ACM International Conference on Automated Software Engineering (ASE),"24 Dec 2020","2020","","","1287","1291","Recognition of human behaviours including body motions and facial expressions plays a significant role in human-centric software engineering. However, due to the data and computation intensive nature of human behaviour recognition through video analytics, expensive powerful machines are often required, which could hinder the research and application in human-centric software engineering. To address such an issue, this paper proposes a cost-effective human behaviour recognition system named Edge4Real which can be easily deployed in an edge computing environment with commodity machines. Compared with existing centralised solutions, Edge4Real has three major advantages including cost-effectiveness, easy-to-use, and realtime. Specifically, Edge4Real adopts a distributed architecture where components such as motion capturing, human behaviour recognition, data decoding and extraction, and the application of the recognition result, can be deployed on separated end devices and edge nodes in an edge computing environment. Using a virtual reality application which can capture a user's motion and translate into the motion of a 3D avatar in real time, we successfully validate the effectiveness of the system and demonstrate its promising value to the research and application of human-centric software engineering. The demo video can be found at https://youtu.be/tnEshD8j-kA.","2643-1572","978-1-4503-6768-4","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9285658","Software and its engineering →Software creation and management;Human Behaviour Recognition;Human Centric Software Engineering;Edge Computing;Virtual Reality","Three-dimensional displays;Visual analytics;Streaming media;Software;Real-time systems;Software engineering;Edge computing","","1","","11","","24 Dec 2020","","","IEEE","IEEE Conferences"
"Training experts in the fundamentals: an experience in providing software engineers with the basics of software process improvement","N. K. Ovalle; H. W. Egdorf","Los Alamos National Laboratory, USA; Los Alamos National Laboratory, USA","Proceedings 16th Conference on Software Engineering Education and Training, 2003. (CSEE&T 2003).","2 Apr 2003","2003","","","339","","This tutorial presents an in-house software engineering training program used within a software development organization at a large, national, U.S research laboratory. The program is designed to train experienced software engineers in the requirements and methodology of a software process improvement program being implemented within the software development organization. The software process improvement program being implemented utilizes the framework of the Capability Maturity Model, developed by the Software Engineering Institute at Carnegie Mellon University.","1093-0175","0-7695-1869-9","10.1109/CSEE.2003.1191401","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1191401","","Software engineering;Laboratories;Capability maturity model;Programming;Design engineering;Guidelines;Educational programs","","","","","IEEE","2 Apr 2003","","","IEEE","IEEE Conferences"
"50 Years of Software Engineering: Progress and Perils","C. Ebert",Vector Consulting Services,IEEE Software,"27 Sep 2018","2018","35","5","94","101","A survey of software professionals worldwide suggests the past, present, and future challenges of software engineering. This article is part of a theme issue on software engineering’s 50th anniversary.","1937-4194","","10.1109/MS.2018.3571228","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8474504","software complexity;magic triangle;software crisis;agile development;digital transformation;software engineering;software development;software technology","Agile software development;Software development;Computer security;Complexity theory","","25","","5","IEEE","27 Sep 2018","","","IEEE","IEEE Magazines"
"Designing Control Software for Robot Swarms: Software Engineering for the Development of Automatic Design Methods","D. Bozhinoski; M. Birattari","IRIDIA, Universite Libre de Bruxelles, Bruxelles, Belgium; IRIDIA, Universite Libre de Bruxelles, Bruxelles, Belgium",2018 IEEE/ACM 1st International Workshop on Robotics Software Engineering (RoSE),"26 Aug 2018","2018","","","33","35","Over the past decade, swarm robotics has emerged as a promising engineering discipline. In this paper, we discuss the current research challenges and state-of-the-art in automatic design methods for swarm control software. This subject has recently received increasing attention from the swarm robotics community.We make a contribution towards the debate by proposing two lines of research from a software engineering point of view.","","978-1-4503-5760-9","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445817","swarm robotics;software engineering;design by optimization","Robot kinematics;Software;Robot sensing systems;Design methodology;Optimization;Software engineering","","","","10","","26 Aug 2018","","","IEEE","IEEE Conferences"
"Machine Learning for Software Engineering: Models, Methods, and Applications","K. Meinke; A. Bennaceur","Kungliga Tekniska Hogskolan, Stockholm, SE; The Open University, Milton Keynes, Buckinghamshire, GB",2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion),"30 Aug 2018","2018","","","548","549","Machine Learning (ML) is the discipline that studies methods for automatically inferring models from data. Machine learning has been successfully applied in many areas of software engineering ranging from behaviour extraction, to testing, to bug fixing. Many more applications are yet be defined. However, a better understanding of ML methods, their assumptions and guarantees would help software engineers adopt and identify the appropriate methods for their desired applications. We argue that this choice can be guided by the models one seeks to infer. In this technical briefing, we review and reflect on the applications of ML for software engineering organised according to the models they produce and the methods they use. We introduce the principles of ML, give an overview of some key methods, and present examples of areas of software engineering benefiting from ML. We also discuss the open challenges for reaching the full potential of ML for software engineering and how ML can benefit from software engineering methods.","2574-1934","978-1-4503-5663-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449656","Model driven software engineering;Machine Learning","Software;Machine learning;Software engineering;Adaptation models;Testing;Computational modeling;Data models","","","","","","30 Aug 2018","","","IEEE","IEEE Conferences"
"System Dynamics Modeling and Simulation in Software Engineering Education","M. Wu; H. Yan","Department of Computer Science and Engineering, Zhejiang University City College, Hangzhou, China; Department of Computer Science and Engineering, Zhejiang University City College, Hangzhou, China",2008 The 9th International Conference for Young Computer Scientists,"12 Dec 2008","2008","","","2407","2411","In the practical software development, there are many complexities including dynamic behavior and feedback mechanism as well as various interacting factors. Software Engineering education is facing difficulties because students have limited engineering experience and they can hardly understand typical phenomena occurring in software projects. System Dynamics is a continual modeling method describing the interaction between project factors. It forces one to consider system behavior in global view. In this paper Brooks' Law was used as example to demonstrate the essential components and the advantages of system dynamics approach. Finally, the uses of system dynamics approach in critical areas of software engineering are presented.","","978-0-7695-3398-8","10.1109/ICYCS.2008.374","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4709350","System Dynamics;Simulation;Software Engineering;Education","Software engineering;Systems engineering education;Computational modeling;Programming;Computer science education;Productivity;Scheduling;Feedback;Computer science;Educational institutions","","1","","10","IEEE","12 Dec 2008","","","IEEE","IEEE Conferences"
"Research on Agile Development Methodology of Service-Oriented Personalized Software","H. Yuan; Y. Han; J. Hu","School of Economics, Wuhan University of Technology, Wuhan, China; SKLSDE, Beihang University, Beijing, China; SKLSDE, Beihang University, Beijing, China",2008 International Conference on Computer Science and Software Engineering,"22 Dec 2008","2008","4","","1075","1078","In the past 40 years, software development methodology has made significant contribution to the software engineering. What is more, the booming of Internet brought new challenges to software development. To coping with the changes of application background and personalized requirements, this paper presents an agile development methodology of service-oriented personalized software from a research perspective. Firstly, the history of software development methodology is reviewed with focus on the driving forces of software technology. Secondly, we analyzed the software services ability, increased by the user-driven requirements in network environment. Then the agile development methodology is proposed based on userspsila individualities and context, which is a ""meet in middle"" method of software development. Driven by userspsila diversity and personalized requirements this method can be presented as composition of service resources on demand and approach to the target gradually. This is an effective way to meet increasing application software requirements.","","978-0-7695-3336-0","10.1109/CSSE.2008.1452","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4722805","software engineering;service-oriented component;agile development;personalization","Programming;Application software;Software engineering;Computer science;History;Software architecture;Software quality;Environmental economics;Internet;Information resources","","","","13","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Software Engineering Department Heads Workshop","C. Taylor; S. Frezza","Software Engineering, Milwaukee School of Engineering, Milwaukee, WI; Software Engineering, Gannon University, Erie, PA",2018 IEEE Frontiers in Education Conference (FIE),"7 Mar 2019","2018","","","1","2","This workshop aims at providing a forum for Software Engineering (SE) program leads and chairs to present and discuss issues related to software engineering program delivery. These issues normatively include curriculum issues, program collaboration issues, faculty issues and SE discipline tracking issues. The workshop goals are to help those running, proposing or considering accredited SE programs more effectively formulate and achieve their program objectives. The first half of the workshop will focus on SE Competency Models and their application, while the latter half of the workshop will focus on SE curriculum, collaboration, faculty, and discipline tracking issues.","2377-634X","978-1-5386-1174-6","10.1109/FIE.2018.8659287","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8659287","Software Engineering;Curriculum Development & Delivery;ABET;Faculty Issues;Student Issues","Software engineering;Conferences;Collaboration;Industries;Accreditation;Curriculum development","","","","5","IEEE","7 Mar 2019","","","IEEE","IEEE Conferences"
"Teaching software engineering fundamentals to practicing engineers","P. Strooper; D. Carrington; S. Newby; T. Stevenson","School of Information Technology and Electrical Engineering, University of Queensland, Saint Lucia, QLD, Australia; School of Information Technology and Electrical Engineering, University of Queensland, Saint Lucia, QLD, Australia; Boeing Australia Limited, Brisbane, QLD, Australia; Boeing Australia Limited, Brisbane, QLD, Australia","Proceedings 16th Conference on Software Engineering Education and Training, 2003. (CSEE&T 2003).","2 Apr 2003","2003","","","36","43","This paper describes an ongoing collaboration between Boeing Australia Limited and the University of Queensland to develop and deliver an introductory course on software engineering for Boeing Australia. The aim of the course is to provide a common understanding for all Boeing Australia's engineering staff of the nature of software engineering and the practices used throughout Boeing Australia. It is meant as an introductory course that can be presented to people with varying backgrounds, such as recent software engineering graduates, systems engineers, quality assurance personnel, etc. The paper describes the structure and content of the course, and the evaluation techniques used to collect feedback from the participants and the corresponding results. The course has been well-received by the participants, but the feedback from the course has indicated a need for more advanced courses in specific areas.","1093-0175","0-7695-1869-9","10.1109/CSEE.2003.1191348","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1191348","","Education;Software engineering;Australia;Industrial training;Collaborative software;Feedback;Computer industry;Collaborative work;Industrial relations;Companies","","1","","4","IEEE","2 Apr 2003","","","IEEE","IEEE Conferences"
"Conformance quality and failure costs in the software Industry: An empirical analysis of open source software","L. M. Karg; M. Grottke; A. Beckhaus","SAP Research, Darmstadt, Germany; University of Erlangen Nuremberg, Nuremberg, Germany; SAP Research, Darmstadt, Germany",2009 IEEE International Conference on Industrial Engineering and Engineering Management,"8 Jan 2010","2009","","","1386","1390","The quality cost concept is well known in production economics. Recently, it has received a lot of attention in the field of software engineering. However, empirical studies of the association between failure costs and conformance quality have only been conducted for closed source software projects, but not for open source projects. This paper addresses this research gap. On the one hand, our analysis revalidates findings from production economics. On the other hand, it extends the limited empirical knowledge in the software quality cost research domain.","2157-362X","978-1-4244-4869-2","10.1109/IEEM.2009.5373044","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5373044","Conformance quality;empirical analysis;failure costs;open source software;production economics","Open source software;Costs;Software quality;Computer industry;Failure analysis;Industrial economics;Software engineering;Industrial engineering;Programming;Software testing","","1","","30","IEEE","8 Jan 2010","","","IEEE","IEEE Conferences"
"Meet C4SE: Your New Collaborator for Software Engineering Tasks","G. De Vito; S. Lambiase; F. Palomba; F. Ferrucci","Software Engineering (SeSa) Lab, University of Salerno, Salerno, Italy; Software Engineering (SeSa) Lab, University of Salerno, Salerno, Italy; Software Engineering (SeSa) Lab, University of Salerno, Salerno, Italy; Software Engineering (SeSa) Lab, University of Salerno, Salerno, Italy",2023 49th Euromicro Conference on Software Engineering and Advanced Applications (SEAA),"1 Jan 2024","2023","","","235","238","The software industry’s complexity and scale have increased rapidly, leading to challenges in managing information and tasks among developer teams, often resulting in inefficiencies, misunderstandings, and delays. The extensive search for automated tasks led to using chatbots—conversational agents—in software development. However, despite their positive contributions, their adoption has numerous issues, notably the lack of full working context, making their support sometimes useless. To address such a limitation, we propose C4SE, a chatbot designed to assist software engineers and managers in performing various tasks by gathering information helpful for better support. We use the GPT 3.5 model, and a specialized data store based on a vector database for long-term memory, to understand users’ intentions and maintain contextual information. Our prototype C4SE can perform code suggestions, reviews, GitHub API operations, and generate unit and acceptance test cases. Preliminary evaluation reports encouraging results, showing potential to increase productivity in the software development lifecycle.","2376-9521","979-8-3503-4235-2","10.1109/SEAA60479.2023.00044","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10371523","Chatbot;software engineering;large language model;LangChain;vector database","Productivity;Databases;Prototypes;Documentation;Software;Data models;Delays","","","","14","IEEE","1 Jan 2024","","","IEEE","IEEE Conferences"
"Software Engineering in Primary and Secondary Schools - Informatics Education is more than Programming","A. Bollin; S. Pasterk; P. Antonitsch; B. Sabitzer","Institute of Informatics-Didactics, Alpen-Adria-Universität Klagenfurt, Klagenfurt, Austria; Institute of Informatics-Didactics, Alpen-Adria-Universität Klagenfurt, Klagenfurt, Austria; Institute of Informatics-Didactics, Alpen-Adria-Universität Klagenfurt, Klagenfurt, Austria; Institute of Informatics-Didactics, Alpen-Adria-Universität Klagenfurt, Klagenfurt, Austria",2016 IEEE 29th International Conference on Software Engineering Education and Training (CSEET),"23 May 2016","2016","","","132","136","Software Engineering is definitely an important subject matter and it is taught all over the world: at Universities, at Colleges, and recently also at High Schools. There are international Software Engineering curricula, standards, and certificates, but there is no manifestation of Software Engineering (and related practices) in the course syllabi at primary and secondary schools. There are good reasons for it, but based on the authors' experiences gained in combining Software Engineering topics with school projects and based on discussions with teachers and curriculum designers, this paper shows that informatics education can be much more than just programming. Even more, the paper shows that it makes sense to interweave Software Engineering topics with school projects and to motivate for the most important practices related to that field.","2377-570X","978-1-5090-0765-3","10.1109/CSEET.2016.26","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7474476","Software Engineering;Curricula development;Primary and Secondary Schools","Software engineering;Software;Informatics;Programming profession;Conferences;Education","","6","","27","IEEE","23 May 2016","","","IEEE","IEEE Conferences"
"Engineering education innovation with software engineering projects","D. J. Bagert; J. M. Gregory; S. A. Mengel; L. R. Heinze","Department of Computer Science and Software Engineering, Rose-Hulman Institute of Technology, Texas Tech University, Terre Haute, IN, USA; College of Engineering, Texas Tech University, Lubbock, TX, USA; Department of Computer Science, Texas Tech University, Lubbock, TX, USA; Department of Petroleum, Texas Tech University, Lubbock, TX, USA",32nd Annual Frontiers in Education,"14 Jan 2003","2002","3","","S3G","S3G","This paper discusses the development of software engineering class projects that have produced tools which have been used to enrich the educational experience of engineering students, the end users of the software. The projects have involved the creation, maintenance and evolution of software that helps the students determine their major, understand their learning style, develop a semester-by-semester plan of study, and formulate a class schedule each semester. The evolution of the structure of the software engineering project process is first presented. Having ""internal"" clients (i.e. those who are employees of the university) for projects that directly benefit engineering students is then compared to having ""external"" clients. The benefits gained by all stakeholders through these projects and data supporting the satisfaction levels of those stakeholders is presented. Finally, there is a discussion of funded research projects that have been spun off from of these projects, and the plans for the further educational software development through these grants.","0190-5848","0-7803-7444-4","10.1109/FIE.2002.1158711","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1158711","","Engineering education;Technological innovation;Software engineering;Engineering students;Software tools;Computer science education;Books","","3","","11","IEEE","14 Jan 2003","","","IEEE","IEEE Conferences"
"From Craft to Science: The Road Ahead for Empirical Software Engineering Research","M. Galster; D. Weyns; A. Tang; R. Kazman; M. Mirakhorli","University of Canterbury, Christchurch, New Zealand; KU Leuven Leuven, Belgium; Swinburne University of Technology, Hawthorn, Australia; University of Hawaii, Honolulu, USA; Rochester Institute of Technology, Rochester, USA",2018 IEEE/ACM 40th International Conference on Software Engineering: New Ideas and Emerging Technologies Results (ICSE-NIER),"23 Aug 2018","2018","","","77","80","Empirical software engineering (SE) research is often criticized for poorly designed and reported studies, a lack of replications to build up bodies of knowledge, and little practical relevance. In this paper, we discuss issues in empirical software architecture research as an illustration of these issues in one subfield of SE and as a step towards better understanding empirical research in SE in general. Based on feedback from software architecture researchers and practitioners, we explore why, despite persistent discussions in the SE research community, there are still disagreements about why and how to conduct empirical research. Then, we explore how empirical SE research can progress beyond ""one-off"" studies and endless ""new and exciting"" results toward SE research as a mature science. This would allow us to establish foundations for evaluating existing and future empirical research and help researchers design and publish better studies.","","978-1-4503-5662-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8444843","empirical research;software engineering","Software architecture;Software;Roads;Industries;Computer architecture;Australia","","","","11","","23 Aug 2018","","","IEEE","IEEE Conferences"
"Is Software Engineering Fun? Part 2","R. L. Glass",Computing Trends,IEEE Software,"5 Mar 2007","2007","24","2","104","103","There are no simplistic answers to the software engineering methodology questions of the 21st century.","1937-4194","","10.1109/MS.2007.46","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4118662","software engineering;Bruce Blum","Software engineering;Permission;Books;Subscriptions;Open source software;Programming profession;Software prototyping;Prototypes;Formal specifications;Computer aided software engineering","","2","","","IEEE","5 Mar 2007","","","IEEE","IEEE Magazines"
"Software engineering master's program and Green IT: The design of the software Engineering Sustainability course","I. Turkin; Y. Vykhodets","Software Engineering and Business Faculty, National Aerospace University “Kharkiv Aviation Institute”, Kharkiv, Ukraine; Software Engineering and Business Faculty, National Aerospace University “Kharkiv Aviation Institute”, Kharkiv, Ukraine","2018 IEEE 9th International Conference on Dependable Systems, Services and Technologies (DESSERT)","12 Jul 2018","2018","","","662","666","The paper presents an academic case where the authors describe elaborated design of the course “Software Engineering Sustainability” to introduce the sustainable concept into educational programs for software engineers. Presented course design considers requirements of employers, maintains the successful experience of national higher education and professional industry standards, and conforms to the European Union e-Competence Framework. The authors present the design of the course with a description of the course content and visible positioning Green Information and Communication Technology (ICT). The course has been being delivered by the first author at National Aerospace University “Kharkiv Aviation Institute”.","","978-1-5386-5903-8","10.1109/DESSERT.2018.8409215","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8409215","course design;curriculum;sustainability;green computing;software engineering;descriptor;competence;standards;education harmonization","Sustainable development;Software;Software engineering;Ecosystems;Standards;Education;Industries","","6","","18","IEEE","12 Jul 2018","","","IEEE","IEEE Conferences"
"Software Engineering: The Legacy of Barry W. Boehm","R. W. Selby","University of Southern California, Los Angeles, CA, USA",29th International Conference on Software Engineering (ICSE'07 Companion),"4 Jun 2007","2007","","","37","38","We are convening a symposium to honor Barry W. Boehm's lifetime contributions to the Software Engineering community and co-locating this event with the 29th International Conference on Software Engineering.","","0-7695-2892-9","10.1109/ICSECOMPANION.2007.67","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4222670","","Software engineering;Capability maturity model;Software quality;Programming;Engineering management;Books;Spirals;Risk management;Software systems;Government","","4","","1","IEEE","4 Jun 2007","","","IEEE","IEEE Conferences"
"Gamification in Software Engineering: A literature Review","C. F. Barreto; C. França","CESAR School, Recife, Brazil; Departamento de Computação, Universidade Federal Rural de Pernambuco, Recife, Brazil",2021 IEEE/ACM 13th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"28 Jun 2021","2021","","","105","108","Given the impact of people motivation on software engineering, it is no surprise to see that gamification techniques have been studied and applied to the field. A relevant number of studies have been reported on the subject, and different understandings of the technique are around. However, it is not clear what gamification brings to industrial software development settings. This paper intends to map the state of the art on the use and understanding of gamification in industrial software development. We aim to review the definitions of gamification adopted in software engineering studies, identify the elements of games that are used to motivate software engineers, and map the specific areas of software engineering that have been addressed so far. For that end, we conducted a mixed method literature review, covering 130 studies. From such review, we found that (1) researchers in the field tend towards a strict view of gamification, (2) the practical results of gamification are unclear and polemic, and (3) this research area has still much to improve.","2574-1837","978-1-6654-1409-8","10.1109/CHASE52884.2021.00020","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9463296","Motivation;engagement;gamification;software engineering","Bibliographies;Conferences;Games;Software;Software engineering","","13","","39","IEEE","28 Jun 2021","","","IEEE","IEEE Conferences"
"Teaching Method Practicing on Embedded Software Engineering Curriculum","Y. Zhang; Y. Tian; L. Zhu; H. Zuo","School of Computer Software, Tianjin University, Tianjin, China; School of Computer Software, Tianjin University, Tianjin, China; School of Computer Software, Tianjin University, Tianjin, China; School of Computer Software, Tianjin University, Tianjin, China","2011IEEE 10th International Conference on Trust, Security and Privacy in Computing and Communications","2 Jan 2012","2011","","","1323","1327","Serving as a part of the engineering education, curriculum reform plays an important role in higher education reforms. This paper presents the reform practice on curriculum of ""Intel Atom Platform Embedded Application and Practice"" and ""Software Test Techniques"". It deeply discussed specific measures in the Embedded Software Engineering Curriculum by referencing a variety of teaching reform methods. On summarizing the feedback information from undergraduates of grade 2008 and 2009, the outcome is well meet the expectation, therefore, the approach can be considered as a new attempt for the teaching reform on practical curriculum of software engineering.","2324-9013","978-1-4577-2135-9","10.1109/TrustCom.2011.181","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6120975","Teaching Method;Embedded Software;Engineering Curriculum;CDIO","Education;Programming;Embedded systems;Software testing;Software engineering","","","","10","IEEE","2 Jan 2012","","","IEEE","IEEE Conferences"
"A Winning Team - What Personality Has To Do With Software Engineering","E. Weilemann","Faculty of Information Management University of Applied Sciences Neu-Ulm Neu-Ulm, Germany",2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"19 Aug 2019","2019","","","252","253","Nowadays, software is developed in teams. But how should teams be put together in order to build a high quality team? This study shows how the different roles in a software development team - project leader, requirements engineer, architect/ designer, and developer/tester/maintainer - should be staffed with respect to HEXACO personality traits in order to form a high quality team. We conducted a qualitative analysis by leading 12 semi-structured interviews with interviewees who work in the software engineering sector and have working experience of at least 2 years. We followed a Grounded Theory approach to derive personality traits and link them to software engineering roles. Our study shows that different personality profiles are indeed beneficial for the different roles. A project leader e.g. should have a more pronounced Agreeableness domain whereas the Extraversion domain should be pronounced with a requirements engineer. Our results should support the composition of software engineering teams with the aim to successfully build high quality teams.","2574-1934","978-1-7281-1764-5","10.1109/ICSE-Companion.2019.00100","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8802748","Engineering Management;Business Management;Human Resource Management;Software Development Management;Software Engineering Team;Personality;HEXACO","Software;Interviews;Software engineering;Creativity;Teamwork;Security","","5","","12","IEEE","19 Aug 2019","","","IEEE","IEEE Conferences"
"Teaching Software Engineering Course with Cooperative Learning Method: A Pilot Study","S. Basri; A. Sarlan; N. A. Aziz; A. S. Ahmad Zahiri","Department of Computer and Information Sciences, Universiti Teknologi PETRONAS, Perak, Seri Iskandar, Malaysia; Department of Computer and Information Sciences, Universiti Teknologi PETRONAS, Perak, Seri Iskandar, Malaysia; Department of Computer and Information Sciences, Universiti Teknologi PETRONAS, Perak, Seri Iskandar, Malaysia; Department of Computer and Information Sciences, Universiti Teknologi PETRONAS, Perak, Seri Iskandar, Malaysia",2017 7th World Engineering Education Forum (WEEF),"20 Sep 2018","2017","","","251","256","This paper focuses on presenting the initial results of our educational research conducted in teaching software engineering (SE) related courses. SE related courses could be challenging courses to teach and learn at the undergraduate level. Difficulties in understanding and visualizing the various concepts and theories in SE especially in software system modelling among students must be considered as major issues. This pilot project aims at integrating Cooperative Learning Method (CLM) to enhance students' ability to understand, analyze and visualize organization's business problems, system analysis, and system modeling. Requirement Engineering course has been selected for the pilot project experiment and several CLM approaches have been integrated into its teaching and learning pedagogy throughout the semester. Reflection survey has been conducted to gather students' reflection and feedback on the CLMs integration in teaching and learning SE. Significant results were found that integration of CLMs into teaching and learning pedagogy able to assist students enhancing understanding and visualizing organization's business problems, software system analysis and software system modeling.","","978-1-5386-1523-2","10.1109/WEEF.2017.8467065","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8467065","Software Engineering;Cooperative Learning Method;CLM;Survey;visualization;software system analysis;and modeling","Software;Visualization;Unified modeling language;Learning systems;Programming;Engineering education","","2","","21","IEEE","20 Sep 2018","","","IEEE","IEEE Conferences"
"Teaching Software Engineering for Al-Enabled Systems","C. Kästner; E. Kang",Carnegie Mellon University; Carnegie Mellon University,2020 IEEE/ACM 42nd International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"28 Dec 2020","2020","","","45","48","Software engineers have significant expertise to offer when building intelligent systems, drawing on decades of experience and methods for building systems that are scalable, responsive and robust, even when built on unreliable components. Systems with artificial-intelligence or machine-learning (ML) components raise new challenges and require careful engineering. We designed a new course to teach software-engineering skills to students with a background in ML. We specifically go beyond traditional ML courses that teach modeling techniques under artificial conditions and focus, in lecture and assignments, on realism with large and changing datasets, robust and evolvable infrastructure, and purposeful requirements engineering that considers ethics and fairness as well. We describe the course and our infrastructure and share experience and all material from teaching the course for the first time.","","978-1-4503-7124-7","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9291899","software engineering;machine learning;education","Artificial intelligence;Software;Software engineering;Data models;Motion pictures;Buildings;Testing","","1","","19","","28 Dec 2020","","","IEEE","IEEE Conferences"
"CORONET: an Australian software engineering experience in collaborative research with the European Community","J. D'Ambra; R. Jeffery; D. Pfahl","Centre for Advanced Software Engineering Research, University of New South Wales, Australia; Centre for Advanced Software Engineering Research, University of New South Wales, Australia; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany",Proceedings 2001 Australian Software Engineering Conference,"7 Aug 2002","2001","","","255","261","The purpose of the paper is two fold. Firstly, to inform the Australian software engineering community of the European Fifth Framework research structure and the involvement of an Australian partner in a fifth framework project, CORONET. Secondly to describe the CORONET project. CORONET develops a new approach for software engineering training in knowledge networks. CORONET aims to support on-demand, collaborative, life-long learning by supporting knowledge generation in corporate knowledge networks, accompanied by pedagogically sound improvements of the underlying learning process. By relating the experience of CAESAR's involvement in the CORONET project, the paper aims to educate the software engineering community in opportunities that exist for collaboration with European research projects as well as inform the community on how such projects are managed.","1530-0803","0-7695-1254-2","10.1109/ASWEC.2001.948519","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=948519","","Australia;Software engineering;Collaborative software;Research and development;Collaboration;Collaborative work;Management training;Acoustical engineering;Knowledge engineering;Project management","","1","","6","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Technical Brief on Software Engineering for FMware","D. Lin; F. R. Cogo; G. K. Rajbahadur; A. E. Hassan","Centre for Software Excellence, Huawei Canada Kingston, Ontario, Canada; Centre for Software Excellence, Huawei Canada Kingston, Ontario, Canada; Centre for Software Excellence, Huawei Canada Kingston, Ontario, Canada; School of Computing, Queen's University Kingston, Ontario, Canada",2024 IEEE/ACM 46th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"20 Jun 2024","2024","","","431","433","Foundation Models (FM) like GPT-4 have given rise to FMware, FM-powered applications, which represent a new generation of software that is developed with new roles, assets, and paradigms. FMware has been widely adopted in both software engineering (SE) research (e.g., test generation) and industrial products (e.g., GitHub copilot), despite the numerous challenges introduced by the stochastic nature of FMs. Such challenges jeopardize the quality and trustworthiness of FMware. In our technical brief, we will present the latest research and industrial practices in engineering FMware, and discuss the SE challenges and opportunities facing both researchers and practitioners in the FMware era. The brief is unique in that it is presented from an SE point of view, not an AI point-of-view ensuring that attendees are not bogged into complex mathematical and AI details unless they are essential for contextualizing the SE challenges and opportunities.","2574-1934","979-8-4007-0502-1","10.1145/3639478.3643062","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10554945","Foundation Model;FMware;Software engineering for FMware","Frequency modulation;Stochastic processes;Software;Mathematical models;Test pattern generators;Artificial intelligence;Software engineering","","","","0","","20 Jun 2024","","","IEEE","IEEE Conferences"
"Influence of learning analytics in software engineering education","N. Pratheesh; T. Devi","Department of Computer Applications, School of Computer Science and Engineering, Bharathiar University, Coimbatore, India; Department of Computer Applications, School of Computer Science and Engineering, Bharathiar University, Coimbatore, India","2013 IEEE International Conference ON Emerging Trends in Computing, Communication and Nanotechnology (ICECCN)","13 Jun 2013","2013","","","712","716","Software is an important aspect in the modern world because it uses by everyone and everywhere. Therefore software engineering education gets more important in the computer science curricula but it has lapses to produce good software engineers to the industries requirements. Learning analytics helps the students to improve their learning activities. This was analyzed among the software engineering students how the learning style influences in gathering knowledge. Forty six questionnaires were distributed to the first year MCA students in the Department of Computer Applications, Bharathiar University, Coimbatore, India for this study.","","978-1-4673-5036-5","10.1109/ICE-CCN.2013.6528597","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6528597","Software Engineering Education;Learning Analytics;Social Learning Analytics;Learning Style;Software Engineering","Software engineering;Software;Industries;Knowledge engineering;Educational institutions;Computer science","","","","24","IEEE","13 Jun 2013","","","IEEE","IEEE Conferences"
"POSITION PAPER: Documentation Generation from Annotated Source Code of Scientific Software","M. Moser; J. Pichler","Software Competence Center Hagenberg, Hagenberg, Austria; Software Competence Center Hagenberg, Hagenberg, Austria",2016 IEEE/ACM International Workshop on Software Engineering for Science (SE4Science),"16 Mar 2017","2016","","","12","15","There is a widespread agreement in the scientific computing community that documentation positively influences software quality and thereby helps to mitigate the risk of project failure. We accompanied the introduction of a documentation generator within an industrial scientific computing project in order to automatically extract documentation from annotated C++ source code. Over a period of one year we extended and adopted the existing documentation generator RbG and performed some initial experiments to find out whether documentation generators can increment understandability and overall software quality of a scientific software system. However, although technically mature and adequate for the intended documentation tasks RbG was finally not used and the required documentation was created manually. In this paper we report on the adaption of the RbG, why it failed in this case study but potentially could improve software productivity and quality of scientific software.","","978-1-4503-4167-7","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7878377","software engineering tools;documentation generator;reverse engineering;scientific software","Documentation;Generators;C++ languages;Skeleton;Software engineering;Software systems","","","","8","","16 Mar 2017","","","IEEE","IEEE Conferences"
"Helping End-User Programmers ""Engineer"" Software: an Opportunity for Empirical Researchers","G. Rothermel","Department of Computer Science and Engineering, University of Nebraska, Lincolnshire, USA",First International Symposium on Empirical Software Engineering and Measurement (ESEM 2007),"15 Oct 2007","2007","","","9","10","While much of the software that people depend on is written by professional software engineers, increasingly, important applications are being created by non-professional (end-user) programmers. Using tools such as spreadsheet environments and web authoring tools, these programmers are creating software that is being used to support significant activities and inform decisions. Such software needs to work dependably and increase user productivity, but evidence shows that it frequently does not. For example, studies have shown that a large percentage of the spreadsheets created by end-users contain faults, and data suggests that time spent maintaining web macros may actually impede their users' overall efforts. In recent years researchers have begun to address this problem, considering various approaches to adapting software engineering techniques to the realm of end-user programming. For example, researchers have sought ways to help end users test and debug spreadsheets, and to increase productivity in web macros by combining them with various software engineering devices. To make progress in this area, researchers are turning to empirical studies, in order to investigate new approaches, understand the factors that influence them, and better understand issues related to end user programmers themselves. In this talk I will present recent work being done in end-user software engineering, with a particular focus on the state of the art of empirical research in the area. I will show that there is a pressing need for further empirical work in this context, and that there are interesting questions that researchers from the ESEM community could help to answer. For example, how are end-users different from programmers, and how does that affect how we conduct the research? (Are there assumptions we make when doing studies with programmers that do not hold with end-users? What are the threats to validity when, say, we use CS students as subjects in end-user studies?) As another example, how are end-users different from each other and how does that affect study results? (The end-user community is much more diverse than the professional programmer community. What are the important context variables one needs to capture when studying them?) A concerted effort by the ESEM community on such issues could result in a substantial impact on society as a whole, and on the everyday lives of many people.","1949-3789","978-0-7695-2886-1","10.1109/ESEM.2007.42","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4343727","","Programming profession;Software engineering;Computer science;Software testing;Software quality;Application software;Productivity;Software maintenance;Computer aided manufacturing;Software measurement","","","","","IEEE","15 Oct 2007","","","IEEE","IEEE Conferences"
"Improving Contextual Skills in Global Software Engineering: A Corporate Training Experience","R. Prikladnicki; L. Pilatti","PUCRS, Brazil; PUCRS, Brazil",2008 IEEE International Conference on Global Software Engineering,"3 Oct 2008","2008","","","239","243","Global software engineering is a reality in today's software development industry. With the fast development of this area, it is also necessary to better prepare software development professionals to develop software when located in distributed settings. In this paper, we present an experience of corporate training initiatives related to distributed development in a multinational company with global operations. We have interviewed and collected qualitative data from 39 employees aiming at the identification of challenges and the improvement of their distributed development skills. The results show an interesting profile indicating the existence of a distance between technical and non-technical knowledge, mainly in the beginning of a globally distributed operation. Based on these profiles, we present recommendations to reduce the distance and to manage risks associated with the lack of skill in this scenario.","2329-6313","978-0-7695-3280-6","10.1109/ICGSE.2008.35","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4638674","Training;Global software engineering;technical skill;non-technical skill","Training;Software;Organizations;Software engineering;Companies;Engines;Programming","","6","","16","IEEE","3 Oct 2008","","","IEEE","IEEE Conferences"
"Researching Cooperation and Communication in Continuous Software Engineering","Y. Dittrich; J. Nørbjerg; P. Tell; L. Bendix","Dep. of Computer Science, IT University of Copenhagen, Copenhagen, Denmark; Dep. of Digitalization, Copenhagen Business School, Copenhagen, Denmark; Dep. of Computer Science, IT University of Copenhagen, Copenhagen, Denmark; Dep. of Computer Science, Lund University, Lund, Sweden",2018 IEEE/ACM 11th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"26 Aug 2018","2018","","","87","90","Continuous Software Engineering (CSE)-continuous development and deployment of software-and DevOps-the close cooperation or integration of operations and software development-is about to change how software is developed. Together with the tighter integration of development and operations also with usage this will change coordination and collaboration both between IT professionals and between developers and users. In this short paper, we discuss the CHASE dimension of three core research themes that begin to crystallize in literature. This position paper is intended as a 'call to arms' for the CHASE community to study CSE.","2574-1837","978-1-4503-5725-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445543","Continuous Software Engineering;DevOps","Software;Software engineering;Companies;Computer architecture;Tools","","","1","29","","26 Aug 2018","","","IEEE","IEEE Conferences"
"Software engineering education via the use of corporate-sponsored projects: A panel discussion of the approaches, benefits, and challenges for industry-academic collaboration","L. Werner; G. Kuenning; M. Sebern; J. Vallino; W. E. Wong","Department of Computer Science, Senior Design Projects Program, Jack Baskin School of Engineering, University of California, Santa Cruz, USA; Department of Computer Science Clinic Program, Harvey Mudd College, Claremont, CA, USA; Department of Software Engineering Senior Projects Program, Rochester Institute of Technology, Henrietta, NY, USA; Department of Electrical Engineering and Computer Science, Software Engineering Program, Milwaukee School of Engineering, Milwaukee, WI, USA; Department of Computer Science, Software Engineering Project, University of Texas, Dallas, Richardson, TX, USA",2013 26th International Conference on Software Engineering Education and Training (CSEE&T),"12 Sep 2013","2013","","","346","350","In this panel, we will address questions regarding the development and execution of one type of industry-academic collaboration - corporate-sponsored projects. As representatives of programs at both public and private institutions, we will address a set of questions related to these programs. We have prepared an initial list that will be augmented with questions submitted and voted on by conference participants in advance of the session. After we have presented our prepared responses, the balance of the session will be dedicated to open discussion with audience members.","2377-570X","978-1-4673-5140-9","10.1109/CSEET.2013.6595276","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6595276","","Educational institutions;Software engineering;Computer science;Industries;Software;Collaboration","","2","","","IEEE","12 Sep 2013","","","IEEE","IEEE Conferences"
"Beliefs, Practices, and Personalities of Software Engineers: A Survey in a Large Software Company","E. K. Smith; C. Bird; T. Zimmermann","School of Computer Science, University of Massachusetts Amherst, Washington, USA; Microsoft Research, Redmond, Washington, USA; School of Computer Science, University of Massachusetts Amherst, Washington, USA",2016 IEEE/ACM Cooperative and Human Aspects of Software Engineering (CHASE),"9 Jan 2017","2016","","","15","18","In this paper we present the results from a survey about the beliefs, practices, and personalities of software engineers in a large software company. The survey received 797 responses. We report statistics about beliefs of software engineers, their work practices, as well as differences in those with respect to personality traits.For example, we observed no personality differences between developers and testers; managers were conscientious and more extraverted. We observed several differences for engineers who are listening to music and for engineers who have built a tool.We also observed that engineers who agree with the statement “Agile development is awesome” were more extroverted and less neurotic.","","978-1-4503-4155-4","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7809477","personality;beliefs;practices;software engineering","Software;Companies;Software engineering;Music;Computer science;Sea measurements;Games","","1","","22","","9 Jan 2017","","","IEEE","IEEE Conferences"
"3/sup rd/ international workshop on adoption-centric software engineering ACSE 2003","R. Balzer; J. Jahnke; M. Litoiu; H. A. Muller; D. B. Smith; M. A. Storey; S. R. Tilley; K. Wong","Teknowledge Corporation, USA; University of Victoria, Canada; IBM Canada Limited, Canada; University of Victoria, Canada; Carnegie Mellon Software Engineering Institute, USA; University of Victoria, Canada; Florida Institute of Technology, USA; University of Alberta, Canada","25th International Conference on Software Engineering, 2003. Proceedings.","28 May 2003","2003","","","789","790","The key objective of this workshop is to explore innovative approaches to the adoption of software engineering tools and practices-in particular by embedding them in extensions of Commercial Off-The-Shelf (COTS) software products and/or middleware technologies. The workshop aims to advance the understanding and evaluation of adoption of software engineering tools and practices by bringing together researchers and practitioners who investigate novel solutions to software engineering adoption issues.","0270-5257","0-7695-1877-X","10.1109/ICSE.2003.1201287","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1201287","","Software engineering","","3","","10","IEEE","28 May 2003","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE International Standard - Systems and software engineering -- Life cycle processes -- Requirements engineering - Redline","",,ISO/IEC/IEEE 29148:2018(E) - Redline,"20 Sep 2021","2018","","","1","209","This document contains provisions for the processes and products related to the engineering of requirements for systems and software products and services throughout the life cycle. It defines the construct of a good requirement, provides attributes and characteristics of requirements, and discusses the iterative and recursive application of requirements processes throughout the life cycle. This document provides additional guidance in the application of requirements engineering and management processes for requirements-related activities in ISO/IEC/IEEE 12207 and ISO/IEC/IEEE 15288. Information items applicable to the engineering of requirements and their content are defined. The content of this document can be added to the existing set of requirements-related life cycle processes defined by ISO/IEC/IEEE 12207 or ISO/IEC/IEEE 15288, or can be used independently.","","978-1-5044-7963-9","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9541319","requirement;requirement characteristics;concept of operations;ConOps;operational concept;OpsCon;prototyping;software requirements specification;system;system requirements specification;SyRS","IEEE Standards;IEC Standards;ISO Standards;Software engineering;Requirements engineering;Productivity","","","","","","20 Sep 2021","","","IEEE","IEEE Standards"
"The Role of Ethnographic Studies in Empirical Software Engineering","H. Sharp; Y. Dittrich; C. R. B. de Souza","Open University, Walton Hall, Milton Keynes, UK; Software and Systems Section, Rued Langgaards Vej 7, Copenhagen S, Denmark; Vale Institute of Technology and the Federal University of Pará, 955, Belém, PA, Brazil",IEEE Transactions on Software Engineering,"11 Aug 2016","2016","42","8","786","804","Ethnography is a qualitative research method used to study people and cultures. It is largely adopted in disciplines outside software engineering, including different areas of computer science. Ethnography can provide an in-depth understanding of the socio-technological realities surrounding everyday software development practice, i.e., it can help to uncover not only what practitioners do, but also why they do it. Despite its potential, ethnography has not been widely adopted by empirical software engineering researchers, and receives little attention in the related literature. The main goal of this paper is to explain how empirical software engineering researchers would benefit from adopting ethnography. This is achieved by explicating four roles that ethnography can play in furthering the goals of empirical software engineering: to strengthen investigations into the social and human aspects of software engineering; to inform the design of software engineering tools; to improve method and process development; and to inform research programmes. This article introduces ethnography, explains its origin, context, strengths and weaknesses, and presents a set of dimensions that position ethnography as a useful and usable approach to empirical software engineering research. Throughout the paper, relevant examples of ethnographic studies of software practice are used to illustrate the points being made.","1939-3520","","10.1109/TSE.2016.2519887","CNPq(grant numbers:440880/2013-0,310468/2014-0); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7387744","Design tools and techniques;human factors in software design;software engineering process;computer-supported collaborative work","Software engineering;Software;Context;Sociology;Electronic mail;Computer science;Guidelines","","74","","135","IEEE","20 Jan 2016","","","IEEE","IEEE Journals"
"Critical Decisions in Software Development: Updating the State of the Practice","M. A. Cusumano; A. MacCormack; C. F. Kemerer; W. Crandall","Massachusetts Institute of Technology, USA; Massachusetts Institute of Technology, USA; University of Pittsburgh, USA; Hewlett Packard Company, USA",IEEE Software,"25 Aug 2009","2009","26","5","84","87","This article focuses on how to choose the ""right"" software development process, how to structure global software design chains, how to manage the interaction of project structure and software design, and how to balance innovation and efficiency in a software business.","1937-4194","","10.1109/MS.2009.124","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5222801","software development process;project management;software design;software business;software engineering","Uncertainty;Europe;Software prototyping;Software development management;Productivity;Radio access networks;Testing;Programming profession;Software engineering;Process design","","16","","9","IEEE","25 Aug 2009","","","IEEE","IEEE Magazines"
"Software Component Quality Characteristics Model for Component Based Software Engineering","A. Tiwari; P. S. Chakraborty","Department of Computer Science and Engineering, SRM University, India; Department of Computer Science and Engineering, SRM University, India",2015 IEEE International Conference on Computational Intelligence & Communication Technology,"2 Apr 2015","2015","","","47","51","In Component Based Development, applications are built from existing components, primarily by assembling and replacing interoperable parts. Thus a single component can be reused in many applications, giving a faster development of applications with reduced cost and high quality as components are reused in various applications. Software component has been developed lively. Thus they are likely to be more reliable than software developed abolitions. The reason is that these components are tested under varieties of situations before being used in the application (s). As we move from traditional software engineering to component-based software engineering, we should resolve many technical and non-technical issues. One of the major and very important issues is quality of the software components. Although many researchers already proposed various kind of quality metrics and models for traditional software but the less information is provided about components of software. The main aim of this paper is to find out various quality aspects of software components. Also determine the relationship between components quality characteristics and sub characteristics. However, the measurement of software component quality is relatively less researched against conventional software quality in practice.","","978-1-4799-6023-1","10.1109/CICT.2015.40","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7078665","base software engineering;Quality Characteristics and Sub-characteristics","Measurement;Software engineering;Software quality;Object oriented modeling;Reliability;Usability","","4","","17","IEEE","2 Apr 2015","","","IEEE","IEEE Conferences"
"A Novel Coupling Pattern in Computational Science and Engineering Software","S. Kamble; X. Jin; N. Niu; M. Simon","Department of Electrical Engineering and Computing Systems, University of Cincinnati, Cincinnati, Ohio, USA; Department of Electrical Engineering and Computing Systems, University of Cincinnati, Cincinnati, Ohio, USA; Department of Electrical Engineering and Computing Systems, University of Cincinnati, Cincinnati, Ohio, USA; Water Supply Water Resources Division, EPA Office of Research and Development, Cincinnati, Ohio, USA",2017 IEEE/ACM 12th International Workshop on Software Engineering for Science (SE4Science),"3 Jul 2017","2017","","","9","12","Computational science and engineering (CSE) software is written by experts of certain area(s). Due to the specialization, existing CSE software may need to integrate other CSE software systems developed by different groups of experts. The coupling problem is one of the challenges for software integration. Here, the coupling we study means the issues involved in integrating 2 legacy codes together, but not the multiphysics coupling where distinct codes are combined in order to model particular phenomena. In this paper, we identify a complex coupling pattern when trying to integrate two CSE software systems. We describe the coupling pattern in detail and show the complexity of resolving such kind of coupling patterns. Our work contributes to area of CSE software since there were few previous studies addressing the coupling problem in CSE domain. Our work will further inspire future research in solving the coupling problem during CSE software integration.","","978-1-5386-2791-4","10.1109/SE4Science.2017.10","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7964306","Computational science and engineering software;software integration;coupling pattern","Couplings;Software systems;Calibration;Semantics;Computational modeling;Parameter estimation","","9","","13","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"SEER: charting a roadmap for software engineering education","D. J. Bagert",Rose-Hulman Institute of Technology,"17th Conference on Software Engineering Education and Training, 2004. Proceedings.","30 Mar 2004","2004","","","158","161","This past decade has seen a number of innovative, pioneering projects related to the development of software engineering both as a profession and as an academic discipline. However, most of these projects either are complete or projected for completion by 2004, and it is unclear as to what the software engineering education community should be doing next to build on this work. This half-day workshop will bring together stakeholders in software engineering education (both academic and industry) to discuss this topic and to outline a Software Engineering Education Roadmap (SEER) which could potentially provide needed direction for this community over the next several years. A website and email list for SEER was created in order to start the discussion before the workshop, will be used both to disseminate the roadmap formulated by the participants and continue the dialog after it.","1093-0175","0-7695-2099-5","10.1109/CSEE.2004.1276528","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1276528","","Software engineering;Accreditation;Knowledge engineering;Educational programs;Licenses;Guidelines;Computer science education;Computer industry;Electronic mail;Ethics","","2","","13","IEEE","30 Mar 2004","","","IEEE","IEEE Conferences"
"Tutorial on Software Engineering Education in Co-Located Multi-User Eye-Tracking-Environments","H. Gruber; C. Wolff; J. Mottok; A. Bazo; F. Hauser; S. Schreistetter","Department of Educational Science, University of Regensburg, Regensburg, Germany; Media Informatics Group, University of Regensburg, Regensburg, Germany; Laboratory for Safe and Secure Systems, OTH Regensburg, Regensburg, Germany; Media Informatics Group, University of Regensburg, Regensburg, Germany; Laboratory for Safe and Secure Systems, OTH Regensburg, Regensburg, Germany; Laboratory for Safe and Secure Systems, OTH Regensburg, Regensburg, Germany",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","2","We briefly describe a tutorial on the application of Eye-Tracking technology for Software Engineering Education. We will showcase our setup of a large-scale Eye-Tracking-Classroom and its usage for real-time improvement of traditional learning scenarios in Software Engineering Education. We will focus on the integration of gaze data into modern integrated development environments (IDEs) and demonstrate a complete workflow for its usage in co-located multi-user Eye-Tracking-Environments.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206170","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206170","eye-tracking;software engineering education;multi-user eye tracking;real-time learning scenarios","Software engineering;Tutorials;Programming profession;Media;Informatics","","","","0","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"The Software Engineering Silver Bullet Conundrum","D. M. Berry","Cheriton School of Computer Science, University of Waterloo",IEEE Software,"22 Feb 2008","2008","25","2","18","19","Fred Brooks argued in 1986 that, for various reasons, no software engineering silver bullet would be found in the next decade. I argue now that the main reason that there can be no software engineering silver bullet is that as soon as one is produced, we software engineers move on almost immediately to solve even harder problems for which the silver bullet does not help much. That a silver bullet quickly ceases to be silver is the basic conundrum of software engineering silver bullets.","1937-4194","","10.1109/MS.2008.51","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4455625","silver bullet;essence;accidents;pain of software development;human ambition;requirements change;software engineering methods","Software engineering;Silver;Pain;Formal specifications;Productivity;Software testing;Accidents;Writing;Technology management;Buildings","","4","","5","IEEE","22 Feb 2008","","","IEEE","IEEE Magazines"
"Helping Software Engineering Students Analyzing Their Performance Data: Tool Support in an Educational Environment","M. Raza; J. P. Faria; R. Salazar","Faculty of Engineering, Univ. of Porto, Portugal; Faculty of Engineering, Univ. of Porto, Portugal; ógico de Monterrey, Av. Eugenio Garza Sada 2501 Sur Col., Monterrey, Nuevo Léon, Mexico",2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C),"3 Jul 2017","2017","","","241","243","Process PAIR is a novel tool for automating the performance analysis of software developers. Based on a performance model calibrated from the performance data of many developers, it automatically identifies and ranks potential performance problems and root causes of individual developers. We present the results of a controlled experiment involving 61 software engineering master students, half of whom used ProcessPAIR in a performance analysis assignment. The results show significant benefits in terms of students' satisfaction (average score of 4.78 out of 5 for ProcessPAIR users, against 3.81 for other users), quality of the analysis outcomes (average grades achieved of 88.1 out of 100 for ProcessPAIR users, against 82.5 for other users), and time required to do the analysis (average of 252 min for ProcessPAIR users, against 262 min for other users, but with much room for improvement).","","978-1-5386-1589-8","10.1109/ICSE-C.2017.61","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7965317","performance analysis;software engineering education;controlled experiment;Personal Software Process","Software;Tools;Performance analysis;Software engineering;Process control;Benchmark testing;Data models","","5","","9","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"Integration and Reliability Testing for Component-Based Software Systems","F. Saglietti; F. Pinte; S. Söhnlein","Chair of Software Engineering, University of Erlangen Nuremberg, Erlangen, Germany; Chair of Software Engineering, University of Erlangen Nuremberg, Erlangen, Germany; Chair of Software Engineering, University of Erlangen Nuremberg, Erlangen, Germany",2009 35th Euromicro Conference on Software Engineering and Advanced Applications,"8 Dec 2009","2009","","","368","374","Software-based applications with high reliability demands require extensive verification and validation activities capable of providing significant evidence for the achievement of the reliability degree required. For the purpose of exposing interaction faults, extensive integration testing phases are recommended. In order to support them the article proposes appropriate interaction coverage concepts and automatic test case generation techniques. With regard to reliability assessment, the article presents an approach to enhance the sharpness of system reliability statements based on the integration of statistical samples concerning component testing resp. operating experience.","2376-9505","978-0-7695-3784-9","10.1109/SEAA.2009.76","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5349838","Software;Component;Integration;Testing;Coverage;Reliability;Fault;Failure","Software testing;System testing;Software systems;Application software;Software engineering;Automatic testing;Reliability;Software safety;Embedded software;Software standards","","3","1","24","IEEE","8 Dec 2009","","","IEEE","IEEE Conferences"
"GloSE-Lab: Teaching Global Software Engineering","C. Deiters; C. Herrmann; R. Hildebrandt; E. Knauss; M. Kuhrmann; A. Rausch; B. Rumpe; K. Schneider","Department of Informatics-Software Systems Engineering, Clausthal University of Technology, Germany; Software Engineering, RWTH Aachen University, Germany; Software Engineering, RWTH Aachen University, Germany; Software Engineering Group, Leibniz Universität Hannover, Germany; Institut für Informatik I4, Technische Universität München, Garching, Germany; Department of Informatics-Software Systems Engineering, Clausthal University of Technology, Germany; Software Engineering, RWTH Aachen University, Germany; Software Engineering Group, Leibniz Universität Hannover, Germany",2011 IEEE Sixth International Conference on Global Software Engineering,"31 Oct 2011","2011","","","156","160","In practice, more and more software development projects are distributed, ranging from partly distributed teams to global projects with each stakeholder located differently. Teaching actual practice in software engineering at university needs a proper mixture of theory and practice. But setting up practical exercises for global software engineering is hard, because students have to cooperate across different locations and situations reflecting the teaching intentions have to be provoked explicitly. This paper presents the concepts behind our common teaching environment for global software engineering - the GloSELab. It describes the experiences on setting up a distributed course and reports our teaching intentions based on each universities main focus: project management, requirements engineering & quality assurance, architecture, and implementation. Furthermore, we discuss our setup - a stage-gate process, where each location takes care of a different phase - and report occurred problems and how they supported or interfered with our teaching intentions.","2329-6313","978-0-7695-4503-5","10.1109/ICGSE.2011.26","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6063162","global software engineering;teaching;GloSE-Lab","Educational institutions;Software engineering;Project management;Software;Computer architecture;Programming","","21","","5","IEEE","31 Oct 2011","","","IEEE","IEEE Conferences"
"Performance-oriented design model of the content & style of Software Engineering textbook for undergraduate computer software related majors","S. Wang; X. Zhang","School of Software, Nanyang Institute of Technology, Nanyang, China; School of Software, Nanyang Institute of Technology, Nanyang, China",2011 IEEE 3rd International Conference on Communication Software and Networks,"8 Sep 2011","2011","","","152","155","Software Engineering is an important course for software related majors; yet it's also the most hated and most ""boring"" course among the students; teachers have difficulties in arousing the interest of their students, and there's hardly any doable practices that can be performed within the time/environmental limitation of the class. To address this issue, proposes a performance-oriented design model of the content & style of Software Engineering textbook for undergraduate software related majors; code of ethics, project management, documentation and coding skills, and career planning etc are added to the course content; quality-oriented education is integrated; various layout styles and decorative elements are imposed on the composing of the content. The newly designed textbook (Introduction to Quality-Oriented Software Engineering) has been proven to be more easily handled for teachers, and students have also shown paying more attention when in the class.","","978-1-61284-486-2","10.1109/ICCSN.2011.6013798","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6013798","Software Engineering;textbook writing;textbook style;quality oriented education;education reform;Quality-Oriented Software Engineering","Software;Lead;Real time systems;Engineering profession;Layout;Business;Educational institutions","","","","7","IEEE","8 Sep 2011","","","IEEE","IEEE Conferences"
"Professional certification of software engineers: the CSDP program","J. F. Naveda; S. B. Seidman","Rochester Institute of Technology, USA; New Jersey Institute of Technology, USA",IEEE Software,"6 Sep 2005","2005","22","5","73","77","There's a generally accepted maxim in the software industry: a well-managed software organization, staffed by qualified software engineering professionals in a mature software engineering environment, can repeatedly deliver software systems that meet their requirements, on time and within budget. But what does it mean to be professionally qualified? The IEEE Computer Society's Certified Software Development Professional program offers a solid path to certification that helps to establish software engineering professionals' credentials.","1937-4194","","10.1109/MS.2005.132","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1504666","Software engineering certification","Certification;Licenses;Software engineering;Professional societies;Project management;Programming;Solids;Computer industry;Software systems;Computer architecture","","1","","2","IEEE","6 Sep 2005","","","IEEE","IEEE Magazines"
"A Software Engineering Perspective for Accelerating Educational Technologies","S. Chimalakonda; K. V. Nori","Software Engineering Research Laboratory, International Institute of Information Technology Hyderabad, Hyderabad, India; Software Engineering Research Laboratory, International Institute of Information Technology Hyderabad, Hyderabad, India",2012 IEEE 12th International Conference on Advanced Learning Technologies,"16 Aug 2012","2012","","","754","755","How can Software Engineering support Technology for Education (T4E) community to enable even non- technical users to rapidly develop quality instructional software (Technology for X) with minimal effort? The main thrust of this tutorial is to unveil and uncover the potential of Software Engineering to address the above concerns from multiple dimensions. We briefly discuss the state-of-art in educational technologies (ET) from a software engineering (SE) perspective and formulate significant research challenges for both the communities. We emphasize that developing and maintaining educational technologies is not just content and infrastructure management but has tremendous scope to apply the ideas of software engineering. SE is further required to address the scale and variety challenges that are inherent in T4E domain. We discuss the applicability of SE life cycles (iterative, agile) in the context of T4E domain. We then present a case study of applying software engineering ideas to accelerate the development and maintenance of a family of eLearning Systems. Finally, we briefly outline an integrated approach of Lean, Agile and Software Product Lines (SPL) with potential research agenda for next 5-10 years and uncover this approach as a significant value add for the T4E community.","2161-377X","978-1-4673-1642-2","10.1109/ICALT.2012.214","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6268251","educational technologies;software engineering;software product lines;lean","Software engineering;Software;Tutorials;Acceleration;Communities;Electronic learning","","3","","12","IEEE","16 Aug 2012","","","IEEE","IEEE Conferences"
"Communication learning outcomes from software engineering professionals: A basis for teaching communication in the engineering curriculum","S. Ruff; M. Carter","Massachusetts Institute of Technology, USA; North Carolina State University, USA",2009 39th IEEE Frontiers in Education Conference,"8 Dec 2009","2009","","","1","6","It is widely acknowledged that employers tend to be dissatisfied with the communication skills of new engineering graduates, yet research into employers' expectations has not provided a sufficient foundation for incorporating workplace communication skills into the engineering curriculum. This study seeks to bridge that communication gap. Through focus groups and interviews with software engineers and managers, we have identified over 35 communication skills that comprise communication in the software engineering workplace, including a broad range of formal, interpersonal, professional, and team communication skills. These skills are presented in the form of outcomes that can be used by faculty not only to build a communication-rich program but also to enhance classroom instruction. Although the focus of this study is software engineering, most of the outcomes are applicable to other engineering programs.","2377-634X","978-1-4244-4715-2","10.1109/FIE.2009.5350442","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5350442","communication;computer science education;curriculum;education;engineering education;oral communication;outcomes;professional communication;software engineering;teamwork;writing","Software engineering;Employment;Engineering management;Design engineering;Bridges;Computer science education;Educational programs;Engineering education;Oral communication;Professional communication","","16","","26","IEEE","8 Dec 2009","","","IEEE","IEEE Conferences"
"Framework to analyze the relationship between agile software engineers’ emotions and their productivity","M. G. S. Ortega; G. B. Soto; R. R. P. Cinco; L. -F. Rodr&#x00ED;guez","Instituto Tecnol&#x00F3;gico de Sonora, Cd. Obreg&#x00F3;n, M&#x00E9;xico; Instituto Tecnol&#x00F3;gico de Sonora, Cd. Obreg&#x00F3;n, M&#x00E9;xico; Instituto Tecnol&#x00F3;gico de Sonora, Cd. Obreg&#x00F3;n, M&#x00E9;xico; Instituto Tecnol&#x00F3;gico de Sonora, Cd. Obreg&#x00F3;n, M&#x00E9;xico",2021 10th International Conference On Software Process Improvement (CIMPS),"23 Dec 2021","2021","","","66","69","Nowadays, software development companies use agile methodologies, which, unlike others methodologies, emphasize the software engineers’ interactions and their well-being rather than on rigid software development processes. Therefore, software engineers’ emotions should be considered. Software engineer’s emotions influence processes such as problem understanding and teamwork, processes associated with their productivity. Therefore, it is necessary to pay particular importance to the emotional and job well-being of software engineers. This article presents a preliminary framework to determine the relationship between software engineer’s productivity, their emotions, and their possible causes. Thus, actions could be suggested to help in regulating or improving software engineers’ emotions to increase their productivity or keep it at a desired level.","","978-1-7281-9515-5","10.1109/CIMPS54606.2021.9652780","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9652780","emotions;agile software engineering;developer productivity","Productivity;Companies;Software;Teamwork;Software engineering","","1","","0","IEEE","23 Dec 2021","","","IEEE","IEEE Conferences"
"Lean Software Startup Practices and Software Engineering Education","O. Cico","Department of Computer Science, Norwegian University of Science and Technology, Trondheim, Norway",2022 IEEE/ACM 44th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"13 Jun 2022","2022","","","281","285","In the modern economy, software drives innovation and economic growth. Studies show how software increasingly influences all industry sectors. Over the past 5 decades, software engineering has also changed significantly to advance the development of various types and scales of software products. Software engineering education plays an essential role in apprising students of software technologies, processes, and practices popular in industries. Furthermore, approaches to teaching software engineering are becoming more interdisciplinary and team-centered, comparable to startup contexts. In this PhD work, I want to answer the following research questions: (1) To what extent are software engineering trends present in software engineering education research? (2) What set of common software engineering practices employed in lean software startups is transferable to the software engineering education context? (3) What is the impact of lean startup practices on software engineering students and curricula? I utilize (1) a literature review, (2) mixed-methods approaches in gathering empirical evidence, and (3) design-based research. In the first phase of the research, I pinpoint the relevance of the lean startup in software engineering education through an extensive literature review. I gather empirical evidence on lean startup practices and assess their potential transferability to software engineering education during the second research phase. I demonstrate that the lean startup is an emerging trend in software engineering education research. I demonstrate that students can acquire soft, hard, and project management skills in a more realistic context in the introduction of the growth phase of lean startup practices throughout external course activities. I expect software engineering curricula to benefit from the model and framework that I propose and validate, thus facilitating lean startup practice transfer to software engineering curricula.","2574-1926","978-1-6654-9598-1","10.1145/3510454.3517065","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9793731","General and reference → Empirical studies;Social and professional topics → Software engineering education","Industries;Economics;Technological innovation;Bibliographies;Education;Project management;Market research","","","","26","","13 Jun 2022","","","IEEE","IEEE Conferences"
"Explainable AI for Software Engineering","C. K. Tantithamthavorn; J. Jiarpakdee","Monash University, Melbourne, Australia; Monash University, Melbourne, Australia",2021 36th IEEE/ACM International Conference on Automated Software Engineering (ASE),"20 Jan 2022","2021","","","1","2","The success of software engineering projects largely depends on complex decision-making. For example, which tasks should a developer do first, who should perform this task, is the software of high quality, is a software system reliable and resilient enough to deploy, etc. However, erroneous decision-making for these complex questions is costly in terms of money and reputation. Thus, Artificial Intelligence/Machine Learning (AI/ML) techniques have been widely used in software engineering for developing software analytics tools and techniques to improve decision-making, developer productivity, and software quality. However, the predictions of such AI/ML models for software engineering are still not practical (i.e., coarse-grained), not explainable, and not actionable. These concerns often hinder the adoption of AI/ML models in software engineering practices. In addition, many recent studies still focus on improving the accuracy, while a few of them focus on improving explainability. Are we moving in the right direction? How can we better improve the SE community (both research and education)?In this tutorial, we first provide a concise yet essential introduction to the most important aspects of Explainable AI and a hands-on tutorial of Explainable AI tools and techniques. Then, we introduce the fundamental knowledge of defect prediction (an example application of AI for Software Engineering). Finally, we demonstrate three successful case studies on how Explainable AI techniques can be used to address the aforementioned challenges by making the predictions of software defect prediction models more practical, explainable, and actionable. The materials are available at https://xai4se.github.io.","2643-1572","978-1-6654-0337-5","10.1109/ASE51524.2021.9678580","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9678580","Explainable AI;Software Engineering","Productivity;Decision making;Tutorials;Software quality;Learning (artificial intelligence);Predictive models;Software systems","","28","","17","IEEE","20 Jan 2022","","","IEEE","IEEE Conferences"
"Integrating computer security into the undergraduate software engineering classes: Lessons learned","S. Pancho-Festin; M. J. -a. Mendoza","Computer Security Group, University of the Philippines, Diliman, QC; Computer Security Group, University of the Philippines, Diliman, QC","2014 IEEE International Conference on Teaching, Assessment and Learning for Engineering (TALE)","19 Mar 2015","2014","","","395","397","We present our initial findings from our attempts to integrate computer security topics in our undergraduate software engineering courses. Previously, both computer security and software engineering were taught separately, with very little integration between the two. However, this could result in non-functional requirements such as security becoming low priority for students when learning software engineering. Our attempt to integrate computer security into the software engineering course have shown that students benefit when these topics are presented side-by-side, together with practical examples of how to identify and address common security risks.","","978-1-4799-7672-0","10.1109/TALE.2014.7062570","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7062570","computer security;teaching software engineering","Software engineering;Computer security;Software;Virtual machining;Testing;Education","","","","14","IEEE","19 Mar 2015","","","IEEE","IEEE Conferences"
"Mining Software Engineering Data from GitHub","G. Gousios; D. Spinellis","Department of Software Technology, Delft University of Technology, Delft, The Netherlands; Department of Management Science and Technology, Athens University of Economics and Business, Athens, Greece",2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C),"3 Jul 2017","2017","","","501","502","GitHub is the largest collaborative source code hosting site built on top of the Git version control system. The availability of a comprehensive API has made GitHub a target for many software engineering and online collaboration research efforts. In our work, we have discovered that a) obtaining data from GitHub is not trivial, b) the data may not be suitable for all types of research, and c) improper use can lead to biased results. In this tutorial, we analyze how data from GitHub can be used for large-scale, quantitative research, while avoiding common pitfalls. We use the GHTorrent dataset, a queryable offline mirror of the GitHub API data, to draw examples from and present pitfall avoidance strategies.","","978-1-5386-1589-8","10.1109/ICSE-C.2017.164","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7965403","GitHub;GHTorrent;empirical software engineering;Git","Software;Software engineering;Data mining;Collaboration;Distributed databases;Economics;Business","","22","","8","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"University-industry collaboration and open source software (OSS) dataset in mining software repositories (MSR) research","A. Tripathi; S. Dabral; A. Sureka","Indraprastha Institute of Information Technology Delhi, New Delhi, Delhi, IN; Indraprastha Institute of Information Technology, Delhi (IIT-D), India; Software Analytics Research Lab (SARL), India",2015 IEEE 1st International Workshop on Software Analytics (SWAN),"2 Apr 2015","2015","","","39","40","Mining Software Repositories (MSR) is an applied and practise-oriented field aimed at solving real problems encountered by practitioners and bringing value to Industry. We believe that empirical studies on both Open Source Software (OSS) and Closed or Proprietary Source (CSS/PSS) is required in MSR research to increase generalizability or transferability of findings and reduce external (or threats) validity concerns. Furthermore, we believe that a collaboration between University and Industry is must or important in achieving the stated goals and agenda of MSR research (such as deployment and technology transfer). We analyse past five years of research papers published in MSR series of conferences (2010-2014) and count the number of studies using solely OSS data or solely CSS data or both OSS and CSS data. We also count the number of papers published by authors solely from Universities, solely from Industry and from both University and Industry. We present our findings which indicate lack of University-Industry collaboration (measured using co-authorship in scientific publications) and paucity of empirical studies on CSS/PSS data. Our analysis reveals that out of 187 studies over a period of 5 years, 90:9% studies are conducted solely on OSS dataset. We present our findings which indicate that only 14:43% of the studies involve a University-Industry collaboration.","","978-1-4673-6923-7","10.1109/SWAN.2015.7070489","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7070489","Empirical Software Engineering;Generalizabilityand External Validity Concerns;Mining Software Repositories(MSR);Open Source Software (OSS) Dataset;University-IndustryCollaboration","Collaboration;Industries;Cascading style sheets;Software engineering;Software;Bibliometrics;Data mining","","6","","8","IEEE","2 Apr 2015","","","IEEE","IEEE Conferences"
"Bias-aware guidelines and fairness-preserving Taxonomy in software engineering education","P. Spoletini; R. M. Parizi","SWEGD, Kennesaw State University, Marietta, GA, USA; SWEGD, Kennesaw State University, Marietta, GA, USA",2018 IEEE Frontiers in Education Conference (FIE),"7 Mar 2019","2018","","","1","4","This innovative practice work in progress paper tackles the problem of unfairness and bias in software, that recently has emerged in countless cases. This unfairness can be present in the way software makes its decision or can limit the software functionalities to work only with certain populations. Well-known examples of this problem are the Microsoft Kinect facial recognition algorithm, which does not work properly with darker skin players, and the software used in 2016 by Amazon.com to determine the parts of the United States to which offer free same-day delivery that made decisions that prevented minority neighborhoods from participating in the program. The reasons behind these phenomena have often roots in the fact that software is created by humans who are biased and live in biased and non-inclusive environments. Recent research from the software engineering community is starting to tackle this problem at many levels from requirements analysis to the new automatic fairness testing technique (proposed first at FSE 2017 conference). However, research in bias of software is still a very undervalued and rarely discussed problem as software is often seen as a product immune to bias and non-inclusivity. This problem will be not addressed unless software engineering educators start to include this notion as a first-class problem in their foundation courses to future generation of scholars. In this work, we propose a set of bias-aware guidelines and taxonomy on how to flesh out this problem and possible solutions to it in software engineering curricula.","2377-634X","978-1-5386-1174-6","10.1109/FIE.2018.8659178","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8659178","Software engineering education;Fairness;Software engineering curricula","Software;Software engineering;Taxonomy;Ethics;Testing;Tools;Cultural differences","","3","","24","IEEE","7 Mar 2019","","","IEEE","IEEE Conferences"
"A development approach of software requirements for renewable energy applications using fundamental principles of software engineering","K. Meridji; G. Issa","Faculty of Information Technology, University of Petra, Amman, Jordan; Faculty of Information Technology, University of Petra, Amman, Jordan",2013 1st International Conference & Exhibition on the Applications of Information Technology to Renewable Energy Processes and Systems,"2 Sep 2013","2013","","","107","112","Energy engineering is a new multi-disciplinary engineering field to develop innovative renewable energy (RE) systems. On other hand software engineering has recently emerged as a new engineering field in a continuing evolution. Software engineering is a discipline whose aim is the production of high quality software, but lacks maturity compared to other traditional engineering fields. Much of the research done up to date concentrated on developing tools and methods and less work has been done on the development of the foundations for instance, such as defining the principles and the application of these principles to software development. This paper propose a development approach for RE software's using candidates' engineering fundamental principles for software engineering including operational guidelines for the selected engineering principles and foundations of RE software from an engineering perspective.","","978-1-4799-0712-0","10.1109/IT-DREPS.2013.6588162","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6588162","Software engineering;RE software;Candidates software engineering principles;Operational model;Operationalization","Software engineering;Software;Guidelines;Analytical models;Renewable energy sources;Information technology;Conferences","","","","23","IEEE","2 Sep 2013","","","IEEE","IEEE Conferences"
"Experiences with Open Source Software Engineering Tools","K. Toth","State University's Maseeh College of Engineering and Computer Science, USA",IEEE Software,"13 Nov 2006","2006","23","6","44","52","For software engineering (SE) and computer science (CS) programs to deliver on their promises, they must go beyond teaching students about principles, processes, models, and strategies and offer them realistic, practical experience as well. Although industry has been pressing to increase the emphasis on practical aspects, many CS programs continue to give students relatively simple problems focused on selected computing and software concepts and theories. Open source software offers CS and SE educators an opportunity to give their students practical, hands-on software engineering experience","1937-4194","","10.1109/MS.2006.158","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4012623","computer science education;software engineering programming environments and construction tools;reusable software;software engineering process","Open source software;Computer industry;Software engineering;Educational institutions;Education;Programming;Software tools;Computer science;Pressing;Curriculum development","","21","","7","IEEE","13 Nov 2006","","","IEEE","IEEE Magazines"
"Software Engineering: The First Line of Defense for Cybersecurity","J. Straub","Institute for Cyber Security Education and Research, North Dakota State University, Fargo, ND, USA",2020 IEEE 11th International Conference on Software Engineering and Service Science (ICSESS),"4 Nov 2020","2020","","","1","5","Cybersecurity has become an area of critical concern due to an ever-growing number of security breaches. Some of these breaches compromise personal information, exposing individuals and firms to potential identity theft, fraud and other maladies. Other attacks seek to gain control of systems for use in attacking as part of bot nets and other indirect attack techniques. Yet other attacks target cyber-physical systems whose compromise could potentially lead to the injury or death of individuals relying on or nearby the equipment. This paper considers the role of software engineering in preventing cyberattacks and discusses the types of software engineering failures that translate into vulnerabilities that can be attacked. Prospective solutions and areas of needed future research are discussed.","2327-0594","978-1-7281-6579-0","10.1109/ICSESS49938.2020.9237715","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9237715","software engineering;cybersecurity;defense;bugs;development techniques;testing","Conferences;Cyber-physical systems;Software;Gain control;Computer crime;Injuries;Software engineering","","3","","24","IEEE","4 Nov 2020","","","IEEE","IEEE Conferences"
"Generating a useful theory of software engineering","S. Adolph; P. Kruchten","University of British Columbia, Vancouver, Canada; University of British Columbia, Vancouver, Canada",2013 2nd SEMAT Workshop on a General Theory of Software Engineering (GTSE),"30 Sep 2013","2013","","","47","50","We argue a theory of software engineering must be useful to practitioners and explain the phenomena they are experiencing. Useful theories of software engineering can be generated empirically using methods such as grounded theory. We present our research and others as examples of how useful theory can be generated.","","978-1-4673-6273-3","10.1109/GTSE.2013.6613870","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6613870","theory;software engineering;grounded theory;social processes","Software;Software engineering;Computers;Organizing;Productivity;Process control;Information systems","","3","","26","IEEE","30 Sep 2013","","","IEEE","IEEE Conferences"
"Post-Completion Error in Software Development","F. Huang","The Australian Centre for Robotic Vision, Research School of Engineering Australian National University, Canberra, Australia",2016 IEEE/ACM Cooperative and Human Aspects of Software Engineering (CHASE),"9 Jan 2017","2016","","","108","113","Post-completion errors have been observed in a variety of tasks by psychologists, but there is a lack of empirical studies in software engineering. This paper investigates whether post-completion errors occur in software development and the likelihood that software developers commit this error when a post-completion scenario is presented. An experimental study was conducted in the context of a programming contest. In the experiment, a programming task specification that contained a post-completion sub-task requirement was presented to the subjects. The results showed that 41.82% of the subjects committed the post-completion error in the same way¬—forgetting to design and implement a software requirement which is supposed to be the last sub-task and is not necessary for the completion of the main sub-task. This percentage of subjects committing the post-completion error was significantly higher than that of subjects committing other errors. This study has confirmed that post-completion error occurs in software development and, moreover, different software developers tend to commit this error in the same way with a high likelihood at the location where a post-completion scenario is presented. Strategies are proposed to prevent post-completion errors in software development.","","978-1-4503-4155-4","10.1145/2897586.2897608","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7809496","Post-completion errors; software development; programming errors; common-cause failure; software psychology; human errors in software engineering.","Software;Programming profession;Context;Software engineering;Inspection;Psychology","","7","","35","","9 Jan 2017","","","IEEE","IEEE Conferences"
"1st International workshop on the engineering of mobile-enabled systems (MOBS 2013)","G. A. Lewis; H. Muccini; D. Rosenblum; J. Gray; N. Nagappan; E. Shihab","Carnegie Mellon Software Engineering Institute, Pittsburgh, PA, USA; University of Alabama, Tuscaloosa, AL, USA; University of L'Aquila, L'Aquila, Italy; Microsoft Research, Redmond, WA, USA; National University of Singapore, Singapore, Singapore; Rochester Institute of Technology, Rochester, NY, USA",2013 35th International Conference on Software Engineering (ICSE),"26 Sep 2013","2013","","","1533","1534","Mobile-enabled systems make use of mobile devices, RFID tags, sensor nodes, and other computing-enabled mobile devices to gather contextual data from users and the surrounding changing environment. Such systems produce computational data that can be stored and used in the field, shared between mobile and resident devices, and potentially uploaded to local servers or the cloud — a distributed, heterogeneous, context-aware, data production and consumption paradigm. Mobile-enabled systems have characteristics that make them different from traditional systems, such as limited resources, increased vulnerability, performance and reliability variability, and a finite energy source. There is significantly higher unpredictability in the execution environment of mobile apps. This workshop brings together experts from the software engineering and mobile computing communities — with notable participation from researchers and practitioners in the field of distributed systems, enterprise systems, cloud systems, ubiquitous computing, wireless sensor networks, and pervasive computing — to share results and open issues in the area of software engineering of mobile-enabled systems.","1558-1225","978-1-4673-3076-3","10.1109/ICSE.2013.6606773","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6606773","mobile-enabled systems;mobile systems;mobile computing;software engineering;software architecture;systems architecture;BYOD;cloud computing;pervasive computing;ubiquitous computing","Mobile communication;Software engineering;Conferences;Educational institutions;Mobile computing;Smart phones","","1","","4","IEEE","26 Sep 2013","","","IEEE","IEEE Conferences"
"Graduate software engineering education: adapting for the BSSE?","G. W. Hislop; H. J. C. Ellis; K. S. Land; A. Moreno","Drexel University, USA; Rensselaer Polytechnic Institute, USA; Northrop Grumman Corporation, USA; Polytechnic University, Madrid, Spain","17th Conference on Software Engineering Education and Training, 2004. Proceedings.","30 Mar 2004","2004","","","152","152","Summary form only given. As the number of undergraduate software engineering programs increases, what does this imply about the future role of graduate programs in software engineering? This panel will explore changes that may be required to existing graduate software engineering programs to adapt to the increasing number of undergraduates with bachelor's degrees in software engineering entering graduate software engineering programs. In particular, the questions the panel will consider include: How should graduate software engineering programs adapt to accommodate the arrival of students with BSSE degrees? Should graduate software engineering curricula change because of the growth in BSSE programs, and, if so, how? Should a BSSE degree substitute for the industry experience requirement commonly used in MSSE programs? Will graduate software engineering education still have value in industry for a BSSE graduate? What is the role of post-baccalaureate certificate programs in relation to graduate software engineering degree programs? How does the arrival of accreditation for software engineering impact graduate software engineering education? The panel participants have experience with both undergraduate and graduate software engineering education delivered in both degree and certificate programs. The panel has also been organized to include perspectives from the U.S. and Europe as well as a perspective from industry.","1093-0175","0-7695-2099-5","10.1109/CSEE.2004.1276525","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1276525","","Software engineering;Educational programs;Computer science education;Accreditation;Industrial relations;Programming;Computer industry;Industrial training","","","","","IEEE","30 Mar 2004","","","IEEE","IEEE Conferences"
"Improving Personalized Talent Education by Strengthening Specialty Direction of Information System in Software Engineering","H. Song; X. Li; P. Wang; D. Zhao","College of Computer Science and Engineering, Dalian Nationalities of University, Dalian, China; College of Computer Science and Engineering, Dalian Nationalities of University, Dalian, China; College of Computer Science and Engineering, Dalian Nationalities of University, Dalian, China; College of Computer Science and Engineering, Dalian Nationalities of University, Dalian, China",2009 Second International Conference on Education Technology and Training,"15 Jan 2010","2009","","","16","18","There is a deep talent education gap between industry and university in computer or software engineering specialty. There are many factors affecting the education quality of software engineering, including lacking pertinence. An alternative solution to improve the talent education is improving personalized talent education using specialty direction. In this paper, we first analyze the current education situation in software engineering, and then propose setting specialty direction to improve the pertinence and personalized talent education, which is helpful to narrow the gap between university and industry. According to the actual situation of our university, we explore ways and propose setting specialty direction of information system in software engineering, and give the concrete measures including some strategies and measures in curriculum construction, practical teaching. The actual performances demonstrate that our proposed measure is a feasible method in practice.","","978-1-4244-5527-0","10.1109/ETT.2009.23","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5381308","software engineering;information system;personalized talent education;specialty direction","Systems engineering education;Information systems;Software engineering;Computer science education;Computer industry;Industrial training;Manufacturing industries;Application software;Educational institutions;Information technology","","1","","8","IEEE","15 Jan 2010","","","IEEE","IEEE Conferences"
"The software studio in software engineering education","S. Kuhn; O. Hazzan; J. E. Tomayko; B. Corson","Department of Regional Economic and Social Development, University of Massachusetts, Lowell, MA, USA; Department of Education in Technology and Science, Technion-Israel Institute of Technology, Haifa, Israel; School of Computer Science and the Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, USA; Corson Associates Architects, Sebastopol, CA, USA",Proceedings 15th Conference on Software Engineering Education and Training (CSEE&T 2002),"7 Aug 2002","2002","","","236","238","","1093-0175","0-7695-1515-0","10.1109/CSEE.2002.995219","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=995219","","Software engineering;Management training;Computer architecture;Computer science education;Educational technology;Environmental economics;Computer science;Educational institutions;Project management;Scheduling","","5","","8","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Return to engineering: Education reform to foster applied innovative software talents","Yang Dongyong; Wang Ben; Li Penglin; Chen Mingyang","College of Computer Software, Zhejiang University of Technology, Hangzhou, China; College of Computer Software, Zhejiang University of Technology, Hangzhou, China; College of Computer Software, Zhejiang University of Technology, Hangzhou, China; College of Foreign Languages, Zhejiang University of Technology, Hangzhou, China",2009 4th International Conference on Computer Science & Education,"1 Sep 2009","2009","","","1707","1710","Higher engineering education (HEE) is an important stage of training qualified engineers. Main problems and difficulties for training qualified engineers in current China HEE were analyzed, “Return to engineering” educational reform featured by novel type of university industry cooperation was explored. More than seven year practice in the college of computer Software of Zhejiang University of Technology has shown that the engineering concept, analysis and design capabilities, team cooperation ability, profession and application innovation consciousness of the graduates were strengthen greatly. The competitive ability of the graduates to obtain employment was enhanced, and good assessment from engineering employer confirms the success of our engineering educational reform.","","978-1-4244-3520-3","10.1109/ICCSE.2009.5228297","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5228297","Higher engineering education;Return to engineering;Practical education","Engineering education;Educational institutions;Educational technology;Design engineering;Software;Computer science education;Technological innovation;Maintenance engineering;Industrial training;Computer science","","4","","3","IEEE","1 Sep 2009","","","IEEE","IEEE Conferences"
"Integration of Software Architecture in Requirements Elicitation for Rapid Software Development","M. Gillani; H. A. Niaz; A. Ullah","School of Computer Science, University College Dublin (UCD), Dublin 4, Ireland; School of Computer Science, University College Dublin (UCD), Dublin 4, Ireland; Department of Computer Science, National University of Modern Languages (NUML), Islamabad, Pakistan",IEEE Access,"1 Jun 2022","2022","10","","56158","56178","Software Architecture describes system components and their connections. Requirement elicitation catering the perspective of software architecture is quite challenging and relatively less explored research area for the rapid software development. It has gain growing interest due to reusability of existing modules with less cost and quick developmental time. Software architecture in the context of requirement engineering is an abstraction of software system performing a particular task with the help of group of executable architectural components. In this paper, systematic literature review is adapted as a methodology to explore software architectural elements that provides better performance and simplicity in requirement engineering. We analyzed, reviewed and listed the strategies, tools & techniques along with state-of-the-art mechanisms, pros and cons and application areas. Architectural components that are already implemented in the requirement elicitation process for effective software architectural design are briefly analyzed. Purpose of the paper is to explore and discuss the elements that make software architecture more integral and flexible for traceability of requirements. Another purpose is to identify relation between the software requirements and architecture along with exploring the components to bridge gap between requirements and architecture by critically evaluating industrially and academically proposed methods, tools and frameworks. We also highlighted the open research challenges of Software architecture in requirement elicitation for better software development. In the later section, a resource bank is created acting as a valuable model that encompasses targeted relevant groups, sub-groups with latest software architecture tools & techniques, methods and framework sources to facilitate effective requirement engineering.","2169-3536","","10.1109/ACCESS.2022.3177659","University College Dublin, Ireland; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9780375","Software requirement engineering;software architecture;software development;software engineering;requirements elicitation","Software;Computer architecture;Software architecture;Requirements engineering;Systematics;Software design;Protocols","","1","","164","CCBY","23 May 2022","","","IEEE","IEEE Journals"
"Software engineering in health care: Is it really different? And how to gain impact","J. H. Weber-Jahnke; M. Price; J. Williams","Faculty of Engineering, University of Victoria, Victoria, BC, Canada; Faculty of Medicine, University of British Columbia, Vancouver, BC, Canada; Department of Computer Science, University of Toronto, Toronto, ONT, Canada",2013 5th International Workshop on Software Engineering in Health Care (SEHC),"19 Sep 2013","2013","","","1","4","Over the last several years, software engineering (SE) has given birth to several communities and venues related to research on SE in the context of health care systems. By and large, the interest in this topic has been spurred by alarming failures of software-intensive systems that have been deployed to address some of the challenges faced in current health care environments. Today, the software engineering in health care (SERC) community faces several challenges. It needs to justify the significance of its existence towards the general SE community and towards the medical/health informatics community. The purpose of this paper is to explore some of the fundamental challenges pertaining to SERC, to consider whether these challenges require a dedicated community-based effort and to generate recommendations on how to strengthen its impact. We argue that the community should adopt a conceptual model of knowledge translation (KT) analogous those used in the medical domain to position its research and maximize its impact.","","978-1-4673-6282-5","10.1109/SEHC.2013.6602469","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6602469","software engineering;health care;medical informatics;knowledge translation;challenges","Medical services;Software;Software engineering;Communities;Industries;Knowledge engineering;Medical diagnostic imaging","","14","","10","IEEE","19 Sep 2013","","","IEEE","IEEE Conferences"
"4th International Workshop on Games and Software Engineering (GAS 2015)","J. Bishop; K. M. L. Cooper; W. Scacchi; J. Whitehead","Microsoft Research Redmond, U.S.A; The University of British Columbia, Vancouver, Canada; University of California Irvine, Irvine, U.S.A; University of California Santa Cruz, Santa Cruz, U.S.A",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","979","980","We present a summary of the 4th ICSE Workshop on Games and Software Engineering. The full day workshop is planned to include a keynote speaker, game-jam demonstration session, and paper presentations on game software engineering topics related to software engineering education, frameworks for game development and infrastructure, quality assurance, and model-based game development. The accepted papers are overviewed here.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.314","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203137","Game engineering;software engineering","Games;Software engineering;Conferences;Engines;Education;Quality assurance;Computer architecture","","3","","","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Overview of Mining Software Repositories","V. A. Luzgin; I. I. Kholod","Department of Computer Science and Engineering, Saint Petersburg Electrotechnical University “LETI”, Saint Petersburg, Russia; Department of Computer Science and Engineering, Saint Petersburg Electrotechnical University “LETI”, Saint Petersburg, Russia",2020 IEEE Conference of Russian Young Researchers in Electrical and Electronic Engineering (EIConRus),"19 Mar 2020","2020","","","400","404","Mining of software repositories (MSR) provides opportunities to enhance software engineering activities and to analyze violations to prevent it. Software engineering quality and security challenges can be solved by analyzing unstructured information from various artifacts of software development. This paper describes current challenges and applications in the field. This work also proposes an overview of the directions of mining software repositories and describes the methods and techniques that are used in this area.","2376-6565","978-1-7281-5761-0","10.1109/EIConRus49466.2020.9039225","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9039225","mining software repositories;unstructured data;software engineering","Software;Data mining;Software engineering;Natural language processing;Deep learning;Software metrics","","","","67","IEEE","19 Mar 2020","","","IEEE","IEEE Conferences"
"Preparing Tomorrow's Software Engineers for Work in a Global Environment","S. Beecham; T. Clear; J. Barr; M. Daniels; M. Oudshoorn; J. Noll","Lero—The Irish Software Research Centre; Auckland University of Technology's School of Engineering, Computer and Mathematical Sciences; Ithaca College, Department of Computer Science; Department of Information Technology, Uppsala University; Northwest Missouri State University, School of Computer Science and Information Systems; University of East London",IEEE Software,"16 Jan 2017","2017","34","1","9","12","Global software engineering (GSE) is becoming common. It's thus important to educate university software engineering students in GSE. The authors discuss challenges to and recommendations for implementing such instruction.","1937-4194","","10.1109/MS.2017.16","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7819397","global software engineering;GSE;distributed projects;global distance;Valentine's taxonomy;software engineering;software development","Education courses;Software engineering;Teamwork;Cultural differences;Computer science education;Professional development;Globalization","","39","","5","IEEE","16 Jan 2017","","","IEEE","IEEE Magazines"
"Problem on Software Engineering Learning: Domain Engineering","F. S. Marcondes; H. J. Brumatto; E. H. Sonoda; L. C. Barboza; J. Zannuto","Senac University, Sao Paulo, Brazil; Senac University, Sao Paulo, Brazil; Senac University, Sao Paulo, Brazil; Senac University, Sao Paulo, Brazil; Senac University, Sao Paulo, Brazil",2009 Sixth International Conference on Information Technology: New Generations,"10 Jun 2009","2009","","","1636","1636","During the system information undergraduate course, besides the knowledge on how to build a software system, the students should also know how to analyses business processes. Integrated projects would be a good opportunity to practice this concept if it had been better direction to this objective since it is a longer project that is supported by many chairs. Those projects use to presents the business rules and requirements to the students withdrawing from them the chance to exercises the domain and requirement engineering. It was made an experience to close that gap, so, 20 students were asked to get the requirements to a project. It was expected that the students should got requirements using the Use Case approach, also, they should realizes the need of Domain Engineering to empower the requirement's elicitation process. The need of this realization is based on the learning strategy used on the experience called Problem-based Learning (PBL) where the students should find solutions to a stated problem even before the presentation of the proper concepts that best solves the problem, so, in this study the need of Domain Engineering was not formally defined. To perform the strategy, the problem should had defined in a way which avoids the student's business rules intuitive inferences, so, it was defined a problem in an unknown domain. Another property of the problem is that should be a unique distributed system sharing the same business rules even the groups had different requirements. It was expected that the students got the requirements and realizes the need of Domain Engineering from a high level stakeholders' need in a 18 weeks time frame. Despite this, the students neither got requirements neither realizes the Domain Engineering needs during the first 5 weeks (27% of the time frame) they just had asking to the professor ""which are the requirements?"" and did not performed any requirements procedures. Supposing a conceptual problem, the Use Case Approach concepts were retrieved, but it were realized that there were not a conceptual problem, so, the next logical step is consider concept's transfer problems. It was performed a transfer procedure where starting from a high level need, going through the approach till got the first classes of a rental software system (a well know domain to focuses the approach) the Domain Engineering aspects are commented as demanded by the students. During the transfer, the students tried to just create the requirements on a intuitively way on this time, they had been pushed back to follow the approach and get the requirements using it. During this activity, they once again, tried to escape from the procedure outweigh the lack of business rules just intuitively creating them, once again, they were induced to obtain and elicit the business rules and not just create them. The second part of the induction was very important since it was used to instigate on the students the curiosity about the Domain Engineering becoming a start point to the solution's search as defined by PBL. Once the transfer procedure was accomplished, the students started to ask the ""correct questions"" and the project could be started. After this point, the students should realizes the need of a unified Domain Engineering to the whole project positioning themselves as parts of the system, once again it did not happened and a new transfer procedure was made. In this transfer procedure was enough just help the students retrieve the distributed system's concepts and help them to identify each module and their position on them. During the transfer procedure the professor realizes that the students did not considered the modules communications and they had started to create incompatible modules leading the professor to start a new induction to solve this problem. From this point to the end, the project had a normal development. As a remark some students had declared they have difficulties to uses the theoretical knowledge on real projects at their jobs, the same problem had been detected on students of different grades pointing to a possible computer's students related problem which need to be treated. Based on this paper one should note the need to perform transfer procedures during the Software Engineering learning helping the student to lead the theoretical knowledge into the practice using concrete cases over many contexts propitiating to the student the time and experience needed to yield its knowledge. This paper also remarked the problem of lectures without sufficient practical activities once it was detected they are not been successful to replaces the beginner knowledge by a specialized one. As shown at case study, even having specialized theoretical knowledge, when the students needs to solve a problem, they retrieves the beginner practical knowledge and not the specialized theoretical knowledge, so, it is necessary to create strategies that propitiates a better beginner knowledge replacement and a better specialized knowledge retrieve.","","978-1-4244-3770-2","10.1109/ITNG.2009.275","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5070880","Domain;Software Engineering;Software Engineering Learning;Use Case","Software engineering;Software systems;Information technology;Knowledge engineering;Information analysis;Concrete","","1","","","IEEE","10 Jun 2009","","","IEEE","IEEE Conferences"
"A New Model of ISEE Based on Product Line","J. Dong; N. Shi","School of Computer Engineering, HuaiHai Institute of Technology, Lianyungang, China; Department of Information Engineering, Lanzhou Resources and Environment Voc-Tech College, Lanzhou, China","2009 International Conference on Information Management, Innovation Management and Industrial Engineering","31 Dec 2009","2009","1","","371","375","Borrowed ideas from the production process and management system of the modern manufacturing industry auto-assembly line, a new model of integrated software engineering environment based on product line is proposed and discussed. In this new model, the product line assets components are acted as standard parts supplied with the components bus of the product line development environment. The development environment above the bus will support the assembly line production of software products, and the parts under the bus will be traditional general purpose software development environment that supports the source code and documents development of the product line core asset components. Comparing with the current existing product line development environment models, the implementation of this new model development environment and its ability may be completely realize the automated production of software products, and similar to the assembly line production methods and management system of current manufacturing. Thus, this new model will be an ideal software development environment model for realizing the automated production of software product line.","2155-1472","978-0-7695-3876-1","10.1109/ICIII.2009.97","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5368031","software product line;core assets;ISEE-integrated software engineering environment;software architecture;software components","Production systems;Environmental management;Programming;Engineering management;Manufacturing industries;Software engineering;Standards development;Assembly systems;Software development management;Manufacturing automation","","1","","12","IEEE","31 Dec 2009","","","IEEE","IEEE Conferences"
"Preface of RESET 2023: 2nd International Workshop on Requirement Engineering for Software Startups and Emerging Technologies","A. Nguyen-Duc; C. Arora; P. Abrahamsson","University of South Eastern Norway, Norway; Monash Univeristy; Tampere University, Finland",2023 IEEE 31st International Requirements Engineering Conference Workshops (REW),"28 Sep 2023","2023","","","365","366","The Second International Workshop on Requirement Engineering for Software startups and Emerging Technologies (RESET) is a part of the 31st IEEE International Requirements Engineering Conference 2023, held on 4 September 2023. The workshop brought together requirements engineering researchers and practitioners to discuss the need for adapting conventional requirement engineering artifacts (i.e., requirement definition, metrics), processes and practices in developing and operating emerging technologies, including Software Startups, Artificial Intelligence (AI), Blockchain, and Quantum Computing. Participants gained insights into the RE practices, tools, techniques, and frameworks that can help them build scalable, robust, and innovative software-intensive systems. The workshop included a keynote presentation and four paper presentations.","2770-6834","979-8-3503-2691-8","10.1109/REW57809.2023.00070","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10260766","workshop summary;software startups;generative AI;blockhain;requirement engineering","Measurement;Quantum computing;Conferences;Software;Blockchains;Requirements engineering;Artificial intelligence","","","","3","IEEE","28 Sep 2023","","","IEEE","IEEE Conferences"
"Activity based teaching learning in software engineering - An experience","P. Desai; G. H. Joshi","Department of Computer Science and Engineering, B. V. Bhoomaraddi College of Engineering and Technology, Hubli, India; Department of Computer Science and Engineering, B. V. Bhoomaraddi College of Engineering and Technology, Hubli, India",2012 IEEE International Conference on Engineering Education: Innovative Practices and Future Trends (AICERA),"20 Sep 2012","2012","","","1","6","The course on Software Engineering is important for both the undergraduate and postgraduate programmes of computer science. This is particularly so in terms of making the students industry ready by exposing them to the processes and practices of life cycle activities of software development. The traditional approach to teaching the course on Software Engineering has not been able to make a positive impact on learning because: the course instructors mostly lack exposure to industry practices, the course material being referred while teaching the course fails to establish the context as the case studies referred are alien to the students and assessment focusing mainly on memory oriented questions. Thus teaching the course on Software Engineering has got reduced to monotonous lecturing, in the absence of experience and case studies. An attempt to address the issues referred above is made by the authors. The theory course on Software Engineering was redesigned by tightly coupling a Mini project course with it. Different activities are designed along with Class room teaching to make Software Engineering as joyful course for the students. The proposed methodology helped the students to improve their Software Engineering concepts and quality of capstone projects. The paper discusses the approach followed, the results obtained and the experience gained.","","978-1-4673-2269-0","10.1109/AICERA.2012.6306729","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6306729","Case studies;Life Cycle Activity;Software Development;Software Engineering;Assessment","Software engineering;Software;Education;Industries;Laboratories;Conferences","","3","","14","IEEE","20 Sep 2012","","","IEEE","IEEE Conferences"
"Systems engineering: an essential engineering discipline for the 21st Century","D. H. Rhodes","Processes & Quality, CSG Systems, Inc., Cambridge, MA, USA",Proceedings of the 24th International Conference on Software Engineering. ICSE 2002,"23 May 2005","2002","","","4","","Summary form only given. The engineering of systems in the 21st Century demands robust use of the systems approach given the nature of our times, as well as the systems being created. The global marketplace, changing competition dynamics, shorter life cycles, and increasing complexity characterize our environment. We are building systems that are much larger than ever before and we are building systems that are infinitely smaller than ever before. Maturity of technical, management, and infrastructure processes are competitive discriminators. Systems engineering, both as a profession and as practiced by multi-discipline practitioners, is key to addressing these challenges. Over the past decade, there have been frequent debates on whether systems engineering is an approach or a formal field of engineering. Given the technical, management, and environmental challenges of this century, I believe that systems engineering must be an essential engineering discipline for the 21st Century. This talk discusses the state of the art and practice of systems engineering, and several initiatives focused on its evolution as a formal engineering discipline. Systems engineering and software engineering must each evolve as unique engineering disciplines to address the engineering problems of the 21st Century. We must ensure their evolution results in shared knowledge, and highly collaborative approaches and methods drawing on the unique strengths of each discipline.","","1-58113-472-X","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1007950","","Systems engineering and theory;Software engineering;Engineering management;Engineering drawings;Product development;Robustness;Environmental management;Hardware;Shape;Collaboration","","","1","","","23 May 2005","","","IEEE","IEEE Conferences"
"A novel software engineering knowledge representation method for multi-site software development","Wu Jianping","Department of Software Engineering, Cheng Du Polytechnic, Chengdu, Sichuan, China",2012 IEEE International Conference on Computer Science and Automation Engineering,"16 Aug 2012","2012","","","523","526","Software engineering knowledge and project data, formed into software engineering ontology, helps communications among remote team members and provides consistent understanding of the domain knowledge and project data. Software engineering ontology, together with its instance knowledge, is used as a communication framework within a project, thereby providing rational and shared understanding of project matters. In this paper, we have analyzed software engineering ontology as knowledge and data warehousing. We have presented the software engineering ontology. We have only covered some distinguished part of modeling domain knowledge of software engineering as example.","2327-0594","978-1-4673-2008-5","10.1109/ICSESS.2012.6269519","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6269519","Software Engineering;Knowledge Representation Method;Multi-site Software Development","Software;Indexes;Testing;Computer languages","","2","","5","IEEE","16 Aug 2012","","","IEEE","IEEE Conferences"
"Accelerating Software Engineering Research Adoption with Analysis Bots","I. Beschastnikh; M. F. Lungu; Y. Zhuang","University of British Columbia; University of Groningen; University of Colorado, Colorado Springs",2017 IEEE/ACM 39th International Conference on Software Engineering: New Ideas and Emerging Technologies Results Track (ICSE-NIER),"3 Jul 2017","2017","","","35","38","An important part of software engineering (SE) research is to develop new analysis techniques and to integrate these techniques into software development practice. However, since access to developers is non-trivial and research tool adoption is slow, new analyses are typically evaluated as follows: a prototype tool that embeds the analysis is implemented, a set of projects is identified, their revisions are selected, and the tool is run in a controlled environment, rarely involving the developers of the software. As a result, research artifacts are brittle and it is unclear if an analysis tool would actually be adopted. In this paper, we envision harnessing the rich interfaces provided by popular social coding platforms for automated deployment and evaluation of SE research analysis. We propose that SE analyses can be deployed as analysis bots. We focus on two specific benefits of such an approach: (1) analysis bots can help evaluate analysis techniques in a less controlled, and more realistic context, and (2) analysis bots provide an interface for developers to ""subscribe"" to new research techniques without needing to trust the implementation, the developer of the new tool, or to install the analysis tool locally. We outline basic requirements for an analysis bots platform, and present research challenges that would need to be resolved for bots to flourish.","","978-1-5386-2675-7","10.1109/ICSE-NIER.2017.17","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7966875","software analysis;software engineering tools;research tool adoption;software engineering research evaluation","Software;Tools;Encoding;Software engineering;Monitoring;Acceleration;Registers","","15","1","20","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"An Open Source-Based Approach to Software Development Infrastructures","Y. Ki; M. Song","Advanced Software Research Center, Samsung Electronics Company Limited, Suwon, South Korea; Advanced Software Research Center, Samsung Electronics Company Limited, Suwon, South Korea",2009 IEEE/ACM International Conference on Automated Software Engineering,"18 Mar 2010","2009","","","525","529","As software systems become larger and more complex, automated software engineering tools play a crucial role for effective software development management, which is a key factor to lead quality software systems. In this work, we present TRICA, an open source-based software development infrastructure. The name of TRICA represents its features such as Traceability, Relationship, Informativeness, Cost-effectiveness, and Automation. Essentially, in TRICA, a continuous integration tool is coupled with a software configuration management tool and an issue tracking tool. We provisioned a mechanism to connect the open source tools in TRICA so that project members use the collaborated information to solve various issues and implementation problems efficiently, and easily share forthcoming issues during the course of the project. We show that TRICA can help to decentralize risks throughout the software development cycle and achieve successful software development.","1938-4300","978-1-4244-5259-0","10.1109/ASE.2009.73","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5431740","software engineering tools;continuous integration;SCM;issue tracking;open source","Programming;Open source software;Software engineering;Software systems;Software tools;Testing;Software development management;Automation;Collaborative tools;Collaborative software","","1","","11","IEEE","18 Mar 2010","","","IEEE","IEEE Conferences"
"Software Engineering for Spreadsheets","M. Erwig","Oregon State University, USA",IEEE Software,"25 Aug 2009","2009","26","5","25","30","The idiosyncratic structure of spreadsheets allows the adaptation of proven software engineering principles to an end-user domain and thus makes software engineering accessible to many users.","1937-4194","","10.1109/MS.2009.140","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5222790","spreadsheets;software engineering;type checking;debugging;spatial analysis","Software engineering;Labeling;Embedded software;Software tools;Embedded computing;Application software;Runtime","","24","","15","IEEE","25 Aug 2009","","","IEEE","IEEE Magazines"
"Requirements Engineering and Continuous Deployment","N. Niu; S. Brinkkemper; X. Franch; J. Partanen; J. Savolainen","Department of Electrical Engineering and Computer Science, University of Cincinnati; Department of Information and Computing Sciences, Utrecht University; Polytechnic University, Catalonia's Software and Service Engineering Group; Bittium; Danfoss",IEEE Software,"12 Mar 2018","2018","35","2","86","90","This article summarizes the RE in the Age of Continuous Deployment panel at the 25th IEEE International Requirements Engineering Conference. It highlights two synergistic points (user stories and linguistic tooling) and one challenge (nonfunctional requirements) in fast-paced, agile-like projects, and recommends how to carry on the dialogue.","1937-4194","","10.1109/MS.2018.1661332","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8314167","requirements engineering;continuous deployment;RE in the Age of Continuous Deployment;25th IEEE International Requirements Engineering Conference;user stories;linguistic tooling;agile software development;nonfunctional requirements;software requirements;software engineering;software development","Software development management;Software reliability;Stakeholders;Pragmatics;Software testing;Task analysis;Requirements engineering","","37","","13","IEEE","12 Mar 2018","","","IEEE","IEEE Magazines"
"A Service Encapsulation Architecture for Engineering Software Based on SOOA","L. Kong; W. Xu; J. Cha; J. Yu; N. Li","School of Mechanical, Electronic and Control Engineering, Beijing Jiaotong University, Beijing, China; School of Mechanical, Electronic and Control Engineering, Beijing Jiaotong University, Beijing, China; School of Mechanical, Electronic and Control Engineering, Beijing Jiaotong University, Beijing, China; School of Mechanical, Electronic and Control Engineering, Beijing Jiaotong University, Beijing, China; College of Mechanical Engineering, Beijing Technology and Business University, Beijing, China",2012 International Conference on Industrial Control and Electronics Engineering,"4 Oct 2012","2012","","","921","924","SOOA (Service object-oriented architecture) is suitable to construct the service sharing environment for engineering software on the dynamic network. After analyzing the service encapsulation requirements of engineering software, an SOOA-based service encapsulation architecture for engineering software (SooSEA) is proposed. In the developed SooSEA-based system, engineering software tools can be encapsulated as services by product developers without the need of programming, and the encapsulated services can be accessed and utilized through a standard Web browser. The efficient sharing of engineering software resources can be achieved in the dynamic network environment.","","978-1-4673-1450-3","10.1109/ICICEE.2012.244","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6322533","service encapsulation;engineering software;SOOA;resource integration","Encapsulation;Software tools;Design automation;Protocols;Educational institutions;Computer aided engineering","","","","10","IEEE","4 Oct 2012","","","IEEE","IEEE Conferences"
"Increasing the effectiveness of teaching software engineering: A University and industry partnership","A. Dagnino","Research Area Software, ABB Corporate Research, Raleigh, NC, USA",2014 IEEE 27th Conference on Software Engineering Education and Training (CSEE&T),"19 May 2014","2014","","","49","54","Software Engineering is a complex topic because it encompasses multiple disciplines such as team work, effectively managing change in organizations, understanding technology, understanding software development and its lifecycle, understanding the role of change agents, and also having a good business sense. A method derived from the collaboration between North Carolina State University and ABB, brings diverse techniques that simulate an industrial environment for teaching a senior level Software Engineering course. Eleven elements that have been incorporated to enrich the Software Engineering graduate course are described. The paper also shows how the progressive incorporation of the elements have resulted increased student satisfaction.","2377-570X","978-1-4799-4970-0","10.1109/CSEET.2014.6816781","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6816781","","Software engineering;Industries;Software;Educational institutions;Computer architecture;Organizations","","9","","8","IEEE","19 May 2014","","","IEEE","IEEE Conferences"
"Synergizing industrial needs and academic research for better software education","S. Eldh; S. Punnekkat","Radio System & Technology Software, Ericsson AB, Kista resp. Karlstad, Sweden; School of Innovation, Design and Engineering, Mälardalen University, Västerås, Sweden",2012 First International Workshop on Software Engineering Education Based on Real-World Experiences (EduRex),"28 Jun 2012","2012","","","33","36","The ubiquity of software is making every industry increasingly dependent on it for achieving their core products' functionality. The complexity in a telecommunication network requires not only thorough understanding of telecommunication per se, but software becomes equally interesting. This is the case with many industries, which rely more and more on software as their key enabler. Industry definitely needs a large number of software engineers with potential to be productive from day one. They are feeling impatient at the academic community for not being pragmatic. At the same time Academic community faces many challenges, which often make them thread a traditional path thus ignoring the industrial needs. We present some of these challenges from both the industrial and academic perspectives. We also present how we established a Master level advanced course on software verification and validation through mutual support and collaboration which became highly successful.","","978-1-4673-1805-1","10.1109/EduRex.2012.6225703","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6225703","software engineering education;software testing course;industry-academia collaboration","Software;Industries;Educational institutions;Collaboration;Software testing;Software engineering","","2","","8","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"Adapting extreme programming for a core software engineering course","A. Shukla; L. Williams","Department of Computer Science, North Carolina State University, Raleigh, NC, USA; Department of Computer Science, North Carolina State University, Raleigh, NC, USA",Proceedings 15th Conference on Software Engineering Education and Training (CSEE&T 2002),"7 Aug 2002","2002","","","184","191","Over a decade ago, the manufacturing industry determined it needed to be more agile to thrive and prosper in a changing, nonlinear, uncertain and unpredictable business environment The software engineering community has come to the same realization. A group of software methodologists has created a set of software development processes, termed agile methodologies that have been specifically designed to respond to the demands of the turbulent software industry. Each of the processes in the set of agile processes comprises a set of practices. As educators, we must assess the emerging agile practices, integrate them into our courses (carefully), and share our experiences and results from doing so. The paper discusses the use of extreme programming, a popular agile methodology, in a senior software engineering course at North Carolina State University. It then provides recommendations for integrating agile principles into a core software engineering course.","1093-0175","0-7695-1515-0","10.1109/CSEE.2002.995210","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=995210","","Software engineering;Programming profession;Manufacturing industries;Computer science;Agile manufacturing;Computer industry;Product development;Software measurement;Software quality;Quality control","","18","","25","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"New Angles for Global Software Engineering Research? - Keynote Summary","I. Richardson","Lero-the Irish Software Engineering Research Centre, University of Limerick, Limerick, Ireland",2010 5th IEEE International Conference on Global Software Engineering,"27 Sep 2010","2010","","","323","323","In the late 1990s the Software Engineering community recognized that there was a problem with delivering global software projects to a high quality in an efficient manner. As a consequence, researchers, in the now 'Global Software Engineering Research community', carried out significant studies into GSE problems. But, did we really find what we expected? Did we expect that project delays were due solely to technical software engineering problems? Did we really think that software engineering techniques could resolve all GSE problems? Maybe that is what we expected but that is not what we found. Of course Software Engineering techniques can solve some of the problems! However, the reality is that many of the issues we now discuss within the GSE community are social and socio-technical. We talk about culture and communication. We consider gender issues. Project management is high on our agenda. And what this portrays is the interdisciplinary nature of GSE research.","2329-6313","978-1-4244-7620-6","10.1109/ICGSE.2010.54","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5581524","","Software engineering;Communities;Project management;Software quality;Europe;Industries","","","","","IEEE","27 Sep 2010","","","IEEE","IEEE Conferences"
"A Practical Course on Mobile-Software Engineering: Mobile Solutions Laboratory","A. H. Nekoo; K. Vakili","School of Electrical and Computer Engineering, University of Tehran, Tehran, Iran; School of Electrical and Computer Engineering, University of Tehran, Tehran, Iran",2009 Fourth International Conference on Software Engineering Advances,"30 Oct 2009","2009","","","389","393","Increasing the practical skills of students is one of the goals of engineering education. This goal is so important that some industries build up special training institutions and supervise course topics and programs of these institutions to conform with their industry needs. After evaluating the requirements of the industry and by seeking the gaps between current and ideal condition of software engineering and IT (information technology) education, and also by considering educational standards, the new mobile solutions laboratory has been proposed, as a solution to fill the gap. It also covers the ideal educational protocols for mobile commerce. This paper presents several topics including a project-based learning method, an evaluation method to study student's motivation for the course topics, and student assessment methods and criteria.","","978-1-4244-4779-4","10.1109/ICSEA.2009.95","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5298194","software engineering education;mobile commerce;project based learning method;laboratory course;mobile programming","Laboratories;Industrial training;Engineering education;Computer industry;Software engineering;Information technology;Educational programs;Software standards;Protocols;Business","","2","","15","IEEE","30 Oct 2009","","","IEEE","IEEE Conferences"
"Practice Patterns to Improve the Quality of Design Model in Embedded Software Development","D. -H. Kim; J. -P. Kim; J. -E. Hong","Software Engineering Laboratory, Chungbuk National University, South Korea; Software Engineering Laboratory, Chungbuk National University, South Korea; Software Engineering Laboratory, Chungbuk National University, South Korea",2009 Ninth International Conference on Quality Software,"15 Jan 2010","2009","","","179","184","Source code quality is very important to embedded systems because software embedded into a product is difficult to change. In order to improve source code quality, the quality of analysis and design models as well as the quality of source code should be considered because code quality can be improved by design model quality. With the reason, we suggest, in this paper, ""Practice Pattern"" as one of practical techniques to improve embedded software quality, which focus on improving the quality of software design model. Practice pattern is a process pattern to guide modeling activities in software development process. We believe that adopting our pattern provides the benefits of performance, modularization, and easy to implement for embedded software.","2332-662X","978-1-4244-5913-1","10.1109/QSIC.2009.32","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5381471","Embedded software;Software quality;and Practice pattern","Embedded software;Software quality;Software design;Programming;Software engineering;Laboratories;Embedded system;Software systems;Writing;Testing","","2","","14","IEEE","15 Jan 2010","","","IEEE","IEEE Conferences"
"10+ Years of Teaching Software Engineering with iTrust: The Good, the Bad, and the Ugly","S. Heckman; K. Stolee; C. Parnin",North Carolina State University; North Carolina State University; North Carolina State University,2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"26 Aug 2018","2018","","","1","4","This paper presents an experience report with a junior-level software engineering course at North Carolina State University. We provide an overview of the course structure and the course project, iTrust, that has been developed by students over 25 semesters. We summarize reflections from faculty, teaching assistants, and students (through course evaluations). From our lessons learned, we present our course improvements as we prepare for the next ten years of software engineering courses. Our main lessons learned are 1) course technologies have a lifespan and require periodic updating to balance student learning and working with a legacy system; 2) teaching assistant longevity and support is critical to course success; and 3) the value of working with a large, legacy system in a semester long course is supported by faculty, teaching assistants, and eventually students.","","978-1-4503-5660-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445174","software engineering education;iTrust","Software engineering;Education;Software;Reflection;Computer science;Collaboration;Tools","","","","5","","26 Aug 2018","","","IEEE","IEEE Conferences"
"Report: The Second International Workshop on Software Engineering for CSE","J. C. Carver","University of Alabama, USA",Computing in Science & Engineering,"17 Nov 2009","2009","11","6","14","19","Held during the 2009 International Conference on Software Engineering, this workshop provided a venue for software engineering researchers to interact with CSE researchers and practitioners and further strengthen the evolving dialogue between them. This report offers a brief overview of the workshop's position papers and summarizes the breakout group discussions.","1558-366X","","10.1109/MCSE.2009.203","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5337640","Computational science and engineering;CSE;software engineering;CSE software development","Software;Conferences;Programming;Software engineering;Communities;Productivity;Data mining","","13","","5","IEEE","17 Nov 2009","","","IEEE","IEEE Magazines"
"A Serious Game to Promote Object Oriented Programming and Software Engineering Basic Concepts Learning","S. Ramírez-Rosales; S. Vázquez-Reyes; J. L. Villa-Cisneros; M. De León-Sigg","Programa de Ingeniería de Software, Universidad Autónoma de Zacatecas, Zacatecas Zac, C.P., México; Programa de Ingeniería de Software, Universidad Autónoma de Zacatecas, Zacatecas Zac, C.P., México; Programa de Ingeniería de Software, Universidad Autónoma de Zacatecas, Zacatecas Zac, C.P., México; Programa de Ingeniería de Software, Universidad Autónoma de Zacatecas, Zacatecas Zac, C.P., México",2016 4th International Conference in Software Engineering Research and Innovation (CONISOFT),"26 May 2016","2016","","","97","103","Nowadays, different serious game projects help the teaching-learning process of Object Oriented Programming (OOP) or Software Engineering (SE) concepts, but none of these projects are doing an integration of both fields for knowledge to children. The research presented in this paper proposes a serious game to help comprehension of basic concepts and attributes of OOP and SE to promote teaching-learning process of these concepts for children older than eight years old through Android devices.","","978-1-5090-1074-5","10.1109/CONISOFT.2016.23","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7477917","Serious game;Object Oriented Programming;Software Engineering","Games;Software;Software engineering;Androids;Humanoid robots;Object oriented programming","","8","","24","IEEE","26 May 2016","","","IEEE","IEEE Conferences"
"Delivering Software Engineering Skills","L. Carter","Institute of Software Research, Carnegie Mellon University, Qatar",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","5","6","There is a significant difference between people who know about software engineering and those skilled in producing high quality systems on time in ways that delight the customer. Too many academics focus on the latest tools, methods and technique while they ignore a number of the important lessons new engineers must master. While many assert that what differentiates a novice from a master is the number of patterns they can recognize and then leverage for their benefit, becoming a master is so much more. Earning the respect of the client and maintaining it through the entire project is as important as the required technical skills. Being able to continuously find the risks, technical and others, and having the skill to manage them as they change is equally crucial. Truly successful software engineers in today's turbulent world must demonstrate knowledge, skill and wisdom in business relationships to the same degree they are able to solve technical problems. This presentation will survey what we have learned about bringing predictability and quality to the development of high value systems. It will then focus on the importance of addressing both knowledge and skill aspects of software engineering in the context of a professional's career. Finally, an approach for delivering such an educational experience will be described.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.51","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812665","","Software engineering;Computer science;Software quality;Maintenance engineering;Software development management;Systems engineering education;Pattern recognition;Risk management;Knowledge engineering;Business","","","","","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"Improvements to the Guide to the Software Engineering Body of Knowledge (SWEBOK) and to the Software Engineering Education Body of Knowledge (SEEK)","P. Bourque; T. C. Lethbridge","École de Technologie Supérieure, Montreal, Canada; University of Ottawa, Ottawa, Canada",10th International Workshop on Software Technology and Engineering Practice,"26 Feb 2004","2002","","","7","7","","","0-7695-1878-8","10.1109/STEP.2002.1267594","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1267594","","Software engineering;Educational technology;Software systems;Proposals;Scattering;Electric breakdown;Knowledge engineering;Conferences","","1","","","IEEE","26 Feb 2004","","","IEEE","IEEE Conferences"
"Software Engineering and Thought Originality","Y. Gao; X. Feng","Department of Computer, Zhejiang Ocean University, Zhoushan, China; Department of Computer, Zhejiang Ocean University, Zhoushan, China",2009 International Symposium on Intelligent Ubiquitous Computing and Education,"25 Aug 2009","2009","","","69","72","During the process of appearance and development of software engineering, the thought originality plays a very important role. The paper analyzes several examples of the thought originality promoting development of software engineering, such as, understanding software and software development, the form of structuring software development method, the form of object-oriented software development method and the form of agile software development method. The paper is to point out except teaching the knowledge of software engineering; we must teach them the ideas of thought originality and strengthen the ideas of thought originality, during the process of software engineerpsilas teaching.","","978-0-7695-3619-4","10.1109/IUCE.2009.72","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5223358","Software engineering;development method;thought originality;agile","Software engineering;Programming;Software maintenance;Oceans;Software development management;Ubiquitous computing;Computer science education;Pervasive computing;Knowledge engineering;Computer science","","1","","12","IEEE","25 Aug 2009","","","IEEE","IEEE Conferences"
"Augmenting teamwork skills through Web3D technologies in software engineering course","L. Chen; Q. Liu; X. Sun","Software School, Tsinghua University, Beijing, China; Software School, Tsinghua University, Beijing, China; Software School, Tsinghua University, Beijing, China",The 2010 14th International Conference on Computer Supported Cooperative Work in Design,"24 May 2010","2010","","","682","688","With the rapid pace of the computer and information development, software projects are becoming increasingly complicated. Teamwork and soft skills are especially important in software engineering and computer programming, where projects are general too strenuous for individuals to accomplish and effective teamwork is vital for efficient completion of the projects. However, these soft skills, such as collaboration, communication ability, expressing power, speaking ability, socio-cultural, independent responsibilities and collision resolution, are just very difficult to teach and learn because of the students' passive role in traditional course. The PTBL learning model combines with Web3D technologies to augment the teamwork skills in software engineering. The PTBL model which is based on Problem-Based Learning and Task-Based Learning has been targeted to overcome common limitations of the traditional course for soft skills. This paper also presents two course based on the PTBL learning model, as well as the experimental results obtained from the courses of the two case studies in software engineering course.","","978-1-4244-6763-1","10.1109/CSCWD.2010.5471887","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5471887","collaboration;communication;learning model;Web3D technologies;software engineering","Teamwork;Software engineering;Collaborative work;Programming;Collaborative software;Collaboration;Virtual environment;Sun;Communications technology;Large-scale systems","","1","","5","IEEE","24 May 2010","","","IEEE","IEEE Conferences"
"A Multidimensional Weighted-Attributes Framework (MWAF) for Evaluating Agent-Oriented Software Engineering Methodologies","A. -h. Elamy; B. Far","Department of Computing Science, University of Alberta, Edmonton, AB, Canada; Department of Electrical and Computer Engineering, University of Calgary, Calgary, Canada",2006 Canadian Conference on Electrical and Computer Engineering,"15 Jan 2007","2006","","","1690","1693","Agent-oriented software engineering (AOSE) is concerned with the use of agents in the development of distributed systems, especially in open and dynamic environments that require autonomous processes with communicative and cooperative features. In this context, AOSE came to the forefront as a new discipline to assist the engineering of complex software systems based on the multi-agent systems paradigm. As a result, a large number of AOSE methodologies and modeling techniques evolved to support the development of agent-based applications in all of their life cycle phases. Deciding what agent-oriented software engineering (AOSE) methodology is the best to adopt for developing a potential multi-agent system depends on which aspects are considered more important for the prospective application. However, up till now, there is no industry-wide agreement on the kinds of concepts a methodology should support. This lack of standardization makes the research in this area an open issue with accompanying challenges. In this paper, we propose the multidimensional weighted-attributes framework (MWAF), a new framework that provides a reliable solution with accurate results based on applying state-of-the-art statistical procedures to evaluate AOSE methodologies and come up with a set of measures that help in selecting the most appropriate methodology for developing prospective agent-based applications","0840-7789","1-4244-0038-4","10.1109/CCECE.2006.277477","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4054571","Multiagent systems;software evaluation;Agent-Oriented Software Engineering (AOSE) methodologies","Multidimensional systems;Software engineering;Multiagent systems;Application software;Software systems;Programming;Distributed computing;Context;Standardization;Data analysis","","3","","11","IEEE","15 Jan 2007","","","IEEE","IEEE Conferences"
"Top-10 risks in real-client software engineering class projects","S. Koolmanojwong","Center for Systems and Software Engineering (CSSE), University of Southern California (USC), Los Angeles, CA, USA",2014 IEEE 27th Conference on Software Engineering Education and Training (CSEE&T),"19 May 2014","2014","","","201","202","Risk identification, management, and mitigation are essential to the success of any software development projects. At the University of Southern California (USC), CSCI577ab is a graduate level software engineering course sequence that teaches the best software engineering practices, and allows students to apply the learned knowledge in developing real-client projects. One of the main focuses throughout the software development life cycle is the risk analysis. Students have to perform weekly risk identification and prepare for risk mitigation. This presentation will discuss analysis results of the top-10 risks from various perspectives such as comparison of risk patterns between development-based projects and COTS-based projects, high score teams and low score teams, and a comparison between risk exposure and risk occurrence.","2377-570X","978-1-4799-4970-0","10.1109/CSEET.2014.6816805","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6816805","","Software engineering;Software;Risk management;Conferences;Educational institutions;Modeling","","","","14","IEEE","19 May 2014","","","IEEE","IEEE Conferences"
"The Role of Collaboration Diagrams in OO Software Engineering Student Projects","L. Hai","Computer and Information Science Department,College, Old Westbury, State University of New York, Old Westbury, NY, USA",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","93","100","Among major UML diagrams, the collaboration diagram is less used by the software industry than others in object-oriented software engineering (OOSE). Despite the belief that the sequence diagram is both similar to and more useful than the collaboration diagram, the latter remains very useful for teaching OOSE through student projects. This paper compares the two diagrams, discusses the importance of analysis, and elaborates on the unique role of the collaboration diagram in analysis of OOSE student projects. An example of a real student project is presented to illustrate these points.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812680","object-oriented software engineering;collaboration diagram in UML;analysis;large project;sequence diagram","Collaborative software;Software engineering;Unified modeling language;Collaboration;Object oriented modeling;Educational institutions;Collaborative work;Information analysis;Industrial training;Computer industry","","1","","7","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"Component-Based Software Update Process in Collaborative Software Development","T. N. Nguyen","Electrical and Computer Engineering Department, Iowa State University, USA",2008 15th Asia-Pacific Software Engineering Conference,"22 Dec 2008","2008","","","437","444","Component-based software engineering (CBSE) has emerged as a key technology for developing and maintaining large scaled software systems in an outsourcing environment. These software components tend to be developed concurrently in different locations with asynchronous lifecycle. In practice, new versions of software components often change their interfaces and so require applications that use the components to be updated. To explore solution spaces for component-based software update and evolution, we have developed a formalism that is capable of modeling the process of software update in a component-based, concurrent development environment. The formalism can be used to determine the soundness of a component-based software update process, i.e., to make sure the components in a component-based software are updated in the correct order. With a sound update strategy, the formalism ensures the compatibility among components at the end of an update process in a component-based system. Our formal model provides the foundation for the implementation of a component-based software updating tool that helps developers to keep track of the evolution and updating process in a component-based software system.","1530-1362","978-0-7695-3446-6","10.1109/APSEC.2008.74","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4724576","Software Update;Component-based Software Engineering;Collaborative Software Development","Collaborative software;Outsourcing;Programming;Software maintenance;Software engineering;Software systems;Application software;Maintenance engineering;Space exploration;Software tools","","1","8","31","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE Draft International Standard - Systems and Software Engineering--Life Cycle Processes--Project Management","",,"ISO/IEC/IEEE P16326_FDIS, April 2019","23 Aug 2019","2019","","","1","42","This document provides normative content specifications for project management plans concerned with systems, and software systems. This document also provides detailed discussion and advice on applying a set of technical management processes that are common to both the system and software life cycles as covered by ISO/IEC/IEEE 15288 and ISO/IEC/IEEE 12207 respectively. The discussion and advice are intended to aid in the preparation of the normative content of project management plans.","","978-1-5044-6094-1","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8811848","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software development  management;Systems engineering and theory","","","","","","23 Aug 2019","","","IEEE","IEEE Standards"
"Second international workshop on software engineering for sensor network applications: (SESENA 2011)","K. Geihs; L. Mottola; G. P. Picco; K. Romer","University of Kassel, Germany; Swedish Institute of Computer Science, Sweden; University of Trento, Italy; University of Lübeck, Germany",2011 33rd International Conference on Software Engineering (ICSE),"10 Oct 2011","2011","","","1198","1199","We describe the motivation, focus, and organization of SESENA11, the 2nd International Workshop on Software Engineering for Sensor Network Applications. The workshop took place under the umbrella of ICSE 2011, the 33rd ACM/IEEE International Conference on Software Engineering, in Honolulu, Hawaii, on May 22, 2011. The aim was to attract researchers belonging to the Software Engineering (SE) and Wireless Sensor Network (WSN) communities, not only to exchange their recent research results on the topic, but also to stimulate discussion on the core open problems and define a shared research agenda. More information can be found at the workshop website: http://www.sesena.info.","1558-1225","978-1-4503-0445-0","10.1145/1985793.1986044","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6032634","deployment;development tools;methodology;model-driven development;sensor networks;software engineering;testing;verification","Wireless sensor networks;Educational institutions;Software engineering;Conferences;Software;Communities;USA Councils","","","","2","","10 Oct 2011","","","IEEE","IEEE Conferences"
"The Secret Life of Software Vulnerabilities: A Large-Scale Empirical Study","E. Iannone; R. Guadagni; F. Ferrucci; A. De Lucia; F. Palomba","Software Engineering (SeSa) Lab, University of Salerno, Fisciano, Italy; Software Engineering (SeSa) Lab, University of Salerno, Fisciano, Italy; Software Engineering (SeSa) Lab, University of Salerno, Fisciano, Italy; Software Engineering (SeSa) Lab, University of Salerno, Fisciano, Italy; Software Engineering (SeSa) Lab, University of Salerno, Fisciano, Italy",IEEE Transactions on Software Engineering,"6 Jan 2023","2023","49","1","44","63","Software vulnerabilities are weaknesses in source code that can be potentially exploited to cause loss or harm. While researchers have been devising a number of methods to deal with vulnerabilities, there is still a noticeable lack of knowledge on their software engineering life cycle, for example how vulnerabilities are introduced and removed by developers. This information can be exploited to design more effective methods for vulnerability prevention and detection, as well as to understand the granularity at which these methods should aim. To investigate the life cycle of known software vulnerabilities, we focus on how, when, and under which circumstances the contributions to the introduction of vulnerabilities in software projects are made, as well as how long, and how they are removed. We consider 3,663 vulnerabilities with public patches from the National Vulnerability Database—pertaining to 1,096 open-source software projects on GitHub—and define an eight-step process involving both automated parts (e.g., using a procedure based on the SZZ algorithm to find the vulnerability-contributing commits) and manual analyses (e.g., how vulnerabilities were fixed). The investigated vulnerabilities can be classified in 144 categories, take on average at least 4 contributing commits before being introduced, and half of them remain unfixed for at least more than one year. Most of the contributions are done by developers with high workload, often when doing maintenance activities, and removed mostly with the addition of new source code aiming at implementing further checks on inputs. We conclude by distilling practical implications on how vulnerability detectors should work to assist developers in timely identifying these issues.","1939-3520","","10.1109/TSE.2022.3140868","Schweizerischer Nationalfonds zur Förderung der Wissenschaftlichen Forschung(grant numbers:PZ00P2_186090 (TED)); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9672730","Software vulnerabilities;mining software repositories;empirical software engineering","Software;Codes;Software engineering;Data mining;Software systems;Software development management;Detectors","","22","","108","IEEE","6 Jan 2022","","","IEEE","IEEE Journals"
"Teaching Reform of Software Engineering Course Based on Computational Thinking","X. Dong; J. Jia","Special Education College Beijing Union University, Beijing, China; Special Education College Beijing Union University, Beijing, China",2020 International Conference on Artificial Intelligence and Computer Engineering (ICAICE),"1 Mar 2021","2020","","","399","402","For students majored in computer science, the ability to have computational thinking is an essential skill. Facilitating computational thinking cannot only help students understand the professional knowledge and principles of computer, but also bring new ideas to addressing complex problems, therefore, many colleges and universities have carried out computer professional curriculum reform based on computational thinking. Due to the high degree of abstraction of computational thinking, traditional teaching methods will cause students to understand computational thinking only at the conceptual level, and cannot realize the flexible use of computational thinking concepts. This study takes the software engineering course as an example to explain how to integrate the concepts of computational thinking into the original courses. The goal is to enable students to understand software engineering contents problems from the perspective of problem-solving.","","978-1-7281-9146-1","10.1109/ICAICE51518.2020.00084","Beijing Union University; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9361128","Computational Thinking;Problem Solving;Software Engineering;Teaching Reform","Computer science;Software design;Education;Software;Problem-solving;Artificial intelligence;Software engineering","","1","","8","IEEE","1 Mar 2021","","","IEEE","IEEE Conferences"
"Towards the Assessment of Stress and Emotional Responses of a Salutogenesis-Enhanced Software Tool Using Psychophysiological Measurements","J. -P. Ostberg; D. Graziotin; S. Wagner; B. Derntl","Institute for Software Technology, University of Stuttgart, Germany; Institute for Software Technology, University of Stuttgart, Germany; Institute for Software Technology, University of Stuttgart, Germany; Institute for Software Technology, University of Stuttgart, Germany",2017 IEEE/ACM 2nd International Workshop on Emotion Awareness in Software Engineering (SEmotion),"29 Jun 2017","2017","","","22","25","Software development is intellectual, based on collaboration, and performed in a highly demanding economic market. As such, it is dominated by time pressure, stress, and emotional trauma. While studies of affect are emerging in software engineering research, stress has yet to find its place in the literature despite that it is highly related to affect. In this paper, we study stress coping with the affect-laden framework of Salutogenesis, which is a validated psychological framework for enhancing mental health through a feeling of coherence. We propose a controlled experiment for testing our hypotheses that a static analysis tool enhanced with the Salutogenesis model will bring 1) a higher number of fixed quality issues, 2) reduced cognitive load, 3) reduction of the overall stress, and 4) positive affect induction effects to developers. The experiment will make use of validated physiological measurements of stress as proxied by cortisol and alpha-amylase levels in saliva samples, a psychometrically validated measurement of mood and affect disposition, and stress inductors such as a cognitive load task. Our hypotheses, if empirically supported, will lead to the creation of environments, methods, and tools that alleviate stress among developers while enhancing affect on the job and task performance.","","978-1-5386-2793-8","10.1109/SEmotion.2017.4","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7961887","behavioral software engineering;affect;mood;emotion;stress;salutogenesis;controlled experiment","Stress;Software engineering;Stress measurement;Tools;Software;Atmospheric measurements;Particle measurements","","3","","31","IEEE","29 Jun 2017","","","IEEE","IEEE Conferences"
"Focusing on software engineering education: a graduate certificate in software engineering","H. J. C. Ellis; J. C. McKim","Department of Engineering & Science, Rensselaer Polytechnic Institute, Hartford, CT, USA; Rensselaer Polytechnic Institute, USA",32nd Annual Frontiers in Education,"14 Jan 2003","2002","2","","F2G","F2G","The creation and evolution of a graduate-level certificate program in software engineering is presented in this paper. The software engineering certificate offered by Rensselaer Polytechnic Institute (RPI) is a four-course sequence of graduate courses in the area of software engineering and is intended to provide students with a focused understanding of the principles of software engineering and their application to software environments. The paper discusses the motivation for the original construction of the Software Engineering certificate program by the Rensselaer at Hartford (RH) branch of RPI and discusses the expected audience for the program. The program itself is detailed including an overview of the student audience, an explanation of the prerequisites of the program, and descriptions of the graduate courses in the certificate. The paper describes recent changes to the content of the Software Engineering certificate and discusses the factors that have influenced the certificate as it has evolved.","0190-5848","0-7803-7444-4","10.1109/FIE.2002.1158175","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1158175","","Software engineering;Educational programs;Computer science;Computer science education;Computer industry;Economic indicators;Engineering management;Application software;Statistical analysis;Management information systems","","1","","18","IEEE","14 Jan 2003","","","IEEE","IEEE Conferences"
"Software engineering education needs adequate modeling tools","K. Alfert; J. Pleumann; J. Schroder","Lehrstuhl für Software-Technologie, Fachbereich Informatik, Universität Dortmund, Germany; Lehrstuhl für Software-Technologie, Fachbereich Informatik, Universität Dortmund, Germany; Lehrstuhl für Software-Technologie, Fachbereich Informatik, Universität Dortmund, Germany","17th Conference on Software Engineering Education and Training, 2004. Proceedings.","30 Mar 2004","2004","","","72","77","Teaching graphical modeling languages with industrial tools is not always satisfying, since the focus of these tools lies on professional development rather than education. We present a family of modeling tools devoted explicitly to teaching and built upon a common framework. We also report on the evaluation of first teaching experiences with these tools.","1093-0175","0-7695-2099-5","10.1109/CSEE.2004.1276513","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1276513","","Software engineering;Education;Software systems;Unified modeling language;Software tools;Educational institutions;Computer industry;Communication system security;Maintenance;Computer architecture","","6","","8","IEEE","30 Mar 2004","","","IEEE","IEEE Conferences"
"Analysis on the Research of Database Programming Technology in Computer Software Engineering","K. Su","Xiamen University of Technology, Xiamen, Fujian","2022 International Conference on Cloud Computing, Big Data Applications and Software Engineering (CBASE)","24 Apr 2023","2022","","","111","114","With the rapid development of science and technology, database programming technology has become more mature and perfect, and it has been widely used in the field of computer software engineering, laying a good foundation for the development of computer software engineering and the whole society. Based on this, this paper briefly introduces the database file generation process in computer software engineering, and then summarizes the database programming technology in computer software engineering. Based on this, it analyzes the importance of database programming technology in computer software engineering, discusses the application points of database programming technology in computer software engineering, and provides support for better application of database programming technology.","","979-8-3503-9639-3","10.1109/CBASE57816.2022.00027","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10092543","computer software engineering;Database;Programming technology","Cloud computing;Databases;Programming;Big Data applications;Software;Software engineering","","","","5","IEEE","24 Apr 2023","","","IEEE","IEEE Conferences"
"Industry/University Collaboration in Software Engineering Education: Refreshing and Retuning Our Strategies","N. R. Mead","Software Engineering Institute, Carnegie Mellon University, Pittsburgh, Pennsylvania, USA",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","273","275","This panel session will explore strategies for industry/university collaboration in software engineering education. Specific discussion topics will include new strategies for successful industry/university collaboration, exploration of reasons why some of the old strategies no longer work, and regional/geographical differences noted by the international set of panelists. The panel hopes to identify new promising strategies for such collaborations. Specific industry representatives will be invited to attend and participate in the discussion.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.156","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7202972","","Software engineering;Industries;Software;Collaboration;Training;Conferences","","6","","10","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Everything is INTERRELATED: Teaching Software Engineering for Sustainability","B. Penzenstadler; S. Betz; C. C. Venters; R. Chitchyan; J. Porras; N. Seyff; L. Duboc; C. Becker","CSU Long Beach, Long Beach, USA; Karlsruhe Insitute of Technology, Karlsruhe, Germany; University of Huddersfield, Huddersfield, UK; University of Bristol, Bristol, UK; LUT, Lappeenranta, Finland; FHNW, Windisch, Switzerland; La Salle - Ramon Llull University, Barcelona, Spain; University of Toronto, Toronto, Canada",2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"26 Aug 2018","2018","","","153","162","Sustainability has become an important concern across many disciplines, and software systems play an increasingly central role in addressing it. However, teaching students from software engineering and related disciplines to effectively act in this space requires interdisciplinary courses that combines the concept of sustainability with software engineering practice and principles. Yet, presently little guidance exist on which subjects and materials to cover in such courses and how, combined with a lack of reusable learning objects. This paper describes a summer school course on Software Engineering for Sustainability (SE4S). We provide a blueprint for this course, in the hope that it can help the community develop a shared approach and methods to teaching SE4S. Practical lessons learned from delivery of this course are also reported here, and could help iterate over the course materials, structure, and guidance for future improvements. The course blueprint, availability of used materials and report of the study results make this course viable for replication and further improvement.","","978-1-4503-5660-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445193","Sustainability;software engineering;pedagogy;sustainability design;sustainability education","Sustainable development;Education;Software engineering;Unified modeling language;Software;Knowledge engineering;Analytical models","","","","57","","26 Aug 2018","","","IEEE","IEEE Conferences"
"Exploiting Group Shuffling Dynamics to Convey the Importance of Good Software Design","J. I. Benedetto; J. Navón","Computer Science Department, Pontificia Universidad Católica de Chile, Santiago, Chile; Computer Science Department, Pontificia Universidad Católica de Chile, Santiago, Chile",2020 IEEE/ACM 42nd International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"28 Dec 2020","2020","","","193","196","Analysis, modeling and design activities are integral parts of any modern software development project. However, educators often struggle in convincing undergraduate students of their value. Grasping the importance of good software design requires a certain maturity that is not yet attained in the first years of a computer science curriculum. In this study, we introduce group shuffling dynamics to a formal software design course to convey the importance of these concepts by exposing students to the experience of switching groups mid-semester. This grants a whole new perspective on the matter as the cost of managing technical debt is felt when the respective developers leave, and modeling artifacts become pivotal in aiding the incorporation of new team members. This short paper presents our first experience while implementing this methodology and shares our preliminary results derived from a first set of interviews with our students.","","978-1-4503-7124-7","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9292028","Software Education;Software Engineering;Software Design;Group Projects;Course Frameworks","Software;Software design;Software engineering;Complexity theory;Unified modeling language;Encoding;Interviews","","","","11","","28 Dec 2020","","","IEEE","IEEE Conferences"
"Junior Software Engineers’ International Communication and Collaboration Competences","A. Niva; J. Markkula; E. Annanperä","Empirical Software Engineering in Software, Systems and Services (M3S) Research Unit, University of Oulu, Oulu, Finland; Empirical Software Engineering in Software, Systems and Services (M3S) Research Unit, University of Oulu, Oulu, Finland; Empirical Software Engineering in Software, Systems and Services (M3S) Research Unit, University of Oulu, Oulu, Finland",IEEE Access,"15 Dec 2023","2023","11","","139039","139068","Present-day Software Engineering working environment is highly international. Teams are commonly formed of people from different nationalities and cultural backgrounds. The team’s productivity and efficiency depend significantly on its members’ international communication and collaboration competences. Therefore, understanding the required competences is essential. The software organizations hiring new software engineers need to be able to define and describe the competences, and the junior software engineers applying for their first jobs should know what competences they need to possess and demonstrate. In this study, to increase understanding of necessary communication and collaboration competences in the international Software Engineering working environment, competences were, first, analyzed from the job advertisements applicable to junior software engineers and, second, identified by a literature review. The results were compared to identify what competences junior software engineers should learn and demonstrate, to be competent in the international software engineer job markets. The job advertisement findings show that the international operational environment expects extensive competence in collaboration, high competence in English, and considerable competence in local language and communication. Intercultural competence and other languages are hardly expected. The literature review emphasizes inter-related communication, collaboration, intercultural, and language competences at various levels. Eventually, junior software engineers should demonstrate a tolerant and adaptable attitude, cooperativeness, independence, openness, courage to influence, oral and written social interaction skills, fluent professional English and local language communication skills as well as field-specific and general collaboration methods. The findings benefit juniors and Software Engineering education through which also employers obtain more competent jobseekers.","2169-3536","","10.1109/ACCESS.2023.3340409","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10347185","International competence;job advertisement;junior software engineer;software engineering","Software engineering;Cultural differences;Global communication;Software engineering;Knowledge engineering;Companies;Teamwork;Engineering profession","","","","92","CCBYNCND","7 Dec 2023","","","IEEE","IEEE Journals"
"Exploration and practice of software engineering core curriculum construction","G. Zhang; M. Rong","School of Computer Science and Technology, Soochow University, Suzhou, China; Shenzhen Tourism College, Jinan University, Shenzhen, China",2011 6th International Conference on Computer Science & Education (ICCSE),"26 Sep 2011","2011","","","703","705","""Software Architecture” and “Formal Methods” are two important core courses of Software Engineering. Their teaching quality and effectiveness will have an important influence on cultivating Software Engineering talents with high quality and innovation. At present, the teaching quality and effectiveness of these two undergraduate courses are unsatisfactory and have more problems in the domestic universities. Against these problems, this paper explores in the aspects of teaching content, teaching models, teaching methods and means, teacher resources and so on, in order to improve teaching quality, strive high-level elaborate courses and train qualified software engineering high level talents.","","978-1-4244-9718-8","10.1109/ICCSE.2011.6028734","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6028734","software engineering;software architecture;formal methods;curriculum construction","Software;Software architecture;Educational institutions;Computers;Knowledge engineering","","","","6","IEEE","26 Sep 2011","","","IEEE","IEEE Conferences"
"Maturing Software Engineering Knowledge through Classifications: A Case Study on Unit Testing Techniques","S. Vegas; N. Juristo; V. R. Basili","DLSIIS, Facultad de Informatica, Universidad Politecnica de Madrid, Madrid, Spain; DLSIIS, Facultad de Informatica, Universidad Politecnica de Madrid, Madrid, Spain; Fraunhofer USA슠-슠Center for Experimental Software Engineering, College Park, MD, USA",IEEE Transactions on Software Engineering,"31 Jul 2009","2009","35","4","551","565","Classification makes a significant contribution to advancing knowledge in both science and engineering. It is a way of investigating the relationships between the objects to be classified and identifies gaps in knowledge. Classification in engineering also has a practical application; it supports object selection. They can help mature software engineering knowledge, as classifications constitute an organized structure of knowledge items. Till date, there have been few attempts at classifying in software engineering. In this research, we examine how useful classifications in software engineering are for advancing knowledge by trying to classify testing techniques. The paper presents a preliminary classification of a set of unit testing techniques. To obtain this classification, we enacted a generic process for developing useful software engineering classifications. The proposed classification has been proven useful for maturing knowledge about testing techniques, and therefore, SE, as it helps to: 1) provide a systematic description of the techniques, 2) understand testing techniques by studying the relationships among techniques (measured in terms of differences and similarities), 3) identify potentially useful techniques that do not yet exist by analyzing gaps in the classification, and 4) support practitioners in testing technique selection by matching technique characteristics to project characteristics.","1939-3520","","10.1109/TSE.2009.13","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4775907","Classification;software engineering;software testing;test design techniques;testing techniques;unit testing techniques.","Software engineering;Software testing;Diseases;Knowledge engineering;System testing;Chemical elements;Application software;Software design;Chemistry;Civil engineering","","45","","31","IEEE","6 Feb 2009","","","IEEE","IEEE Journals"
"A proposed value-based software process tailoring framework","N. A. Zakaria; S. Ibrahim; M. N. Mahrin","Department of Computer Science, International Islamic University Malaysia (IIUM), Kuala Lumpur, Malaysia; Advanced Informatics School (AIS), Universiti Teknologi Malaysia (UTM), Kuala Lumpur, Malaysia; Advanced Informatics School (AIS), Universiti Teknologi Malaysia (UTM), Kuala Lumpur, Malaysia",2015 9th Malaysian Software Engineering Conference (MySEC),"23 May 2016","2015","","","149","153","Software process tailoring is the act of customising the existing software process to suit the specific software project. Current practices in software process tailoring consider project characteristics as the sole input to tailor the software process. In addition, it maintains the traditional approach whereby all the project characteristics factors are treated as being equally important. There is a need to shift the traditional software process tailoring approach to a value-centric approach by using a value-based software engineering concept. This study aims to propose a value-based software process tailoring framework to tailor the software process. A review was conducted to analyse the components embedded and input factors in the selected prior studies on software process tailoring. The framework proposed in this study uses value-based factors as input factors to tailor the software process. The framework also considers value prioritisation component, which rank the process elements according to value priority.","","978-1-4673-8227-4","10.1109/MySEC.2015.7475212","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7475212","value-based software engineering;value-based factor;software process tailoring;software process","Software;Software engineering;Context;Stakeholders;Guidelines;Computer architecture;Context modeling","","1","","29","IEEE","23 May 2016","","","IEEE","IEEE Conferences"
"Bayesian Data Analysis in Empirical Software Engineering Research","C. A. Furia; R. Feldt; R. Torkar","Faculty of Informatics, Software Institute, Università della Svizzera italiana (USI), Lugano, Switzerland; Department of Computer Science and Engineering, Softwre Engineering Division, Chalmers University of Technology and the University of Gothenburg, Gothenburg, Sweden; Department of Computer Science and Engineering, Softwre Engineering Division, Chalmers University of Technology and the University of Gothenburg, Gothenburg, Sweden",IEEE Transactions on Software Engineering,"16 Sep 2021","2021","47","9","1786","1810","Statistics comes in two main flavors: frequentist and Bayesian. For historical and technical reasons, frequentist statistics have traditionally dominated empirical data analysis, and certainly remain prevalent in empirical software engineering. This situation is unfortunate because frequentist statistics suffer from a number of shortcomings-such as lack of flexibility and results that are unintuitive and hard to interpret-that curtail their effectiveness when dealing with the heterogeneous data that is increasingly available for empirical analysis of software engineering practice. In this paper, we pinpoint these shortcomings, and present Bayesian data analysis techniques that provide tangible benefits-as they can provide clearer results that are simultaneously robust and nuanced. After a short, high-level introduction to the basic tools of Bayesian statistics, we present the reanalysis of two empirical studies on the effectiveness of automatically generated tests and the performance of programming languages. By contrasting the original frequentist analyses with our new Bayesian analyses, we demonstrate the concrete advantages of the latter. To conclude we advocate a more prominent role for Bayesian statistical techniques in empirical software engineering research and practice.","1939-3520","","10.1109/TSE.2019.2935974","Marianne and Marcus Wallenberg Foundation; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8807222","Bayesian data analysis;statistical analysis;statistical hypothesis testing;empirical software engineering","Bayes methods;Software engineering;Testing;Data analysis;Machine learning;Statistical analysis;Software","","33","","103","IEEE","20 Aug 2019","","","IEEE","IEEE Journals"
"ISO/IEC/IEEE International Draft Standard - Systems and Software Engineering -- Guide for the Utilization of ISO/IEC/IEEE 15288 in the Context of System of Systems Engineering","",,"ISO/IEC/IEEE P21840, DIS-2019","16 Apr 2019","2019","","","1","64","","","978-1-5044-5734-7","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8692775","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Systems engineering and theory","","","","","","16 Apr 2019","","","IEEE","IEEE Standards"
"Adaptation of the Initial Software Development Method for a Single Developer","M. de León-Sigg; B. J. Pérez-Valenzuela; S. Vázquez-Reyes; J. L. Villa Cisneros","Ingeniería de Software, Universidad Autónoma de Zacatecas, Zacatecas, México; Ingeniería de Software, Universidad Autónoma de Zacatecas, Zacatecas, México; Ingeniería de Software, Universidad Autónoma de Zacatecas, Zacatecas, México; Ingeniería de Software, Universidad Autónoma de Zacatecas, Zacatecas, México",2018 6th International Conference in Software Engineering Research and Innovation (CONISOFT),"21 Feb 2019","2018","","","35","41","Even when most software products' size needs the use of a work team to develop them, there are projects of small size that make them suitable for a single developer, who requires delivering products of high quality and minimizing failure. Those problems could be solved using Software Engineering practices. However, most of those practices are designed to satisfy projects requiring teamwork, and its adaption to single developer context is determined by developer's experience and skills. On the other hand, the Initial Software Development Method, (MIDS as in Spanish Método Inicial de Desarrollo de Software), was developed to train novice software engineers in software development, project management and teamwork practices. This method was adapted to a single developer context. Results show that MIDS can be easily adapted to be used in single developer contexts, without changing its essence.","","978-1-5386-6577-0","10.1109/CONISOFT.2018.8645955","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8645955","Initial Software Development Method (MIDS);single developer;software practices;software process adaptation","Software;Documentation;Software engineering;Teamwork;Planning;Proposals;Information systems","","","","26","IEEE","21 Feb 2019","","","IEEE","IEEE Conferences"
"On the Feasibility of Specialization within Software Engineering Degree Programs","N. R. Mead; T. B. Hilburn; J. McDonald; M. Ryan; D. Shoemaker","Software Engineering Institute, Carnegie Mellon University, USA; College of Engineering, Embrey-Riddle Aeronautical University, USA; Department of Software Engineering, Monmouth University, USA; School of Computing, University of Dublin, Ireland; College of Business Administration, University of Detroit Mercy, USA",20th Conference on Software Engineering Education & Training (CSEET'07),"16 Jul 2007","2007","","","362","366","The question that this panel will explore is the feasibility of specialization within software engineering degree programs, particularly at the undergraduate level. Over the years of software engineering curriculum development, we have seen good success in implementation of both undergraduate and graduate degree programs. We have also seen that some universities and students have shown an interest in specialization within these degree programs.","2377-570X","0-7695-2893-7","10.1109/CSEET.2007.36","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4271627","","Software engineering;Educational institutions;Telephony;Project management;Curriculum development;Senior members;Engineering management;Security;Iron;Electronic mail","","1","","","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"The necessary software measurement knowledge in software engineering education from the practitioners' point of view","M. Villavicencio; A. Abran","CIDIS-FIEC, Escuela Superior Politécnica del Litoral, Guayaquil, Ecuador; École de technologie supérieure, Montreal, Canada",2012 25th IEEE Canadian Conference on Electrical and Computer Engineering (CCECE),"22 Oct 2012","2012","","","1","5","The enhancement of the teaching of software measurement in software engineering education must be based on a sound assessment of the impact of previous teaching and the needs in industry. This paper investigates through a survey of software practitioners their opinions about the software measurement knowledge that new software engineers currently bring to their employers' organizations. In addition, the survey asked for their opinions on software measurement topics they see as needed in software engineering university curriculum. Survey findings indicate that basic concepts of software measurement are of great relevance for organizations. Additionally, the software measurement process, techniques and tools, measures for the requirements phase and standards are some of the preferred topics to be taught in software engineering programs.","0840-7789","978-1-4673-1433-6","10.1109/CCECE.2012.6335058","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6335058","Software measurement;software engineering;engineering education","Software measurement;Organizations;Software;Software engineering;Educational institutions;Certification","","3","","14","IEEE","22 Oct 2012","","","IEEE","IEEE Conferences"
"Industry Trends in Software Engineering Education: A Systematic Mapping Study","O. Cico; L. Jaccheri","Department of Computer Science, Norwegian University of Science and Technology, Trondheim, Norway; Department of Computer Science, Norwegian University of Science and Technology, Trondheim, Norway",2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"19 Aug 2019","2019","","","292","293","Contemporary approaches and trends, in software engineering courses have been continuously updated over the last four decades. Adaptation to industry needs is crucial for future educational purposes. The goal of this poster paper is to present some preliminary results related to what degree contemporary industry trends are being adopted in updating software engineering teaching approaches. This study is a systematic mapping. A total of 138 papers were selected based on education goals, research, and contribution type. Of the primary education topics, around 78% are related to teaching approaches, 9% to globalisation and training methods, and less than 5% to tech startup and industry innovation. Less investigated areas that have recently become common industry trends, such as tech startup models adopting lean methodology, require further attention and might create opportunities for updating the curricula. Future work will investigate possibilities for exploiting tech startups as a means for renewing future capstone courses.","2574-1934","978-1-7281-1764-5","10.1109/ICSE-Companion.2019.00120","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8802790","software engineering courses, mapping study, software engineering education, industry trends","","","2","","16","IEEE","19 Aug 2019","","","IEEE","IEEE Conferences"
"Teaching an Undergraduate Software Engineering Course using Active Learning and Open Source Projects","M. Dorodchi; E. Al-Hossami; M. Nagahisarchoghaei; R. S. Diwadkar; A. Benedict","Department of Computer Science, University of North Carolina, Charlotte, Charlotte, USA; Department of Computer Science, University of North Carolina, Charlotte, Charlotte, USA; Department of Computer Science, University of North Carolina, Charlotte, Charlotte, USA; Department of Computer Science, University of North Carolina, Charlotte, Charlotte, USA; Department of Computer Science, University of North Carolina, Charlotte, Charlotte, USA",2019 IEEE Frontiers in Education Conference (FIE),"12 Mar 2020","2019","","","1","5","This work in progress presents a model for first undergraduate software engineering course as a core course of the computer science curriculum. The course is designed to be offered in the fourth or fifth semesters (i.e., end of sophomore or beginning of the junior year) for students who have completed the introductory programming and data structures courses. In addition, they may have some basic knowledge of databases and web technologies. Moreover, in our curriculum, students at this level have not been exposed to any codebase of real-world application and particularly of large size (>10,000 lines) codebases yet. Based on such situations, the major focus of this course is on teaching the fundamentals of software engineering as a methodology of developing real-world software with an emphasis on: 1) software systems in the enterprise level, 2) basic modeling using functional, flow, and behavioral diagrams, and 3) team-based agile project development. The paper discusses our novel course configuration of the three emphasized elements above, where students work with open source software in this class as part of course activities and assignments to simulate working on an enterprise project and learn agile development Our observation as well as our industry partners indicated that students enjoy the open source challenges and demonstrate professional competency after this course. Our initial findings include a positive impact of open source and team work on our students.","2377-634X","978-1-7281-1746-1","10.1109/FIE43999.2019.9028517","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9028517","Software Engineering;Open Source Software;Professionalism in Classroom;Agile Development","Unified modeling language;Task analysis;Software engineering;Software;Teamwork;Object oriented modeling;Data models","","15","","15","IEEE","12 Mar 2020","","","IEEE","IEEE Conferences"
"Promoting innovation and entrepreneurship skills in professionals in software engineering training: An approach to the academy and bodies of knowledge context","P. A. Quezada-Sarmiento; L. Enciso; M. P. Mayorga-Diaz; S. Mengual-Ándres; W. Hernandez; J. V. Vivanco-Ochoa; P. V. -T. Carrión","Dirección de Investigación, Escuela de Informática y Multimedia, Quito, Ecuador; Facultad de Sistemas Mercantiles, Universidad Regional Autónoma de Los Andes, Ambato, Ecuador; Facultad de Ingeniería y Ciencias Agropecuarias, Universidad de las Americas, Quito, Ecuador; Universidad Tecnica Particular de Loja, Grupo de Investigación de Tecnologías Educativas, Loja, Ecuador; Department of Comparative Education and History of Education, Universitat de ValEncia, Valencia, España; Dirección General, Universidad Internacional del Ecuador, Quito, Ecuador; Universidad Tecnica Particular de Loja, Loja, Ecuador",2018 IEEE Global Engineering Education Conference (EDUCON),"24 May 2018","2018","","","796","799","Bodies of Knowledge (BOK) contain the most relevant knowledge for a discipline. BOK must embody the consensus reached by the community for which a specific BOK will be applied. This consensus is a prerequisite for the adoption of the BOK by the community. In this context, at the level of higher education, especially in the field of software engineering, the academic world shows a significant enthusiasm for the development of various competencies related to entrepreneurship and innovation, focusing on both the promotion of opportunities and the strengthening of existing connections between university and software industry. The reality is that one of the main challenges in software engineering is to find the correct entrepreneurship competencies that should be promoted when training professionals, once the latter have finished their studies and started working in either the national or international software industry. In this sense, this paper is aimed at generating innovation and entrepreneurship skills in professionals in software engineering training. These competences are based on BOK principles.","2165-9567","978-1-5386-2957-4","10.1109/EDUCON.2018.8363312","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8363312","Bodies of Knowledge;business theory model;entrepreneurship;innovation;industry;education;software engineering","Entrepreneurship;Software;Technological innovation;Software engineering;Industries;Training","","3","","33","IEEE","24 May 2018","","","IEEE","IEEE Conferences"
"A Software Requirements Ecosystem: Linking Forum, Issue Tracker, and FAQs for Requirements Management","J. Tizard; P. Devine; H. Wang; K. Blincoe","Human Aspects of Software Engineering Lab, University of Auckland, Auckland, New Zealand; Human Aspects of Software Engineering Lab, University of Auckland, Auckland, New Zealand; Human Aspects of Software Engineering Lab, University of Auckland, Auckland, New Zealand; Human Aspects of Software Engineering Lab, University of Auckland, Auckland, New Zealand",IEEE Transactions on Software Engineering,"18 Apr 2023","2023","49","4","2381","2393","User feedback is an important resource in modern software development, often containing requirements that help address user concerns and desires for a software product. The feedback in online channels is a recent focus for software engineering researchers, with multiple studies proposing automatic analysis tools. In this work, we investigate the product forums of two large open source software projects. Through a quantitative analysis, we show that forum feedback is often manually linked to related issue tracker entries and product documentation. By linking feedback to their existing documentation, development teams enhance their understanding of known issues, and direct their users to known solutions. We discuss how the links between forum, issue tracker, and product documentation form a requirements ecosystem that has not been identified in the previous literature. We apply state-of-the-art deep-learning to automatically match forum posts with related issue tracker entries. Our approach identifies requirement matches with a mean average precision of 58.9% and hit ratio of 82.2%. Additionally, we apply deep-learning using an innovative clustering technique, achieving promising performance when matching forum posts to related product documentation. We discuss the possible applications of these automated techniques to support the flow of requirements between forum, issue tracker, and product documentation.","1939-3520","","10.1109/TSE.2022.3219458","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9940985","Requirements engineering;machine learning;natural language processing;deep learning;open source software;user feedback;software engineering","Software;Documentation;Computer bugs;Open source software;Ecosystems;Browsers;Software engineering","","3","","44","IEEE","7 Nov 2022","","","IEEE","IEEE Journals"
"Helping End-User Programmers ""Engineer' Dependable Software","G. Rothermel","Department of Computer Science and Engineering, University of Nebraska, Lincolnshire, USA",2006 Sixth International Conference on Quality Software (QSIC'06),"19 Dec 2006","2006","","","11","11","Summary form only given. Not long ago, most software was written by professional programmers, who could be presumed to have an interest in software engineering methodologies and in tools and techniques for improving software dependability. Today, however, a great deal of software is written not by professionals but by end-users, who create applications such as multimedia simulations, dynamic Web pages, and spreadsheets. Applications such as these are often used to guide important decisions or aid in important tasks, and it is important that they be sufficiently dependable, but evidence shows that they frequently are not. For example, studies have shown that a large percentage of the spreadsheets created by end-users contain faults, and stories abound of spreadsheet faults that have led to multi-million dollar losses. Despite such evidence, until recently, relatively little research had been done to help end-users create more dependable software. In this paper, I'll show that it's possible to address this problem by adapting formal software engineering techniques to the realm of end-user programming. Focusing on work done in the spreadsheet application paradigm, I present several of approaches to using program analysis techniques to help end-users build more dependable spreadsheets. Behind the scenes, these methodologies use static analyses such as dataflow analysis and slicing, together with dynamic analyses such as execution monitoring, to support user tasks such as validation and fault localization. I show how, to accommodate the user base of spreadsheet languages, an interface to these methodologies can be provided that does not require users to understand the theory behind the analyses, yet supports the interactive, incremental process by which spreadsheets are created. I present empirical results gathered in the use of these methodologies, that highlight several costs and benefits tradeoffs","2332-662X","0-7695-2718-3","10.1109/QSIC.2006.33","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4032263","","Programming profession;Software engineering;Software quality;Computer science;Application software;Software tools;Software testing;Data analysis;Software maintenance;Computer aided manufacturing","","","1","","IEEE","19 Dec 2006","","","IEEE","IEEE Conferences"
"Software construction by configuration: challenges for software engineering research","I. Sommerville","Lancaster University, UK",21st IEEE International Conference on Software Maintenance (ICSM'05),"21 Nov 2005","2005","","","9","","In this article the author discusses the problems of software construction by configuration and explains why this is a challenging area for software engineering researchers. The author believes that the software maintenance research community has a key role to play in this research. Although much maintenance research has been focused on code and code analysis, the community has addressed issues of dealing with software without specifications and where the internal workings are not readily understandable. Some maintenance tools and techniques, such as program visualization, point the way to effective support for construction by configuration. The author concludes by setting out a research agenda that allows the research community to play an active part in addressing the 21st century software engineering problems.","1063-6773","0-7695-2368-4","10.1109/ICSM.2005.81","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1510097","","Software engineering;Application software;Software maintenance;Enterprise resource planning;Computer languages;Programming;Packaging;Java;Service oriented architecture;Acceleration","","3","","","IEEE","21 Nov 2005","","","IEEE","IEEE Conferences"
"Poster: When Students Meet Developers: Are Barcamps a Format for Interactive Software Engineering Education?","B. Bergande; P. Brune","University of Applied Sciences Neu-Ulm, Neu-Ulm, Bavaria; University of Applied Sciences Neu-Ulm, Neu-Ulm, Bavaria",2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion),"30 Aug 2018","2018","","","135","136","While barcamps have been adopted as a learning format for IT professionals for some years, only a few examples for their adaptation as a setting in the higher software engineering education domain have been published so far. Therefore, in this paper a teaching experiment of undergraduate students attending a developer barcamp is described and evaluated. While its results are promising in general, the impact of the intrinsic motivation and previous skills of the participants appears to be crucial for the success of the format among students, in particular for non-computer science majors.","2574-1934","978-1-4503-5663-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449467","Barcamps;Software Engineering Education;Non-Computer Science Majors;Students' Motivation","Education;Software engineering;Software;Information management;Atmosphere;Interviews;Knowledge management","","","","7","","30 Aug 2018","","","IEEE","IEEE Conferences"
"Software Engineering Education: Converging with the Startup Industry","N. M. Devadiga","Carnegie Mellon University, Pittsburgh, PA, USA",2017 IEEE 30th Conference on Software Engineering Education and Training (CSEE&T),"7 Dec 2017","2017","","","192","196","Startups are agents of change that bring in innovations and find solutions to problems at various scales. An all-rounded engineering team is a key driver for the ability to execute the entrepreneurial ambition, from building a minimum viable product to later stages of product vision. Software engineering education provides students with the knowledge to transition to mature companies with defined structure in place successfully. However, the fluidity, risk, time-sensitivity, and uncertainty of startups demand a dynamic and agile set of skills to rapidly identify, conceptualize and deliver features as per market needs. This requires the adoption of latest development trends in software processes, engineering and DevOps practices with automation to iterate fast with low governance and the ability to take on multiple roles. This paper presents a study of the dynamics and engineering at startups and compares it with the current curriculum of software engineering.","2377-570X","978-1-5386-2536-1","10.1109/CSEET.2017.38","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8166702","Software Engineering Education;Startups;Startup Engineering;Innovation and Education;Software Engineering Degree Programs","Conferences;Software engineering;Training","","17","","26","IEEE","7 Dec 2017","","","IEEE","IEEE Conferences"
"Assessing the instrument reliability and validity of risk mitigation for anti software ageing model during software maintenance","T. I. Azman; N. C. Pa; R. N. H. Nor; Y. Y. Jusoh","Department of Software Engineering and Information System, Universiti Putra Malaysia, Malaysia; Department of Software Engineering and Information System, Universiti Putra Malaysia, Malaysia; Department of Software Engineering and Information System, Universiti Putra Malaysia, Malaysia; Department of Software Engineering and Information System, Universiti Putra Malaysia, Malaysia",2019 6th International Conference on Research and Innovation in Information Systems (ICRIIS),"23 Apr 2020","2019","","","1","6","Longer software lifecycle is important to ensure its ability to provide on-going function and services. However, software relevancy and importance may reduce once its performance and quality degrades through inevitable ageing progress. Even though software ageing is inevitable, the progress of ageing in software could be slowed down and delayed. To achieve this, we may need to determine and understand the causes contributing to this phenomenon. Little attention had been paid to address software ageing from software engineering perspective, ageing caused by failures to modify the software or from the results of software changes. Hence, this motivate the study to determine the risks of performing software changes that influence software ageing occurrences and propose a method to tackle software ageing from software engineering perspective to reduce risks impact before it become apparent through risk mitigation. This paper discusses on the reliability and validity of instrument designed to conduct a study among software practitioners in order to gain insight on the risks of performing changes to software influencing software ageing and determine risk mitigation effect on the relationship between software ageing and anti software ageing. Preliminary study was conducted through content validity interview and pilot study. The results from pilot study conducted shows the items in the questionnaire has a good level of reliability to measure each variable in the model, hence the instrument can be used for further studies.","2324-8157","978-1-7281-6726-8","10.1109/ICRIIS48246.2019.9073279","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9073279","Risk Mitigation;Anti Software Ageing;Software Ageing;Software Maintenance","Software;Aging;Maintenance engineering;Risk management;Software engineering;Loss measurement;Software measurement","","5","","50","IEEE","23 Apr 2020","","","IEEE","IEEE Conferences"
"Workshop on games and software engineering: (GAS 2011)","J. Whitehead; C. Lewis","University of California, Santa Cruz, Santa Cruz, CA, USA; University of California, Santa Cruz, Santa Cruz, CA, USA",2011 33rd International Conference on Software Engineering (ICSE),"10 Oct 2011","2011","","","1194","1195","At the core of video games are complex interactions leading to emergent behaviors. This complexity creates difficulties architecting components, predicting their behaviors and testing the results. The Workshop on Games and Software Engineering (GAS 2011) provides an opportunity for software engineering researchers and practitioners who work with games to come together and discuss how these two areas can be intertwined.","1558-1225","978-1-4503-0445-0","10.1145/1985793.1986042","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6032632","software engineering;video games","Games;Software engineering;Conferences;Educational institutions;Testing;Communities","","","","","","10 Oct 2011","","","IEEE","IEEE Conferences"
"Incorporating innovation-oriented education into the software engineering course","Y. Gao; X. Feng","Department of Computer, Zhejiang Ocean University, Zhoushan, China; Department of Computer, Zhejiang Ocean University, Zhoushan, China","2009 IEEE International Conference on Systems, Man and Cybernetics","4 Dec 2009","2009","","","5108","5110","The strong sense of innovation represents the prominent characteristics of the software engineering course in contrast with other major courses of computer. It decided that the course itself was the best carrier of implementing innovation-oriented education. In order to incorporate innovation-oriented education into software engineering courses and foster students' sense of innovation, new thoughts of teaching this course was proposed.","1062-922X","978-1-4244-2793-2","10.1109/ICSMC.2009.5346019","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5346019","Software Engineering;Innovation-Oriented Education;Carrier;New Thoughts","Software engineering;Technological innovation;Computer science education;Object oriented modeling;Oceans;Software standards;Programming profession;Object oriented programming;Software maintenance;Unified modeling language","","","","10","IEEE","4 Dec 2009","","","IEEE","IEEE Conferences"
"Belief and Evidence: How Software Engineers Form Their Opinions","P. Devanbu; T. Zimmermann; C. Bird","Department of Computer Science, University of California, Davis; Microsoft Research; Microsoft Research",IEEE Software,"29 Nov 2018","2018","35","6","72","76","A study at Microsoft revealed how developers’ opinions about software engineering truths can be subjectively based.","1937-4194","","10.1109/MS.2018.4321246","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8552655","evidence-based software engineering;software engineering;software development;Redirections","Software development;Software engineering","","10","","8","IEEE","29 Nov 2018","","","IEEE","IEEE Magazines"
"The challenges of software engineering education","C. Ghezzi; D. Mandrioli","Dipartimento di Elettronica e Informazione, Politecnico di Milano, Milan, Italy; Dipartimento di Elettronica e Informazione, Politecnico di Milano, Milan, Italy","Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.","19 Dec 2005","2005","","","637","638","We discuss the technical skills that a software engineer should possess. We take the viewpoint of a school of engineering and put the software engineer's education in the wider context of engineering education. We stress both the common aspects that crosscut all engineering fields and the specific issues that pertain to software engineering. We believe that even in a continuously evolving field like software, education should emphasize principles and recognize what are the stable and long-lasting design concepts. Even though the more mundane technological solutions cannot be ignored, the students should be equipped with skills that allow them to dominate the evolution of technology.","1558-1225","1-59593-963-2","10.1109/ICSE.2005.1553624","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1553624","","Software engineering;Educational institutions;Computer science education;Knowledge engineering;Continuing education;Engineering education;Books;Courseware;Stress;Information science","","","","3","","19 Dec 2005","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE Draft International Standard - Systems and Software Engineering -- Software Life Cycle Processes -- Part 2: Relation and Mapping Between ISO/IEC/IEEE 12207-1:2017 and ISO/IEC/IEEE 12207:2008","",,"ISO/IEC/IEEE CD2 P12207-2: 201x(E), February 2019","11 Apr 2019","2019","","","1","206","","","978-1-5044-5713-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8686426","","IEEE Standards;Software engineering;Systems engineering and theory;Product life cycle management;ISO Standards;IEC Standards","","","","","","11 Apr 2019","","","IEEE","IEEE Standards"
"Cyber Sciences and Software Engineering","N. R. Mead; D. S. Gibson; E. K. Hawthorne","Software Engineering Institute, Carnegie Mellon University, Pittsburgh, United States of America; United States Air Force Academy, Colorado Springs, United States of America; Union County College, Cranford, United States of America",2015 IEEE 28th Conference on Software Engineering Education and Training,"17 Aug 2015","2015","","","21","23","This paper provides background and context for our planned presentation and discussion that will explore the emerging computing-based discipline of cyber sciences, focusing on its relationship to software engineering. We will also discuss the relationship of the Cyber Education Project to other related work, how educators can get involved, accreditation of cyber sciences degrees, and more. Results of our discussion will be provided to the Cyber Education Project.","2377-570X","978-1-4673-6701-1","10.1109/CSEET.2015.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203848","cyber sciences; software engineering; education; curricula; cyber-security; centers of academic excellence","Software;Software engineering;Computer security;NIST;Training;National security","","1","","19","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"The Requirements Engineering Reference Model: A Fundamental Impediment to Using Formal Methods in Software Systems Development","D. M. Berry","University of Waterloo, Waterloo, ON, Canada",2019 IEEE 27th International Requirements Engineering Conference Workshops (REW),"19 Dec 2019","2019","","","109","109","This talk attempts to explain why formal methods are not being used to develop large-scale software-intensive computer-based systems by appealing to the Reference Model for Requirements and Specifications by Gunter, Gunter, Jackson, and Zave.","","978-1-7281-5165-6","10.1109/REW.2019.00024","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8933740","formal methods, requirements engineering, requirements engineering reference model, software development","Requirements engineering;Computational modeling;Conferences;Computer languages;Software engineering;Software systems;Indexes","","","","1","IEEE","19 Dec 2019","","","IEEE","IEEE Conferences"
"Towards Better Coverage of Dataset with Software Product Line Engineering","L. Shi; M. Kondo; N. Ubayashi; Y. Kamei","Graduate School and Faculty of Information Science and Electrical Engineering, Kyushu University, Fukuoka, Japan; Graduate School and Faculty of Information Science and Electrical Engineering, Kyushu University, Fukuoka, Japan; Graduate School and Faculty of Information Science and Electrical Engineering, Kyushu University, Fukuoka, Japan; Graduate School and Faculty of Information Science and Electrical Engineering, Kyushu University, Fukuoka, Japan","2021 IEEE 21st International Conference on Software Quality, Reliability and Security Companion (QRS-C)","1 Apr 2022","2021","","","1173","1174","The coverage of the dataset is one of the important factors for training deep learning models. This coverage measures how well the dataset covers the cases, which can be defined by metrics, where deep learning models should learn. Hence, the lower coverage has negative impacts on the training of deep learning models. In this paper, we introduce a concept to achieve high coverage in terms of multiple metrics and achieve a better coverage of the dataset. In particular, we propose data assets inspired by software assets of software product line engineering. A data asset indicates a subset of a dataset extracted by various metrics. Optimizing the proportion of such data assets in the dataset improves the coverage in terms of the corresponding metrics. In other words, we achieve the better coverage of the dataset based on data assets. To propose this approach, we describe our future research plan.","2693-9371","978-1-6654-7836-6","10.1109/QRS-C55045.2021.00180","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9742068","software product line engineering;deep learning","Measurement;Deep learning;Training;Conferences;Software quality;Reliability engineering;Software product lines","","","","5","IEEE","1 Apr 2022","","","IEEE","IEEE Conferences"
"The synergy of engineering and research aspects in Software Engineering Education","A. Benabid; G. Al-Hudhud","Software Engineering Department, King Saud University, Saudi Arabia; Information Technology Department, King Saud University, Saudi Arabia",2014 IEEE 27th Conference on Software Engineering Education and Training (CSEE&T),"19 May 2014","2014","","","44","48","The Software Engineering Education has to intrinsically enable students to master today's technology and immediately practical skills required by the industry, and on the other hand, to meet the challenges of the future and acquire long-term knowledge. In this paper, we report our approach to implement this duality in the context of “Object Oriented Software Engineering” course in King Saud University.","2377-570X","978-1-4799-4970-0","10.1109/CSEET.2014.6816780","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6816780","","Software engineering;Software;Educational institutions;Industries;Object oriented modeling;Context","","","","12","IEEE","19 May 2014","","","IEEE","IEEE Conferences"
"Factors influencing Software Engineering Career Choice of Andean Indigenous","M. Sánchez-Gordón; R. Colomo-Palacios","Department of Computer Sciences, Østfold University College, Norway; Department of Computer Sciences, Østfold University College, Norway",2020 IEEE/ACM 42nd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"1 Dec 2020","2020","","","264","265","A diverse workforce is not just ""nice to have"", it is a reflection of a changing world. Such a diverse workforce brings high value to organizations and it is essential for developing the national technological innovation, economic vitality, and global competitiveness. Despite the importance of diversity in the broad field of computing, there is not only a comparatively low representation of women but also other underrepresented minorities, such as indigenous people. To gain insights about their career choice, we conducted 10 interviews with Andean indigenous. The findings reveal that seven factors (social support, exposure to digital technology, autonomy of use, purpose of use, digital skill, identity, and work ethic) help to understand how and why indigenous people choose a career related to Software Engineering. This exploratory study also contributes to challenge common stereotypes and perceptions about indigenous people as low-qualified workers, academically untalented, and unmotivated.","2574-1926","978-1-4503-7122-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9270401","Software Engineering;Career choice;Genre;Ethnicity;Diversity","Engineering profession;Software;Software engineering;Cultural differences;Interviews;Encoding;Ethics","","","","7","","1 Dec 2020","","","IEEE","IEEE Conferences"
"Software reuse research: status and future","W. B. Frakes; Kyo Kang","Computer Science Department, Virginia Technology, Falls Church, VA, USA; Department of Computer Science and Engineering, Pohang University of Science and Technology, Pohang, South Korea",IEEE Transactions on Software Engineering,"8 Aug 2005","2005","31","7","529","536","This paper briefly summarizes software reuse research, discusses major research contributions and unsolved problems, provides pointers to key publications, and introduces four papers selected from The Eighth International Conference on Software Reuse (ICSR8).","1939-3520","","10.1109/TSE.2005.85","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1492369","Index Terms- Software reuse;domain engineering;research;metrics;architectures;generators;finance.","Software quality;Software reusability;Software engineering;Computer science;Finance;Productivity;Reliability engineering;Software systems;Software libraries;Software architecture","","410","3","18","IEEE","8 Aug 2005","","","IEEE","IEEE Journals"
"C4 model in a Software Engineering subject to ease the comprehension of UML and the software","A. Vázquez-Ingelmo; A. García-Holgado; F. J. García-Peñalvo","GRIAL Research Group, University of Salamanca, Salamanca, Spain; GRIAL Research Group, University of Salamanca, Salamanca, Spain; GRIAL Research Group, University of Salamanca, Salamanca, Spain",2020 IEEE Global Engineering Education Conference (EDUCON),"25 Jun 2020","2020","","","919","924","Software engineering provides the competences and skills to design and develop robust, secure and efficient applications that solve real problems. Students have to develop their abstract thinking to find solutions taking into account not only technical development, but economic and social impact. In previous years, different changes have been introduced in the teaching methods with significant outcomes. However, students are still facing difficulties with one of the core contents of the subject, UML. For this reason, the present work aims to introduce C4 model as a complement of the existing UML diagrams. This proposal uses the two first levels of the C4 model to complement the requirements elicitation process, traditionally based only on use cases, to let students start the design of their systems without going into greater technical details.","2165-9567","978-1-7281-0930-5","10.1109/EDUCON45650.2020.9125335","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9125335","UML;software architecture;software documentation;C4 model;software engineering;abstraction","Economics;Conferences;Unified modeling language;Software;Proposals;Engineering education;Software engineering","","17","","27","IEEE","25 Jun 2020","","","IEEE","IEEE Conferences"
"New sustainable teaching approaches in software engineering education","M. Kropp; A. Meier","Northwestern Switzerland, University of Applied Sciences and Arts, Windisch, Switzerland; Zurich University of Applied Sciences, Winterthur, Switzerland",2014 IEEE Global Engineering Education Conference (EDUCON),"5 Jun 2014","2014","","","1019","1022","Ten years ago, it was usual that projects in the software industry ran on for years before the customer was able to lay his hands on the product he had ordered. This often resulted in delays, budget overruns and disappointing deliverables. During the last decade, the Agile approach has been taking over software project management, shortening product development cycles from a few years to a few weeks or even days. Recently, the agile approach has even been used for developing a new car which runs 100 miles per gallon [1]. Several recent surveys [2], [3] show that agile methodologies like Scrum, Extreme Programming or Kanban have successfully been adopted by many companies to develop software. However, agile methodologies do not come for free. A different set of skills, or agile practices as they are called, are necessary for the software engineers in order to be able to sucessfully deliver high-quality software at the end of every iteration. The same surveys show that only few of the agile practices are used and even fewer are applied consequently and thoroughly. This is to a great extent due to the lack of skilled software engineers. Although teaching agile software development has drawn some attention in recent research, we do not yet seem to be able to “deliver” the appropriately skilled engineers. What is the reason for this, and more importantly, how can we improve the situation? In this position paper we propose a more holistic approach for teaching agile software engineering, in which the required agile practices and values are not only integrated theoretically but also practically applied and repeated until they become a habit to students and software engineers.","2165-9567","978-1-4799-3191-0","10.1109/EDUCON.2014.6826229","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6826229","Software Engeering;Openness;Agile Processes;Education","Software;Education;Software engineering;Companies;Conferences;Programming profession","","9","","14","IEEE","5 Jun 2014","","","IEEE","IEEE Conferences"
"Bridging the gaps II: bridging the gaps between software engineering and human-computer interaction","R. Kazman; L. Bass; B. John","Software Engineering Institute, Pittsburgh, PA, USA; Software Engineering Institute, Pittsburgh, PA, USA; Human Computer Interaction Institute, Carnegie Mellon University, Pittsburgh, PA, USA",Proceedings. 26th International Conference on Software Engineering,"26 Jul 2004","2004","","","773","774","The Second International Workshop on the Relationships between Software Engineering and Human- Computer Interaction was held on May 24-25, 2004 as part of the 2004 International Conference on Software Engineering, in Edinburgh, Scotland. This workshop was the second at ICSE and the fourth in a series held at international conferences in the past two years. It was motivated by a perception among researchers, practitioners, and educators that the fields of Human-Computer Interaction and Software Engineering were largely ignoring each other and that they needed to work together more closely and to understand each other better. This report describes the motivation, goals, organization, and outputs of the workshop.","0270-5257","0-7695-2163-0","10.1109/ICSE.2004.1317531","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1317531","","Software engineering;Human computer interaction;Conferences;User interfaces;Software systems;Computer industry;Best practices;Vocabulary;Bridges;Educational programs","","1","","1","IEEE","26 Jul 2004","","","IEEE","IEEE Conferences"
"Search Based Software Engineering: A Review from the Brazilian Symposium on Software Engineering","S. R. Vergilio; T. E. Colanzi; A. T. R. Pozo; W. K. G. Assuncao","DInf, Federal University of Paraná (UFPR), Curitiba, Brazil; DIN-State University of Maringá (UEM), Maringa, Brazil; DInf, Federal University of Paraná (UFPR), Curitiba, Brazil; DInf, Federal University of Paraná (UFPR), Curitiba, Brazil",2011 25th Brazilian Symposium on Software Engineering,"3 Nov 2011","2011","","","50","55","Search Based Software Engineering (SBSE) is the field of software engineering research and practice that applies search based techniques to solve different Software Engineering problems. SBSE contributes to reduce efforts and costs associated to software development since the solutions found by search techniques satisfy constraints that are usually in conflict and, in general, are very difficult to be obtained for software engineers. The field is emerging in Brazil, the number of published works and research groups have significantly increased in the last three years. The goal of this paper is to divulge SBSE, serving as a reference to this novel field and contributing to its consolidation in Brazil. The paper introduces SBSE concerns and provides a review of works produced by the Brazilian community, related to the Brazilian Symposium on Software Engineering (SBES), discussing trends, challenges, and open research problems for this emergent area.","","978-1-4577-2187-8","10.1109/SBES.2011.13","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6065145","search based algorithms;software engineering","Software engineering;Software;Optimization;Communities;Software testing;Programming","","1","","48","IEEE","3 Nov 2011","","","IEEE","IEEE Conferences"
"An industry-academia team-teaching case study for software engineering capstone courses","A. Rusu; M. Swenson",Fairfield University; Fairfield University,2008 38th Annual Frontiers in Education Conference,"22 Dec 2008","2008","","","F4C-18","F4C-23","Exposing software engineering students to newest industry practices and latest research and theories allows them to acquire and maintain the technical skills necessary to continually adjust to the rapid changes that occur in technology. Close interaction with industry members help the university and engineering programs identify real-world problems and their solutions and incorporate them into the curriculum. Software engineering capstone projects require the development of major software products and are usually either industry-generated or research-based. They are either assigned for the overall supervision of one instructor or each project is supervised by different instructors independently. In this paper, the authors present a case study in which the software engineering capstone projects have been team-coordinated by two instructors: one full-time faculty and one part-time faculty (full-time industry practitioner), thus combining two complementary sets of skills towards the mentoring of the software engineering students. Two capstone projects (one industry-generated and the other research-based) are also presented with the contribution of each instructor described.","2377-634X","978-1-4244-1969-2","10.1109/FIE.2008.4720543","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4720543","Capstone projects;Industry-academia partnership;Software engineering education;Undergraduate and graduate","Computer industry;Software engineering;Maintenance engineering;Employee welfare;Software performance;Software tools;Project management;Software development management;Engineering management;Software maintenance","","8","","12","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Conserving software-based artwork through software engineering","F. T. Marchese","Department of Computer Science, Pace University, New York, NY, USA",2013 Digital Heritage International Congress (DigitalHeritage),"20 Feb 2014","2013","2","","181","184","A long term strategy is offered for conserving software-based digital art in perpetuity based on software engineering practice. Software engineering is a rigorous, formalized practice approach to preservation that engages all stakeholders, including: artists, curators, and conservators; offering a breadth of methodologies and degrees of rigor that may be adapted by organizations of all sizes. In this paper the focus is on the software engineering maintenance process, and how it converts digital art into formats that should make it preservable and displayable in the deep future.","","978-1-4799-3170-5","10.1109/DigitalHeritage.2013.6744752","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6744752","digital art;software engineering;software maintenance;conservation","Software;Maintenance engineering;Software engineering;Documentation;Hardware;Art;Aging","","2","","20","IEEE","20 Feb 2014","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE International Standard - Systems and software engineering — Developing information for users in an agile environment","",,ISO/IEC/IEEE 26515:2018(E),"20 Dec 2018","2018","","","1","32","This document provides requirements and guidance to information developers and related roles on how to adapt the processes described in the ISO/IEC/IEEE 265NN family of International Standards to develop quality information for users. This document is independent of the agile development methods and tools that are used to produce the software. This document gives an overview of agile methodologies although it neither encourages nor discourages the use of any particular agile methodology. Therefore, this document uses generic agile terminology as much as possible.","","978-1-5044-5297-7","10.1109/IEEESTD.2018.8584455","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8584455","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Systems engineering and theory;Agile software development","","1","","","","20 Dec 2018","","","IEEE","IEEE Standards"
"Towards an Ethical Foundation of Green Software Engineering","H. Münzel",APHIN e.V.,2015 IEEE 10th International Conference on Global Software Engineering Workshops,"3 Sep 2015","2015","","","23","26","Code of ethics for software engineers already exists. However, none of these explicitly faces principles of green or sustainable software engineering. This paper tries to address this shortcoming by exposing an ethical foundation, which emphasizes the need for green software engineering. After that, the question of responsibility will be asked, and what the ethical foundation can contribute hereunto.","2329-6313","978-1-4799-9874-6","10.1109/ICGSEW.2015.17","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7227529","ethics;code of ethics;green software engineering","Ethics;Software;Computers;Software engineering;Green products;Sustainable development;Economics","","2","","17","IEEE","3 Sep 2015","","","IEEE","IEEE Conferences"
"The University of Ottawa Undergraduate Software Engineering Program: Leading and Innovative","T. C. Lethbridge; L. Peyton; D. Amyot; S. Somé","School of Electrical Engineering and Computer Science, University of Ottawa, Ottawa, Canada; School of Electrical Engineering and Computer Science, University of Ottawa, Ottawa, Canada; School of Electrical Engineering and Computer Science, University of Ottawa, Ottawa, Canada; School of Electrical Engineering and Computer Science, University of Ottawa, Ottawa, Canada",2017 IEEE 30th Conference on Software Engineering Education and Training (CSEE&T),"7 Dec 2017","2017","","","5","6","We nominate the University of Ottawa Software Engineering Program for the 2017 CSEE&T Hall of Fame. This was one of the first three undergraduate software engineering programs in Canada. It was used to help guide the development of the IEEE/ACM SE2004 curriculum recommendations. It is accredited by both the Canadian Engineering Accreditation Board and the Computer Science Accreditation Council of Canada. It is a bilingual English-French program that has undergone continuous improvement over the years, and now is co-op only, meaning that all its students are required to have three work terms of job experience before graduating.","2377-570X","978-1-5386-2536-1","10.1109/CSEET.2017.12","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8166676","software engineering undergraduate program","Hafnium;Conferences;Software engineering;Training;Artificial intelligence","","2","","9","IEEE","7 Dec 2017","","","IEEE","IEEE Conferences"
"Research on the Core Capabilities Cultivation Mode of Software Engineering Talents for New Engineering","M. Zhang; X. HU; B. Xie; H. Li","Anhui Xinhua University No.555 Wangjiang West Road, Hefei, Anhui, China; Anhui Xinhua University No.555 Wangjiang West Road, Hefei, Anhui, China; Anhui Wenda University of Information No.3, Linlin Avenue, Hefei, Anhui, China; Anhui Xinhua University No.555 Wangjiang West Road, Hefei, Anhui, China",2020 International Conference on Big Data and Informatization Education (ICBDIE),"28 Jul 2020","2020","","","225","228","The goal of new engineering education is to cultivate innovative and outstanding engineering talents with sustainable competitiveness with new ideas and new models. Based on the concept of new engineering, by grasping the development trend and industrial policy of new industry and combining with the training goal of software engineering talents, the paper puts forward five core abilities that software engineering talents of new engineering should possess. Three “trinity” application- oriented cultivating talents modes are constructed, namely, the trinity education subject of “ school, enterprise and research institution”, “general education course, professional course and career course” and the trinity cultivate mode of “ learning, using and creating”. The teaching mode of software engineering talents facing new engineering is innovated from the top-level design.","","978-1-7281-5900-3","10.1109/ICBDIE50010.2020.00058","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9150258","new engineering;engineering education;core capabilities;software engineering","Software engineering;Training;Technological innovation;Entrepreneurship;Engineering education;Industries","","2","","9","IEEE","28 Jul 2020","","","IEEE","IEEE Conferences"
"Mining Software Engineering Data","T. Xie; J. Pei; A. E. Hassan","North Carolina State University, USA; Simon Fraser University, Canada; University of Victoria, Canada",29th International Conference on Software Engineering (ICSE'07 Companion),"4 Jun 2007","2007","","","172","173","Software engineering data (such as code bases, exe- cution traces, historical code changes, mailing lists, and bug databases) contains a wealth of information about a project's status, progress, and evolution. Using well- established data mining techniques, practitioners and re- searchers can explore the potential of this valuable data in order to better manage their projects and to produce higher-quality software systems that are delivered on time and within budget. This tutorial presents the latest research in mining Soft- ware Engineering (SE) data, discusses challenges associ- ated with mining SE data, highlights SE data mining suc- cess stories, and outlines future research directions. Partic- ipants will acquire knowledge and skills needed to perform research or conduct practice in the field and to integrate data mining techniques in their own research or practice.","","0-7695-2892-9","10.1109/ICSECOMPANION.2007.50","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4222731","","Data mining;Software engineering;Databases;Software systems;Open source software;Data analysis;Research and development;USA Councils;Financial management;Project management","","17","2","9","IEEE","4 Jun 2007","","","IEEE","IEEE Conferences"
"Engaging students through practitioner-centered software engineering","R. Swamidurai; D. Umphress","Department of Mathematics and Computer Science, Alabama State University, Montgomery, USA; Department of Mathematics and Computer Science, Alabama State University, Montgomery, USA",SoutheastCon 2015,"25 Jun 2015","2015","","","1","5","This paper presents an experience in designing and implementing a practitioner-centered software engineering based learning model for an undergraduate software engineering course. Practitioner-centered software engineering is a one-person process developed specifically to apply cutting-edge industry techniques at each point in the software lifecycle. Usage of this model helps software engineers make accurate plans, consistently meet commitments, improve quality, predictability, productivity, and customer satisfaction, and deliver high-quality products. Using this model, students experience a software development effort from inception to final delivery. We describe the design and implementation of a practitioner-centered software engineering model for undergraduate software engineering course.","1558-058X","978-1-4673-7300-5","10.1109/SECON.2015.7132985","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7132985","Practitioner-centered software engineering;test driven development;software process;personal software process","Software;Context;Software engineering;Education;Presses","","2","","8","IEEE","25 Jun 2015","","","IEEE","IEEE Conferences"
"Trends in Embedded Software Engineering","P. Liggesmeyer; M. Trapp","University of Kaiserslautern, Germany; Fraunhofer Institute of Experimental Software Engineering (IESE), Germany",IEEE Software,"17 Apr 2009","2009","26","3","19","25","Software's importance in the development of embedded systems has been growing rapidly over the last 20 years. Because of current embedded systems' complexity, they require sophisticated engineering methods for systematically developing high-quality software. Embedded software development differs from IT system development in several ways. For example, IT systems developers can use standard hardware and software platforms and don't face the resource requirements that embedded systems developers must take into account. To meet embedded software's extrafunctional requirements, embedded systems development is shifting from programming to model-driven development. Another important trend is the emphasis on the quality assurance of safety-related systems.","1937-4194","","10.1109/MS.2009.80","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4814954","embedded systems development;model-driven development;embedded software;quality assurance;safety-critical systems","Embedded software;Object oriented modeling;Mathematical model;Embedded system;Hardware;IEC standards;Costs;Automotive engineering;Computer languages;Operating systems","","74","","14","IEEE","17 Apr 2009","","","IEEE","IEEE Magazines"
"Agile development research based on software engineering to software testing","Q. Chen; L. Guo; Y. Feng","College of Computer and Software, Shaanxi Institute of Technology, Xi’an, China; College of Computer and Software, Shaanxi Institute of Technology, Xi’an, China; Shanghai Radio Equipment Research Institute, Shanghai, China",2023 9th International Conference on Systems and Informatics (ICSAI),"9 Feb 2024","2023","","","1","3","This article conducts in-depth research from software engineering to software testing teaching, introducing the agile development model and XP method of software development models, Scrum mode and its process, TDD, automated testing and other new trends and technologies. The purpose is to improve software development efficiency, reduce software testing costs, improve software quality and user experience, and finally advocate the use of Scrum mode and TDD in agile development, combined with the CDIO concept to strengthen team cooperation, So as to more efficiently complete the implementation and delivery tasks of software projects.","","979-8-3503-8370-6","10.1109/ICSAI61474.2023.10423308","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10423308","Agile Development model;XP approach;Scrum model;test-driven development (TDD);automated testing techniques;CDIO","Software testing;Software quality;Market research;User experience;Scrum (Software development);Task analysis;Software engineering","","","","6","Crown","9 Feb 2024","","","IEEE","IEEE Conferences"
"Toward sustainable software engineering: NIER track","N. Amsel; Z. Ibrahim; A. Malik; B. Tomlinson","Donald Bren School of Information and Computer Sciences, University of California, Irvine, USA; Donald Bren School of Information and Computer Sciences, University of California, Irvine, USA; Donald Bren School of Information and Computer Sciences, University of California, Irvine, USA; Donald Bren School of Information and Computer Sciences, University of California, Irvine, USA",2011 33rd International Conference on Software Engineering (ICSE),"10 Oct 2011","2011","","","976","979","Current software engineering practices have significant effects on the environment. Examples include e-waste from computers made obsolete due to software upgrades, and changes in the power demands of new versions of software. Sustainable software engineering aims to create reliable, long-lasting software that meets the needs of users while reducing environmental impacts. We conducted three related research efforts to explore this area. First, we investigated the extent to which users thought about the environmental impact of their software usage. Second, we created a tool called GreenTracker, which measures the energy consumption of software in order to raise awareness about the environmental impact of software usage. Finally, we explored the indirect environmental effects of software in order to understand how software affects sustainability beyond its own power consumption. The relationship between environmental sustainability and software engineering is complex; understanding both direct and indirect effects is critical to helping humans live more sustainably.","1558-1225","978-1-4503-0445-0","10.1145/1985793.1985964","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6032566","energy consumption;green it;software;sustainability","Green products;Air pollution;Software engineering;Energy consumption;Software systems;Computers","","18","","23","","10 Oct 2011","","","IEEE","IEEE Conferences"
"The 6th International Workshop on Software Engineering for Secure Systems (SESS'10)","S. -W. Lee; M. Monga; J. Jurjens","College of Computing and Informatics, University of North Carolina at Charlotte, Charlotte, NC, USA; Dipartimento Informatica e Comunicazione, Università degli Studi di Milano, Milan, Italy; Department of Computer Science, TU Dortmund, Dortmund, Germany",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","433","434","The 6th edition of the SESS workshop aims at providing a venue for software engineers and security researchers to exchange ideas and techniques. In fact, software is at core of most of the business transactions and its smart integration in an industrial setting may be the competitive advantage even when the core competence is outside the ICT field. As a result, the revenues of a firm depend directly on several complex software-based systems. Thus, stakeholders and users should be able to trust these systems to provide data and elaborations with a degree of confidentiality, integrity, and availability compatible with their needs. Moreover, the pervasiveness of software products in the creation of critical infrastructures has raised the value of trustworthiness and new efforts should be dedicated to achieve it. However, nowadays almost every application has some kind of security requirement even if its use is not to be considered critical.","1558-1225","978-1-60558-719-6","10.1145/1810295.1810415","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062234","information security;secure systems;software engineering","Security;Software engineering;Conferences;Educational institutions;Cities and towns;Software;Testing","","","","12","","27 Oct 2011","","","IEEE","IEEE Conferences"
"Towards contextualised software engineering education: an African perspective","J. Fendler; H. Winschiers-Theophilus","Department of Software Engineering, Polytechnic of Namibia, Namibia; School of Information Technology, Polytechnic of Namibia, Namibia",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","1","","599","607","The discipline of Software Engineering is continuously adapting to new challenges while gaining more and more insights. The age of globalisation has brought about a new movement of internationalisation and localisation. While practitioners fully embrace the efforts, educators only marginally consider the implications for the teaching and learning of Software Engineering. While the relevance of the software deployment context has been widely recognised, the intrinsic values of the development context are less evident. Besides western cultural indicators being omnipresent in software applications, they are deeply rooted in Software Engineering concepts and methods. Standards and models have been established in the absence of possible deviations from other -- e.g. African -- contexts. Educators and authors of common and internationally used textbooks present Software Engineering concepts and methods as universally valid. Thus software engineering graduates all over the world continue to be ill-equipped for specific software development contexts. Moreover the necessity to localise Software Engineering education is illustrated by our vast amount of challenges, experiences and best-practices of teaching Software Engineering in a Sub-Saharan country. In this paper, we introduce a generic framework leading towards a Contextualised Software Engineering education (CSE2).","1558-1225","978-1-60558-719-6","10.1145/1806799.1806888","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062064","Africa;CSE2;Namibia;contextualisation;culture;curriculum;education;framework;software engineering","Context;Software;Cultural differences;Software engineering;Programming;Training","","4","","17","","27 Oct 2011","","","IEEE","IEEE Conferences"
"In Support of Peer Code Review and Inspection in an Undergraduate Software Engineering Course","S. Sripada; Y. R. Reddy; A. Sureka","International Institute of Information Technology, Hyderabad, India; International Institute of Information Technology, Bangalore, Karnataka, IN; Indraprastha Institute of Information Technology, Delhi, India",2015 IEEE 28th Conference on Software Engineering Education and Training,"17 Aug 2015","2015","","","3","6","Peer code review and inspection is a quality improvementsoftware engineering activity consisting of systematicexamination of source code. While peer code review is commonlyused in industrial and open-source software projects, it is seldomtaught or practiced in undergraduate level Software Engineeringcourses. We conduct a study on the use of peer code reviewin a sophomore level introductory Software Engineering courseconsisting of more than 200 students and present our experiences,findings and challenges. We use Bitbucket's (a free code distributedversion control system hosting site for Git and Mercurial)in-built code-review system and web-based hosting service. Weextract the peer code review comments using Bitbucket API fordetecting coding standard or compliance violation and identificationof defects (number and type) by reviewers. We also conducta survey on the benefit of peer code review activity on peercohesion and communication. Our experiments and survey revealthat employing peer code review in an undergraduate class hasseveral learning benefits such as improvement in coding skills,program comprehension abilities, knowledge of coding standard,and compliance and peer communication","2377-570X","978-1-4673-6701-1","10.1109/CSEET.2015.8","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203843","Code Reviews;Inspections;Defects;Static code Analysis","Inspection;Standards;Computer bugs;Encoding;Software engineering;Software;Java","","12","","8","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Work in progress - challenges to educating students within the Community of Open Source Software for Humanity","H. J. C. Ellis; R. A. Morelli; G. W. Hislop","University of Dublin Trinity College, Dublin, IE; University of Dublin Trinity College, Dublin, IE; Drexel University, Philadelphia, PA, US",2008 38th Annual Frontiers in Education Conference,"22 Dec 2008","2008","","","S3H-7","S3H-8","This WIP describes the challenges faced by the SoftHum (student participation in the community of open source software for Humanity) project in incorporating undergraduates in humanitarian free and Open Source Software (H-FOSS) projects. The goal of SoftHum is to develop course-level support for the use of H-FOSS as a foundation for software engineering education. Such support will take the form of course materials and a process to support student success in a community-based software experience using H-FOSS, and the documentation of a classroom environment that supports student open source experience. We present a brief overview of the project, discuss the challenges we face in involving students in H-FOSS projects, and present our current progress.","2377-634X","978-1-4244-1969-2","10.1109/FIE.2008.4720515","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4720515","Open source software development;software engineering education;humanitarian software;software engineering courseware","Open source software;Software engineering;Educational institutions;Face;Documentation;Educational programs;Courseware;Collaborative software;Biomedical informatics;Vehicles","","5","","7","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Layered Optimal Teaching Mode in Software Engineering Graduate Education","Y. Ming","Institute of Software and Microelectronics, Northwestern Polytechnical University, Xi'an, China",2009 Second International Conference on Education Technology and Training,"15 Jan 2010","2009","","","244","248","Layered optimal teaching mode which focuses on the relationship between teaching and studying within knowledge system is a teaching research and practice according to optimal education theory. In order to meet the need of software engineering graduates and solute the problem of traditional unified teaching mode, this paper shows how layered optimal teaching mode is used in software engineering graduate education. We firstly analyze the problems of traditional unified teaching mode. We then briefly describe software engineering graduate education and layered optimal teaching mode. We explore principles for layered optimal teaching mode. Emphasis is placed on the framework of layered optimal teaching mode in software engineering graduate education including layer compartmentalization, lesson preparation, lecture, school assignment, evaluation.","","978-1-4244-5527-0","10.1109/ETT.2009.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5381474","optimal teaching mode;software engineering;graduate education","Software engineering;Systems engineering education;Microelectronics;Project management;Educational institutions;Software quality;Quality management;Engineering management;Management training;Educational technology","","1","","11","IEEE","15 Jan 2010","","","IEEE","IEEE Conferences"
"Specialising in Software Engineering","M. Jackson","Open University, UK",Fifth IEEE International Conference on Software Engineering and Formal Methods (SEFM 2007),"15 Oct 2007","2007","","","3","3","Developing a software-intensive system is engineering in the traditional sense: creating an artifact which transforms the physical world to meet some recognised need. The artifact is the hardware-software machine; the physical world is the system's environment; and the recognised need is the requirement. For a successful development the entailment must hold: ""machine, environment, requirement"". By formalising the requirement and relevant environment properties, we may hope to bring the whole development within the ambit of formal development methods, improving our ability to produce a machine that will reliably ensure satisfaction of the requirement. This hope is appealing, but too simple. The nature of software-intensive systems poses rich challenges that cannot be addressed by formal reasoning alone but demand sharply focused practical disciplines. Discrete complexity, proliferation of interacting features and interoperation between disparate systems must all be reconciled with high levels of reliability, safety and security, in the context of systems that combine formal software with a non-formal environment in a tight cooperation. They challenge us to evolve rigorous and effective treatments of their non-formal worlds and of the interactions of those worlds with the formal artifacts we build. Here there is much to be learned from the established branches of engineering. The most conspicuous characteristic of the established branches of engineering is their specialised nature. For each class of artifact, the creation and gradual enrichment of a particular specialism, over many years, has allowed engineers to address both the positive and the negative requirements of the class. Positive requirements embody desired system functionality and efficiency, and evolve by invention and improved technology. Negative requirements embody the avoidance or mitigation of defects and failures that have manifested themselves in the past or can be foreseen. The non-formal world furnishes unbounded possibilities of failure. Because every formalisation is in some degree incorrect or unreliable, and its alphabet inevitably excludes phenomena that may yet prove disastrously significant, negative requirements can never be exhaustively enumerated. Dependability in addressing negative requirements is improved chiefly by the experience, recognition, and analysis of failures. To avoid repeating those failures engineers need a structure of concepts and practice that allows the lessons to be recorded, disseminated, and applied. Specialisation is the sine qua non of such a structure. For each class of artifact and system it nourishes the creation and growth of a sharply focused normal design discipline, in which the design engineer knows at the outset how the system must work at every level, what features it must have, and how its parts are to be configured. Such a standardised design explicitly satisfies the positive requirements and implicitly satisfies the currently known negative requirements. Further, practice of the design discipline directs the engineer's attention to specific concerns that are known or expected to merit special care if failure is to be avoided. Specialisation and normal design have enabled the established engineering branches to deal increasingly successfully with the non-formal physical world. Software engineering must similarly identify the dimensions of specialisation that will improve system dependability. Approaches based on erecting a specification firewall to isolate the formal software world of computer science from its non-formal environment cannot succeed. In a software- intensive system, interaction at the interface between the machine and its environment darts back and forth along the arcs of a dependency graph that embraces both machine and environment, and frustrates the desire for a total separation of concerns between the formal and the non-formal. This challenge to software engineering can be met only by sharply focused specialisms practising highly developed normal design disciplines, analogous to those that characterise the established engineering branches.","2160-7656","978-0-7695-2884-7","10.1109/SEFM.2007.37","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4343918","","Software engineering;Design engineering;Software safety;Systems engineering and theory;Security;Failure analysis;Computer science","","","","","IEEE","15 Oct 2007","","","IEEE","IEEE Conferences"
"Experience of teaching Executive Master's program in Software Engineering: Challenges, lessons learned, and path forward","W. E. Wong","Department of Computer Science University of Texas at Dallas, USA",2014 IEEE 27th Conference on Software Engineering Education and Training (CSEE&T),"19 May 2014","2014","","","186","187","Universities have created programs such as the Executive Master's Degree in Software Engineering (EMSE) to enable busy professionals to achieve a balance between work and life while pursuing a graduate degree. In this talk, I will address several important issues based on my experience of teaching the same course for both the EMSE program and the regular Master's program.","2377-570X","978-1-4799-4970-0","10.1109/CSEET.2014.6816801","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6816801","Executive Master's Degree;Software Engineering;Regular Master's Degree","Educational institutions;Software engineering;Software;Computer science;Employment;Engineering profession","","","","5","IEEE","19 May 2014","","","IEEE","IEEE Conferences"
"Sixteen Roles Performed by Software Engineers in First One Year","M. Maram; P. Prabhakaran; S. Murthy; N. Domala","Satyam Computer Services Limited, India; Satyam Computer Services Limited, India; Satyam Computer Services Limited, India; Satyam Computer Services Limited, India",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","212","215","In this paper we present the results of a two day workshop - a set of functional roles performed by software engineers during their first year and the knowledge and skill requirements that enable them in playing these roles. An effective curriculum that is aligned with needs of our business units is designed (for our entry level training program) based on the results of the workshop.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.29","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812700","Software Engineering;Roles;Knowledge;Skills;Entry Level Training Program","Software performance;Software development management;Software testing;Project management;Databases;Logic testing;Software maintenance;Meeting planning;Knowledge engineering;Management training","","5","","2","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"Services Computing in Daily Work: Service Engineering vs. Software Engineering","H. Jain; C. Pu; S. Iyengar; B. Blake; C. K. Chang","Wisconsin Distinguished & Tata Consultancy Services Professor of Management Information System in Sheldon B. Lubar School of Business at University of Wisconsin-Milwaukee, USA; Professor and John P. Imlay, Jr. Chair in Software at College of Computing, Georgia Tech, USA; IBM Distinguished Engineer Strategist of Services Software Research at the IBM TJ Watson Research Center, USA; Associate Professor and Chair of the Department of Computer Science at Georgetown University, USA; Editor-in-Chief of IEEE Computer and Professor and Chair of the Department of Computer Science at Iowa State University",IEEE International Conference on Web Services (ICWS 2007),"30 Jul 2007","2007","","","xxxii","xxxii","Today, more and more software are augmented with service-oriented packaging. At the same time, more and more business and government services are provided and offered in the form of software. However, there are debates on whether and how much service engineering has in common with software engineering.","","0-7695-2924-0","10.1109/ICWS.2007.163","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4279569","","Software engineering;Computer science;Design engineering;Management information systems;USA Councils;Web services;Software tools;Government;Computer architecture;Educational institutions","","","","","IEEE","30 Jul 2007","","","IEEE","IEEE Conferences"
"Putting the ""Engineering"" into Software Engineering with Models","B. Berenbach; S. Konrad","Siemens Corporate Research, Inc., USA; Siemens Corporate Research, Inc., USA",International Workshop on Modeling in Software Engineering (MISE'07: ICSE Workshop 2007),"16 Jul 2007","2007","","","4","4","Models are frequently used for illustrations in software design documents. Commonly they are used to show static structure and less often, external dynamic behavior. However, in software engineering, the lack of conceptual models often inhibits creativity and understanding, which may in turn lead to incomplete or poor design. This paper describes our experience using models for the architectural, conceptual and detailed design for software systems, identifies perceived weaknesses in traditional approaches and makes recommendations for future modeling tools and techniques.","2156-7891","0-7695-2953-4","10.1109/MISE.2007.13","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4273244","","Software engineering;Object oriented modeling;Unified modeling language;Software design;Design engineering;Software systems;Mechanical engineering;Switches;Software tools;Domain specific languages","","2","","11","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"Crowdsourcing in Software Engineering: Models, Motivations, and Challenges","T. D. LaToza; A. van der Hoek","George Mason University; University of California, Irvine",IEEE Software,"29 Dec 2015","2016","33","1","74","80","Almost surreptitiously, crowdsourcing has entered software engineering practice. In-house development, contracting, and outsourcing still dominate, but many development projects use crowdsourcing-for example, to squash bugs, test software, or gather alternative UI designs. Although the overall impact has been mundane so far, crowdsourcing could lead to fundamental, disruptive changes in how software is developed. Various crowdsourcing models have been applied to software development. Such changes offer exciting opportunities, but several challenges must be met for crowdsourcing software development to reach its potential.","1937-4194","","10.1109/MS.2016.12","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7367992","programming teams;staffing;software management;software development;software engineering;crowdsourcing;open innovation;peer production;software development competitions;microtasking","Crowdsourcing;Software develoment;Production facilities;Software engineering;Companies;Testing","","117","","16","IEEE","29 Dec 2015","","","IEEE","IEEE Magazines"
"What Makes Agile Software Development Agile?","M. Kuhrmann; P. Tell; R. Hebig; J. Klünder; J. Münch; O. Linssen; D. Pfahl; M. Felderer; C. R. Prause; S. G. MacDonell; J. Nakatumba-Nabende; D. Raffo; S. Beecham; E. Tüzün; G. López; N. Paez; D. Fontdevila; S. A. Licorish; S. Küpper; G. Ruhe; E. Knauss; Ö. Özcan-Top; P. Clarke; F. McCaffery; M. Genero; A. Vizcaino; M. Piattini; M. Kalinowski; T. Conte; R. Prikladnicki; S. Krusche; A. Coşkunçay; E. Scott; F. Calefato; S. Pimonova; R. -H. Pfeiffer; U. P. Schultz; R. Heldal; M. Fazal-Baqaie; C. Anslow; M. Nayebi; K. Schneider; S. Sauer; D. Winkler; S. Biffl; M. C. Bastarrica; I. Richardson","Faculty of Computer Science and Mathematics, University of Passau, Passau, Germany; Pervasive Interaction Technology Lab, IT-Universitetet i Kobenhavn, København, Denmark; Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden; Software Engineering Group, Leibniz Universität Hannover, Hannover, Germany; Herman Hollerith Center, Hochschule Reutlingen, Reutlingen, Germany; Hochschulzentrum Düsseldorf, FOM Hochschule, Düsseldorf, Germany; Institute of Computer Science, University of Tartu, Tartu, Estonia; Department of Computer Science, University of Innsbruck, Innsbruck, Austria; Raumfahrtmanagement - Digitalisierung, Software und KI, Deutsches Zentrum fur Luft und Raumfahrt, Stuttgart, Germany; Department of Computer Science, Auckland University of Technology, Auckland, New Zealand; School of Computing and Informatics Technology, Makerere University, Kampala, Uganda; Maseeh College of Engineering and Computer Science, Portland State University, Portland, OR, USA; LERO, Limerick University, Limerick, Ireland; Department of Computer Engineering, Bilkent University, Çankaya/Ankara, Turkey; CITIC, University of Costa Rica, San José, Costa Rica; Facultad de Ingeniera, Universidad Nacional de Tres de Febrero, Sáenz Peña, Buenos Aires, Argentina; Facultad de Ingeniera, Universidad Nacional de Tres de Febrero, Sáenz Peña, Buenos Aires, Argentina; Department of Information Science, University of Otago, Dunedin, New Zealand; ISSE, Technical University of Clausthal, Clausthal-Zellerfeld, Germany; Department of Computer Science and Electrical Engineering, University of Calgary, Calgary, AB, Canada; Department of Computer Science and Engineering, Chalmers Tekniska Hogskola Campus Lindholmen, Göteborg, Sweden; Department of Information Systems, Middle East Technical University, Çankaya/Ankara, Turkey; School of Computing, Dublin City University, Dublin 9, Ireland; RSRC, Dundalk Institute of Technology, Dundalk, Ireland; DTSI, University of Castilla-La Mancha, Ciudad Real, Spain; DTSI, University of Castilla-La Mancha, Ciudad Real, Spain; Department of Computer Science, University of Castilla-La Mancha, Ciudad Real, Spain; Department of Informatics, Pontificia Universidade Catolica do Rio de Janeiro, Rio de Janeiro, Brazil; Instituto de Computação, Federal University of Amazonas, Manaus, Brazil; Department of Computer Science, Pontifical Catholic University of Rio Grande do Sul, Porto Alegre, Brazil; Department of Computer Science, Technical University of Munich, München, Germany; Department of Computer Engineering, Ataturk University, Yakutiye, Turkey; Department of Software Engineering, University of Tartu, Tartu, Estonia; Dipartimento di Informatica, University of Bari, Bari, Italy; HSE, National Research University Higher School of Economics, Moscow, Russia; Computer Science Department, IT University of Copenhagen, København, Denmark; MMMI, University of Southern Denmark, Odense, Denmark; Department of Computer Science, Electrical Engineering and Mathematical Sciences, Western Norway University of Applied Sciences, Bergen, Norway; IEM, Fraunhofer-Institut für Entwurfstechnik Mechatronik IEM, Paderborn, Germany; School of Engineering and Computer Science, Victoria University of Wellington, Wellington, New Zealand; Department of Computer Science, Ecole Polytechnique de Montreal, Montréal, QC, Canada; Department of Software Engineering, Leibniz Universität Hannover, Hannover, Germany; SE, Paderborn University, Paderborn, Germany; Institut für Softwaretechnik und Interaktive Systeme, Technische Universitat Wien, Vienna, Austria; Department of Software Engineering, Technische Universitat Wien, Vienna, Austria; Computer Science Department, Universidad de Chile, Santiago, Chile; CSIS, Lero-the Irish Software Engineering Research Centre, Limerick, Ireland",IEEE Transactions on Software Engineering,"16 Sep 2022","2022","48","9","3523","3539","Together with many success stories, promises such as the increase in production speed and the improvement in stakeholders’ collaboration have contributed to making agile a transformation in the software industry in which many companies want to take part. However, driven either by a natural and expected evolution or by contextual factors that challenge the adoption of agile methods as prescribed by their creator(s), software processes in practice mutate into hybrids over time. Are these still agile? In this article, we investigate the question: what makes a software development method agile? We present an empirical study grounded in a large-scale international survey that aims to identify software development methods and practices that improve or tame agility. Based on 556 data points, we analyze the perceived degree of agility in the implementation of standard project disciplines and its relation to used development methods and practices. Our findings suggest that only a small number of participants operate their projects in a purely traditional or agile manner (under 15 percent). That said, most project disciplines and most practices show a clear trend towards increasing degrees of agility. Compared to the methods used to develop software, the selection of practices has a stronger effect on the degree of agility of a given discipline. Finally, there are no methods or practices that explicitly guarantee or prevent agility. We conclude that agility cannot be defined solely at the process level. Additional factors need to be taken into account when trying to implement or improve agility in a software company. Finally, we discuss the field of software process-related research in the light of our findings and present a roadmap for future research.","1939-3520","","10.1109/TSE.2021.3099532","Estonian Centre of Excellence in ICT Research; Science Foundation Ireland(grant numbers:13/RC/2094_2); European Regional Development Fund; Southern & Eastern Regional Operational Programme; ECLIPSE Project; Ministerio de Ciencia, Innovación y Universidades(grant numbers:RTI2018-094283-B-C31); Software Center Research Network; Vinnova FFI NGEA; Conselho Nacional de Desenvolvimento Científico e Tecnológico; Christian Doppler Forschungsgesellschaft; Austrian Federal Ministry for Digital and Economic Affairs; Österreichische Nationalstiftung für Forschung, Technologie und Entwicklung; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9496156","Agile software development;hybrid development methods;survey research;software development;software process","Software;Instruments;Companies;Data collection;Market research;Collaboration;Standards","","26","","88","IEEE","26 Jul 2021","","","IEEE","IEEE Journals"
"Analyzing main characteristics in Software Engineering projects","J. Marcos-Abed","Computer Science Department, Tecnologico de Monterrey, México",2018 IEEE Frontiers in Education Conference (FIE),"7 Mar 2019","2018","","","1","5","Innovative Practice. Work In Progress. One of the biggest concerns when teaching a Software Engineering course is how to make the content understood in a practical way. In this sense, what is recommended is to apply projects in class, projects that as far as possible should be related to the real world and that involve a true learning. To analyze the characteristics of these projects, a framework was elaborated based on a matrix with attributes found in different academic projects carried out over 10 years, and weighted according to certain criteria. This paper presents an analysis of the advantages and disadvantages for each kind of project, using a radar-graph to visualize the main characteristics of these. In the end, there is a wide variety of software projects, and each one has benefits for one or more entities of the triangle: student, professor, client.","2377-634X","978-1-5386-1174-6","10.1109/FIE.2018.8658569","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8658569","Software projects;software lifecycle;software engineering education","Software engineering;Education;Software;Teamwork;Project management;Monitoring","","","","8","IEEE","7 Mar 2019","","","IEEE","IEEE Conferences"
"Coverage of Design for Service Principles in Software Engineering","M. Aleksy","Industrial Software Systems Program, ABB Corporate Research Center, Germany","2012 Sixth International Conference on Complex, Intelligent, and Software Intensive Systems","23 Jul 2012","2012","","","100","105","Design for Service (DFS) is a concept that aims to ease maintenance and service required during the entire life cycle of products. In this paper, we explore the implications of Design for Service principles and requirement for software engineering. First, we introduce the DFS principles derived from the literature and discuss their coverage in existing software engineering approaches and techniques. Afterwards, we discuss the compiled DFS requirements and present their counterparts in the software engineering area. Finally, a conclusion of the findings is provided.","","978-1-4673-1233-2","10.1109/CISIS.2012.101","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6245595","design for service;service science;software engineering","Maintenance engineering;Software engineering;Measurement;Standardization;Usability;Software systems","","1","","31","IEEE","23 Jul 2012","","","IEEE","IEEE Conferences"
"Poster: Startup Software Development Education: A Systematic Mapping Study","R. Chanin; A. Sales; L. Pompermaier; R. Prikladnicki","Pontifical Catholic University of Rio Grande do Sul, School of Technology, Porto Alegre, Brazil; Pontifical Catholic University of Rio Grande do Sul, School of Technology, Porto Alegre, Brazil; Pontifical Catholic University of Rio Grande do Sul, School of Technology, Porto Alegre, Brazil; Pontifical Catholic University of Rio Grande do Sul, School of Technology, Porto Alegre, Brazil",2018 IEEE/ACM 40th International Conference on Software Engineering: Companion (ICSE-Companion),"30 Aug 2018","2018","","","143","144","This study aims to characterize the state-of-the-art of the software startup education by analyzing and identifying best practices, opportunities and gaps on this field. To do so, we conducted a systematic mapping study in order to analyze and evaluate studies on software startup education. As a result, we found 31 primary studies in this process. These studies were classified into for categories: real projects, multidiscipline, environment and teaching. We concluded that research on software startup education is still scarce. Furthermore, there are several gaps and opportunities to be explore in future works. One of them is the difficulty in providing a real world experience in a educational setting. Successful cases reported combine three major components: real world projects, the right environment and a multidisciplinary context.","2574-1934","978-1-4503-5663-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8449471","Startup Education;Startup;Software Development Education;Software Engineering Education;Entrepreneurship Education","Software;Education;Software engineering;Systematics;Tools;Best practices","","","","9","","30 Aug 2018","","","IEEE","IEEE Conferences"
"Common Problems in Software Requirement Engineering Process: An Overview of Pakistani Software Industry","S. Khalid; U. Rasheed; M. Muneer; W. H. Butt; R. Mehmood; U. Qamar","Department of Computer and Software Engineering, College of Electrical and Mechanical Engineering, NUST, Islamabad, Pakistan; Department of Computer and Software Engineering, College of Electrical and Mechanical Engineering, NUST, Islamabad, Pakistan; Department of Computer Science and IT, University of Lahore, Lahore, Pakistan; Department of Computer and Software Engineering, College of Electrical and Mechanical Engineering, NUST, Islamabad, Pakistan; Department of Computer Science, Lahore College for Women University, Lahore, Pakistan; Department of Computer and Software Engineering, College of Electrical and Mechanical Engineering, NUST, Islamabad, Pakistan",2023 4th International Conference on Advancements in Computational Sciences (ICACS),"5 Apr 2023","2023","","","1","6","Requirement engineering is a major phase of software development process. A project's success mainly depends on an efficient and effective requirement engineering process. Practices have been defined to ensure successful requirement engineering of software projects. Yet the professionals face numerous issues during this phase. This paper explores the software requirement engineering practices from in the software industry of Pakistan. It highlights the common problems faced by the software professionals, as well as commonly deployed solutions and practices.","","978-1-6654-6377-5","10.1109/ICACS55311.2023.10089703","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10089703","requirement engineering phases;requirement engineering process;software industry;software practices","Industries;Organizations;Market research;Software;Requirements engineering;Faces","","2","","25","IEEE","5 Apr 2023","","","IEEE","IEEE Conferences"
"Integrating agile practices into software engineering courses","L. Williams; M. Lutz; G. Hislop; M. McCracken; N. Mead; J. F. Naveda","North Carolina State University, USA; Rochester Institute of Technology, USA; Drexel University, USA; Georgia Institute of Technology, USA; Software Engineering Institute; Rochester Institute of Technology, USA",Proceedings 15th Conference on Software Engineering Education and Training (CSEE&T 2002),"7 Aug 2002","2002","","","242","243","","1093-0175","0-7695-1515-0","10.1109/CSEE.2002.995222","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=995222","","Software engineering;Programming profession;Conferences;Spirals;Best practices;Documentation;Educational programs;Proposals;Rivers;Java","","1","","6","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Workplace Issues in an Undergraduate Software Engineering Course","R. G. Epstein","Department of Computer Science, West Chester University of Pennsylvania, West Chester, PA, USA",2010 23rd IEEE Conference on Software Engineering Education and Training,"13 May 2010","2010","","","1","8","This paper describes how the author integrates work culture issues into his undergraduate course in Software Engineering. This is a required course for all Computer Science majors in our program. At issue is how work culture impacts upon the quality of the products being created by Software Engineers. The course addresses work culture concerns such as: What kinds of work culture issues arise during a software project? How can conflicts be resolved? How can poor work environments be improved? Work culture issues arise pretty much throughout the course and this paper provides an overview of how that occurs.","2377-570X","978-1-4244-7053-2","10.1109/CSEET.2010.17","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5463608","","Employment;Software engineering;Computer science;Programming profession;Humans;Software quality;Books;Computer science education;Turning;Engineering profession","","","","23","IEEE","13 May 2010","","","IEEE","IEEE Conferences"
"Report from the Second International Workshop on Adoption-Centric Software Engineering (ACSE 2002)","S. Tilley; H. Muller; L. O'Brien; K. Wong","Department of Computer Sciences, Florida Institute of Technology, USA; Department of Computer Science, University of Victoria, Canada; Software Engineering Institute, Carnegie Mellon University; Department of Computing Science, University of Alberta",10th International Workshop on Software Technology and Engineering Practice,"26 Feb 2004","2002","","","74","78","As part of Software Technology and Engineering Practice (STEP) 2002 conference, the 2nd International Workshop on Adoption-Centric Software Engineering (ACSE 2002) was held in Montreal, Canada on Oct. 6-7, 2002. This report summarizes the ACSE 2002 workshop and provides a tentative roadmap towards addressing some of the challenges related to technology transition. In particular, the paper highlights the workshop's focus on adoption issues in the context of moving software reverse engineering tools from research prototypes to widely used products.","","0-7695-1878-8","10.1109/STEP.2002.1267610","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1267610","","Reverse engineering;Software prototyping;Software tools;Software portability;Software development management","","3","","23","IEEE","26 Feb 2004","","","IEEE","IEEE Conferences"
"Software Metrics for Agile Software Development","M. Kunz; R. R. Dumke; N. Zenker","Software Engineering Group, University of Magdeburg, Germany; Software Engineering Group, University of Magdeburg, Germany; Software Engineering Group, University of Magdeburg, Germany",19th Australian Conference on Software Engineering (aswec 2008),"3 Apr 2008","2008","","","673","678","Agile software development methods are nowadays wide spread and accepted. From the software measurement point-of-view not all metrics and methods from conventional lifecycle models can be used without adaptation. Distinct techniques in agile software development like refactoring needs new approaches and quality models in the area of software measurement. Therefore this paper describes a quality model, distinct metrics and their implementation into a measurement tool for quality management in agile software development.","2377-5408","978-0-7695-3100-7","10.1109/ASWEC.2008.4483261","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4483261","Software Metrics;Agile Software Development","Software metrics;Programming;Software measurement;Costs;Software engineering;IEC standards;ISO standards;Australia;Quality management;Product design","","8","","15","IEEE","3 Apr 2008","","","IEEE","IEEE Conferences"
"STEP2002: advances and opportunities in software engineering practice","F. Coallier; G. Hoffnagle; P. Layzell; L. O'Brien; D. Poo","Alison Microwave Ltd, Norfolk, UK; Denanment of Electrical Engineering, University of Bologna, Bologna, Italy; Denanment of Electrical Engineering, University of Bologna, Bologna, Italy; TechImp s.r.l, Bologna, Italy; NA",10th International Workshop on Software Technology and Engineering Practice,"26 Feb 2004","2002","","","3","4","","","0-7695-1878-8","10.1109/STEP.2002.1267593","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1267593","","Software engineering;Conferences;Application software;Computer aided software engineering;Internet;Paper technology;Educational products;Software prototyping;Reverse engineering;Software tools","","","","","IEEE","26 Feb 2004","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE Draft Standard for Systems and Software Engineering -- Architecture Processes","",,"ISO/IEC/IEEE P42020/V1.9, August 2018","9 Jan 2019","2019","","","1","142","This document complements the architecture-related processes identified in ISO/IEC/IEEE 15288, ISO/IEC/IEEE 12207, and ISO 15704 with activities and tasks that enable architects and others to more effectively and efficiently implement architecture practices. Implementing these practices will help ensure that the architecture has greater influence on business and mission success. It specifies a coherent set of processes for governance, management, conceptualization, evaluation and elaboration of architectures, and activities that enable these processes. Users of this standard can apply these processes in the context of: (1) understanding, development and evolution of entities through their life cycle stages such as conception, development, implementation, operation, sustainment, decommissioning, and disposal; (2) organization(s) acting as users, customers and providers of the solution specified by the architecture description; and (3) architecting of entities.","","978-1-5044-5472-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8606469","architecture;architecture collection;architecture entity;architecture conceptualization;architecture elaboration;architecture enablement;architecture evaluation;architecture governance;architecture management;concern;design;enterprise;life cycle;life cycle model;model;outcomes;phase;process reference model;process tailoring;stage;stakeholder;system;software;tradeoff;view;viewpoint.","IEEE Standards;Software engineering;Software architecture;ISO Standards;IEC Standards;Systems engineering and theory","","","","","","9 Jan 2019","","","IEEE","IEEE Standards"
"Hints on Designing and Running Project-based Exams for a Software Engineering Course","C. Raibulet; F. A. Fontana; I. Pigazzini","Vrije Universiteit Amsterdam, Amsterdam, The Netherlands; DISCo-Dipartimento di Informatica, Sistemistica e Comunicazione, Universita’ degli Studi di Milano-Bicocca, Milan, Italy; DISCo-Dipartimento di Informatica, Sistemistica e Comunicazione, Universita’ degli Studi di Milano-Bicocca, Milan, Italy",2022 IEEE/ACM First International Workshop on Designing and Running Project-Based Courses in Software Engineering Education (DREE),"18 Aug 2022","2022","","","15","19","In this paper, we share our experience in designing and running a project-based exam for a Software Engineering course at the undergraduate level. We underline the teaching objectives and content of the course which aim to prepare students for the industrial environment, e.g., various design perspectives on the project, software quality assurance and evaluation, tools for development and software quality assessment, project management and team work. We present our project-based exam and summarize hints on its design, organization, and evaluation. Project examples are also introduced.","","978-1-4503-9288-4","10.1145/3524487.3527355","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9853559","Software engineering;education;software engineering course;project;project-based course","Conferences;Education;Project management;Software quality;Organizations;Teamwork;Software engineering","","","","20","","18 Aug 2022","","","IEEE","IEEE Conferences"
"Technical Debt Management: The Road Ahead for Successful Software Delivery","P. Avgeriou; I. Ozkaya; A. Chatzigeorgiou; M. Ciolkowski; N. A. Ernst; R. J. Koontz; E. Poort; F. Shull","Dept. of Computing Science, University of Groningen, Groningen, The Netherlands; Software Engineering institute, Carnegie Mellon University, Pittsburgh, PA, USA; Dept. of Applied informatics, University of Macedonia, Thessaloniki, Greece; QAware GmbH, München, Germany; Department of Computer Science, University of Victoria, Victoria, Canada; The Boeing Company, Mesa, AZ, USA; CGI, Rotterdam, The Netherlands; Software Engineering institute, Carnegie Mellon University, Pittsburgh, PA, USA",2023 IEEE/ACM International Conference on Software Engineering: Future of Software Engineering (ICSE-FoSE),"4 Mar 2024","2023","","","15","30","Technical Debt, considered by many to be the ‘silent killer’ of software projects, has undeniably become part of the everyday vocabulary of software engineers. We know it compromises the internal quality of a system, either deliberately or inadvertently. We understand Technical Debt is not all derogatory, often serving the purpose of expediency. But, it is associated with a clear risk, especially for large and complex systems with extended service life: if we do not properly manage Technical Debt, it threatens to “bankrupt” those systems. Software engineers and organizations that develop software-intensive systems are facing an increasingly more dire future state of those systems if they do not start incorporating Technical Debt management into their day to day practice. But how? What have the wins and losses of the past decade of research and practice in managing Technical Debt taught us and where should we focus next? In this paper, we examine the state of the art in both industry and research communities in managing Technical Debt; we subsequently distill the gaps in industrial practice and the research shortcomings, and synthesize them to define and articulate a vision for what Technical Debt management looks like five years hence.","","979-8-3503-2496-9","10.1109/ICSE-FoSE59343.2023.00007","Department of Defense(grant numbers:FA8702-15-D-0002); Carnegie Mellon University(grant numbers:DM23-0979); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10449672","technical debt;software maintenance and evolution","Vocabulary;Roads;Organizations;Maintenance engineering;Software systems;Software measurement;Software engineering","","1","","41","IEEE","4 Mar 2024","","","IEEE","IEEE Conferences"
"Leveraging Peer-Assessment in Project-Based Software Engineering Courses","H. Hijazi; Y. A. Alshehri","Department of Software Engineering, The Hashemite University, Zarqa, Jordan; Lane Department of Computer Science and Electrical Engineering, West Virginia University, virginia, USA",2024 36th International Conference on Software Engineering Education and Training (CSEE&T),"10 Sep 2024","2024","","","1","7","Higher educational institutions seek to improve the quality and the productivity of the educational process. The current attitude is toward involving students in the learning and evaluation process. Peer review has been proven to be one of the most effective tactics to attain this in software engineering disciplines wherein project-based courses are substantial to afford high quality competencies. A few studies in literature empirically studied the impact of peer review in project-based software engineering courses. In this work, we attempt to provide more insights by implementing peer assessment in one of the project-based courses offered by the Department of Software Engineering at the Hashemite University, Jordan, that is “Object-Oriented Software Development”. In this paper, we investigate the validity of peer assessment by examining how well students in this course evaluate their peers and how the strength of students affects their assessment. The work also embeds a rubric that comprises key criteria to assess software system modelling. The results of the study reveal promising signs of using peer assessment in project-based software engineering courses.","2377-570X","979-8-3503-7897-9","10.1109/CSEET62301.2024.10663031","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10663031","peer-assessment;peer evaluation;peer-review;software engineering education;UML;rubric;project-based courses","Productivity;Reviews;Object oriented modeling;Software systems;Software engineering;Software development management","","","","15","IEEE","10 Sep 2024","","","IEEE","IEEE Conferences"
"Data-Driven Requirements Engineering - An Update","W. Maalej; M. Nayebi; G. Ruhe",University of Hamburg; Ecole Polytechnique Montreal; University of Calgary,2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP),"19 Aug 2019","2019","","","289","290","Nowadays, users can easily submit feedback about software products in app stores, social media, or user groups. Moreover, software vendors are collecting massive amounts of implicit feedback in the form of usage data, error logs, and sensor data. These trends suggest a shift toward data-driven user-centered identification, prioritization, and management of software requirements. Developers should be able to adopt the requirements of masses of users when deciding what to develop and when to release. They could systematically use explicit and implicit user data in an aggregated form to support requirements decisions. In this talk we will present and discuss most recent achievements in this direction since the paper's original publication. We will also show to mine data sets mobile apps, give a few success/failure stories and a few practical advises.","","978-1-7281-1760-7","10.1109/ICSE-SEIP.2019.00041","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8804436","Requirements engineering, Data analytics, Mining software repositories, Stakeholders, Feature extraction","Software;Software engineering;Requirements engineering;Data mining;Mobile applications;Market research;Stakeholders","","18","","13","IEEE","19 Aug 2019","","","IEEE","IEEE Conferences"
"Logic-Based Learning in Software Engineering","D. Alrajeh; A. Russo; S. Uchitel; J. Kramer","Imperial College, London, UK; Imperial College, London, UK; Imperial College, London, UK; Imperial College, London, UK",2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C),"23 Mar 2017","2016","","","892","893","In recent years, research efforts have been directed towards the use of Machine Learning (ML) techniques to support and automate activities such as program repair, specification mining and risk assessment. The focus has largely been on techniques for classification, clustering and regression. Although beneficial, these do not produce a declarative, interpretable representation of the learned information. Hence, they cannot readily be used to inform, revise and elaborate software models. On the other hand, recent advances in ML have witnessed the emergence of new logic-based learning approaches that differ from traditional ML in that their output is represented in a declarative, rule-based manner, making them well-suited for many software engineering tasks. In this technical briefing, we will introduce the audience to the latest advances in logic-based learning, give an overview of how logic-based learning systems can successfully provide automated support to a variety of software engineering tasks, demonstrate the application to two real case studies from the domain of requirements engineering and software design and highlight future challenges and directions.","","978-1-4503-4205-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883431","","Software engineering;Requirements engineering;Maintenance engineering;Learning systems;Software systems;Computational modeling","","","","10","","23 Mar 2017","","","IEEE","IEEE Conferences"
"Cases development for teaching software engineering","R. Razali; M. Chitsaz","Fakulti Teknologi dan Sains Maklum, Universiti Kebangsaan Malaysia, Bangi, Selangor Darul Ehsan, Malaysia; Fakulti Teknologi dan Sains Maklum, Universiti Kebangsaan Malaysia, Bangi, Selangor Darul Ehsan, Malaysia",2010 2nd International Conference on Education Technology and Computer,"29 Jul 2010","2010","2","","V2-121","V2-125","Software engineering offers vast variety of methods and tools for improving the quality of software development. As software products seem to be more complex to build than any other engineered artifacts, selecting suitable methods and tools appears to be crucial. Software engineers should possess broad knowledge on various technologies so that their appropriateness for a particular project could be judged sensibly. Wise judgment however requires not only knowledge but also critical minds. Case method is a discussion-based learning technique where students explore and exploit the knowledge and understanding of a subject matter themselves. The method needs the preparation of specific cases that inspire the exploration and sharing of knowledge, and also encourage critical thinking. This paper discusses the issues and shares the experience of preparing cases for teaching a software engineering course at the undergraduate level. Some guidelines are offered for future case developers of such courses to produce cases.","2155-1812","978-1-4244-6370-1","10.1109/ICETC.2010.5529422","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5529422","Software Engineering Course;Case Method","Education;Software engineering;Software maintenance;Software tools;Programming;Maintenance engineering;Software development management;Knowledge engineering;Application software;Project management","","4","","17","IEEE","29 Jul 2010","","","IEEE","IEEE Conferences"
"Would Sociable Software Engineers Observe Better?","R. M. d. Mello; G. H. Travassos","NA; ESE Group/COPPE, Universidade Federal do Rio de Janeiro, Rio de Janeiro, Brazil",2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement,"12 Dec 2013","2013","","","279","282","Quantitative studies in Software Engineering are frequently dependent on primary studies in which population is usually small and established by convenience. It brings several limitations for the analysis and strength of results due sampling issues. Therefore, when these studies are reapplied, different and non-clustered populations are established, making unfeasible evidence generalization and contributing for an imbalance between research and practice. Aiming at investigating ways to overcome the absence of large sampling frames in Software Engineering studies, this short paper presents the results of an initial experience concerned with the systematic recruitment of subjects for a survey regarding software requirements effort factors by using social networks compared with recruitment by convenience. We have observed in this particular case that using social networks technology does not guarantee sample enlargement by just posting invitations in specific forums. However, its usage can contribute to increase the subjects' heterogeneity and to increase the level of confidence of the sample, which consequently improve our capacity of observing the object under study, with the probable strengthen of results.","1949-3789","978-0-7695-5056-5","10.1109/ESEM.2013.33","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6681366","experimental software engineering;sample;population;quantitative studies;survey;requirements engineering","Software engineering;Recruitment;Sociology;Statistics;Social network services;Software;Systematics","","7","","14","IEEE","12 Dec 2013","","","IEEE","IEEE Conferences"
"Experience in early and late software engineering project courses","B. Demuth; M. Fischer; H. Hussmann","Department of Computer Science, Dresden University of Technology, Dresden, Germany; Department of Computer Science, Dresden University of Technology, Dresden, Germany; Department of Computer Science, Dresden University of Technology, Dresden, Germany",Proceedings 15th Conference on Software Engineering Education and Training (CSEE&T 2002),"7 Aug 2002","2002","","","241","248","We report on the experience we gained in different software engineering project courses at our department. A student who is specialized in software engineering has to complete, besides lectures on software engineering and related fields, two project courses: an ""early"" basic project course, and a ""late"" complex project course. For both of them we developed leveled teaching approaches considering the different knowledge and skills of beginners and ""advanced"" students, respectively. The paper describes, discusses and evaluates these approaches.","1093-0175","0-7695-1515-0","10.1109/CSEE.2002.995216","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=995216","","Software engineering;Computer science;Computer science education;Educational programs;Educational technology;Software tools;Paper technology;Systems engineering education;Programming;Application software","","1","","9","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Position Statement: Advances and Challenges of Software Engineering","S. S. Yau","Information Assurance Center, Department of Computer Science and Engineering, School of Computing and Informatics, Ira A. Fulton School of Engineering, Arizona State University, Tempe, AZ, USA",2008 32nd Annual IEEE International Computer Software and Applications Conference,"8 Aug 2008","2008","","","9","9","In this article the advances in software engineering are i) evolvement of software processes from rigid, sequential and slow processes to iterative and agile processes and standardization of process models, such as CMMI (Capability Maturity Model Integration) and ISO 12207, ii) programming paradigms and software design techniques, such as object-oriented programming and model-driven architecture, iii) various techniques for software reuse, such as design patterns and component-based software development, iii) formal methods for software specification and verification, and numerous methods for software testing, iv) software architecture, such as event-driven architecture and service-oriented architecture, and architecture description languages. All these advances aim at improving the quality of software, reducing cost, and promoting software reuse.","0730-3157","978-0-7695-3262-2","10.1109/COMPSAC.2008.240","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4591523","","Software;Software engineering;Programming;Object oriented modeling;Capability maturity model;Computer architecture;Internet","","3","","3","IEEE","8 Aug 2008","","","IEEE","IEEE Conferences"
"Incorporating Green IT concepts in undergraduate software requirements engineering course: An experience report","F. Ahmed; K. Shuaib","Faculty of IT, United Arab Emirates University, UAE; Faculty of IT, United Arab Emirates University, UAE",7th Iberian Conference on Information Systems and Technologies (CISTI 2012),"30 Aug 2012","2012","","","1","4","Our planet is facing serious environmental issues due to constant increase in energy consumption, and waste from industry. During the past two decades, the use of information technology (IT) has tremendously increased, causing an increase in IT-related power consumption and resulting in higher carbon emission. On the other hand, the concept of Green IT is gaining momentum in our society after the realization that reducing emission can increase the age of our planet and help in improving the health of its inhabitants. Many organizations are considering this phenomenon a serious issue while planning and managing IT infrastructure. In an undergraduate course of software requirements engineering (SRE) the main objective is to teach students the ability to define the characteristics, properties, or qualities that the software product must possess. The main purpose of this work is to incorporate the concept of Green IT in the SRE course and discuss best practices of Green IT for the various requirements engineering activities. Thus future software requirements engineers should consider these as a vital software product requirement. This paper targets to increase awareness and understanding of the environmental sustainability of IT and to highlight the opportunities for academia to incorporate Green IT concepts in undergraduate courses.","2166-0735","978-989-96247-7-1","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6263127","Green IT;Software Requirements Engineering;Sustainability;Software Engineering","Green products;Software;Organizations;Software engineering;Education;Information systems;Information technology","","","","14","","30 Aug 2012","","","IEEE","IEEE Conferences"
"An Educational Platform for Automotive Software Development and Test","N. Englisch; R. Bergelt; W. Hardt","Professorship for Computer Engineering, Chemnitz University of Technology, Chemnitz, Germany; Professorship for Computer Engineering, Chemnitz University of Technology, Chemnitz, Germany; Professorship for Computer Engineering, Chemnitz University of Technology, Chemnitz, Germany",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","4","Software development in the automotive domain has been subject to changing and evolving processes for the last 15 years. As a result, the functionality of a vehicle is now developed independently of the target platform and communication technology. The actual mapping constraints to a hardware platform are then represented by a large parameter set stored in a configuration. This paradigm has spawned a heterogeneous tool environment for development of electronic control units (ECUs). On the one hand, this proceeding facilitates the development of reusable vehicle functions but on the other hand increases the difficulty for testing as well as error localization in the actual end system. The architecture of choice for platform independent ECU development in the automotive industry in Europe is AUTOSAR, which is in itself very complex but essential for automotive software developers. This makes it vital that students and junior developers of automotive software engineering can be trained in a fast and concise, industry-oriented way. In this paper, we present an educational concept which focuses on the inter-connections between different development and test phases in the automotive industry. It is mainly realized around two self-developed tools, which support learners and power a learning management system, all backed by an extensive AUTOSAR knowledge base. This system eases the learning and comprehension of automotive software development and test by hands-on-learning for both students and professional developers.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206179","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206179","automotive software engineering;AUTOSAR;software test;e-learning;test data storage","Software;Tools;Industries;Vehicle dynamics;Software engineering;Testing","","2","","15","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"Orchestration of Global Software Engineering Projects - Position Paper","C. Bartelt; M. Broy; C. Herrmann; E. Knauss; M. Kuhrmann; A. Rausch; B. Rumpe; K. Schneider","Software Systems Engineering, Technische Universität Clausthal, Clausthal-Zellerfeld, Germany; Institut für Informatik-I4, Echniche Universität München, Garching, Germany; RWTH Aachen, Lehrstuhl Informatik 3 (Softwaretechnik), Aachen, Germany; Leibniz Universität Hannover, Hanover, Germany; Institut für Informatik-I4, Echniche Universität München, Garching, Germany; Software Systems Engineering, Technische Universität Clausthal, Clausthal-Zellerfeld, Germany; RWTH Aachen, Lehrstuhl Informatik 3 (Softwaretechnik), Aachen, Germany; Leibniz Universität Hannover, Hanover, Germany",2009 Fourth IEEE International Conference on Global Software Engineering,"7 Aug 2009","2009","","","332","337","Global software engineering has become a fact in many companies due to real necessity in practice. In contrast to co-located projects global projects face a number of additional software engineering challenges. Among them quality management has become much more difficult and schedule and budget overruns can be observed more often. Compared to co-located projects global software engineering is even more challenging due to the need for integration of different cultures, different languages, and different time zones-across companies, and across countries. The diversity of development locations on several levels seriously endangers an effective and goal-oriented progress of projects. In this position paper we discuss reasons for global development, sketch settings for distribution and views of orchestration of dislocated companies in a global project that can be seen as a ldquovirtual project environmentrdquo. We also present a collection of questions, which we consider relevant for global software engineering. The questions motivate further discussion to derive a research agenda in global software engineering.","2329-6313","978-0-7695-3710-8","10.1109/ICGSE.2009.52","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5196956","","Software engineering;Software systems;Environmental economics;Costs;Asia;Europe;Systems engineering and theory;Quality management;Cultural differences;Continents","","14","","9","IEEE","7 Aug 2009","","","IEEE","IEEE Conferences"
"Automatic development tools in software engineering courses","J. Zalewski","School of Electrical Engineering & Computer Science, University of Central Florida, Orlando, FL, USA",Thirteenth Conference on Software Engineering Education and Training,"6 Aug 2002","2000","","","200","204","Discusses the role of automatic software development tools in graduate software engineering courses. The basic requirements for such tools, from the industry perspective, are presented, followed by the selection of tools meeting a comprehensive set of criteria in four process-related dimensions: internal, vertical, horizontal and diagonal. Typical software development projects for student teams used in the Software Engineering Program at the University of Central Florida are presented, involving the following four software tools: SES/workbench, ObjecTime Developer, iLogix Rhapsody and Gensym G2.","1093-0175","0-7695-0421-3","10.1109/CSEE.2000.827046","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=827046","","Software engineering;Software tools;Computer industry;Software performance;Software reusability;Computer languages;Software testing;Computer science;Programming profession;Communication industry","","","","1","IEEE","6 Aug 2002","","","IEEE","IEEE Conferences"
"Casting software design in the function-behavior-structure framework","P. Kruchten","University of British Columbia, Canada",IEEE Software,"21 Mar 2005","2005","22","2","52","58","In this article, the author cast the software engineering process into the function-behavior-structure framework and thus into the broader framework of engineering design. By doing so, we can draw some lessons about the state of our favorite engineering discipline. The most important lesson might be that many of the analogies we've drawn from other engineering disciplines, especially civil engineering, are somewhat flawed or biased.","1937-4194","","10.1109/MS.2005.33","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1407826","software design;software engineering;FBS frame","Casting;Software design;Design engineering;Manufacturing;Windows;Glass;Australia;Process design;Software engineering;Natural languages","","35","","8","IEEE","21 Mar 2005","","","IEEE","IEEE Magazines"
"A Web-based software engineering measurement expert system","Q. He; Y. Wang; B. H. Far; S. Zhang","Theoretical and Empirical Software Engineering Research Centre, Department of Electrical and Computer Engineering, University of Calgary, Calgary, AB, Canada; Theoretical and Empirical Software Engineering Research Centre, Department of Electrical and Computer Engineering, University of Calgary, Calgary, AB, Canada; Theoretical and Empirical Software Engineering Research Centre, Department of Electrical and Computer Engineering, University of Calgary, Calgary, AB, Canada; Theoretical and Empirical Software Engineering Research Centre, Department of Electrical and Computer Engineering, University of Calgary, Calgary, AB, Canada",CCECE 2003 - Canadian Conference on Electrical and Computer Engineering. Toward a Caring and Humane Technology (Cat. No.03CH37436),"4 Sep 2003","2003","2","","1325","1328 vol.2","The software measurement expert system tool (SEMEST) is a rule-based and Web-enabled application for multiple software engineering measurement and analysis. SEMEST is designed on the basis of the software engineering measurement system (SEMS) that provides a comprehensive set of software measures and metrics in a formal and consistent framework. The module view controller (MVC) design model is adopted for implementing SEMEST. As a multiple-layer Web-based system with an expert inference engine and a knowledge base, SEMEST supports goal-, process- and category-oriented measurement and analysis in software engineering.","0840-7789","0-7803-7781-8","10.1109/CCECE.2003.1226144","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1226144","","Software engineering;Software measurement;Expert systems;Engines;Time measurement;Costs;Application software;Size measurement;Helium;Drives","","4","","10","IEEE","4 Sep 2003","","","IEEE","IEEE Conferences"
"Ontology driven software engineering","A. J. Wiebe; C. W. Chan","University of Regina, Regina, SK, CA; University of Regina, Regina, SK, CA",2012 25th IEEE Canadian Conference on Electrical and Computer Engineering (CCECE),"22 Oct 2012","2012","","","1","4","“Software Engineering (SE) is the application of a systematic, disciplined, quantifiable approach to the development, operation, and maintenance of software, and the study of these approaches; that is, the application of engineering to software.” [1] However, there are still late software projects that contain bugs. These issues are made worse through implementation affecting the design, and the repetitions involved in software coding. Furthermore, making changes to these software systems after initial development grows in complexity as time goes on. A software engineering methodology called Ontology Driven Software Engineering (ODSE) uses the artificial intelligence concept of an ontology for each stage in SE. The use of the ontology in different stages varies in usefulness and in ease. Many of the articles covered in this paper look at ontologies that are used primarily in the requirement and design phase. However, when it comes to implementation, they are only used as reference material for the developers who are coding. This project was created to provide a way for developers to use the ontology in a more integrated manner.","0840-7789","978-1-4673-1433-6","10.1109/CCECE.2012.6334938","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6334938","Ontology;Software Engineering;Web Ontology Language (OWL)","Ontologies;Software;OWL;Software engineering;Semantics;Unified modeling language","","4","","7","IEEE","22 Oct 2012","","","IEEE","IEEE Conferences"
"Qualifying Software Engineers Undergraduates in DevOps - Challenges of Introducing Technical and Non-technical Concepts in a Project-oriented Course","I. Alves; C. Rocha","University of Brasília (UnB), Brasilia, Brasil; University of Brasília (UnB), Brasilia, Brasil",2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"7 May 2021","2021","","","144","153","he constant changes in the software industry, practices, and methodologies impose challenges to teaching and learning current software engineering concepts and skills. DevOps is particularly challenging because it covers technical concepts, such as pipeline automation, and non-technical ones, such as team roles and project management. The present study investigates a course setup to introduce these concepts to software engineering undergraduates. We designed the course by employing coding to associate DevOps concepts to Agile, Lean, and Open source practices and tools. We present the main aspects of this project-oriented DevOps course, with 240 students enrolled it since its first offering in 2016. We conducted an empirical study, with both a quantitative and qualitative analysis, to evaluate this project-oriented course setup. We collected the data from the projects repository and students' perceptions from a questionnaire. We mined 148 repositories (corresponding to 72 projects) and obtained 86 valid responses to the questionnaire. We also mapped the concepts which are more challenging to students learn from experience. The results evidence that first-hand experience facilitates the comprehension of DevOps concepts and enriches classes discussions. we present a set of lessons learned, which may help professors better design and conduct project-oriented courses to cover DevOps concepts.","","978-1-6654-0138-8","10.1109/ICSE-SEET52601.2021.00024","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9402207","DevOps;education;Open-source;OSS;FOSS;Empirical-software-engineering;Agile-software-development;Emerging-domains-of-software;Tools-and-environments","Training;Industries;Pipelines;Project management;Tools;Software;Software engineering","","9","","34","IEEE","7 May 2021","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE International Standard - Systems and software engineering -- Life cycle processes -- Requirements engineering","",,ISO/IEC/IEEE 29148:2018(E),"5 Dec 2018","2018","","","1","104","This document contains provisions for the processes and products related to the engineering of requirements for systems and software products and services throughout the life cycle. It defines the construct of a good requirement, provides attributes and characteristics of requirements, and discusses the iterative and recursive application of requirements processes throughout the life cycle. This document provides additional guidance in the application of requirements engineering and management processes for requirements-related activities in ISO/IEC/IEEE 12207 and ISO/IEC/IEEE 15288. Information items applicable to the engineering of requirements and their content are defined. The content of this document can be added to the existing set of requirements-related life cycle processes defined by ISO/IEC/IEEE 12207 or ISO/IEC/IEEE 15288, or can be used independently.;This document contains provisions for the processes and products related to the engineering of requirements for systems and software products and services throughout the life cycle. It defines the construct of a good requirement, provides attributes and characteristics of requirements, and discusses the iterative and recursive application of requirements processes throughout the life cycle. This document provides additional guidance in the application of requirements engineering and management processes for requirements-related activities in ISO/IEC/IEEE 12207 and ISO/IEC/IEEE 15288. Information items applicable to the engineering of requirements and their content are defined. The content of this document can be added to the existing set of requirements-related life cycle processes defined by ISO/IEC/IEEE 12207 or ISO/IEC/IEEE 15288, or can be used independently.","","978-1-5044-5302-8","10.1109/IEEESTD.2018.8559686","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8559686","requirement;requirement characteristics;concept of operations;ConOps;operational concept;OpsCon;prototyping;software requirements specification;system;system requirements specification;SyRS","IEEE Standards;IEC Standards;ISO Standards;Software engineering","","15","","","","5 Dec 2018","","","IEEE","IEEE Standards"
"Intellectual Property for Software (Re-)Engineers and Researchers: A Tutorial","D. M. German","University of Victoria, Canada",14th Working Conference on Reverse Engineering (WCRE 2007),"10 Dec 2007","2007","","","297","297","The goal of this 3 hrs. tutorial is to introduce software engineers and researchers to the field of intellectual property (IP) as it applies to software engineering and reverse engineering. This tutorial is composed of three main components: software IP, IP legislation regarding software re- engineering, and the legal issues surrounding reuse of open source software.","2375-5369","978-0-7695-3034-5","10.1109/WCRE.2007.29","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4400182","","Tutorial;Intellectual property;Open source software;Reverse engineering;Law;Licenses;Legislation;Legal factors;Software engineering;Collaborative software","","","","1","IEEE","10 Dec 2007","","","IEEE","IEEE Conferences"
"Energizing software engineering education through real-world projects as experimental studies","J. Huffman Hayes","Science Applications International Corporation, USA",Proceedings 15th Conference on Software Engineering Education and Training (CSEE&T 2002),"7 Aug 2002","2002","","","192","206","Our experience shows that a typical industrial project can enhance software engineering research and bring theories to life. The University of Kentucky (UK) is in the initial phase of developing a software engineering curriculum. The first course, a graduate-level survey of software engineering, strongly emphasized quality engineering. assisted by the UK clinic, the students undertook a project to develop a phenylalanine milligram tracker. It helps phenylketonuria (PKU) sufferers to monitor their diet as well as assists PKU researchers to collect data. The project was also used as an informal experimental study. The applied project approach to teaching software engineering appears to be successful thus far. The approach taught many important software and quality engineering principles to inexperienced graduate students in an accurately simulated industrial development environment. It resulted in the development of a framework for describing and evaluating such a real-world project, including evaluation of the notion of a user advocate. It also resulted in interesting experimental trends, though based on a very small sample. Specifically, estimation skills seem to improve over time and function point estimation may be more accurate than LOC estimation.","1093-0175","0-7695-1515-0","10.1109/CSEE.2002.995211","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=995211","","Software engineering;Amino acids;Software quality;Computer science education;Application software;Computer industry;Biomedical monitoring;Reliability engineering;Performance evaluation;Personal digital assistants","","22","","15","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Self-guided learning environment for undergraduate software engineering","J. Ding","Department of Computer Science, East Carolina University, Greenville, NC, United States",2014 IEEE 27th Conference on Software Engineering Education and Training (CSEE&T),"19 May 2014","2014","","","188","189","A high qualified software developer should have the ability to develop software systems following good software engineering practices. However, an integrated software engineering tool that can help students to learn the practices is absent. In this paper, we present an IDE that is able to monitor and guide students to develop software following good practices. In addition, the tool offers a set of guidelines for improving the learning process via analyzing learning activities and results.","2377-570X","978-1-4799-4970-0","10.1109/CSEET.2014.6816802","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6816802","","Guidelines;Computer science;Computer aided software engineering;Process control;Software systems","","1","","5","IEEE","19 May 2014","","","IEEE","IEEE Conferences"
"Ultralarge Systems: Redefining Software Engineering?","G. Goth","Dept. of Electrical and Information, Kyungwon University, S. Korea",IEEE Software,"25 Apr 2008","2008","25","3","91","94","The harbingers of ultralarge systems are indeed emerging, although their elements seem contradictory to the ""ultralarge"" concept. ULS design will have to move beyond computer science and electrical and electronics engineering-based methodologies to include building blocks from seven major research areas: human interaction; computational emergence; design; computational engineering; adaptive system infrastructure; adaptable and predictable system quality; and policy, acquisition, and management. We need to integrate these more novel approaches with the tools and techniques of traditional software engineering, especially with regard to formal methods and to dealing with predictability and uncertainty in high-integrity software systems. Our view is not so much that we are 'redefining' software engineering but rather that we're looking to extend established software engineering tools and techniques in novel and useful ways.","1937-4194","","10.1109/MS.2008.82","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4497771","Ultralarge systems;ULS;software engineering;Ulssis;Lscits;ubiquitous computing","Software engineering;Design engineering;Computer science;Humans;Systems engineering and theory;Adaptive systems;Disaster management;Quality management;Engineering management;Uncertainty","","19","","","IEEE","25 Apr 2008","","","IEEE","IEEE Magazines"
"Educating professional software engineers: pathways and progress in the Australian experience","R. Duley; D. Veal; S. P. Maj","Edith Cowan University, Perth, Australia; Edith Cowan University, Perth, Australia; Edith Cowan University, Perth, Australia",Proceedings 14th Conference on Software Engineering Education and Training. 'In search of a software engineering profession' (Cat. No.PR01059),"7 Aug 2002","2001","","","213","220","Australia has seized the international initiative in the recognition of software engineers as professionals. Of the 37 universities in Australia offering undergraduate courses in computing, eleven offer courses in software engineering which are accredited by the Institute of Engineers, Australia (IEAust) and which may lead the graduate to membership of the Institute. In this way, the Institute has plausible claim to being the first national professional engineering body in the world to have accredited four-year undergraduate software engineering degrees as professional qualifications. The paper traces the development of the relationship between the Institute of Engineers and the computing industry and looks at the changes this relationship has wrought in the content and emphasis of tertiary software engineering education.","1093-0175","0-7695-1059-0","10.1109/CSEE.2001.913846","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=913846","","Australia;Software engineering;Computer science;Computer industry;Computer Society;Qualifications;Industrial relations;Accreditation;Information technology;Computer science education","","1","","9","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Performing empirical software engineering research in the classroom","D. Port; D. Klappholz","University of Hawai, USA; Stevens Institute of Technology, USA","17th Conference on Software Engineering Education and Training, 2004. Proceedings.","30 Mar 2004","2004","","","172","173","","1093-0175","0-7695-2099-5","10.1109/CSEE.2004.1276533","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1276533","","Software engineering;Computer industry;Programming;Industrial training;Collaborative software;Laboratories;Acceleration;Stress;Software quality","","","","11","IEEE","30 Mar 2004","","","IEEE","IEEE Conferences"
"Progress toward an Engineering Discipline of Software","M. Shaw","Carnegie Mellon University, Pittsburgh, PA, USA",2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C),"23 Mar 2017","2016","","","3","4","Is ""software engineering"" really engineering? The term was coined in 1968 to call attention to problems with software production. Both theory and practice for software have evolved since then, but do we yet have a true engineering discipline? This keynote sketches the evolution of software engineering, drawing on civil engineering and software architecture for examples that show the progressive codification of informal knowledge toward rigorous models and tools. This provides the basis for assessing the maturity of the field and identifying our next challenges.","","978-1-4503-4205-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883280","","Software;Computer architecture;Systematics;Software architecture;Knowledge engineering;Vocabulary","","1","","","","23 Mar 2017","","","IEEE","IEEE Conferences"
"A Framework to Communicate Software Engineering Data Effectively with Dashboards","A. M. Paz Milani","University of Victoria, Canada",2023 IEEE/ACM 45th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"12 Jul 2023","2023","","","256","258","Different approaches have been explored to capture Software Engineering (SE) data and to understand which indica-tors or metrics are essential to be observed in this process. How-ever, the presentation of this data using Information Visualization (InfoVis) systems, such as Dashboards, must be carried out more effectively. Dashboard users often face challenges interpreting the essence of the presented information. Moreover, keeping this audience engaged and leading them to act is still an open topic for investigation. Hence, my research investigates how SE data can be communicated to inform and inspire meaningful actions in a software development organization. The expected contributions are threefold: (1) an overview of the current state of how SE data is communicated across the industry; (2) an exploration of Info Vis approaches combined with a set of practices that can be extended for different applications; and (3) a theoretical framework to guide how SE data can be effectively communicated using Dashboards.","2574-1934","979-8-3503-2263-7","10.1109/ICSE-Companion58688.2023.00069","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10172561","Software Engineering;Information Visualization;Dashboards;Software Productivity Data;Data Storytelling","Productivity;Measurement;Industries;Data visualization;Organizations;Software;Faces","","","","18","IEEE","12 Jul 2023","","","IEEE","IEEE Conferences"
"An active learning module for an introduction to software engineering course","A. F. Ackerman",Montana Tech,2014 IEEE 27th Conference on Software Engineering Education and Training (CSEE&T),"19 May 2014","2014","","","190","191","Many schools do not begin to introduce college students to software engineering until they have had at least one semester of programming. Since software engineering is a large, complex, and abstract subject it is difficult to construct active learning exercises that build on the students' elementary knowledge of programming and still teach basic software engineering principles. It is also the case that beginning students typically know how to construct small programs, but they have little experience with the techniques necessary to produce reliable and long-term maintainable modules. I have addressed these two concerns by defining a local standard (Montana Tech Method (MTM) Software Development Standard for Small Modules Template) that step-by-step directs students toward the construction of highly reliable small modules using well known, best-practices software engineering techniques. “Small module” is here defined as a coherent development task that can be unit tested, and can be carried out by a single (or a pair of) software engineer(s) in at most a few weeks. The standard describes the process to be used and also provides a template for the top-level documentation. The instructional module's sequence of mini-lectures and exercises associated with the use of this (and other) local standards are used throughout the course, which perforce covers more abstract software engineering material using traditional reading and writing assignments. The sequence of mini-lectures and hands-on assignments (many of which are done in small groups) constitutes an instructional module that can be used in any similar software engineering course.","2377-570X","978-1-4799-4970-0","10.1109/CSEET.2014.6816803","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6816803","","Software engineering;Standards;Software;Software reliability;Programming;Education","","1","","","IEEE","19 May 2014","","","IEEE","IEEE Conferences"
"Intelligent Assistance in German Software Development: A Survey","J. Rech; E. Ras; B. Decker","Fraunhofer Institute of Experimental Software Engineering (IESE), Germany; Fraunhofer Institute of Experimental Software Engineering (IESE), Germany; Fraunhofer Institute of Experimental Software Engineering (IESE), Germany",IEEE Software,"9 Jul 2007","2007","24","4","72","79","Although many environments explicitly or implicitly use ideas from intelligent assistance research, users aren't always aware of its existence and potential. A survey of 135 German participants sheds light on the usage of and demand for intelligent assistance in software engineering activities. The project aimed to clarify intelligent assistance concepts, describe such systems' motivation, review examples of intelligent assistance, and present the results of a survey about the attitude toward and the demand for intelligent assistance in German software organizations.","1937-4194","","10.1109/MS.2007.110","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4267606","intelligent assistance;software engineering;survey;integrated development environments;reactive systems","Software engineering;Automatic programming;Skeleton;Software systems;Design engineering;Software design;Software quality;Gettering;Usability;Systems engineering and theory","","6","9","7","IEEE","9 Jul 2007","","","IEEE","IEEE Magazines"
"The Research of the Component-Based Software Engineering","X. Zhang; L. Zheng; C. Sun","Computer and Information Management Center, Tsinghua University, Beijing, China; Department of Computer Science and Technology, Tsinghua University, Beijing, China; Computer Science and Technology Institute, Nanjing University of Science and Technology of PLA, China",2009 Sixth International Conference on Information Technology: New Generations,"10 Jun 2009","2009","","","1590","1591","Using component-based software engineering (CBSE), applications are composed of reusable components with well defined interfaces and behavior. Highly trustworthy software production tools and cooperating environment becomes the critical part of the component-based software engineering, it's not only one of the high-tech key points for software technology development, but also critical foundation for the development of software industries, possessing important practical meaning as well as long-term strategic meaning.","","978-1-4244-3770-2","10.1109/ITNG.2009.70","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5070861","reusable components;CBSE;highly trustworthy software;cooperating environment;software technology","Software engineering;Software libraries;Production;Software development management;Collaborative software;Software tools;Software reusability;Computer architecture;Software systems;Resource management","","6","","2","IEEE","10 Jun 2009","","","IEEE","IEEE Conferences"
"Preparing Software Engineering Graduates for an Industry Career","S. Karunasekera; K. Bedse","Department of Computer Science and Software Engineering, University of Melbourne, Australia; Department of Computer Science and Software Engineering, University of Melbourne, Australia",20th Conference on Software Engineering Education & Training (CSEET'07),"16 Jul 2007","2007","","","97","106","The lack of preparedness of software engineering (SE) graduates for a professional career is a common complaint raised by industry practitioners. The career progression of many new graduates is severely impacted due to the lack of well rounded skills. For example, some of the technically stronger graduates lack communication and managerial skills and vise versa. Industry based capstone projects, incorporated as a part of an undergraduate degree, are a well accepted means of preparing students for their professional careers. Software Engineering undergraduates at the University of Melbourne engage in such industry based projects both in the penultimate and final years of their degree. Though aimed at providing students a real-life SE experience and preparing them for industry, we observed these projects to fail in some cases in giving the necessary breadth of skills. We believe this failure to be due to the lack of an objective framework to guide student learning outcomes during projects. To address this problem we developed an objective skill-based framework, focusing on managerial, engineering and personal skills. In this paper we present this framework and share our experiences of using it.","2377-570X","0-7695-2893-7","10.1109/CSEET.2007.39","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4271595","","Software engineering;Computer industry;Engineering profession;Computer science;Engineering management;Australia;Application software;Programming;Team working;Education","","27","","10","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"A Realistic Empirical Evaluation of the Costs and Benefits of UML in Software Maintenance","W. J. Dzidek; E. Arisholm; L. C. Briand","Department of Informatics, University of Oslo, Oslo, Norway; Department of Informatics, University of Oslo, Oslo, Norway; Department of Informatics, University of Oslo, Oslo, Norway",IEEE Transactions on Software Engineering,"3 Jun 2008","2008","34","3","407","432","The Unified Modeling Language (UML) is the de facto standard for object-oriented software analysis and design modeling. However, few empirical studies exist that investigate the costs and evaluate the benefits of using UML in realistic contexts. Such studies are needed so that the software industry can make informed decisions regarding the extent to which they should adopt UML in their development practices. This is the first controlled experiment that investigates the costs of maintaining and the benefits of using UML documentation during the maintenance and evolution of a real, non-trivial system, using professional developers as subjects, working with a state-of-the-art UML tool during an extended period of time. The subjects in the control group had no UML documentation. In this experiment, the subjects in the UML group had on average a practically and statistically significant 54% increase in the functional correctness of changes (p=0.03), and an insignificant 7% overall improvement in design quality (p=0.22) - though a much larger improvement was observed on the first change task (56%) - at the expense of an insignificant 14% increase in development time caused by the overhead of updating the UML documentation (p=0.35).","1939-3520","","10.1109/TSE.2008.15","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4459340","Maintainability;Distribution;Maintenance;and Enhancement;Software Engineering;Software/Software Engi;Design notations and documentation;Object-Oriented Programming;Maintainability;Distribution;Maintenance;and Enhancement;Software Engineering;Software/Software Engi;Design notations and documentation;Object-Oriented Programming","Unified modeling language;Software maintenance;Documentation;Costs;Software standards;Software design;Object oriented modeling;Computer industry;Electrical equipment industry;Control systems","","101","","49","IEEE","3 Jun 2008","","","IEEE","IEEE Journals"
"Fuzzyness And Imprecision In Software Engineering","M. Burgin; N. Debnath; J. Debnath","University of California, Los Angeles, USA; Winona State University, USA; Winona State University, USA",2006 World Automation Congress,"25 Jun 2007","2006","","","1","8","In this paper, we study how fuzziness in software engineering emerges and how to reflect this fuzziness in measuring software qualities. Principal means in these processes are software metrics with values in categorical data represented by software metrics with values in fuzzy sets and linguistic variables. This study is aimed to support the development of high quality software. The process of program design as a transition from a problem to a program is studied. A classification of software metrics is developed with the aim of better structuring and optimization of the software fuzzy metric design. Processes of constructing new measures from existing ones often use aggregation operations. Here we study aggregation operations for fuzzy set based software metrics.","2154-4824","1-889335-33-9","10.1109/WAC.2006.376021","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4259937","uncertainty;fuzzy set;problem;fuzzy software metric;software engineering","Software engineering;Software metrics;Software measurement;Software quality;Fuzzy sets;Software design;Process design;Fuzzy systems;Scheduling;Project management","","","","14","","25 Jun 2007","","","IEEE","IEEE Conferences"
"Decision Knowledge Triggers in Continuous Software Engineering","K. Anja; J. O. Johanssen; B. Paech; R. Alkadhi; B. Bruegge","Ruprecht Karls Universitat Heidelberg, Heidelberg, Baden-WÃ¼rttemberg, DE; Department of Informatics, Technical University of Munich, Munich, Germany; Heidelberg University, Institute of Computer Science, Heidelberg, Germany; Department of Informatics, Technical University of Munich, Munich, Germany; Department of Informatics, Technical University of Munich, Munich, Germany",2018 IEEE/ACM 4th International Workshop on Rapid Continuous Software Engineering (RCoSE),"30 Aug 2018","2018","","","23","26","Decision knowledge encompasses decisions and related information such as the problems the decisions address, their rationale, or alternatives. The management of decision knowledge is considered important for software development, however, it is often not integrated, since it requires additional effort and developers do not perceive short-term benefits. Continuous software engineering offers new possibilities to overcome these drawbacks: During continuous software engineering, developers perform practices suitable to integrate the management of decision knowledge in their daily work. For example, developers regularly commit code and manage tasks to implement features. In this paper, we present ideas on how to trigger the developers to capture and use decision knowledge during these practices, in particular to 1) package distributed decision knowledge, 2) make tacit decisions explicit, and 3) consider consistency between decisions.","","978-1-4503-5745-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8452103","Decision Knowledge;Knowledge Management;Rationale;Continuous Software Engineering;Software Evolution;Trigger","Task analysis;Software;Software engineering;Knowledge engineering;Data integrity;Informatics;Conferences","","","","25","","30 Aug 2018","","","IEEE","IEEE Conferences"
"Advancing Object-Oriented Model-Driven Software Engineering Pedagogy","E. S. Grant","School of Electrical Engineering and Computer Science, University of North Dakota, Grand Forks, North Dakota, USA",2023 IEEE 35th International Conference on Software Engineering Education and Training (CSEE&T),"31 Aug 2023","2023","","","41","48","There are a number of textbooks and articles on software engineering pedagogy, with each demonstrating sets of common phases and sequence of activities. Many of these textbooks lack a description of the process and purpose for transition from the content of one chapter to the next. Another drawback to using the many available textbooks is the absence of a comprehensive overview of a defined framework and methodology for applying the content of the textbooks. In presenting another article on software engineering pedagogy there is an attempt to differentiate the work herein from existing work, by addressing the aforementioned perceived deficiencies in existing works of this kind. This is accomplished by incorporating international standards in structuring a strong model-driven software engineering framework and methodology for tertiary education that may be used as a complement to existing publications in software engineering pedagogy. The work presented herein documents the effort over a number of years, in developing a rigorous model-driven software development life cycle for the tertiary classroom.","2377-570X","979-8-3503-2202-6","10.1109/CSEET58097.2023.00015","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10229336","pedagogy;software development life cycle;software engineering;tertiary education;model-driven development;object-oriented development","Object oriented modeling;Education;Benchmark testing;Software;Standards;Software engineering;Periodic structures","","","","15","IEEE","31 Aug 2023","","","IEEE","IEEE Conferences"
"Reflection and abstraction in learning software engineering's human aspects","O. Hazzan; J. E. Tomayko","Department of Education in Technology and Science, Institute of Technology; School of Computer Science, Carnegie Mellon University",Computer,"13 Jun 2005","2005","38","6","39","45","Intertwining reflective and abstract modes of thinking into the education of software engineers, especially in a course that focuses on software engineering's human aspects, can increase students' awareness of the discipline's richness and complexity while enhancing their professional performance in the field. The complexity of software development environments includes the profession's cognitive and social aspects. A course designed to increase students' awareness of these complexities introduces them to reflective mental processes and to tasks that invite them to apply abstract thinking. For the past three years, we have taught a Human Aspects of Software Engineering course at both the Technion-Israel Institute of Technology and the School of Computer Science at Carnegie Mellon University. This course aims to increase software engineering students' awareness of the richness and complexity of various human aspects of software engineering and of the problems, dilemmas, question, and conflicts these professionals could encounter during the software development process.","1558-0814","","10.1109/MC.2005.200","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1439450","software engineering;software engineering education;human aspects of software engineering;education","Humans;Software engineering;Reflection;Programming;Software systems;Computer science;Software performance;Computer science education;Design engineering;Performance analysis","","19","","13","IEEE","13 Jun 2005","","","IEEE","IEEE Magazines"
"Some challenges facing software engineers developing software for scientists","J. Segal","Empirical Studies of Software Development group Centre of Research in Computing, Open University, Milton Keynes, UK",2009 ICSE Workshop on Software Engineering for Computational Science and Engineering,"5 Jun 2009","2009","","","9","14","In this paper, the author discusses two types of challenges facing software engineers as they develop software for scientists. The first type is those challenges that arise from the experience that scientists might have of developing their own software. From this experience, they internalise a model of software development but may not realise the contextual factors which make such a model successful. They thus have expectations and assumptions which prove challenging to software engineers. The second type is those challenges which, while not unique to the development of software for scientists, have especial significance in the context of such development. These include the challenges of ensuring effective user engagement and of developing software for a community.","","978-1-4244-3737-5","10.1109/SECSE.2009.5069156","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5069156","","Programming;Context modeling;Software quality;Design engineering;Pressing;Software prototyping;Production;Biological information theory;High performance computing;Biological system modeling","","17","","13","IEEE","5 Jun 2009","","","IEEE","IEEE Conferences"
"The small project observatory: a tool for reverse engineering software ecosystems","M. Lungu; M. Lanza","REVEAL @ Faculty of Informatics, University of Lugano, Switzerland; REVEAL @ Faculty of Informatics, University of Lugano, Switzerland",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","289","292","Software evolution researchers have focused mostly on analyzing single software systems. However, often projects are developed and co-exist within software ecosystems, i.e., the larger contexts of companies, research groups or open-source communities. We present The Small Project Observatory, a web-based analysis platform for ecosystem reverse engineering through interactive visualization and exploration.","1558-1225","978-1-60558-719-6","10.1145/1810295.1810356","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062181","mining software repositories;software ecosystems;software evolution;software visualization","Ecosystems;Software;Visualization;Context;Collaboration;Reverse engineering;Observatories","","4","","7","","27 Oct 2011","","","IEEE","IEEE Conferences"
"Take Control : (On the Unreasonable Effectiveness of Software Analytics)","T. Menzies","Computer Science, North Carolina State University, Raleigh, USA",2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP),"19 Aug 2019","2019","","","265","266","The goal of software analytics should be insight; i.e. surprises that make us change the way we do business (in our case, the business of software construction, maintenance and evolution). So what insights have we learned from software analytics? Our field is rife with any number of truisms that are commonly quoted but rarely checked. That stops now. Using software analytics, we can check, and prune, many of those truisms. Specifically, the number of variables required to make predictions about SE projects is remarkably small-which means that (a) most of the things we think might affect software quality have little impact in practice; (b) controlling just a few key variables can be enough to improve software quality.","","978-1-7281-1760-7","10.1109/ICSE-SEIP.2019.00037","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8804423","software analytics, software engineering","Software engineering;Business;Software quality;Computer science;Maintenance engineering","","","","3","IEEE","19 Aug 2019","","","IEEE","IEEE Conferences"
"Rethinking Coordination in Large-Scale Software Development","T. Dingsøyr; F. O. Bjørnson; N. B. Moe; K. Rolland; E. A. Seim","SINTEF Digital, Trondheim, Norway; Department of Computer Science, Norwegian University of Science and Technology; SINTEF Digital, Trondheim, Norway; SINTEF Digital, Trondheim, Norway; SINTEF Technology and Society, Trondheim, Norway",2018 IEEE/ACM 11th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"26 Aug 2018","2018","","","91","92","Coordination was early identified as a key challenge in software development, and in particular in large development projects. With the arrival of agile methods and their increasing use also in large-scale projects, this calls for rethinking how the software engineering community addresses coordination. We argue for increasing the focus on coordination in software engineering and describe four directions for research. Focus on these areas can supplement advice given in current development methods with relevant research-based advice.","2574-1837","978-1-4503-5725-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445544","coordination;large-scale;software engineering;software process improvement;agile methods","Software;Software engineering;Organizations;Task analysis;Conferences;Electric breakdown;Uncertainty","","","","18","","26 Aug 2018","","","IEEE","IEEE Conferences"
"Towards software engineering paradigm for software as a service","N. Baliyan; S. Kumar","Department of Computer Science and Engineering, Indian Institute of Technology Roorkee, Roorkee, Haridwar, India; Department of Computer Science and Engineering, Indian Institute of Technology Roorkee, Roorkee, Haridwar, India",2014 Seventh International Conference on Contemporary Computing (IC3),"15 Sep 2014","2014","","","329","333","The Software as a Service model of Cloud Computing offers economies of scale through the pay per use model; however, it renders the modern software very different from traditional software. Hence, there is a need to adapt Software Engineering approach in a manner that will make the development process and delivery of Software as a Service more efficient and of high quality. After performing literature review, a classification of ongoing research in this direction of adaptation is presented. Various research gaps in the areas of software development process, software reengineering, measurement, metrics, and quality models targeted at Software as a Service are identified, which can be a first step towards the definition of standards and guidelines for Software as a Service development.","","978-1-4799-5173-4","10.1109/IC3.2014.6897195","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6897195","cloud computing;software as a service;quality;software engineering;reengineering;web engineering","Software as a service;Adaptation models;Computational modeling;Cloud computing;Measurement","","4","","21","IEEE","15 Sep 2014","","","IEEE","IEEE Conferences"
"The art, science and engineering of software development skills in an embedded system","Kook-Soon Chai","Software Architecture Group, Motorola, Inc., Penang, Malaysia",9th Asia-Pacific Conference on Communications (IEEE Cat. No.03EX732),"22 Mar 2004","2003","1","","232","237 Vol.1","After many years since software design first started, it is still not matured like other disciplines such as electrical or mechanical engineering design in such a way that they are repeatable with defined methods, processes, artifacts, and so forth. For example, electronics systems are based on the fundamental of physics and chemistry. Software does not work based on these fundamentals, and many are still questioning the necessity of software engineering. We show one of the ways to do software design, particularly on telecommunication systems, that demonstrate a practical software engineering practice. We show that software development is very much like art, science and engineering. We show how do we design and specify a software feature systematically with disciplines, and further suggest the skills required for software professional.","","0-7803-8114-9","10.1109/APCC.2003.1274349","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1274349","","Subspace constraints;Programming;Software engineering;Real time systems;Embedded software;Software design;Embedded system;Software architecture;Software systems;Art","","1","","15","IEEE","22 Mar 2004","","","IEEE","IEEE Conferences"
"Integrated project based learning in software engineering education","Sohan Singh Yadav; Jianbing Xiahou","Software School, Xiamen University, Xiamen, China; Software School, Xiamen University, Xiamen, China",2010 International Conference on Educational and Network Technology,"29 Jul 2010","2010","","","34","36","This paper presents an education framework to effectively develop crucial software engineering skills in students of software Engineering major at National Exemplary Software School (NESS), Xiamen University. The goal is to describe a systematic approach towards integrating project based learning in software engineering major, both inside and outside the classroom. An essential part of Software Engineering Education is practical training in principles, methods and procedures under conditions similar to developing real software products. This paper describes the different conventional and traditional approaches at length for Software Engineering Education and proposes integrated project based learning approach is more effective and interesting for teaching and learning SE as compared to the lecture based approach.","","978-1-4244-7662-6","10.1109/ICENT.2010.5532120","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5532120","","Software engineering;Application software;Education;Software quality;Educational products;Programming;Educational technology;Knowledge engineering;Management training;Quality assurance","","8","","14","IEEE","29 Jul 2010","","","IEEE","IEEE Conferences"
"Software engineering traceability method for food ingredient tracing","N. A. binti Azram; R. binti Atan","Department of Information System, Universiti Putra Malaysia, Selangor, Malaysia; Department of Information System, Universiti Putra Malaysia, Selangor, Malaysia",2011 Malaysian Conference in Software Engineering,"26 Jan 2012","2011","","","141","145","The topic of traceability has been widely discussed in the research world. Many areas of studies have a great interest in traceability. In software engineering, traceability has been well researched and discuss especially in software development. In food industry, traceability has also been an important topic for tracing food content of various food products. In this paper, we present a software engineering traceability method for food ingredient tracing. The main goal of this research is to apply and verified that a software engineering traceability method is suitable for food ingredient tracing.","","978-1-4577-1531-0","10.1109/MySEC.2011.6140659","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6140659","Software Engineering;Traceability Method;Food Traceability","Software engineering;Measurement;Software;Manuals;Food products;Documentation;Unified modeling language","","1","","11","IEEE","26 Jan 2012","","","IEEE","IEEE Conferences"
"Unapproved IEEE Draft Standard for Systems and Software Engineering - Life Cycle Processes-Risk Management (Revision of ISO/IEC 16085 IEEE Std 1540-2001 First edition 2004-10-01)","",,IEEE Std P16085-2006,"9 Feb 2007","2006","","","","","","","978-1-5044-2668-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4040516","","ISO Standards;IEC Standards;IEEE Standards;Standards;Portable document format;Software engineering;Software","","","","","","9 Feb 2007","","","IEEE","IEEE Standards"
"Software Engineering for Autonomous Robot: Challenges, Progresses and Opportunities","X. Mao; H. Huang; S. Wang","College of Computer, Key Lab. of Software Engineering for Complex Systems National University of Defense Technology, Changsha, China; College of Computer, Key Lab. of Software Engineering for Complex Systems National University of Defense Technology, Changsha, China; College of Computer, Key Lab. of Software Engineering for Complex Systems National University of Defense Technology, Changsha, China",2020 27th Asia-Pacific Software Engineering Conference (APSEC),"1 Mar 2021","2020","","","100","108","Software engineering for autonomous robot (SE4AR) is an emerging interdisciplinary field with the aims to support the development, running and evolution of software systems for autonomous robot - a safety and mission critical cyber-physical system. Such field has recently gained increasing attentions from both academia and industry and made rapid progresses in the past years. However, many challenges pose on the SE4AR due to the specific features and complexities of autonomous robot software (ARS) and several open problems should be tackled in the future researches. This paper aims to present a comprehensive investigation on the researches and practices of SE4AR. Our contributions are three-fold as follows: an in-depth analysis on the development challenges, a systematic review on the current progresses, and an open discussion of weaknesses in current researches and opportunities in future researches.","2640-0715","978-1-7281-9553-7","10.1109/APSEC51365.2020.00018","National Science Foundation of China(grant numbers:61379051); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9359263","software engineering;autonomous robot software;cyber-physical system","Industries;Systematics;Service robots;Software systems;Complexity theory;Software engineering;Autonomous robots","","3","","74","IEEE","1 Mar 2021","","","IEEE","IEEE Conferences"
"Software Engineering Taxonomy Reviews","N. Mubarakah; Soeharwinto","Dept. of Electrical Engineering, Faculty of Engineering, Universitas Sumatera Utara (USU), Medan, Indonesia; Dept. of Electrical Engineering, Faculty of Engineering, Universitas Sumatera Utara (USU), Medan, Indonesia","2020 4rd International Conference on Electrical, Telecommunication and Computer Engineering (ELTICOM)","2 Nov 2020","2020","","","63","67","There is a lack of clarity when discussing taxonomies especially in the field of software engineering. The doubt encourages the writing of software engineering taxonomy paper with the aim of clarifying the applied terminologies. The taxonomic hierarchy plays a major role in regulating knowledge based concepts. Taxonomy is a hierarchical structure based on internal data to classify information. Taxonomy itself has a lot of branches. Software engineering taxonomies are defined based on the evaluation of interrelations terms in document collections. Mapping software engineering needs to be done to analyze data in taxonomic development.","","978-1-7281-8870-6","10.1109/ELTICOM50775.2020.9230473","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9230473","Taxonomy;knowledge based;software engineering","Text mining;Terminology;Taxonomy;Knowledge based systems;Writing;Communications technology;Software engineering","","2","","20","IEEE","2 Nov 2020","","","IEEE","IEEE Conferences"
"One Semester Team Projects in Systems Analysis, Software Engineering, and Software Project Management Courses","R. Gowda","Department of Computer Science, University of Dayton, Dayton, OH, USA","2023 Congress in Computer Science, Computer Engineering, & Applied Computing (CSCE)","9 Apr 2024","2023","","","657","664","Team Projects in Software Engineering courses provide students exposure to real world problems, systematic ways to understand and specify problems, arrive at analysis, design models, and put together a system architecture for implementation. This paper explores one semester projects in Systems Analysis, Software Engineering, and Software Project Management courses offered at the undergraduate and graduate levels in Computer Science at the University of Dayton. All the courses are in continuum in the broader definition of Software Engineering and have one overlapping topic on use cases. The challenge is to focus on essential tools and techniques for a specific course, incorporate the latest technologies, and provide learning environments for acquiring knowledge and skill sets, and use them in team projects.","","979-8-3503-2759-5","10.1109/CSCE60160.2023.00112","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10487530","Systems Analysis;Systems Design;Software Engineering;Software Project Management","Computer science;Analytical models;Systematics;Computational modeling;Project management;Systems architecture;Software","","","","7","IEEE","9 Apr 2024","","","IEEE","IEEE Conferences"
"Contradicting Motivations in Civic Tech Software Development: Analysis of a Grassroots Project","A. Knutas; D. Siemon; N. Tylosky; G. Maccani","Dept. of Software Engineering, LUT University, Lappeenranta, Finland; Dept. of Software Engineering, LUT University, Lahti, Finland; Dept. of Software Engineering, LUT University, Lappeenranta, Finland; Ideas for Change, Barcelona, Spain",2023 IEEE/ACM 45th International Conference on Software Engineering: Software Engineering in Society (ICSE-SEIS),"11 Jul 2023","2023","","","157","163","Grassroots civic tech, or software for social change, is an emerging practice where people create and then use software to create positive change in their community. In this interpretive case study, we apply Engeström’s expanded activity theory as a theoretical lens to analyze motivations, how they relate to for example group goals or development tool supported processes, and what contradictions emerge. Participants agreed on big picture motivations, such as learning new skills or improving the community. The main contradictions occurred inside activity systems on details of implementation or between system motives, instead of big picture motivations. Two most significant contradictions involved planning, and converging on design and technical approaches. These findings demonstrate the value of examining civic tech development processes as evolving activity systems.","2832-7616","979-8-3503-2261-3","10.1109/ICSE-SEIS58686.2023.00021","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10173896","civic tech;software engineering;software development;motivations;activity theory;case study;contradictions","Knowledge engineering;Software;Planning;Complexity theory;Task analysis;Software engineering;Lenses","","","","38","IEEE","11 Jul 2023","","","IEEE","IEEE Conferences"
"Code4Thought Project: Employing the ISO/IEC-9126 Standard for Software Engineering-Product Quality Assessment","P. Antonellis; D. Antoniou; Y. Kanellopoulos; C. Makris; C. Tjortjis; V. Theodoridis; N. Tsirakis","Department of Computer Engineering and Informatics, University of Patras, Greece; Department of Computer Engineering and Informatics, University of Patras, Greece; School of Computer Science and Technology, University of Manchester, Institute of Science and Technology, UK; Department of Computer Engineering and Informatics, University of Patras, Greece; University of Western Macedonia, Greece; Department of Computer Engineering and Informatics, University of Patras, Greece; Department of Computer Engineering and Informatics, University of Patras, Greece",2009 13th European Conference on Software Maintenance and Reengineering,"10 Apr 2009","2009","","","297","300","The aim of the Code4Thought project was to deliver a tool supported methodology that would facilitate the evaluation of a software product's quality according toISO/IEC-9126 software engineering quality standard. It was a joint collaboration between Dynacomp S.A. and the Laboratory for Graphics, Multimedia and GIS of the Department of Computer Engineering and Informatics of the University of Patras. The Code4thought project focused its research on extending the ISO/IEC-9126standard by employing additional metrics and developing new methods for facilitating system evaluators to define their own set of evaluation attributes. Furthermore, to develop innovative and platform-free methods for the extraction of elements and metrics from source code data.Finally, to design and implement new data mining algorithms tailored for the analysis of software engineering data.","1534-5351","978-0-7695-3589-0","10.1109/CSMR.2009.32","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812775","software quality;ISO/IEC-9126;data mining","ISO standards;Code standards;Software standards;Software quality;Quality assessment;Software engineering;Data mining;Algorithm design and analysis;Software tools;Collaboration","","1","","7","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"An experiment to build an open source application for the Internet of Things as part of a software engineering course","R. Cristea; C. Păduraru","Department of Computer Science, ICUB Research Institute of the University of Bucharest University of Bucharest, Romania; Department of Computer Science, University of Bucharest, Romania",2023 IEEE/ACM 5th International Workshop on Software Engineering Research and Practices for the IoT (SERP4IoT),"27 Jul 2023","2023","","","13","16","Software engineering education is a field in which innovation is constantly taking place, especially in terms of the methods used to achieve the competencies and learning objectives to be taught. The Internet of Things is a relatively new area that offers accessible but complex SE challenges that the authors believe are an excellent example for inclusion in the educational process. Over the course of two academic years, we have explored the integration between SE and the Internet of Things with the additional goal of building an open-source application repository to foster academic research and enhance industrial tools.","","979-8-3503-0188-5","10.1109/SERP4IoT59158.2023.00008","Horizon Europe; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10190457","software;engineering;education;Internet of Things;IoT;open source","Knowledge engineering;Computer science;Technological innovation;Conferences;Education;Buildings;Focusing","","","","19","IEEE","27 Jul 2023","","","IEEE","IEEE Conferences"
"Mobile software engineering in mobile computing curriculum","V. L. Uskov","Bradley University, Peoria, IL, USA",2013 3rd Interdisciplinary Engineering Design Education Conference,"10 Jun 2013","2013","","","93","99","Recent advances in mobile technology, mobile networks and mobile computing introduced new capabilities, functionality, and applications for software systems on mobile devices. On the other hand, those sounding achievements generated reasonable concerns regarding applications of traditional software engineering methodology (concepts, methods, tools, models, programming styles) to mobile software systems. Requirements of highly mobile users, limited computing power of mobile devices, security issues in mobile Web and networks, and various types of mobile communication technology stimulate a growth of emerging area - software engineering of mobile software systems, or mobile software engineering (MSE). Faculty and graduate students at the Department of Computer Science and Information Systems at Bradley University (Peoria, Il, USA) are involved into collaborative “student-faculty” research, design and development project aimed at design and development of pioneering MSE curriculum. This project is aimed at 1) research of MSE-focused programming methodologies, 2) analysis models in MSE, 3) design and development models in MSE, including architectural models, information models, functional models, interaction models, navigation models, graphic user interface (GUI) hierarchical models, 4) analysis of integrated development environments (IDEs) for various mobile platforms (Android, Windows Phone, etc.), 5) testing strategies and techniques for mobile software systems, 6) mobile software quality management, 7) security issues of mobile software systems, and 8) MSE-focused implementation methods. This paper focuses on main MSE topics in Mobile Computing curriculum.","","978-1-4673-5112-6","10.1109/IEDEC.2013.6526767","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6526767","Mobile software engineering;mobile computing;curriculum","Mobile communication;Mobile computing;Software systems;Software engineering;Analytical models;Programming","","5","","31","IEEE","10 Jun 2013","","","IEEE","IEEE Conferences"
"A toolset to support a software maintenance process in academic environments","R. Hardt","Department of Computer and Information Sciences, University of St. Thomas, St. Paul, MN, USA",2020 IEEE International Conference on Software Maintenance and Evolution (ICSME),"2 Nov 2020","2020","","","814","817","Software engineering and maintenance processes are designed to provide structure and organization around a set of activities involved in the production or maintenance of a software product. Understanding these processes and learning to follow them are important experiences for students in a software engineering course. But it can be difficult for both students and instructors to recognize when a process isn't being followed. Tools designed to guide a process can help. In these environments, tool support can also help ensure that students are using version control systems appropriately while fostering an environment in which students learn from their peers. The importance of tool support for agile processes has been recognized, but little such support has been designed for academic environments. ""Co-Op"" is a software maintenance-focused process and supporting toolset designed for use in academic environments. The toolset is implemented as a web application that focuses on change impact analysis, use of version control systems that adheres to the process, and communication amongst part-time developers. A brief overview can be seen at https://bit.ly/2YEbWvO.","2576-3148","978-1-7281-5619-4","10.1109/ICSME46990.2020.00100","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9240681","software maintenance tools;software maintenance process;software maintenance education;software engineering education","Software maintenance;Process control;Production;Maintenance engineering;Tools;Control systems;Software engineering","","","","14","IEEE","2 Nov 2020","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE Draft International Standard - Systems and Software Engineering - Systems of Systems Considerations in Engineering of Systems","",,"ISO/IEC/IEEE P21839_DIS, July 2018","14 Sep 2018","2018","","","1","40","This document provides a set of critical considerations to be addressed at key points in the life cycle of systems created by humans. This document refers to a constituent system that will interact in a system of systems as the system of interest (SOI). These considerations are aligned with ISO/IEC/IEEE 15288 and the ISO/IEC/IEEE 24748 framework for system life cycle stages and associated terminology. Selected subsets of these considerations may be applied throughout the life of systems. This is accomplished through the involvement of all stakeholders with the ultimate goal of achieving customer satisfaction by ensuring that when delivered, the system will operate effectively in the operational or business environment which will typically be characterized as one or more systems of systems. This document concerns those systems that are man-made and are configured with one or more of the following: hardware, software, humans, procedures and facilities.","","978-1-5044-5168-0","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8466082","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;System of systems","","","","","","14 Sep 2018","","","IEEE","IEEE Standards"
"Teaching an Introductory Software Engineering Course in a Computer Science Program","P. Jalote","Indian Institute of Technology Delhi, India",2009 22nd Conference on Software Engineering Education and Training,"10 Apr 2009","2009","","","7","7","Though software engineering courses are taught within different types of programs, one common program is the computer science program. Within this program, most often there is an introductory course in software engineering, which is often the only course in this area that a student will take in his/her program. Due to the wide scope of the subject and the constraint of one course only, this introductory course remains one of the hardest courses to teach, and leads to the possibility of a variety of possible goals for such a course. In this talk we view a course like a software program-having a pre-condition and a post-condition, and then discuss the various possible pre and post conditions of such a course, and some issues related to teaching the course.","2377-570X","978-1-4244-3431-2","10.1109/CSEET.2009.52","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4812666","","Software engineering;Computer science;Books;Computer science education;Educational programs;Biographies;Software quality;Coordinate measuring machines;Natural languages;Project management","","3","","","IEEE","10 Apr 2009","","","IEEE","IEEE Conferences"
"Navigating the AI Frontier: A Critical Literature Review on Integrating Artificial Intelligence into Software Engineering Education","C. K. Sah; L. Xiaoli; M. M. Islam; M. K. Islam","School of Computer Science and Engineering, Beihang University, Beijing, China; School of Computer Science and Engineering, Beihang University, Beijing, China; College of Technology and Engineering, Westcliff University, California, USA; Ecole Polytechnique De Bruxelles, Université Libre De Bruxelles, Brussels, Belgium",2024 36th International Conference on Software Engineering Education and Training (CSEE&T),"10 Sep 2024","2024","","","1","5","The swift development of Artificial Intelligence (AI), namely the introduction of Large Language Models (LLMs), is drastically altering various industries and necessitating a major change in the way software engineering is taught. To equip upcoming software engineers with the knowledge and abilities to function in this AI-powered environment, curriculum and pedagogical techniques must be critically reevaluated. To better understand the integration of AI and LLMs into software engineering education, this study gives a thorough and critical analysis of the literature, looking at existing models, pedagogical frameworks, and enduring issues. We explore various approaches utilized by educational establishments, including as specialized AI and LLM courses, incorporating modules into pre-existing curricula, and utilizing open-source LLM materials. Our analysis, which is based on case studies and research data, thoroughly assesses how well these strategies enable software engineers to comprehend, make use of, and ethically create AI and LLMs. Key obstacles to the successful integration of AI and LLM are also identified by our analysis, including the inexperienced status of LLM educators, resource limitations, potential biases in AI and LLM algorithms, and insufficient instructor knowledge. Building on these discoveries, we provide solid answers to these problems and suggest interesting avenues for further study to improve the integration of AI and LLM. In the end, this study advocates for a multimodal strategy to get future software engineers ready for the impending AI and LLM future and secure their place in this quickly changing field.","2377-570X","979-8-3503-7897-9","10.1109/CSEET62301.2024.10663054","Beihang University; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10663054","large language models (LLMs);software engineering education;artificial intelligence (AI);Pedagogical frame-works;curriculum integration;successful strategies;problems and solutions;Instructor Skill;Resource Limitations;LLM Bias;AI Bias;Open-Source LLM Resources","Ethics;Reviews;Navigation;Large language models;Education;Software algorithms;Solids","","","","31","IEEE","10 Sep 2024","","","IEEE","IEEE Conferences"
"The BigLever Software Gears Unified Software Product Line Engineering Framework","C. W. Krueger","BigLever Software, Inc., Austin, TX, USA",2008 12th International Software Product Line Conference,"19 Sep 2008","2008","","","353","353","In this paper discusses that BigLever Software's Unified Software Product Line Engineering (SPLE) Framework enables the integration of tools, assets and processes across the full system and software product line development lifecycle. The Gears framework offers a simple and elegant integrated software product line solution - for requirements engineers, architects, modelers, developers, build engineers, document writers, configuration managers, test engineers and project managers. The unified SPLE framework has enabled mainstream organizations with some of the largest, most sophisticated and complex, safety-critical systems ever built to adopt the SPLE approach.","","978-0-7695-3303-2","10.1109/SPLC.2008.33","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4626870","","Software;Gears;Programming;Organizations;Software engineering;Production;Documentation","","15","","","IEEE","19 Sep 2008","","","IEEE","IEEE Conferences"
"Software offshoring risks and opportunities for software engineering programs","S. B. Seidman; L. Finkelstein","New Jersey Institute of Technology, USA; Northeastern University, USA","17th Conference on Software Engineering Education and Training, 2004. Proceedings.","30 Mar 2004","2004","","","153","153","There is increasing anecdotal evidence of a move of software development projects and employment from North America and Western Europe to Asia and Eastern Europe. This panel will address the current and potential impact of such software offshoring on academic programs in software engineering.","1093-0175","0-7695-2099-5","10.1109/CSEE.2004.1276526","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1276526","","Software engineering;Employment;North America;Europe;Computer industry;Programming;Asia;Legislation;Protection;Application software","","","","","IEEE","30 Mar 2004","","","IEEE","IEEE Conferences"
"Does System Based on Artificial Intelligence Need Software Engineering Method? Systematic Review","I. W. Syahputri; R. Ferdiana; S. S. Kusumawardani","Department of Electrical Engineering and Information Technology, Universitas Gadjah Mada, Yogyakarta, Indonesia; Department of Electrical Engineering and Information Technology, Universitas Gadjah Mada, Yogyakarta, Indonesia; Department of Electrical Engineering and Information Technology, Universitas Gadjah Mada, Yogyakarta, Indonesia",2020 Fifth International Conference on Informatics and Computing (ICIC),"24 Dec 2020","2020","","","1","6","Software engineering is the most important stage in developing a system. Software engineering is used to facilitate developers in developing systems in the form of a mobile, web, or artificial intelligence-based system. Systematic Review is a way to find data and related problems that can strengthen a person to conduct a study. In this paper. Researchers conducted a systematic review to find whether an Artificial Intelligence-based system requires Software Engineering when designing the system. The main purpose of this systematic review is to gather prior research related to developing Artificial Intelligence-based systems from design to the implementation phase and discover what methods are they common use in developing their systems and define what is the reason behind they selected method or even does not use Software Engineering methods in developing them.","","978-1-7281-8047-2","10.1109/ICIC50835.2020.9288582","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9288582","software engineering method;systematic review;AI method;agile for AI system;waterfall for AI system","Systematics;Artificial intelligence;Informatics;Software engineering","","1","","47","IEEE","24 Dec 2020","","","IEEE","IEEE Conferences"
"Establishing content traceability for software applications: An approach based on structuring and tracking of configuration elements","P. Nistala; P. Kumari","Tata Consultancy Services Limited, Hyderabad, India; Tata Consultancy Services Limited, Hyderabad, India",2013 7th International Workshop on Traceability in Emerging Forms of Software Engineering (TEFSE),"7 Oct 2013","2013","","","68","71","Establishing content traceability between various software artifacts or configuration elements at granular level and identifying the gaps in traceability at each phase is a key challenge in software development. In other disciplines such as manufacturing and systems engineering we can find models, well established principles and practices for formulating and tracing the product parts and composition. This paper extends the system model and product breakdown structure concepts from these disciplines to software systems. We propose a model that provides a granular view of software product composition and content traceability through structured relationships among various software configuration elements. Here, we define the key configuration elements essential for the alignment and traceability, create a structure through interconnected relationships of these elements at each phase and analyze the inconsistencies in the relationship. The model provides a visual representation to understand the completeness at each of the development stages. The content traceability is established from both completeness and correctness perspectives and gaps are identified at each phase. The paper briefly describes the model and initial results from pilot implementation in an industry application.","2157-2194","978-1-4799-0495-2","10.1109/TEFSE.2013.6620157","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6620157","software configuration structure;software content traceability;software alignment and tracking;software consistency analysis;gap analysis;software traceability","Electric breakdown;Security;Modeling;Software engineering;ISO standards;Software quality","","9","","21","IEEE","7 Oct 2013","","","IEEE","IEEE Conferences"
"Getting the Best out of Software Process Simulation and Empirical Research in Software Engineering","P. Wernick; T. Hall","Systems and Software Group, School of Computer Science, University of Herfordshire, Hatfield, Hertfordshire, UK; Systems and Software Group, School of Computer Science, University of Herfordshire, Hatfield, Hertfordshire, UK",Second International Workshop on Realising Evidence-Based Software Engineering (REBSE '07),"16 Jul 2007","2007","","","3","3","This position paper sets out our views on the need to use simulation and quantitative experiments in combination in order to maximise the benefit of both to software engineering research. Each approach should be used to overcome weaknesses in the other in attempting to predict the behaviour of software processes when new or modified processes, tools or techniques are employed. We also express our concern at the frequently-encountered use of the term 'experiment' to describe quantitative simulation-based investigations.","","0-7695-2962-3","10.1109/REBSE.2007.3","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4273275","","Software engineering;Computational modeling;Computer simulation;Software performance;Uncertainty;Software systems;Computer science;Educational institutions;Software tools;Context modeling","","4","","13","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"A Study on Management of Software Engineering Capability in Japan: Panel Analysis on Independent Vendors","Y. Kadono; H. Tsubaki; S. Tsuruho","School of Media Science, Tokyo University of Technology, Tokyo, Japan; Faculty of Data Science, Institute for Statistical Mathematics, Tokyo, Japan; Software Engineering Center, Information Technology Promotion Agency, Tokyo, Japan",2010 Second World Congress on Software Engineering,"22 Feb 2011","2010","1","","129","132","The survey on software engineering excellence (SEE) was designed and conducted in 2005, 2006 and 2007 with Ministry of Economy, Trade and Industry, Japan. In the survey the software engineering capability was measured from the seven viewpoints, i.e., deliverables, project management, quality assurance, process improvement, research and development, human development, and customer contacts. For the panel analysis, based on the SEE surveys we integrated 233 valid responses for the three years into a new database and identified 151 unique IT firms. In this paper we focus on the 76 independent vendors and investigate the relationships among the factors of SEE for the three years. And we conducted panel analysis of the seven factors of SEE for the three years to clarify how the previous factors of SEE influence the following factors of SEE in a year, year by year, and mid-term. Based on the result of panel analysis, first, most of factors of SEE in the previous year had significant positive influence on the same factors of SEE in the following year. Second, in a year there are some missing paths in the downstream toward deliverables as the terminal factor from research and development, contact with customers, and process improvement. Third, some factors of SEE in the previous year had significant positive influence on the different factors of SEE in the following year. Fourth, however, there were some negative paths, which implied that the effort on the factor did not pay off in the short term.","","978-1-4244-9287-9","10.1109/WCSE.2010.121","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5718278","software engineering capability;management of technology;social research;panel analysis","Humans;Software engineering;Industries;Software;Project management;High definition video","","4","","13","IEEE","22 Feb 2011","","","IEEE","IEEE Conferences"
"Exponential Competence of Computer Science and Software Engineering Undergraduate Students","O. Hazzan","Faculty of Education in Science and Technology, Technion – Israel Institute of Technolohu, Haifa, Israel",2021 IEEE/ACM 43rd International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"7 May 2021","2021","","","105","109","We live in exceptional times in which the entire world is witnessing the exponential spread of a pandemic, which requires to adopt new habits of mind and behaviors. In this paper, I introduce the term exponential competence, which encompasses these cognitive and social skills, and describe a course for computer science and software engineering students in which emphasis is placed on exponential competence. I argue that exponential competence is especially important for computer science and software engineering students, since many of them will, most likely, be required to deal with exponential phenomena in their future professional development.","","978-1-6654-0138-8","10.1109/ICSE-SEET52601.2021.00020","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9402170","exponential competence;soft skills;computer science education;software engineering education;exponential organizations","Computer science;Training;Pandemics;Organizations;Software engineering","","3","","5","IEEE","7 May 2021","","","IEEE","IEEE Conferences"
"3rd FME Workshop on Formal Methods in Software Engineering (FormaliSE 2015)","S. Gnesi; N. Plat","CNR-ISTI, Pisa, Italy; West Consulting BV, Delft, The Netherlands",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","977","978","Despite their significant advantages, formal methods are not widely used in industrial software development. Following the successful workshops we organized at ICSE 2103 in San Francisco, and ICSE 2014 in Hyderabad, we organize a third edition of the FormaliSE workshop with the main goal to promote the integration between the formal methods and the software engineering communities.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.313","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203136","Formal methods;Software engineering","Software;Conferences;Software engineering;Security;Committees;Industries;Collaboration","","","","","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Using Issue Tracking Tools to Facilitate Student Learning of Communication Skills in Software Engineering Courses","C. Liu","School of Electrical Engineering and Computer Science, Russ College of Engineering and Technology, Ohio University, Athens, OH, USA",18th Conference on Software Engineering Education & Training (CSEET'05),"8 Dec 2008","2005","","","61","68","When teaching communication and teamwork skills in software engineering courses, it is often difficult to relate the theories of communication as presented in communication textbooks to actual student interactions and team activities because the majority of student interactions and team activities take place outside the classroom. Through our experience in teaching communication theories in CS456/556, a software engineering course at Ohio University, we observed that when communication theories are delivered in traditional methods such as lectures without additional exercises designed for students to apply the theories, many students tend to treat them as an independent part of the course and continue to guide their behaviors in team activities with their old habits and preexisting intuitions. We found that issue tracking tools can help facilitate student learning of communication skills by forcing students to explicitly carry out effective steps recommended by communication theories and thus improve communications among students. Moreover, issue tracking tools also improve communications between the students and the instructor, and enable the instructor to be more aware of team status, detect team problems early on, and reply less on time-consuming and often inaccurate in-class team status reports","2377-570X","0-7695-2324-2","10.1109/CSEET.2005.40","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4698909","","Software engineering;Education;Programming;Computer science;Educational institutions;Teamwork;Software design;Unified modeling language;Software tools;Feedback","","9","","9","IEEE","8 Dec 2008","","","IEEE","IEEE Conferences"
"Investigating Country Differences in Mobile App User Behavior and Challenges for Software Engineering","S. L. Lim; P. J. Bentley; N. Kanakam; F. Ishikawa; S. Honiden","Department of Computer Science, University College, London; Department of Computer Science, University College London; Department of Clinical, Education and Health Psychology, University College, London; Digital Content and Media Sciences Research Division, National Institute of Informatics, Japan; National Institute of Informatics, Japan",IEEE Transactions on Software Engineering,"7 Jan 2015","2015","41","1","40","64","Mobile applications (apps) are software developed for use on mobile devices and made available through app stores. App stores are highly competitive markets where developers need to cater to a large number of users spanning multiple countries. This work hypothesizes that there exist country differences in mobile app user behavior and conducts one of the largest surveys to date of app users across the world, in order to identify the precise nature of those differences. The survey investigated user adoption of the app store concept, app needs, and rationale for selecting or abandoning an app. We collected data from more than 15 countries, including USA, China, Japan, Germany, France, Brazil, United Kingdom, Italy, Russia, India, Canada, Spain, Australia, Mexico, and South Korea. Analysis of data provided by 4,824 participants showed significant differences in app user behaviors across countries, for example users from USA are more likely to download medical apps, users from the United Kingdom and Canada are more likely to be influenced by price, users from Japan and Australia are less likely to rate apps. Analysis of the results revealed new challenges to market-driven software engineering related to packaging requirements, feature space, quality expectations, app store dependency, price sensitivity, and ecosystem effect.","1939-3520","","10.1109/TSE.2014.2360674","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6913003","Requirements/specifications;market-driven software engineering;mobile application development;user requirements;survey research;app user behavior;software product lines;software ecosystems;Requirements/specifications;market-driven software engineering;mobile application development;user requirements;survey research;app user behavior;software product lines;software ecosystems","Mobile communication;Software;Smart phones;Software engineering;Data mining;Educational institutions","","122","","65","OAPA","29 Sep 2014","","","IEEE","IEEE Journals"
"Software Engineering Issues in Developing a Context-aware Exhibition Guide System","J. Choi; H. -J. Moon","School of Information Engineering, Mokpo National University, Jeollanam, South Korea; Department of Cultural Contents, Hankuk University of Foreign Studies, Seoul, South Korea","2008 Ninth ACIS International Conference on Software Engineering, Artificial Intelligence, Networking, and Parallel/Distributed Computing","3 Sep 2008","2008","","","840","845","Context-awareness is a key feature of ubiquitous computing, but it is difficult to develop context-aware systems because they are complex and because developers are not familiar with the development methodology for the systems. In this paper, we introduce a method to apply software engineering techniques when developing a context-aware system. Based on our experience in developing a context-aware exhibition guide system, we show how to elicit requirements, how to model context, how to determine system architecture, how to design the system, and how to implement the system. Our study will help developers to efficiently develop context-aware systems according to software engineering principles.","","978-0-7695-3263-9","10.1109/SNPD.2008.92","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4617475","Software Engineering;Context-aware;Guide System","Context modeling;Software engineering;Mobile handsets;Conferences;Context-aware services;Multimedia communication;Radiofrequency identification","","3","","20","IEEE","3 Sep 2008","","","IEEE","IEEE Conferences"
"A Brief Survey of Current Software Engineering Practices in Continuous Integration and Automated Accessibility Testing","P. Sane","Software Engineering, Stratizant Corporation, Des Moines, IA","2021 Sixth International Conference on Wireless Communications, Signal Processing and Networking (WiSPNET)","11 May 2021","2021","","","130","134","It's long been accepted that continuous integration (CI) in software engineering increases the code quality of enterprise projects when adhered to by it's practitioners. But is any of that effort to increase code quality and velocity directed towards improving software accessibility accommodations? What are the potential benefits quoted in literature? Does it fit with the modern agile way that teams operate in most enterprises? This paper attempts to map the current scene of the software engineering effort spent on improving accessibility via continuous integration and it's hurdles to adoption as quoted by researchers. We also try to explore steps that agile teams may take to train members on how to implement accessibility testing and introduce key diagrams to visualize processes to implement CI based accessibility testing procedures in the software development lifecycle.","","978-1-6654-4086-8","10.1109/WiSPNET51692.2021.9419464","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9419464","Software Engineering;Accessibility Testing;Continuous Integration;Continuous Delivery","Wireless communication;Visualization;Signal processing;Software;Testing;Software engineering","","6","","28","IEEE","11 May 2021","","","IEEE","IEEE Conferences"
"Software Engineering for Molecular Programming","R. R. Lutz; J. H. Lutz","Dept. of Computer Science, Iowa State University Ames, IA; Dept. of Computer Science, Iowa State University Ames, IA",2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C),"23 Mar 2017","2016","","","888","889","Molecular programming combines computer science prin- ciples with the information-processing power of DNA and other biomolecules to design self-assembling, programmable systems at the nanoscale. Molecular programming is the programming of matter to do our bidding at molecular scales, and it is programming in the literal sense of computer sci- ence. Targeted and customized medical therapeutics, cheap and reliable bio-sensors, molecular robots, smart materials, and bio-compatible computer electronics are applications of molecular programming that are poised to have a major im- pact on society. Several software development techniques have been ex- tended recently to make planned molecular systems more productive, predictable and safe. Among those shown to be effective for molecular programming are goal-oriented requirements engineering, reaction network models for de- sign, and probabilistic model checking for verification. Chal- lenges that software engineering helps address include han- dling scalability for very large numbers of devices or services, dealing with uncertain and probabilistic behavior, and pre- dicting the limits of safe operation.","","978-1-4503-4205-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883429","Molecular programming;requirements engineering;chemical reaction networks;probabilistic model checking","Programming;DNA;Software engineering;Probabilistic logic;Requirements engineering;Model checking;Chemicals","","","","18","","23 Mar 2017","","","IEEE","IEEE Conferences"
"Seeds of Evidence: Integrating Evidence-Based Software Engineering","D. S. Janzen; J. Ryoo","Computer Science Department, California Polytechnic State University, San Louis Obispo, CA, USA; Information Sciences and Technology, Pennsylvania State University, Altoona, Altoona, PA, USA",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","223","230","With increasing interest in evidence-based software engineering (EBSE), software engineering faculty face the challenge of educating future researchers and industry practitioners regarding the generation and use of EBSE results. We propose development and population of a community-driven Web database containing summaries of EBSE studies. We present motivations for inclusion of these activities in a software engineering course, and address the particular appeal of a community-driven Web database to students who have grown up in the Internet generation. We present our experience with integrating these activities into a graduate software engineering course, and report student and industry practitioner assessments of the resulting artifacts.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.29","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556969","evidence-based software engineering;empirical","Software engineering;Computer science;Computer industry;Databases;Humans;Software maintenance;Computer science education;Educational technology;USA Councils;Industrial training","","3","","16","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"Exploring Assessment Criteria for Sustainable Software Engineering Processes","M. Wahler; N. Seyff; M. S. S. Ramirez","Zurich University of Applied Sciences (ZHAW), Winterthur, Switzerland; University of Applied Sciences and Arts Northwestern Switzerland (FHNW), Windisch, Switzerland; Zurich University of Applied Sciences (ZHAW), Winterthur, Switzerland",2024 IEEE/ACM 46th International Conference on Software Engineering: Software Engineering in Society (ICSE-SEIS),"18 Jun 2024","2024","","","107","117","It is our duty as software engineers to understand our contribution towards sustainability and ultimately assess and improve the sustainability of the software engineering (SE) processes we apply. However, commonly established criteria for such an assessment are currently lacking. In this experience report, we share insights from our investigation into the sustainability of software engineering processes, focusing on a collaborative project with an industry partner. Our research delves into lessons learned while exploring this critical issue. Our contribution lies in the introduction of an initial framework, which includes assessment criteria as the core element, and on the results of using this framework to assess the software engineering process of our industry partner. By sharing our experiences and findings, we aim to contribute to the understanding of sustainable software engineering practices and stimulate dialogue on how software engineering can address societal and environmental challenges. Our work underscores the significance of adopting sustainable practices and encourages the software engineering community—in both academia and industry—to embrace a proactive role in advancing sustainability for society.CCS CONCEPTS• Software and its engineering → Software development process management; Collaboration in software development.Lay Abstract. It is important for software engineers to understand the effects of their work on sustainability. This also includes understanding the sustainability of the software engineering processes used and figuring out how to make them more sustainable. The problem is that currently, it is hard for software engineers and software companies to understand how sustainable their software engineering process is. There is a lack of criteria and established assessment frameworks that would allow that. In our experience paper, we talk about what we have learned from our efforts in establishing the first version of such a framework. Key contributions include identifying a set of criteria for the assessment and performing a first assessment in an industrial setting. We want to share what we have learned so that others can understand how to make software engineering processes more sustainable. The results are relevant for both researchers and practitioners.","2832-7616","979-8-4007-0499-4","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10554777","software engineering;sustainability;criteria;assessment","Industries;Knowledge engineering;Collaboration;Focusing;Companies;Software;Software measurement","","","","25","CCBY","18 Jun 2024","","","IEEE","IEEE Conferences"
"Group Awareness in Global Software Engineering","F. Lanubile; F. Calefato; C. Ebert","University of Bari, Italy; University of Bari, Italy; Software Technology Department of IEEE Software, Vector Consulting Services, Germany",IEEE Software,"25 Feb 2013","2013","30","2","18","23","Insufficient team collaboration often challenges global software engineering projects. Group awareness can improve teams' trust, relationships, and efficiency. This article surveys the key technologies and tools that support group awareness and collaboration. The insights on technologies derive from discussions and presentations at related conferences, including the IEEE-sponsored International Conference on Global Software Engineering (ICGSE).","1937-4194","","10.1109/MS.2013.30","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6470588","global software;group awareness;software engineering;collaboration;teams","Software engineering;Globalization;Visualization;Licenses;Collaboration;Ports (Computers);Software development","","19","","1","IEEE","25 Feb 2013","","","IEEE","IEEE Magazines"
"Visualization - A Key Concept for Multidimensional Performance Modeling in Software Engineering Management","V. Stroian; P. Bourque; A. Abran","École de Technologie Supérieure, Canada; École de Technologie Supérieure, Canada; École de Technologie Supérieure, Canada","2006 IEEE International Conference on Automation, Quality and Testing, Robotics","11 Dec 2006","2006","1","","334","339","A major difficulty with current organizational performance models in software engineering management is to represent many possible viewpoints quantitatively and in a consolidated manner, while at the same time keeping track of the values of the individual dimensions of performance. The models currently proposed do not meet the analytical requirements of software engineering management when various viewpoints must be taken into account concurrently. This difficulty is compounded by the fact that the underlying quantitative data is of high dimensionality and therefore the usual two and three dimensional approaches to visualization are generally not sufficient for representing such models. This paper describes the proposed concepts for a tool for multidimensional performance modeling in software engineering management. Due to the continuously increasing amount and the high dimensionality of the data underlying these models, a particular focus is given in this paper on potential visualization concepts and techniques that could be incorporated into the proposed tool","","1-4244-0360-X","10.1109/AQTR.2006.254556","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4022878","Performance modeling;Visualization;Multidimensional management models;Software engineering management;International Software Benchmarking Standards Group;ISBSG;QEST","Multidimensional systems;Software engineering;Engineering management;Data visualization;Software performance;Software quality;Performance analysis;Solid modeling;Context modeling;Technology management","","4","","25","IEEE","11 Dec 2006","","","IEEE","IEEE Conferences"
"IEEE Draft International Standard - Systems and Software Engineering--Design and development of information for users","",,"ISO/IEC/IEEE P26514/D1, March 2020","1 Apr 2020","2020","","","1","87","","","978-1-5044-6578-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9052823","","IEEE Standards;Systems engineering and theory;Software engineering;Software design","","","","","","1 Apr 2020","","","IEEE","IEEE Standards"
"A learning methodology based on semantic tableaux for software engineering education","R. del Vado Vírseda","Complutense University of Madrid, Spain",2011 24th IEEE-CS Conference on Software Engineering Education and Training (CSEE&T),"16 Jun 2011","2011","","","401","405","While Computational Logic plays an important role in several areas of Software Engineering (SE), most of the educational technology developed for teaching logic ignores their application in a larger portion of the SE education domain. In this paper we describe an innovative methodology based on a prototype logic teaching tool on semantic tableaux to prepare and train the students to use logic as a formal proof technique in other topics of SE, such as the formal verification of algorithms and the declarative debugging of imperative programs, which are foundations of good development of software.","2377-570X","978-1-4577-0348-5","10.1109/CSEET.2011.5876113","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5876113","","Debugging;Education;Semantics;Software algorithms;Software engineering;Software;Computer science","","","","7","IEEE","16 Jun 2011","","","IEEE","IEEE Conferences"
"Software Engineering Antipatterns in Start-Ups","E. Klotins; M. Unterkalmsteiner; T. Gorschek",Blekinge Institute of Technology; Blekinge Institute of Technology; Blekinge Institute of Technology,IEEE Software,"21 Feb 2019","2019","36","2","118","126","Software start-up failures are often explained with poor business models, market issues, or insufficient funding. Inadequacies in software engineering could be a significant contributing factor to the high start-up failure rate and precede any marketing or business related challenges. We reveal three antipatterns associated with start-up progression phases.","1937-4194","","10.1109/MS.2018.227105530","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8356173","Software;Software Engineering;Requirements;specifications;Software quality;SQA;management;programming teams","Software engineering;Software development;Companies;Business;Investment","","10","","15","IEEE","8 May 2018","","","IEEE","IEEE Magazines"
"Ask the Engineers: Exploring Repertory Grids and Personal Constructs for Software Data Analysis","L. Layman; C. Seaman; D. Falessi; M. Diep","Software and Process Analytics, Fraunhofer Center for Experimental Software Engineering, College Park, MD, USA; Software and Process Analytics, Fraunhofer Center for Experimental Software Engineering, College Park, MD, USA; Software and Process Analytics, Fraunhofer Center for Experimental Software Engineering, College Park, MD, USA; Software and Process Analytics, Fraunhofer Center for Experimental Software Engineering, College Park, MD, USA",2015 IEEE/ACM 8th International Workshop on Cooperative and Human Aspects of Software Engineering,"27 Jul 2015","2015","","","81","84","Maturity in software projects is often equated with data-driven predictability. However, data collection is expensive and measuring all variables that may correlate with project outcome is neither practical nor feasible. In contrast, a project engineer can identify a handful of factors that he or she believes influence the success of a project. The challenge is to quantify engineers' insights in a way that is useful for data analysis. In this exploratory study, we investigate the repertory grid technique for this purpose. The repertory grid technique is an interview-based procedure for eliciting ""constructs"" (e.g., Adhering to coding standards) that individuals believe influence a worldly phenomenon (e.g., What makes a high-quality software project) by comparing example elements from their past (e.g., Projects they have worked on). We investigate the relationship between objective metrics of project performance and repertory grid constructs elicited from eight software engineers. Our results show correlations between the engineers' subjective constructs and the objective project outcome measures. This suggests that repertory grids may be of benefit in developing models of project outcomes, particularly when project data is limited.","","978-1-4673-7031-8","10.1109/CHASE.2015.25","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7166093","repertory grids;practitioners;software data analytics","Software;Productivity;Interviews;Atmospheric measurements;Particle measurements;Companies","","1","","10","IEEE","27 Jul 2015","","","IEEE","IEEE Conferences"
"Big Picture of Big Data Software Engineering: With Example Research Challenges","N. H. Madhavji; A. Miranskyy; K. Kontogiannis","Dept. of Computer Science, University of Western Ontario, London, Canada; Dept. of Computer Science, Ryerson University, Toronto, Canada; Dept. of Electrical & Computer Eng., National Technical University of Athens, Athens, Greece",2015 IEEE/ACM 1st International Workshop on Big Data Software Engineering,"27 Jul 2015","2015","","","11","14","In the rapidly growing field of Big Data, we note that a disproportionately larger amount of effort is being invested in infrastructure development and data analytics in comparison to applications software development -- approximately a 80:20 ratio. This prompted us to create a context model of Big Data Software Engineering (BDSE) containing various elements -- such as development practice, Big Data systems, corporate decision-making, and research -- and their relationships. The model puts into perspective where various types of stakeholders fit in. From the research perspective, we describe example challenges in BDSE, specifically requirements, architectures, and testing and maintenance.","","978-1-4673-7025-7","10.1109/BIGDSE.2015.10","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7165992","Big Data;Applications;Software Engineering;Context model;Research challenges","Big data;Data models;Business;Testing;Software engineering;Computer architecture;Software","","26","","17","IEEE","27 Jul 2015","","","IEEE","IEEE Conferences"
"The 4th International Workshop on Software Engineering for HPC in Computational Science and Engineering","J. C. Carver; N. C. Hong; S. Ciraci",University of Alabama; University of Edinburgh; Microsoft,Computing in Science & Engineering,"15 Mar 2017","2017","19","2","91","95","Despite the increasing demand for utilizing high-performance computing (HPC) for CSE applications, software development for HPC historically attracted little attention from the software engineering (SE) community. Paradoxically, the HPC CSE community has increasingly been adopting SE techniques and tools. Indeed, the development of CSE software for HPC differs significantly from the development of more traditional business information systems, from which many SE best practices and tools have been drawn. The workshop summarized in this column, the fourth in the series to be collocated with the Supercomputing conference series, examined two main topics: testing and tradeoffs. Through presentations of work in this area and structured group discussions, the participants highlighted some of the key issues, as well as indicated the direction the community needs to go. In particular, there is a need for more high-quality research in this area that we can use as an evidence base to help developers of CSE applications change practice and benefit from advances in software engineering.","1558-366X","","10.1109/MCSE.2017.28","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7878959","software engineering;workshop;computational science;computational engineering;HPC;scientific computing","Computational modeling;Software engineering;Graphics processing units;Scientific computing;Best practices","","2","","15","IEEE","15 Mar 2017","","","IEEE","IEEE Magazines"
"DuoTracker: Tool Support for Software Defect Data Collection and Analysis","O. Akinwale; S. Dascalu; M. Karam","Department of Computer Science and Engineering, University of Nevada, Reno, NV, USA; Department of Computer Science and Engineering, University of Nevada, Reno, NV, USA; Department of Computer Science, American University of Beirut, Beirut, Lebanon",2006 International Conference on Software Engineering Advances (ICSEA'06),"19 Dec 2006","2006","","","22","22","In today software industry defect tracking tools either help to improve an organization's software development process or an individual's software development process. No defect tracking tool currently exists that help both processes. In this paper we present DuoTracker, a tool that makes possible to track and analyze software defects for organizational and individual software process decision making. To accomplish this, DuoTracker has capabilities to classify defects in a manner that makes analysis at both organizational and individual software processes meaningful. The benefit of this approach is that software engineers are able to see how their personal software process improvement impacts their organization and vice versa. This paper shows why software engineers need to keep track of their program defects, how this is currently done, and how DuoTracker offers a new way of keeping track of software errors. Furthermore, DuoTracker is compared to other tracking tools that enable software developers to record program defects that occur during their individual software processes.","","0-7695-2703-5","10.1109/ICSEA.2006.261278","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4031807","software defects;software anomalies;defect classification;PSP;CMM;ISO-9001.","Software tools;Data analysis;Software quality;Data engineering;Programming;Computer industry;Coordinate measuring machines;Computer science;Software performance;ISO standards","","4","","25","IEEE","19 Dec 2006","","","IEEE","IEEE Conferences"
"Dimensions of Experientialism for Software Engineering Education","R. Holmes; M. Allen; M. Craig","University of British Columbia, Vancouver, BC, Canada; University of British Columbia, Vancouver, BC, Canada; University of Toronto, Toronto, ON, Canada",2018 IEEE/ACM 40th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"26 Aug 2018","2018","","","31","39","There is a gap between the abstract concepts taught in the classroom and the skills needed for students to succeed once they join the workplace. The Undergraduate Capstone Open Source Projects (UCOSP) program was developed to narrow this gap by enabling undergraduate computer science students to have an experiential software engineering learning opportunity. Over the past 8 years, 737 students from 30 universities have taken part in this program. In this paper, we sought to understand student perceptions of how UCOSP complements traditional classwork by providing real-world software engineering exposure. We report on a qualitative analysis of 2,203 quotes collected from 167 students from 18 universities over six academic terms. We analyzed these data using a grounded theory approach based on open coding to gain insight into the key benefits of the program from the students' perspective. We found that students highly value being able to apply their classroom knowledge to real, novel tasks, for real projects with a community of users, while receiving real mentorship from a member of the development team. Further, we found that contributing to real software systems provides greater understanding of software engineering than might otherwise be obtained through more traditional means. Our goal is that our analysis can help fellow educators add additional experimentalism into their existing programs.","","978-1-4503-5660-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445180","experiential learning;software engineering education;capstone","Software engineering;Task analysis;Software;Tools;Computer science;Training","","2","","25","","26 Aug 2018","","","IEEE","IEEE Conferences"
"A Context-Driven Software Comprehension Process Model","W. J. Meng; J. Rilling; Y. Zhang; R. Witte; S. Mudur; P. Charland","Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; System of Systems Section, Defence Research and Development Canada, Val-Belair, QUE, Canada",2006 Second International IEEE Workshop on Software Evolvability (SE'06),"19 Dec 2006","2006","","","50","57","Comprehension is an essential part of software evolution. Only software that is well understood can evolve in a controlled manner. In this paper, we present a formal process model to support the comprehension of software systems by using ontology and description logic. This formal representation supports the use of reasoning services across different knowledge resources and therefore, enables us to provide users with guidance during the comprehension process that is context sensitive to their particular comprehension task. As part of the process model, we also adopt a new interactive story metaphor, to represent the interactions between users and the comprehension process","","0-7695-2698-5","10.1109/SOFTWARE-EVOLVABILITY.2006.1","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4032448","Software evolution;program comprehension;process modeling;story metaphor;ontological reasoning","Context modeling;Ontologies;Logic;Software maintenance;Information resources;Computer science;Software engineering;Research and development;Software systems;Context-aware services","","5","","29","IEEE","19 Dec 2006","","","IEEE","IEEE Conferences"
"Documentation of Machine Learning Software","Y. Hashemi; M. Nayebi; G. Antoniol","Dept. computer and software engineering, Ecole Polytechnique de Montreal, Canada; Dept. computer and software engineering, Ecole Polytechnique de Montreal, Canada; Dept. computer and software engineering, Ecole Polytechnique de Montreal, Canada","2020 IEEE 27th International Conference on Software Analysis, Evolution and Reengineering (SANER)","2 Apr 2020","2020","","","666","667","Machine Learning software documentation is different from most of the documentations that were studied in software engineering research. Often, the users of these documentations are not software experts. The increasing interest in using data science and in particular, machine learning in different fields attracted scientists and engineers with various levels of knowledge about programming and software engineering. Our ultimate goal is automated generation and adaptation of machine learning software documents for users with different levels of expertise. We are interested in understanding the nature and triggers of the problems and the impact of the users' levels of expertise in the process of documentation evolution. We will investigate the Stack Overflow Q&As and classify the documentation related Q/As within the machine learning domain to understand the types and triggers of the problems as well as the potential change requests to the documentation. We intend to use the results for building on top of the state of the art techniques for automatic documentation generation and extending on the adoption, summarization, and explanation of software functionalities.","1534-5351","978-1-7281-5143-4","10.1109/SANER48275.2020.9054844","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9054844","Software Engineering;Machine Learning;Software Documentation;Mining Software Repositories","Knowledge engineering;Conferences;Buildings;Documentation;Machine learning;Programming;Data science","","2","","5","IEEE","2 Apr 2020","","","IEEE","IEEE Conferences"
"An analysis of the gap between the knowledge and skills learned in academic software engineering course projects and those required in real: projects","S. Ludi; J. Collofello","Department of Computer Science and Engineering, Arizona State University, Tempe, AZ, USA; Department of Computer Science and Engineering, Arizona State University, Tempe, AZ, USA",31st Annual Frontiers in Education Conference. Impact on Engineering and Science Education. Conference Proceedings (Cat. No.01CH37193),"6 Aug 2002","2001","1","","T2D","8","This paper describes how the Software Engineering Body of Knowledge, (SWEBOK) can be used as a guide to assess and improve software engineering courses. A case study is presented in which the guide is applied to a typical undergraduate software engineering course. The lessons learned are presented which the authors believe are generalizable to comparable courses taught at many academic institutions. A novel approach involving largescale software project simulation is also presented a way to overcome some of the course deficiencies identified by the guide.","0190-5848","0-7803-6669-7","10.1109/FIE.2001.963881","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=963881","","Software engineering;Knowledge engineering;Collaborative software;Taxonomy;Computational modeling;Software quality;Computer science;Computer science education;Collaborative work;Professional societies","","11","","4","IEEE","6 Aug 2002","","","IEEE","IEEE Conferences"
"Preparing Research Projects for Sustainable Software Engineering in Society","D. Renzel; I. Koren; R. Klamma; M. Jarke","RWTH Aachen University, Aachen, Germany; RWTH Aachen University, Aachen, Germany; RWTH Aachen University, Aachen, Germany; Fraunhofer Institute for Applied Information Technology, Sankt, Augustin, Germany",2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering in Society Track (ICSE-SEIS),"29 Jun 2017","2017","","","23","32","With the pervasive need for digitization in modern information society, publicly funded research projects increasingly focus on engineering digital approaches to manage societal processes. Such projects inherently face the challenge of establishing a sustainable software engineering culture. A major challenge thereby is that project consortia need to establish a distributed developer community that effectively and resource-efficiently aligns development efforts with the goals and needs of complex societal constellations beyond project lifetime. In this paper we extract empirical evidence from longitudinal studies in two large-scale research projects to outline typical challenges in such problem contexts and to develop an open source software engineering methodology for research projects, including supportive infrastructure and social instruments of community building and awareness. We thus contribute a comprehensive strategy preparing collaborative research projects for sustainable societal software engineering.","","978-1-5386-2673-3","10.1109/ICSE-SEIS.2017.4","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7961664","Societal Software Engineering;DevOpsUse;Research Projects;Methodology;Infrastructure","Software;Software engineering;Instruments;Europe;Context;Standards;Prototypes","","6","","29","IEEE","29 Jun 2017","","","IEEE","IEEE Conferences"
"On Complementing an Undergraduate Software Engineering Course with Formal Methods","B. Westphal","Department for Software Engineering, Albert-Ludwigs-Universität Freiburg, Freiburg, Germany",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","10","Software systems continue to pervade day-to-day life and so it becomes increasingly important to ensure the dependability, safety, and security of software. One approach to this end can be summarised under the broad term of formal methods, i.e., the formal analysis of requirements, software models, or programs. Formal methods in this sense are today used in many branches of the software industry, such as the huge internet companies, aerospace, automotive, etc. and even made their way into small to medium sized enterprises. In this article, we argue the opinion that today's students (and tomorrow's engineers) need to be provided with a basic understanding of formal methods in the broad sense (what is it, how does it feel to use it, what are advantages and limitations) already in undergraduate introductions to software engineering. We propose a generic course design that complements (otherwise completely ordinary) undergraduate introductions to software engineering with formal semantics and analyses of (visual) software description languages. We report on five years of teaching an implementation of the course design that indicate the feasibility of teaching without sacrificing classical software engineering topics and without over-straining students wrt. level or workload.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206234","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206234","Teaching;Formal Methods;Software Engineering","Software;Software engineering;Semantics;Analytical models;Education;Tools;Syntactics","","1","","68","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"Balanced Decision Making in Software Engineering--General Thoughts and a Concrete Example from Industry","H. Omasreiter","Software Process Research, DaimlerChrysler Aerospace, Ulm, Germany",2007 First International Workshop on the Economics of Software and Computation,"16 Jul 2007","2007","","","4","4","Software Engineering is often treated as a mere technical challenge. However, especially in industry projects we primarily have to ask what value a software engineering activity generates. To create as much value as possible during a software project, we have to be able to make economically balanced decisions. This paper presents some general thoughts about balanced decision making in software engineering and drafts a concrete example for a value-oriented, light-weight process improvement approach.","","0-7695-2955-0","10.1109/ESC.2007.3","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4273050","","Decision making;Concrete;Cement industry;Computer industry;Software engineering;Acoustical engineering;Project management;Application software;Software maintenance;Reliability engineering","","5","","6","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"A Specialized Global Software Engineering Taxonomy for Effort Estimation","R. Britto; E. Mendes; C. Wohlin","Department of Software Engineering, Blekinge Institute of Technology, Sweden; Department of Computer Science and Engineering, Blekinge Institute of Technology, Sweden; Department of Software Engineering, Blekinge Institute of Technology, Sweden",2016 IEEE 11th International Conference on Global Software Engineering (ICGSE),"29 Sep 2016","2016","","","154","163","To facilitate the sharing and combination of knowledge by Global Software Engineering (GSE) researchers and practitioners, the need for a common terminology and knowledge classification scheme has been identified, and as a consequence, a taxonomy and an extension were proposed. In addition, one systematic literature review and a survey on respectively the state of the art and practice of effort estimation in GSE were conducted, showing that despite its importance in practice, the GSE effort estimation literature is rare and reported in an ad-hoc way. Therefore, this paper proposes a specialized GSE taxonomy for effort estimation, which was built on the recently proposed general GSE taxonomy (including the extension) and was also based on the findings from two empirical studies and expert knowledge. The specialized taxonomy was validated using data from eight finished GSE projects. Our effort estimation taxonomy for GSE can help both researchers and practitioners by supporting the reporting of new GSE effort estimation studies, i.e. new studies are to be easier to identify, compare, aggregate and synthesize. Further, it can also help practitioners by providing them with an initial set of factors that can be considered when estimating effort for GSE projects.","2329-6313","978-1-5090-2680-7","10.1109/ICGSE.2016.11","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7577433","Taxonomy;Effort Estimation;Global Software Engineering;Global Software Development","Taxonomy;Estimation;Software;Context;Software engineering;Ontologies;Indexes","","2","","37","IEEE","29 Sep 2016","","","IEEE","IEEE Conferences"
"Not Just a Matter of Style: Does Aesthetics Have a Place in Software Engineering Curriculum?","M. Fedorova; M. Mazmanian; P. Dourish","University of California, Irvine; University of California, Irvine; University of California, Irvine",2023 IEEE/ACM 5th International Workshop on Software Engineering Education for the Next Generation (SEENG),"27 Jul 2023","2023","","","5","8","Aesthetic designations of code matter in how software engineers work together. Our empirical fieldwork finds that aesthetic designations are frequently used to informally assess code in the industry (i.e., code being called “beautiful,” “elegant,” “ugly,” “messy,” etc.). In this position paper, we build on our empirical fieldwork in the industry to describe the preliminary findings of a survey on students’ aesthetic attitudes toward code. To understand how aesthetics is covered in software engineering courses, we surveyed 52 B.S. and 25 M.S. software engineering students about their attitudes on how “beauty” in code manifests. Our early findings suggest that 75% of undergraduate and 86% of graduate students believe that one should always strive to write “beautiful” code. Further, 98% of graduate and 85% of undergraduate students are aware that aesthetics is an aspect of software quality. While it may be inefficient to formalize aesthetic considerations in pedagogy, we argue that aesthetic aspects of code should be made explicit in teaching code-writing skills.","","979-8-3503-0186-1","10.1109/SEENG59157.2023.00006","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10190474","aesthetics;collaborative learning;code assessment;soft skills;software engineering education","Industries;Surveys;Codes;Conferences;Software quality;Engineering education;Next generation networking","","1","","19","IEEE","27 Jul 2023","","","IEEE","IEEE Conferences"
"Collaboration in Global Software Development: An Investigation on Research Trends and Evolution","Y. Yue; I. Ahmed; Y. Wang; D. Redmiles","Department of Informatics, University of California, Irvine, Irvine, CA; Department of Informatics, University of California, Irvine, Irvine, CA; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY; Department of Informatics, University of California, Irvine, Irvine, CA",2019 ACM/IEEE 14th International Conference on Global Software Engineering (ICGSE),"22 Aug 2019","2019","","","78","79","Global software development (GSD) done by geographically distributed teams of developers is one of the most common ways of developing software nowadays. Though GSD has various benefits, it also introduces challenges that have led to a plethora of research. This paper analyzes research papers published in top software engineering venues in recent years (2009-2018) focusing on team collaboration in order to understand the trend in GSD research. Out of 4,292 papers published in these venues, we found 33 papers that focused on team collaboration in the context of GSD. We study the kinds of data used in these papers and classify them into primary data (i.e., interview and observation data) and secondary data (i.e., repository and communication data) and found that interview data is the dominant type of data in these papers. We also found that the strength of evidence presented in most papers tends to be moderate.","","978-1-5386-9196-0","10.1109/ICGSE.2019.00028","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8807779","global software development;collaboration;software engineering;empirical study","Software;Software engineering;Collaboration;Market research;Interviews;Conferences;Tools","","6","","12","IEEE","22 Aug 2019","","","IEEE","IEEE Conferences"
"Teaching Software Engineering Through Computer Games","H. Alatrista-Salas; M. Nunez-Del-Prado","Universidad del Pacífico, Lima, Peru; Universidad del Pacífico, Lima, Peru",2018 IEEE World Engineering Education Conference (EDUNINE),"30 Aug 2018","2018","","","1","4","Software Engineering course has become very important not only for Software Engineers but other Engineering careers such as Computer Science, Information Engineering, Business Engineering, among others. Therefore, depending on the Engineering career the Software Engineering course tend to be whether more technical. Thus, in some Engineering careers, students do not have a strong background to understand abstract concepts of Software Engineering. To overcome this problem, we propose to teach basic background concepts using computer games. Through this strategy, we will be able to improve the results and to achieve the learning goals of the Software Engineering course.","","978-1-5386-4889-6","10.1109/EDUNINE.2018.8450996","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8450996","Computer games;Software Engineering;UML;Object-Oriented","Games;Software engineering;Programming profession;Business;Engineering profession;Object oriented modeling","","4","","8","IEEE","30 Aug 2018","","","IEEE","IEEE Conferences"
"The Unreasonable Effectiveness of Software Analytics","T. Menzies",North Carolina State University,IEEE Software,"12 Mar 2018","2018","35","2","96","98","In theory, software analytics shouldn’t work because software project behavior shouldn’t be predictable. However, it does. Why?","1937-4194","","10.1109/MS.2018.1661323","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8314156","software analytics;software engineering;software development;Redirections","Software;Complexity theory;Software engineering;Scrum (Software development);Frequency selective surfaces;Task analysis;Software tools","","9","","9","IEEE","12 Mar 2018","","","IEEE","IEEE Magazines"
"Using Wikis to Tackle Reuse in Software Projects","J. Rech; C. Bogner; V. Haas","Fraunhofer Institute of Experimental Software Engineering (IESE), Germany; Technical University of Kaiserslautern, Germany; Brainbot Technologies",IEEE Software,"5 Nov 2007","2007","24","6","99","104","Software projects in small-and medium-sized enterprises (SMEs) produce similar work products when building interactive software systems. For each project, software engineers create requirements, design specifications, source code, data schemes, and so forth, gain experience with these work products, and create associated products such as test cases for the source code or inspection plans for the requirements. All of this constitutes knowledge that the engineers can reuse in new variants of the software system.","1937-4194","","10.1109/MS.2007.183","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4375250","wikis;semantic technologies;software reuse;reuse Challenges","Computer industry;Software engineering;Software systems;Software maintenance;User centered design;Buildings;Data engineering;Design engineering;Software testing;Inspection","","17","","13","IEEE","5 Nov 2007","","","IEEE","IEEE Magazines"
"Computer supported cooperative work in software engineering","J. J. Li; Tangqiu Li; Zongkai Lin; A. Mathur; K. Kanoun","Avaya Laboratories Research, USA; Xiamen University, China; Chinese Academy and Sciences, China; Purdue University, USA; LAAS, CNRS, France","Proceedings of the 28th Annual International Computer Software and Applications Conference, 2004. COMPSAC 2004.","18 Oct 2004","2004","","","328 vol.1","","Summary form only given. The explosive growth of Internet and wireless infrastructure allows software development collaboratively from multiple locations. Technology and standards have evolved to the point where it is feasible to perform full life cycle software development through multiple site cooperation. In fact, most large software corporations have distributed or even global software development, an example of which is the current trend of outsourcing to India and China. Much research in the area of CSCW concentrated on the area of improving efficiency of groupware. Topics include group awareness, multi-user interfaces, concurrency control, communication and coordination within the group, shared information space and the support of a heterogenous, open environment which integrates existing single-user applications, and etc. The focus is on application of CSCW technology to software engineering regarding collaborative software development, including design, workflow, testbeds, and etc. In particular, we would like to discuss one fundamental question, i.e. whether CSCW software development is more efficient than single-location software development. The topics of our discussion include, but are not limited to the following: 1. What is the impact of CSCW on software reliability, as compared with single-site software development? 2. What is the impact of CSCW on software productivity as compared with single site software development? 3. What are the benefits of CSCW for software engineering? 4. What are the new research topics in CSCW for software engineering? 5. How can CSCW be used in software design, development and testing?.","0730-3157","0-7695-2209-2","10.1109/CMPSAC.2004.1342852","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1342852","","Collaborative work;Software engineering;Programming;Collaborative software;Space technology;Application software;Software design;Software testing;Explosives;Internet","","1","","","IEEE","18 Oct 2004","","","IEEE","IEEE Conferences"
"Towards a unified tool for collaborative software engineering projects","A. Rochd; M. Zrikem; A. Jakjoud; C. Baron","Laboratory of Modeling and Information Technologies, University of Cadi Ayyad, Marrakech, Maroc; Laboratory of Modeling and Information Technologies, University of Cadi Ayyad, Marrakech, Maroc; Laboratory of Modeling and Information Technologies, University of Cadi Ayyad, Marrakech, Maroc; Universite de Toulouse, INSA, Toulouse, France",2015 Third World Conference on Complex Systems (WCCS),"2 Jun 2016","2015","","","1","8","The efficiency of software engineering processes is highly dependent on the level of coordination and collaboration inside the engineering teams. Even though the serious efforts to standardize and capitalize practices in order to enhance software engineering processes, we are still in need of a more efficient way to manage concurrent and collaborative engineering. This problem became more obvious with the emergence of global software engineering requiring the coordination of international teams. The question of collaboration has been studied on many levels: Internal versus external collaboration, mutual versus exclusive collaboration... While there are practical solutions to improve teams' coordination, a consistent approach integrating collaboration in the early stages of the software process engineering is still required. In this paper, we consider the impact of coordination and collaboration on the efficiency of processes and identify three main goals for a solution to meet: Process state management, process orchestration, and process validation. Then, we propose our solution COLSEF (COLlaborative Software Engineering Framework) as a consistent and global solution constructed around a metamodel for software process engineering. The current paper will cover the foundations of the solution through its core metamodel and the implementation of its orchestration engine.","","978-1-4673-9669-1","10.1109/ICoCS.2015.7483250","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7483250","Software engineering;Process orchestration;Metamodel;Collaborative software engineering","Software engineering;Process control;Software;Context;Collaborative software;Automation","","1","","26","IEEE","2 Jun 2016","","","IEEE","IEEE Conferences"
"A Quantitative Approach to Software Development Using IEEE 982.1","N. Schneidewind","Naval Postgraduate School, USA",IEEE Software,"8 Jan 2007","2007","24","1","65","72","Although software's complexity and scope have increased tremendously over the past few decades, advances in software engineering techniques have been only moderate at best. Software measurement has remained primarily a labor-intensive effort and thus subject to human limitations. The Space Shuttle's avionics software is an excellent example of how applying standards such as IEEE 982.1 can help alleviate human limitations by providing a quantitative roadmap to answer key questions","1937-4194","","10.1109/MS.2007.1","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4052555","software dependability standard;quantitative approach to software measurement;IEEE 982.1;Software Reliability Engineering","Programming;Software measurement;Software reliability;Software standards;Reliability engineering;Standards development;Application software;Space shuttles;Measurement standards;Computer industry","","6","","14","IEEE","8 Jan 2007","","","IEEE","IEEE Magazines"
"Essence: A framework to help bridge the gap between software engineering education and industry needs","P. -W. Ng; S. Huang","Ivar Jacobson International, Singapore; Department of Computer & Electrical Engineering and Computer Science, Florida Atlantic University, USA",2013 26th International Conference on Software Engineering Education and Training (CSEE&T),"12 Sep 2013","2013","","","304","308","Given the time limit, software engineering courses in universities can only emphasize a particular development approach or method; therefore, it is challenging to prepare graduates to face the diverse range of approaches and methods used by industry. One of the issues software engineering education faces is the lack of a framework to understand and compare the similarities and differences among diverse practices used by different companies versus what students learn at school. Software Engineering Methods and Theory (SEMAT) is a new international initiative that bridges the gap among industry, education and research. SEMAT latest result is the submission to OMG standard, namely the Essence - Kernel and Language for Software Engineering. Instead of teaching diverse range of software engineering development methods, Essence provides a novel way of thinking of the different software development methods and approaches. This paper discusses the value of Essence to software engineering education and the preliminary feedback from university professors and lecturers.","2377-570X","978-1-4673-5140-9","10.1109/CSEET.2013.6595266","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6595266","","Software engineering;Educational institutions;Kernel;Industries;Jacobian matrices","","7","","16","IEEE","12 Sep 2013","","","IEEE","IEEE Conferences"
"Software Development in Startup Companies: The Greenfield Startup Model","C. Giardino; N. Paternoster; M. Unterkalmsteiner; T. Gorschek; P. Abrahamsson","Faculty of Computer Science, Free University of Bolzano/Bozen, Dominikanerplatz 3, Italy; Software Engineering Research Lab Sweden, Blekinge Institute of Technology, Campus Gräsvik, 371 79 Karlskrona, Sweden; Software Engineering Research Lab Sweden, Blekinge Institute of Technology, Campus Gräsvik, 371 79 Karlskrona, Sweden; Software Engineering Research Lab Sweden, Blekinge Institute of Technology, Campus Gräsvik, 371 79 Karlskrona, Sweden; Department of Computer and Information Science, Norwegian University of Science and Technology NTNU, Sem Saelandsvei 7-9, Trondheim, Norway",IEEE Transactions on Software Engineering,"10 Jun 2016","2016","42","6","585","604","Software startups are newly created companies with no operating history and oriented towards producing cutting-edge products. However, despite the increasing importance of startups in the economy, few scientific studies attempt to address software engineering issues, especially for early-stage startups. If anything, startups need engineering practices of the same level or better than those of larger companies, as their time and resources are more scarce, and one failed project can put them out of business. In this study we aim to improve understanding of the software development strategies employed by startups. We performed this state-of-practice investigation using a grounded theory approach. We packaged the results in the Greenfield Startup Model (GSM), which explains the priority of startups to release the product as quickly as possible. This strategy allows startups to verify product and market fit, and to adjust the product trajectory according to early collected user feedback. The need to shorten time-to-market, by speeding up the development through low-precision engineering activities, is counterbalanced by the need to restructure the product before targeting further growth. The resulting implications of the GSM outline challenges and gaps, pointing out opportunities for future research to develop and validate engineering practices in the startup context.","1939-3520","","10.1109/TSE.2015.2509970","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7360225","Software Development;Startups;Grounded Theory;Software development;startups;grounded theory","Software;Companies;GSM;Context;Software engineering;History","","116","","119","IEEE","17 Dec 2015","","","IEEE","IEEE Journals"
"Tutorial on System Safety for Software Engineers in Global Industry: Concepts and Implementation","A. J. Kornecki","Department of Computer and Software Engineering, Embry Riddle Aeronautical University, Daytona Beach, FL, USA",International Conference on Global Software Engineering (ICGSE 2007),"10 Sep 2007","2007","","","299","299","This introductory tutorial is designed to provide a perspective on development of software-intensive safety-related system in a regulated industry where the multidisciplinary projects reach across national boundaries. The safety concepts and implementations are discussed focusing on the necessary conformance to local and international safety standards and guidelines.","2329-6313","978-0-7695-2920-2","10.1109/ICGSE.2007.45","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4299873","","Tutorial;Software safety;Software systems;Computer industry;Aerospace safety;Aerospace industry;Software engineering;Guidelines;Aerospace engineering;FAA","","1","","","IEEE","10 Sep 2007","","","IEEE","IEEE Conferences"
"Learner-centered software engineering education: from resources to skills and pedagogical patterns","A. Seffah; P. Grogono","Department of Computer Science, Concordia University, Montreal, QUE, Canada; Department of Computer Science, Concordia University, Montreal, QUE, Canada",Proceedings 15th Conference on Software Engineering Education and Training (CSEE&T 2002),"7 Aug 2002","2002","","","14","21","A revolution is taking place in academic and continuing education, one that deals with the philosophy of how we teach and learn, the relationship between educators and learners, the way in which the classroom is structured, and the nature of the curriculum. This new approach, termed learner-centered education, is focused on the needs, skills and interests of the learner rather than on the organization of curriculum content. This paper describes an approach for identifying critical skills and for designing training material for learner-centered software engineering education. The approach starts from an analysis of the software developer's context of work, identifies critical skills and then associates relevant learning resources with them. The approach has been successfully used and validated in a real world-training program called PRISE that the first author developed-Programme de Reorientation des Ingenieurs Sans Emploi, a Curriculum for Retraining Unemployed Engineers in Software Engineering. The approach is also being used in some courses in the Concordia bachelor of software engineering program.","1093-0175","0-7695-1515-0","10.1109/CSEE.2002.995194","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=995194","","Software engineering;Management training;Programming;Educational programs;Industrial training;Continuing education;Unemployment;Collaborative work;Software development management;Application software","","10","","16","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"A Case Study Project for Software Engineering Education","T. B. Hilburn; M. Towhidnejad; S. Nangia; L. Shen","Embrey-Riddle Aeronautical University, Daytona Beach, FL, USA; Embrey-Riddle Aeronautical University, Daytona Beach, FL, USA; Embrey-Riddle Aeronautical University, Daytona Beach, FL, USA; Embrey-Riddle Aeronautical University, Daytona Beach, FL, USA",Proceedings. Frontiers in Education. 36th Annual Conference,"5 Mar 2007","2006","","","1","5","This paper advocates the use of the ""case study"" approach to educating and training software engineers. After an account of the use of case studies in the education of professionals, there is a discussion of problems in educating software professionals and how a case teaching approach can be used to address these problems. The paper describes a project to develop a comprehensive and complete case study, along with supporting educational material. The case study is designed to teach a variety of software topics, modules and courses: from high school through college and even for continuing professional development","2377-634X","1-4244-0256-5","10.1109/FIE.2006.322302","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4116883","Software Engineering;Case Study Teaching;Problem Based Learning","Software engineering;Educational programs;Educational institutions;Programming;Continuing professional development;Computer science education;Accreditation;Guidelines;Context modeling;Software design","","13","","11","IEEE","5 Mar 2007","","","IEEE","IEEE Conferences"
"An analytical and comparative study of software usability quality factors","M. A. Kabir; M. U. Rehman; S. I. Majumdar","International School of Software, Wuhan University, Wuhan, China; International School of Software, Wuhan University, Wuhan, China; Department of Multimedia and Creative Technology, Daffodil International University, Dhaka Bangladesh",2016 7th IEEE International Conference on Software Engineering and Service Science (ICSESS),"23 Mar 2017","2016","","","800","803","The demand of quality software is increasing day by day. In the recent economic world, software is used for fast business and quality software is also necessary for satisfying the customer demands. So for assuring and improving quality, it is necessary to ensure quality attributes such as usability, efficiency, learnability and many more. Among of them, usability is the key quality attribute of any kind of software. With the same time, evaluation of usability is also necessary for improving the quality of the software. There have many quality models emphasized usability as a major quality attribute. Last few years researchers have developed many quality models described usability as a sub quality factor. Now it is time to develop a usability model that will contain major quality attributes of the current complex business software. In this paper, we have analyzed ten famous quality models for developing a usability model which satisfy the demand of current business software. We also have showed the analytical comparison among the famous ten quality models for usability factor. At last, we have proposed an integrated improved usability model for assuring software quality.","2327-0594","978-1-4673-9904-3","10.1109/ICSESS.2016.7883188","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883188","Software Quality;Quality Model;Usability;Usability Evaluation","ISO Standards;Software;Reliability engineering;Software reliability","","12","","12","IEEE","23 Mar 2017","","","IEEE","IEEE Conferences"
"Patch Management of Satellite Flight Software","E. Kutlu; C. Gençtürk; R. Yiĝit; F. N. Özcan","Space Systems Software Engineering, Turkish Aerospace, Ankara, Turkey; Space Systems Software Engineering, Turkish Aerospace, Ankara, Turkey; Space Systems Software Engineering, Turkish Aerospace, Ankara, Turkey; Space Systems Software Engineering, Turkish Aerospace, Ankara, Turkey",2021 15th Turkish National Software Engineering Symposium (UYMS),"5 Jan 2022","2021","","","1","5","The satellite flight software is the software that enables the satellite to perform predefined tasks during its lifecycle and controls vital functions related to the satellite. For a satellite to perform its mission successfully, it must have the ability to correct errors found in its software while it is in orbit, with minimal disruption to mission operations. The solving of errors in the software is only possible via updates and when considering a satellite in orbit, the most practical method of updates is through patches. By means of patches, it is possible to add a new feature to the satellite flight software, to change an existing feature in the software or to fix the errors found in the software. However, considering the space domain, while patching the satellite flight software, there are constraints such as availability of the system, telemetry/telecommand bandwidth and the available memory dedicated to be used for patching. In line with the relevant constraints, solutions for minimizing the patch data size and finding different patching approaches must be considered. The aim of this study is to provide information about patching techniques and approaches considered to modify the satellite flight software through patches. Two approaches where the flight software or the bootloader is used for the patching process along with two different patch data generation techniques will be analyzed.","","978-1-6654-1070-0","10.1109/UYMS54260.2021.9659638","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9659638","Satellite;Flight Software;Software Patch;Space Domain;Update;Patching;Bootloader;Software Lifecycle;Software Maintenance","Space vehicles;Satellites;Bandwidth;Maintenance engineering;Software;Orbits;Telemetry","","","","14","IEEE","5 Jan 2022","","","IEEE","IEEE Conferences"
"Software defined radio in the electrical and computer engineering curriculum","L. S. Nagurney","Department of Electrical and Computer Engineering, University of Hartford, West Hartford, CT, USA",2009 39th IEEE Frontiers in Education Conference,"8 Dec 2009","2009","","","1","6","The development of Software Defined Radio systems and their extension to Cognitive Radio Systems and Smart Radio Systems have introduced a plethora of topics and examples that can be included in the curriculum. The design of these software defined radio systems has less in common with traditional radio design and more in common with the design of Embedded Systems and Software Engineering. This purpose of this paper is to overview software defined radio from the simplest form to its most complicated form and give examples on how software defined radio concepts can be used as examples and exercises in a variety of Electrical Engineering and Computer Engineering courses and labs.","2377-634X","978-1-4244-4715-2","10.1109/FIE.2009.5350649","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5350649","Software Defined Radio;Electrical Engineering Laboratories;Computer Engineering Laboratories;Digital Signal Processing Applications","Software radio;Electrical engineering computing;Digital signal processing;Radio transmitters;Receivers;Field programmable gate arrays;Application software;Frequency;Hardware;Software engineering","","21","","20","IEEE","8 Dec 2009","","","IEEE","IEEE Conferences"
"Unreined Students or Not: Modes of Freedom in a Project-Based Software Engineering Course","Ø. Nytr⊘; A. Nguyen-Duc; H. Trætteberg; M. Lorås; B. A. Farschian","Norwegian University of Science and Technology, Trondheim, Norway; University of South-Eastern Norway, Bo, Norway; Norwegian University of Science and Technology, Trondheim, Norway; Norwegian University of Science and Technology, Trondheim, Norway; Norwegian University of Science and Technology, Trondheim, Norway",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","10","Software engineering courses include practical and theoretical elements that give many options for pedagogical combinations among them. In this paper, we report on two different pedagogical approaches for an undergraduate, introductory project-based software engineering course with more than 500 students working in collaborative scrum teams. We call one approach `Every Student is an Innovator', and the other `No Student Left Behind'. This SE course has been long-running, with stable learning objectives and content. However, from one year to another, we radically changed the pedagogical approach of the course along several dimensions, among them the technical framework, software tools, project topic, mentor roles, assessment form and frequency, feedback and degree of student innovativeness. We report on the perceived challenges, detailed changes, the anticipated effects on the course learning outcomes. The results showed that innovativeness and fun need freedom and flexibility with processes and technology. However, strict design requirements and systematic guidance ensure fulfillment of learning objectives. Analyzing student and staff feedback, we find that both approaches lead to students using more time than intended and worrying about unknown assessment criteria.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206193","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206193","Software Engineering Education;Project-based Software Engineering;Software Innovation;Continuous Integration;Continuous Assessment;Technology Support","Education;Software engineering;Tools;Software;Process control;Programming;Data collection","","4","","21","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"Report on the workshop on the state of the art in automated software engineering","Y. Ledru; D. F. Redmiles","Universite Grenoble, France; Information and Computer Science, University of California, Irvine, CA, USA","Proceedings 17th IEEE International Conference on Automated Software Engineering,","6 Jan 2003","2002","","","307","308","","1938-4300","0-7695-1736-6","10.1109/ASE.2002.1115038","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1115038","","Software;Software tools;Conferences;Software engineering;Visualization;Task analysis;Complexity theory","","","","1","IEEE","6 Jan 2003","","","IEEE","IEEE Conferences"
"Extended abstract: Comparing cultural models in the context of teaching global software engineering","A. Zeid; R. El-Bahey",American University of Kuwait; American University of Kuwait,2014 IEEE International Professional Communication Conference (IPCC),"26 Jan 2015","2014","","","1","2","The rise of globalization has driven new challenges to software engineering education. The industry scene today involves international acquisitions, project offshoring, and strategic alliances, which create the need for globally oriented students who can understand and function within the new business paradigm. This, subsequently, has brought about a burgeoning interest in cross-cultural research in global software engineering (GSW) education. Recent research points out that today's web-enabled platforms have eliminated geographical borders allowing the world to collaborate in multiple domains including education, research and development, innovation, production among others. In this context, research on cross-cultural dimensions is rapidly gaining momentum. Recently, GSW courses are being introduced at academic institutes as part of computer science and software engineering degree requirements. Collaborative GSW courses are mainly concerned with studying methodologies, tools, infrastructures, and other factors that influence distributed software development by culturally diverse teams. Cultural issues are among the factors that may affect the outcomes of GSW courses. Influences could be in productivity, trust, communication methods, and leadership of distributed teams. In the past 30 years, a considerable amount of literature has examined the definition and characteristics of culture, mostly from a person-task perspective, which is the extent to which cultures focus on human interaction as opposed to tasks to accomplish. The most referenced research of all literature on cultural dimensions in the context of GSW is that of Greet Hofstede, Project GLOBE, Trompenaars and Hampdeen-Turner, and Hall. Hofstede identified six major dimensions on which cultures may vary. Project GLOBE extended Hofstede's work to examine universally endorsed, universally unendorsed, and culturally contingent behaviours across the different cultures. Both studies are considered landmarks in cross-cultural research because they have taken cross-cultural research to an advanced level by exploring cultures that were never considered in the previously American-dominated literature of cultural research. However, more efforts are needed to identify drivers of productivity in culturally diverse teams within context-specific settings. This paper attempts to identify contextual factors that support or inhibit productivity within distributed teams, especially those located in regions that are under-researched, like the Middle East.","2158-1002","978-1-4799-3749-3","10.1109/IPCC.2014.7020397","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7020397","Cultural dimensions;global software development;software engineering education","Cultural differences;Software engineering;Business;Software;Educational institutions;Context","","1","","10","IEEE","26 Jan 2015","","","IEEE","IEEE Conferences"
"Research on the Application of Concept Map to Software Engineering Teaching","C. Yang; Y. Liu","School of Information and Electronic Engineering, Zhejiang University of Science and Technology, Hangzhou, China; School of Information and Electronic Engineering, Zhejiang University of Science and Technology, Hangzhou, China",2009 International Conference on Scalable Computing and Communications; Eighth International Conference on Embedded Computing,"1 Dec 2009","2009","","","612","615","Software engineering is a comprehensive and highly practical course, traditional teaching is very inadequate. Concept maps are a way to develop logical thinking and study skills, by revealing connections and helping students see how individual ideas form a larger whole. According to its characters concept maps should be used to improve software engineering teaching. In recent years both research and application of concept man have made great progress. Concept maps become increasingly mature method. In this paper we introduce the challenge which software engineering teaching is facing with. Then we proposed that concept maps can be employed to the software engineering teaching. The role and the application approach of concept map are explored. The practices show that concept maps are excellent teaching, learning and evaluating tools in software engineering. The results are remarkable.","","978-0-7695-3825-9","10.1109/EmbeddedCom-ScalCom.2009.119","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5341872","concept map;software engineering;teaching","Application software;Software engineering;Education;Joining processes;Embedded computing;Programming;Software maintenance;Flowcharts;Software development management;Software standards","","2","","6","IEEE","1 Dec 2009","","","IEEE","IEEE Conferences"
"Release engineering practices and pitfalls","H. K. Wright; D. E. Perry","Department of Electrical and Computer Engineering, University of Texas, Austin, Austin, TX, USA; Department of Electrical and Computer Engineering, University of Texas, Austin, Austin, TX, USA",2012 34th International Conference on Software Engineering (ICSE),"28 Jun 2012","2012","","","1281","1284","The release and deployment phase of the software development process is often overlooked as part of broader software engineering research. In this paper, we discuss early results from a set of multiple semi-structured interviews with practicing release engineers. Subjects for the interviews are drawn from a number of different commercial software development organizations, and our interviews focus on why release process faults and failures occur, how organizations recover from them, and how they can be predicted, avoided or prevented in the future. Along the way, the interviews provide insight into the state of release engineering today, and interesting relationships between software architecture and release processes.","1558-1225","978-1-4673-1067-3","10.1109/ICSE.2012.6227099","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6227099","release engineering;software process","Software;Interviews;Organizations;Programming;Software engineering;History;Standardization","","12","","19","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"The Software Engineering Position Mapping From Personality Traits","C. Doungsa-ard; V. Chaiwon","College of Arts, Media and Technology Chiang Mai University, Chiang Mai, Thailand; College of Arts, Media and Technology Chiang Mai University, Chiang Mai, Thailand","2020 Joint International Conference on Digital Arts, Media and Technology with ECTI Northern Section Conference on Electrical, Electronics, Computer and Telecommunications Engineering (ECTI DAMT & NCON)","11 May 2020","2020","","","194","199","There are high demands of software engineering now a day due to the digital evolution. Having good software engineers to the team is an advantage for the business. There are many research indicates that there are relationships between software engineer position and personal traits. The work position requires people with specific traits to achieve work. So this paper proposed the K-question position mapping technique to find a suitable job position for the candidate. The candidate needs to complete the Five-Factor Model (FFM) test to explore their dominated traits. Using the model data from the FFM test of people with various positions, the dominated traits are compared to each traits data with software position. The proposed technique suggests the appropriate software position for the candidate. Besides, the proposed approach has been compared with other techniques such as regression analysis, and the k-nearest neighbor. The result shows that the proposed approach returns the appropriate position more accuracy than the other.","","978-1-7281-6398-7","10.1109/ECTIDAMTNCON48261.2020.9090730","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9090730","Personality traits;Five-factor Model;Software Engineer;Software Engineer Position Mapping","Software;Software engineering;Media;Data models;Digital art;Telecommunications;Task analysis","","1","","12","IEEE","11 May 2020","","","IEEE","IEEE Conferences"
"Requirement Engineering Practices - An Empirical Study","A. Tahir; R. Ahmad","Department of Software Engineering, University of Malaya, Kuala Lumpur, Malaysia; Department of Software Engineering, University of Malaya, Kuala Lumpur, Malaysia",2010 International Conference on Computational Intelligence and Software Engineering,"30 Dec 2010","2010","","","1","5","Requirement Engineering (RE) phase has been regarded as one of the important phases in the development process. Inadequate engineering of requirements can lead to more expensive errors in the later software development phases. Even though there are many methods and techniques which have been proposed in the literatures, many of these methods and techniques have not been widely practiced in the industry. To be able to rectify the situation, the assessment of the current practice is crucial. The main goal of this work is to investigate the software engineering practices especially the requirements engineering practices in the Malaysian software industry. Many of the practicing software developers are the product of the local educational institutions. The findings may help the industries to plan for enhancements in the requirement engineering practices. This research uses a survey instrument to gather data from 27 Malaysian based software firms. The main contribution of this research is the identification of the most practiced requirements engineering activities and the least practiced requirements engineering activities in the software firms.","","978-1-4244-5391-7","10.1109/CISE.2010.5676827","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5676827","","Software;Programming;Software engineering;Interviews;Testing;Industries;Risk analysis","","7","","14","IEEE","30 Dec 2010","","","IEEE","IEEE Conferences"
"A coordinated plan for teaching software engineering in the Rey Juan Carlos University","J. E. Perez-Martinez; A. Sierra-Alonso","C/Tulipán s/n, Rey Juan Carlos University, Mostoles, Spain; C/Tulipán s/n, Rey Juan Carlos University, Mostoles, Spain","Proceedings 16th Conference on Software Engineering Education and Training, 2003. (CSEE&T 2003).","2 Apr 2003","2003","","","107","118","Nowadays both industry and academic environments are showing a lot of interest in the Software Engineering discipline. Therefore, it is a challenge for universities to provide students with appropriate training in this area, preparing them for their future professional practice. There are many difficulties to provide that training. The outstanding ones are: the Software Engineering area is too broad and class hours are scarce, the discipline requires a high level of abstraction; it is difficult to reproduce real world situations in the classroom to provide a practical learning environment; the number of students per professor is very high (at least in Spain); companies develop software with a maturity level rarely over level 2 of the CMM for Software (again, at least in Spain) as opposed to what is taught at the University. Besides, there are different levels and study plans, making more difficult to structure the contents to teach in each term and degree. In this paper we present a plan for teaching Software Engineering trying to overcome some of the difficulties above.","1093-0175","0-7695-1869-9","10.1109/CSEE.2003.1191365","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1191365","","Education;Software engineering;Computer science;Industrial training;Engineering management;Systems engineering and theory;Computer industry;Coordinate measuring machines;Management information systems;Laboratories","","5","","5","IEEE","2 Apr 2003","","","IEEE","IEEE Conferences"
"Collaboration Tools for Global Software Engineering","F. Lanubile; C. Ebert; R. Prikladnicki; A. Vizcaíno",Italy; Vector Consulting Services; Brazil; Spain,IEEE Software,"25 Feb 2010","2010","27","2","52","55","Global software engineering requires tool support. A survey of current collaborative development tools and environments summarizes their features and development trends.","1937-4194","","10.1109/MS.2010.39","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5420797","software engineering;collaboration;global software development","Collaborative tools;Collaborative software;International collaboration;Software engineering;Collaborative work;Meetings","","145","4","10","IEEE","25 Feb 2010","","","IEEE","IEEE Magazines"
"What are Problem Causes of Software Projects? Data of Root Cause Analysis at Four Software Companies","T. O. A. Lehtinen; M. V. Mantyla","Department of computer science and engineering, Aalto University School of Science, Espoo, Finland; Department of computer science and engineering, Aalto University School of Science, Espoo, Finland",2011 International Symposium on Empirical Software Engineering and Measurement,"1 Dec 2011","2011","","","388","391","Root cause analysis (RCA) is a structured investigation of a problem to detect the causes that need to be prevented. We applied ARCA, an RCA method, to target problems of four medium-sized software companies and collected 648 causes of software engineering problems. Thereafter, we applied grounded theory to the causes to study their types and related process areas. We detected 14 types of causes in 6 process areas. Our results indicate that development work and software testing are the most common process areas, whereas lack of instructions and experiences, insufficient work practices, low quality task output, task difficulty, and challenging existing product are the most common types of the causes. As the types of causes are evenly distributed between the cases, we hypothesize that the distributions could be generalizable. Finally, we found that only 2.5% of the causes are related to software development tools that are widely investigated in software engineering research.","1949-3789","978-1-4577-2203-5","10.1109/ESEM.2011.55","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6092595","Root Cause Analysis;Problem Prevention;Software Process Improvement;Grounded Theory","Software;Software engineering;Software testing;Companies;Context;Programming;Monitoring","","7","","12","IEEE","1 Dec 2011","","","IEEE","IEEE Conferences"
"Advancing Software Engineering Professional Education","M. Ardis; P. Bourque; T. Hilburn; K. Lasfer; S. Lucero; J. McDonald; A. Pyster; M. Shaw","Stevens Institute of Technology, USA; Ecole de Technologie Supérieure, Canada; Embry-Riddle Aeronautical University, USA; Stevens Institute of Technology, USA; US Department of Defense; Monmouth University, USA; Stevens Institute of Technology, USA; Carnegie Mellon University, USA",IEEE Software,"23 Jun 2011","2011","28","4","58","63","The paper mentions that a reference curriculum for master's programs helps ensure software engineers possess the appropriate skills, knowledge, and experience to develop, maintain, and acquire complex systems.","1937-4194","","10.1109/MS.2010.133","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5590235","software engineering;computer and information science education;graduate programs;curriculum architecture;core body of knowledge;SWEBOK","Software engineering;Computer science education;Engineering education;Engineering profession;Career development","","13","","15","IEEE","30 Sep 2010","","","IEEE","IEEE Magazines"
"Sensation of learning analytics top prevail the software engineering education","N. Pratheesh; D. Thirupathigrlau","Department of Computer Applications, School of Computer Science & Engineering Bharathiar University, Coimbatore, India; Bharathiar University, Coimbatore, Tamil Nadu, IN",2013 International Conference on Advanced Computing and Communication Systems,"30 Oct 2014","2013","","","1","7","Software pockets an indispensable role in the modern living style to make their work easy. Software engineers are the people who develop the software to comply with the user needs and make them joyful. Software engineering education is the place where the software engineers mold up academically for the society's requirement. As a result, software engineering education grabs the essence in the computer education, albeit it fall shorts to cook up the genius to meet with the industries necessity. To overcome these issues, researchers suggested number of software engineering learning/teaching methods to egg on students to acquire their profundity knowledge in software engineering. Even though the suggestions do not utterly surmount this crucial issue since the suggested approaches did not attract the maj ority of the students and touch their learning style. Learning analytics plays a vital role to improve the students learning activities. Learning style and learning engagement are the key factors for the learning analytics. This paper focuses on learning style and learning engagement of the software engineering students. This work classifies the students in line with their learning style and identifies the needs of the software engineering students using learning engagement finally proposed the model to inspire the students to overcome such issues and motivate them in gathering software engineering knowledge.","","978-1-4799-3506-2","10.1109/ICACCS.2013.6938704","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6938704","Software Engineering Education;Learning Analytics;Social Learning Analytics;Learning Style;Learning Engagement;Software Engineering;Learning/Teaching Methods","Software engineering;Software;Knowledge engineering;Educational institutions;Industries;Materials","","1","","35","IEEE","30 Oct 2014","","","IEEE","IEEE Conferences"
"Norm Gibbs - a leader in software engineering education","",,"Proceedings 16th Conference on Software Engineering Education and Training, 2003. (CSEE&T 2003).","2 Apr 2003","2003","","","2","2","","1093-0175","0-7695-1869-9","10.1109/CSEE.2003.1191339","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1191339","","Software engineering;Educational institutions;Computer science education;Computer science;Information technology;Mathematics;Educational programs;Abstract algebra;Insurance;Engineering profession","","","","","IEEE","2 Apr 2003","","","IEEE","IEEE Conferences"
"Architecture Engagement Purposes: Towards a Framework for Planning ""Just Enough""-Architecting in Software Engineering","T. Keuler; J. Knodel; M. Naab; D. Rost","Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany",2012 Joint Working IEEE/IFIP Conference on Software Architecture and European Conference on Software Architecture,"25 Oct 2012","2012","","","234","238","Software architecture has been proven as a conceptual tool to manage the development and evolution of a software product. However, integrating architecting as an activity in software engineering is still perceived as a major challenge in practice. Our observation from many projects centered around architecture is that most organizations actually fail to plan architecting activities and align them in product development. The consequence is that the value of the architecture is underrated and the power of architecture remains more often than not unexploited. In this paper, we introduce the notion of architecture engagement purpose -- an auxiliary construct to align architecting with other engineering activities in the product lifecycle. We gained first promising results in applying it in industrial projects, where explicit architecture engagement purposes enabled the organization in planning and tracking architecting as an activity within their software engineering.","","978-1-4673-2809-8","10.1109/WICSA-ECSA.212.36","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6337726","architectecting;architecture engagement purpose;organization;product;product lifecycle;software architecture","Computer architecture;Investments;Planning;Software architecture;Documentation;Software","","4","","8","IEEE","25 Oct 2012","","","IEEE","IEEE Conferences"
"Integrating knowledge life cycle within software development process to produce a quality software product","O. Sabri; F. Alfifi","Management Information System Dept, Jazan University, Jazan, KSA; Management Information System Dept, Jazan University, Jazan, KSA",2017 International Conference on Engineering and Technology (ICET),"8 Mar 2018","2017","","","1","7","The main goal of this paper is to discuss the involvement of knowledge life cycle phases within software development processes to achieve software quality. This paper represents the importance of knowledge life cycle activities during a typical software development process to provide software as a final product/target. With the help of knowledge movements within the organization, the quality of provided software is used to improve organization performance and products better and faster. Additionally; the research will present a framework for knowledge management within software development life cycle as a means of evaluating the effects on people and organization, technology and workflows during the software development processes.","","978-1-5386-1949-0","10.1109/ICEngTechnol.2017.8308172","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8308172","Knowledge Management;Knowledge Management Practices;Knowledge Management Life Cycle;software engineering;software development process;software development lifecycle","Software;Organizations;Knowledge management;Software engineering;Maintenance engineering;System analysis and design","","4","","22","IEEE","8 Mar 2018","","","IEEE","IEEE Conferences"
"Can Automated Text Classification Improve Content Analysis of Software Project Data?","J. Noll; D. Seichter; S. Beecham","Lero the Irish Software Engineering Research Centre, University of Limerick, Ireland; Lero the Irish Software Engineering Research Centre, University of Limerick, Ireland; Lero the Irish Software Engineering Research Centre, University of Limerick, Ireland",2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement,"12 Dec 2013","2013","","","300","303","Content analysis is a useful approach for analyzing unstructured software project data, but it is labor-intensive and slow. Can automated text classification (using supervised machine learning) be used to reduce the labor or improve the speed of content analysis? We conducted a case study involving data from a previous study that employed content analysis of an open source software project. We used a human-coded data set with 3256 samples to create different size training sets ranging in size from 100 to 3000 samples to train an ""ensemble"" text classifier to assign one of five different categories to a test set of samples. The results show that the automated classifier could be trained to recognize categories, but much less accurately than the human classifiers. In particular, both precision and recall for low-frequency categories was very low (less than 20%). Nevertheless, we hypothesize that automated classifiers could be used to filter a sample to identify common categories before human researchers examine the remainder for more difficult categories.","1949-3789","978-0-7695-5056-5","10.1109/ESEM.2013.52","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6681372","Qualitative Research;Content Analysis;Text Classification;Machine Learning;Software Engineering;Open Source Software","Training;Software;Software engineering;Encoding;Message systems;Software measurement;Accuracy","","","","21","IEEE","12 Dec 2013","","","IEEE","IEEE Conferences"
"A Controlled Natural Language Approach for Integrating Requirements and Model-Driven Engineering","D. de Almeida Ferreira; A. R. da Silva","INESC-ID, Inst. Super. Tecnico, Lisbon, Portugal; INESC-ID, Inst. Super. Tecnico, Lisbon, Portugal",2009 Fourth International Conference on Software Engineering Advances,"30 Oct 2009","2009","","","518","523","Despite the efforts made during the last decades, Software Engineering still presents several issues concerning software products' quality. Requirements Engineering plays a important role regarding software quality, since it deals with the clear definition of the target system's scope. Moreover, Requirements Engineering is crucial to deal with change management, which is required to ensure that the final product reflects the stakeholders' expectations, namely the client and end-users business-related needs. We advocate the need to address the open issues regarding the requirements development process, namely to mitigate the drawbacks of using informal natural language, such as ambiguity and inconsistency. Moreover, we recognize the importance of automation to enhance productivity by avoiding repetitive and error-prone activities. In this paper, we propose a new socio-technical approach to overcome these software quality problems, consisting on the deep integration of Requirements Engineering with Model-Driven Engineering processes. This approach is based upon a controlled natural language for requirements specification, supporting the automatic extraction and verification of requirements models with Natural Language Processing techniques. The current results consist on the development of a Wiki-based tool prototype to validate our research ideas.","","978-1-4244-4779-4","10.1109/ICSEA.2009.81","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5298763","Software Requirements;Software Engineering Tools and Methods","Natural languages;Model driven engineering;Software quality;Software engineering;Engineering management;Automation;Productivity;Design engineering;Automatic control;Natural language processing","","11","2","22","IEEE","30 Oct 2009","","","IEEE","IEEE Conferences"
"Combining Perceptions and Prescriptions in Requirements Engineering Process Assessment: An Industrial Case Study","N. P. Napier; L. Mathiassen; R. D. Johnson","School of Science and Technology, Georgia Gwinnett College, Lawrenceville, GA, USA; Center for Process Innovation, J. Mark Robinson College of Business, Georgia State University, Atlanta, GA, USA; Department Faculty of Engineering, Built Environment, and Information Technology, University of Pretoria, Pretoria, Gauteng, South Africa",IEEE Transactions on Software Engineering,"2 Oct 2009","2009","35","5","593","606","Requirements engineering (RE) is a key discipline in software development and several methods are available to help assess and improve RE processes. However, these methods rely on prescriptive models of RE; they do not, like other disciplines within software engineering, draw directly on stakeholder perceptions and subjective judgments. Given this backdrop, we present an empirical study in RE process assessment. Our aim was to investigate how stakeholder perceptions and process prescriptions can be combined during assessments to effectively inform RE process improvement. We first describe existing methods for RE process assessment and the role played by stakeholder perceptions and subjective judgments in the software engineering and management literature. We then present a method that combines perceptions and prescriptions in RE assessments together with an industrial case study in which the method was applied and evaluated over a three-year period at TelSoft. The data suggest that the combined method led to a comprehensive and rich assessment and it helped TelSoft consider RE as an important and integral part of the broader engineering context. This, in turn, led to improvements that combined plan-driven and adaptive principles for RE. Overall, the combined method helped TelSoft move from Level 1 to Level 2 in RE maturity, and the employees perceived the resulting engineering practices to be improved. Based on these results, we suggest that software managers and researchers combine stakeholder perceptions and process prescriptions as one way to effectively balance the specificity, comparability, and accuracy of software process assessments.","1939-3520","","10.1109/TSE.2009.33","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4967614","Process implementation and change;qualitative process analysis;requirements engineering process;software management;software process.","Software engineering;Computer industry;Programming;Engineering management;Software quality;Project management;Risk management;Educational institutions;Data engineering;Quality management","","22","","56","IEEE","26 May 2009","","","IEEE","IEEE Journals"
"A Project-Based Collaboration between Software Engineering and Criminology Students : Building Applications to Understand Racial Injustice in the Criminal Justice System","S. M. Pulimood; M. E. Leigey; D. C. Bates; K. Pearson; S. Mishra","Computer Science, The College of New Jersey, Ewing, NJ, USA; Criminology, The College of New Jersey, Ewing, NJ, USA; Sociology, The College of New Jersey, Ewing, NJ, USA; Journalism & Prof. Writing, The College of New Jersey, Ewing, NJ, USA; Sociology, The College of New Jersey, Ewing, NJ, USA",2022 IEEE/ACM 44th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"13 Jun 2022","2022","","","14","24","Undergraduate software engineering courses typically require students to work on team-based projects that reinforce disciplinary content and soft skills. At the same time, these students, particularly those at liberal arts institutions, are required to take courses that focus on civic issues, including on racial and ethnic inequality. Often, students perceive these courses to be outside their disciplinary areas, and may not comprehend how these topics are applicable to computer science and software engineering. This paper reports on the experience of Pulimood and Leigey as they and their students grappled with issues of racial injustice in the criminal justice system, and drew upon their own disciplinary backgrounds to apply computational thinking and software engineering principles to help the community better understand these issues and advocate for reform. The paper also describes the experience of teaching courses from different disciplines in a collaborative model, working closely with a local community partner to support its work on an identified social issue, and the learning outcomes, as well as the benefits and challenges of this approach. Recommendations and future directions are also discussed.","","978-1-6654-9592-9","10.1145/3510456.3514151","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9794152","Interdisciplinary collaboration;undergraduate software engineering;software design and implementation;racial justice;community engaged learning;project-based learning","Training;Computer science;Art;Computational modeling;Collaboration;Software;Software engineering","","1","","52","IEEE","13 Jun 2022","","","IEEE","IEEE Conferences"
"IEEE/ISO/IEC International Standard for Software and systems engineering--Software testing--Part 3:Test documentation","",,ISO/IEC/IEEE 29119-3:2021(E),"27 Oct 2021","2021","","","1","98","The purpose of the ISO/IEC/IEEE 29119 series of software testing standards is to define an internationally-agreed set of standards for software testing that can be used by any organization when performing any form of software testing. ISO/IEC/IEEE 29119-3 includes templates and examples of test documentation. The templates are arranged within clauses reflecting the overall test process description structure in ISO/IEC/IEEE 29119-2, i.e. by the test process in which they are being produced. Annex A outlines the contents of each document and maps each document to ISO/IEC/IEEE 29119-2. Annex B contains an overview of the examples. Annexes C to R contain examples of the application of the templates. Annex S provides mappings to existing standards. Annex T explains the use of the term Test Model in this document. The Bibliography for this part of ISO/IEC/IEEE 29119 is at the end of the document. ISO/IEC/IEEE 29119-3 supports dynamic testing, functional and non-functional testing, manual and automated testing, and scripted and unscripted testing. The documentation templates defined in ISO/IEC/IEEE 29119-3 can be used in conjunction with any software development lifecycle model.","","978-1-5044-7980-6","10.1109/IEEESTD.2021.9591577","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9591577","29119;29119-1;software testing;Test Planning Process;Test Plan;verification and validation.","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Software testing;System analysis and design;Documentation ","","","","","","27 Oct 2021","","","IEEE","IEEE Standards"
"On the Needs and Challenges of Model-Based Engineering for Spaceflight Software Systems","R. G. Pettit; N. Mezcciani; J. Fant","The Aerospace Corporation, Chantilly, Virginia, USA; The Aerospace Corporation, El Segundo, California, USA; The Aerospace Corporation, Chantilly, Virginia, USA",2014 IEEE 17th International Symposium on Object/Component/Service-Oriented Real-Time Distributed Computing,"18 Sep 2014","2014","","","25","31","Space flight software continues to experience exponential growth as functionality migrates from hardware to software. The resulting complexity of these mission critical systems demands new approaches to software systems engineering in order to effectively manage the development efforts and ensure that reliability is not compromised. Model-based systems/software engineering (MBE) approaches present attractive solutions to address the size and complexity through abstraction and analytical models. However, there are many challenges that must be addressed before MBE approaches can be effectively adopted on a large scale across an entire system. In this paper, we discuss some of the key motivators and challenges based on our experiences with flight software programs employing elements of MBE.","2375-5261","978-1-4799-4430-9","10.1109/ISORC.2014.13","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6899127","Model-Based Engineering;Systems Engineering;Software Engineering;Flight Software","Unified modeling language;Space vehicles;Modeling;Complexity theory;Software systems;Software engineering","","7","","36","IEEE","18 Sep 2014","","","IEEE","IEEE Conferences"
"Does Distance Still Matter? Revisiting Collaborative Distributed Software Design","R. Jolak; A. Wortmann; M. Chaudron; B. Rumpe","Chalmers University of Technology, Gothenburg University; RWTH Aachen University; Chalmers University of Technology, Gothenburg University; RWTH Aachen University",IEEE Software,"29 Nov 2018","2018","35","6","40","47","Global software engineering requires supporting distributed collaboration for most software development activities. However, geographical distance challenges effective collaboration. Nowadays, we’re witnessing significant advances in communication and collaboration technologies. So, researchers explored whether these advances enable effective remote collaboration. To that end, they studied the design activities of both colocated and distributed professional software designers. The findings are based on analysis of video recordings of design sessions and questionnaires. The researchers found that despite comprehensive technological improvements, distance still matters. To ensure effective distributed software design, designers must consider extra (nontechnical) details. This article is part of a theme issue on collaborative modeling.","1937-4194","","10.1109/MS.2018.290100920","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8409905","global software engineering;GSE;collaborative software design;collaborative software modeling;distributed software design;software design communication;software design decisions;software design reasoning;software models;interactive whiteboards;computer-supported cooperative work;CSCW;software engineering;software development","Collaborative software;Software design;Software engineering;Software development","","23","","15","IEEE","11 Jul 2018","","","IEEE","IEEE Magazines"
"Myths and Facts about a Career in Software Testing: The Perspectives of Students and Practitioners","R. d. S. Santos; L. F. Capretz; C. V. C. de Magalhães; R. Souza","Cape Breton University, Sydney, NS, Canada; Western University, London, Canada; CESAR School, Recife, Brazil; CESAR School, Recife, Brazil",2023 IEEE 35th International Conference on Software Engineering Education and Training (CSEE&T),"31 Aug 2023","2023","","","120","120","Testing is an indispensable part of software development. However, a career in software testing is reported to be unpopular among technology students. This can potentially create a shortage of testers in the software industry in the future. The question is, whether the perception that undergraduate students have about software testing is accurate and whether it differs from the experience reported by those who work in testing activities in the software development industry. We obtained 63 answers from practitioners in the software industry, and previous surveys analyzed the perceptions of 648 students from software engineering. This investigation demonstrates that a career in software testing is more exciting and rewarding, as reported by professionals working in the field, than students may believe. Therefore, in order to guarantee a workforce focused on software quality, the academy and the software industry need to work together to better inform students about software testing and its essential role in software development. In particular, courses in testing automation are expected to increase the popularity of the area among students.","2377-570X","979-8-3503-2202-6","10.1109/CSEET58097.2023.00024","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10229341","software testing;software quality;software engineering education.","Industries;Software testing;Surveys;Automation;Engineering profession;Software quality;Software","","","","0","IEEE","31 Aug 2023","","","IEEE","IEEE Conferences"
"Understanding requirements engineering practices for packaged software implementation","I. Jebreen","SERL, Auckland University of Technology, Auckland, New Zealand",2013 IEEE 4th International Conference on Software Engineering and Service Science,"30 Sep 2013","2013","","","112","115","Requirements engineering approaches are appropriate when software is to be developed from scratch. However, in most organization, new software is now created by integrating functionality from existing software and components or by implementing packaged software. In such cases, it makes little sense to specify requirements in terms of what the software should do - the functionality is already defined in this software. Rather, we argue that it is more appropriate to consider the software requirements from a misalignments perspective - what functions software provides and who needs that functions to do their job and what misalignments between software functions and users' needs. To explore this area, we study cases of PS implementation in two software development companies. Our research design follows an interpretive approach, in which analysis was undertaken using an inductive approach. From an analysis of the cases, we induced a theoretical model explaining the requirement engineering practices (REP) for packaged software implementation.","2327-0594","978-1-4673-5000-6","10.1109/ICSESS.2013.6615267","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6615267","requirement engineering;packaged software implementation","Software","","","","11","IEEE","30 Sep 2013","","","IEEE","IEEE Conferences"
"Awakening Awareness on Energy Consumption in Software Engineering","E. Jagroep; J. Broekman; J. M. E. M. van der Werf; P. Lago; S. Brinkkemper; L. Blom; R. van Vliet","Dept. of Information and Computing Sciences, Utrecht University, Utrecht, Netherlands; Dept. of Information and Computing Sciences, Utrecht University, Utrecht, Netherlands; Dept. of Information and Computing Sciences, Utrecht University, Utrecht, Netherlands; Dept. of Information and Computing Sciences, Utrecht University, Utrecht, Netherlands; Dept. of Information and Computing Sciences, Utrecht University, Utrecht, Netherlands; Vrije Universiteit Amsterdam, Computer Science Institute, Amsterdam, HV, Netherlands; Centric Netherlands B.V., Gouda, AH, Netherlands",2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering in Society Track (ICSE-SEIS),"29 Jun 2017","2017","","","76","85","Software producing organizations have the ability to address the energy impact of their ICT solutions during the development process. However, while industry is convinced of the energy impact of hardware, the role of software has mostly been acknowledged by researchers in software engineering. Strengthened by the limited practical knowledge to reduce the energy consumption, organizations have less control over the energy impact of their products and lose the contribution of software towards energy related strategies. Consequently, industry risks not being able to meet customer requirements or even fulfillcorporate sustainability goals. In this paper we perform an exploratory case study on how to create and maintain awareness on an energy consumption perspective for software among stakeholders involved with the development of software products. During the study, we followed the development process of two commercial software products and provided direct feedback to the stakeholders on the effects of their development efforts, specifically concerning energy consumption and performance, using an energy dashboard. Multiple awareness measurements allowed us to keep track of changes over time on specific aspects affecting software development. Our results show that, despite a mixed sentiment towards the dashboard, changed awareness has triggered discussion on the energy consumption of software.","","978-1-5386-2673-3","10.1109/ICSE-SEIS.2017.10","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7961670","Energy consumption perspective;Awareness;Software energy consumption;Software engineering","Software;Energy consumption;Stakeholders;Software engineering;Monitoring;Organizations;Software measurement","","11","","42","IEEE","29 Jun 2017","","","IEEE","IEEE Conferences"
"Optimize defect detection techniques through empirical software engineering method","Hai Tao Sun","IBM, Corporation, Rochester, MN, USA",2005 IEEE International Conference on Electro Information Technology,"8 May 2006","2005","","","6 pp.","6","This paper introduces twelve defect detection techniques and describes a non-controlled experiment related to defect detection techniques to address the uncertainty of how to test an embedded software and find defects effectively. In this non-controlled experiment, three common testing techniques were applied to a large scale embedded system. This study is intended to evaluate different defect detection techniques that are actually used by software engineers using empirical software engineering method. The objective of empirical software engineering is to improve the software development processes and quality. This could be done by evaluating, comparing and controlling defect detection methods. This study is also intended to find a best method to reduce defects and increase the defect detection rate in a large scale embedded system, since defect detection is considered as one of the most costly development process in software development cycle.","2154-0373","0-7803-9232-9","10.1109/EIT.2005.1627056","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1627056","Defect detection techniques;evaluation;empirical software engineering","Optimization methods;Software engineering;Programming;Software testing;Logic testing;Embedded software;Embedded system;Large-scale systems;Software tools;Costs","","1","","21","IEEE","8 May 2006","","","IEEE","IEEE Conferences"
"""Parallel Development and Independent Integration Model"" for Scientific Research Software engineering","H. -t. Li; A. -s. Shi; Y. -x. Meng","College of Information Science, Qingdao University, Qingdao, China; Modern Education Technology Center, Qingdao University of China, Qingdao, China; College of Information Science, Hebei University of Technology, Qingdao, China",2008 International Conference on Computer Science and Software Engineering,"22 Dec 2008","2008","2","","244","246","""Parallel development and independent integration software development model"" is proposed in this paper, which takes the characteristics of software development in scientific research field into consideration, absorbs fully the merits of available software development model, and makes good use of some recent thoughts and technologies such as software reuse, components, UML and so on. Each part of the model including the definition, the assignment and the end products is analyzed and described in detail in this paper, and finally, the validity and practicability of this model is proved in practice.","","978-0-7695-3336-0","10.1109/CSSE.2008.1372","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4722044","Parallel Development;Independent Integration;Software Development Model;Scientific Research Software;Component","Software engineering;Programming;Educational technology;Educational institutions;Information science;Unified modeling language;Independent component analysis;Software testing;System testing;Application software","","","","8","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Studies on the Software Testing Profession","L. F. Capretz; P. Waychal; J. Jia; D. Varona; Y. Lizama","Electrical & Computer Eng. Western University, London, Canada; CRICPE Western Michigan University, Kalamazoo, USA; School of Software, Beihang University, Beijing, China; Cultureplex Laboratories, Western University, London, Canada; Cultureplex Laboratories, Western University, London, Canada",2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"19 Aug 2019","2019","","","262","263","This paper attempts to understand motivators and de-motivators that influence the decisions of software professionals to take up and sustain software testing careers across four different countries, i.e. Canada, China, Cuba, and India. The research question can be framed as ""How many software professionals across different geographies are keen to take up testing careers, and what are the reasons for their choices?"" Towards that, we developed a cross-sectional but simple survey-based instrument. In this study we investigated how software testers perceived and valued what they do and their environmental settings. The study pointed out the importance of visualizing software testing activities as a set of human-dependent tasks and emphasized the need for research that examines critically individual assessments of software testers about software testing activities. This investigation can help global industry leaders to understand the impact of work-related factors on the motivation of testing professionals, as well as inform and support management and leadership in this context.","2574-1934","978-1-7281-1764-5","10.1109/ICSE-Companion.2019.00105","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8802688","software test;human factors in software engineering;software testing professionals;empirical software engineering;cross-cultural studies;soft skills;software psychology","Software;Engineering profession;Software testing;Software engineering;Human factors;Complexity theory","","11","","10","IEEE","19 Aug 2019","","","IEEE","IEEE Conferences"
"Enterprise, Systems, and Software Engineering--The Need for Integration","P. Joannou","Ontario Power Generation, Inc., Canada",Computer,"15 May 2007","2007","40","5","103","105","Enterprise engineering is defined as the body of knowledge, principles, and practices having to do with the analysis, design, implementation, and operation of an enterprise. The professional community must create a commonly recognized body of knowledge before enterprise engineering can become a recognized engineering discipline. The body of knowledge for enterprise engineering is evolving under such titles as enterprise engineering, business engineering, and enterprise architecture.","1558-0814","","10.1109/MC.2007.167","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4198261","standards;enterprise engineering","Software systems;Systems engineering and theory;Humans;Design engineering;Power engineering and energy;Software standards;Power generation;Power engineering computing;Strategic planning;Management training","","6","","","IEEE","15 May 2007","","","IEEE","IEEE Magazines"
"Approximate Graph Matching in Software Engineering","S. Kpodjedo","SOCCER Laboratory-DGIGL, Ecole Polytechnique de Montréal, Philippe Galinier and Giuliano Antoniol, Quebec, Canada",2009 16th Working Conference on Reverse Engineering,"17 Nov 2009","2009","","","295","298","Graph representations are widely adopted in many different areas to modelize objects or problems. In software engineering, many produced artifacts can be thought of as graphs and generic graph algorithms may be useful in many different contexts. Our research project is aimed at addressing the generic approximate graph matching and apply developed algorithms to software engineering problems.","2375-5369","978-0-7695-3867-9","10.1109/WCRE.2009.49","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5328739","Software evolution;Error-Tolerant Graph Matching (ETGM);Meta-heuristics","Software engineering;Software algorithms;Benchmark testing;Reverse engineering;Production;Software maintenance;Documentation;Labeling;Mathematical model;Databases","","","","13","IEEE","17 Nov 2009","","","IEEE","IEEE Conferences"
"Software Engineering for Internet of Things: The Practitioners' Perspective","M. Fahmideh; A. Ahmad; A. Behnaz; J. Grundy; W. Susilo","University of Southern Queensland, Springfield Central, QLD, Australia; Department of Information and Computer Science, College of Computer Science and Engineering, University of Ha'il, Ha'il, Saudi Arabia; Citibank, Sydney, NSW, Australia; Faculty of Information Technology, Monash University, Melbourne, VIC, Australia; School of Computing and Information Technology, University of Wollongong, Wollongong, NSW, Australia",IEEE Transactions on Software Engineering,"16 Aug 2022","2022","48","8","2857","2878","Internet of Things based systems (IoT systems for short) are becoming increasingly popular across different industrial domains and their development is rapidly increasing to provide value-added services to end-users and citizens. Little research to date uncovers the core development process lifecycle needed for IoT systems, and thus software engineers find themselves unprepared and unfamiliar with this new genre of system development. To ameliorate this gap, we conducted a mixed quantitative and qualitative research study where we derived a conceptual process framework from the extant literature on IoT, through which 27 key tasks for incorporation into the development processes of IoT systems were identified. The framework was then validated by the means of a survey of 127 IoT practitioners from 35 countries across 6 continents with 15 different industry backgrounds. Our research provides an understanding of the most important development process tasks and informs both software engineering practitioners and researchers of the challenges and recommendations related to the development of next-generation of IoT systems.","1939-3520","","10.1109/TSE.2021.3070692","ARC Laureate Fellowship(grant numbers:FL190100035); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9398558","Software engineering;software management;software development process;empirical software engineering;Internet of Things (IoT)","Software engineering;Task analysis;Software;Internet of Things;Systematics;Information technology;Hardware","","16","","60","IEEE","7 Apr 2021","","","IEEE","IEEE Journals"
"Writing as a Tool for Learning Software Engineering","A. I. Wang; C. . -F. Sorensen","Department of Computer and Information Science, Norwegian University of Science and Technology, Trondheim, Norway; Department of Computer and Information Science, Norwegian University of Science and Technology, Trondheim, Norway",19th Conference on Software Engineering Education & Training (CSEET'06),"8 May 2006","2006","","","35","42","This paper presents an educational method used to improve teaching of tedious topics in software engineering courses that can be difficult for students to comprehend without any reference to own practical experience. The method utilizes the students existing software engineering knowledge to understand new theory, methods, and techniques. The goals of the method are to improve student participation in the lectures and to enable the students to think through the topics on their own before giving answers and explanations. The method allows the students to learn in three different settings: Individually, in groups, and in class. This paper describes experiences using the method, and proposes how it can be used in software engineering courses","2377-570X","0-7695-2557-1","10.1109/CSEET.2006.46","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1617328","Software architecture;software engineering education;writing to learn;and software architecture tactics.","Writing;Software engineering;Education;Software architecture;Information science;Educational technology;Software standards;Knowledge engineering;Software systems;Programming profession","","","","11","IEEE","8 May 2006","","","IEEE","IEEE Conferences"
"(UN)Ethical Software Engineering : A critical review about Software Engineering in face of Security Requirements in the IoT/ IoE Society","F. F. S. Flores; S. R. d. L. Meira","Centro de Informática, Universidade Federal de Pernambuco, Recife, Brazil; Centro de Informática, Universidade Federal de Pernambuco, Recife, Brazil",2021 IEEE International Systems Conference (SysCon),"9 Jun 2021","2021","","","1","8","Due to the advent of the Internet, software is literally everywhere. This omnipresence of software may impact people`s lives in such a way that Software Engineering has reached a level of importance without precedence. Although important, it seems, as a result from real world data analysis, that some practices in Software Engineering may reveal an unethical face that unfolds when considered the disregard of a special kind of non-functional requirements (Security Requirements) and the approach of conditioning software use to the acceptance of abusive documents in which all developers` responsibility for hazards and failures related to software are excluded. The focus of this paper, as a result of an exploratory inquiry based on multiple data gathering (pentesting, observation of software development teams, interviews, survey and documental analysis), is discussing the present relevance of Security Requirements at contemporary societies, as well as the questionable practices of not considering it in software requirements elicitation/ prioritization and the simultaneous conditioning of software use to the acceptance of disregard responsibility clauses in End-User License Agreements and Terms of Services. Results suggest that: a) software insecurity is everywhere, affecting all of the layers of systems and software of several niches; b) insecurity is evident from the great amount of security vulnerabilities found out in software; c) multiple factors contribute to insecurity in software (insufficient developers` knowledge about Security, neglection of security requirements, and omissions in undergraduate courses curricula, e.g.); d) not considering security requirements in nowadays society is unethical; e) it is not appropriate the attitude of part of the Software Industry, that neglects security requirements and, at the same time, tries to hide itself behind EULAs and ToSs filled with responsibility and liability limitation/ exclusion clauses; f) liability and responsibility exclusion/ limitation clauses, as abusive and unethical conditions, shall be suppressed from EULAs and ToSs; g) Software Industry and developers in general shall recognize they are not behaving well and begin doing the right thing from scratch (taking real care for quality and Security Requirements); h) it is time for a change in Software Industry and this change is urgent because inertia, in this case, may favor professional licensing and external regulation initiatives, measures that, obviously, may not be interesting to all the actors involved in software production; i) it is the time for Ethical Software Engineering.","2472-9647","978-1-6654-4439-2","10.1109/SysCon48628.2021.9447113","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9447113","Software Engineering;requirements;security;responsibility exclusion;ethic","Industries;Knowledge engineering;Licenses;Software;Time measurement;Regulation;Security","","2","","18","IEEE","9 Jun 2021","","","IEEE","IEEE Conferences"
"Workshop on cooperative and human aspects of software engineering: (CHASE 2011)","M. Cataldo; C. de Souza; Y. Dittrich; R. Hoda; H. Sharp","Robert Bosch Corporate Research, Pittsburgh, USA; IBM Research Brazil, Sao Paulo, Brazil; IT University of Copenhagen, Copenhagen, Denmark; Victoria University of Wellington, Wellington, New Zealand; Open University, Milton Keynes, UK",2011 33rd International Conference on Software Engineering (ICSE),"10 Oct 2011","2011","","","1188","1189","Software is created by people for people working in varied environments, under various conditions. Thus understanding cooperative and human aspects of software development is crucial to comprehend how methods and tools are used, and thereby improve the creation and maintenance of software. Over the years, both researchers and practitioners have recognized the need to study and understand these aspects. Despite recognizing this, researchers in cooperative and human aspects have no clear place to meet and are dispersed in different research conferences and areas. The goal of this workshop is to provide a forum for discussing high quality research on human and cooperative aspects of software engineering. We aim at providing both a meeting place for the growing community and the possibility for researchers interested in joining the field to present their work in progress and get an overview over the field.","1558-1225","978-1-4503-0445-0","10.1145/1985793.1986039","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6032629","cooperative and human factors","Educational institutions;Software engineering;Conferences;Humans;Software;Programming;Communities","","1","","","","10 Oct 2011","","","IEEE","IEEE Conferences"
"Software engineering body of skills (SWEBOS)","Y. Sedelmaier; D. Landes","Faculty of Electrical Engineering and Informatics, University of Applied Sciences and Arts, Coburg, Germany; Faculty of Electrical Engineering and Informatics, University of Applied Sciences and Arts, Coburg, Germany",2014 IEEE Global Engineering Education Conference (EDUCON),"5 Jun 2014","2014","","","395","401","The development of complex software systems requires a mixture of various technical and non-technical competencies. While there are some guidelines what technical knowledge is required to make a good software engineer, there is a lack of insight as to which non-technical or soft skills are required to master complex software projects. This paper proposes a body of skills (SWEBOS) for software engineering. The collection of necessary skills is developed on the basis of a clear, data-driven research design. The resulting required soft skills for software engineering are described precisely and semantically rich in a three-level structure. This approach guarantees that skills are not just characterized in a broad and general manner, but rather they are specifically adapted to the domain of software engineering.","2165-9567","978-1-4799-3191-0","10.1109/EDUCON.2014.6826125","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6826125","Software Engineering Education;Soft Skills in Software Engineering;Non-Technical skills;competencies;description of competencies","Software;Software engineering;Knowledge engineering;Guidelines;Educational institutions;Context","","32","","17","IEEE","5 Jun 2014","","","IEEE","IEEE Conferences"
"Lessons Learned from Establishing a Software Engineering Academic Programme in Developing Countries","A. Zeid","British University in Egypt, Egypt",20th Conference on Software Engineering Education & Training (CSEET'07),"16 Jul 2007","2007","","","11","18","Developing a curriculum in software engineering is challenging. Many technical, cultural and ethical issues have to be considered. This paper summarizes our experience in developing a B.Sc. degree in Computer Science with specialization in software engineering for the British University in Egypt (BUE). We will present the methodology we followed to design the curriculum. In addition, we will present the structure of the degree and we will give examples to show some courses that we had to introduce to handle some of the issues relevant to the local and global market needs. In addition, we will present some factors that had to be considered like the maturity of local software industry and awareness of copyright issues.","2377-570X","0-7695-2893-7","10.1109/CSEET.2007.34","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4271585","Software Engineering education;Curriculum and inter-disciplinary offerings (CID)","Software engineering;Computer industry;Educational programs;Cultural differences;Proposals;Industrial training;Computer science education;Curriculum development;Computer science;Globalization","","3","","9","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"Applying software engineering practices to produce reliable, high-quality and accurate automated test systems","E. Kerry; S. Delgado","National Instruments Corporation, Austin, USA; National Instruments Corporation, Austin, USA",2009 IEEE AUTOTESTCON,"6 Nov 2009","2009","","","69","71","Test engineers developing test systems for mission-critical applications have to prove that the test system is reliable and accurate. As a result, software engineering practices are becoming increasingly important in order to mitigate any risk of failure that could result in costly downtime, incorrect behavior, or safety failures. Quality standards such as CMMI and ISO mandate regiment practices for tightly controlled development environments. Similarly, software for in flight software is required to demonstrate compliance with DO-178B and similar certification standards. While these standards improve quality and reliability, they increase the development time. As a result, engineers often spend a significant amount of time documenting, testing, and validating their work. The appropriate use of software engineering tools can automate and improve much of this process to increase efficiency and the effectiveness of testing and decrease the amount of time required. This article will provide an overview of practices for using these tools when developing large, complex test systems.","1558-4550","978-1-4244-4980-4","10.1109/AUTEST.2009.5314054","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5314054","component;software;engineering;validation;verification;best practices","Software engineering;Automatic testing;Software testing;System testing;Reliability engineering;ISO standards;Standards development;Systems engineering and theory;Mission critical systems;Application software","","2","","","IEEE","6 Nov 2009","","","IEEE","IEEE Conferences"
"Engineering Safety and Security Related Requirements for Software Intensive Systems","D. G. Firesmith","Carnegie Mellon Software Engineering Institute, USA",29th International Conference on Software Engineering (ICSE'07 Companion),"4 Jun 2007","2007","","","169","169","Many software-intensive systems have significant safety and security ramifications and need to have their associated safety- and security-related requirements properly engineered. It has been observed by several consultants, researchers, and authors that inadequate requirements are a major cause of accidents involving software-intensives systems, and poor security requirements prevent the early incorporation of security concerns into the architecture. Yet in practice, there is very little interaction between the requirements, safety, and security disciplines and little collaboration between their respective communities. Most requirements engineers, safety engineers, and security engineers know little about their respective disciplines. Also, safety and security engineering typically concentrates on architectures and designs rather than requirements because hazard and threat analysis typically depends on the identification of hardware and software components, the failure of which can cause accidents and vulnerabilities which can enable successful attacks. This leads to safety- and security-related requirements that are often ambiguous, incomplete, unverifiable, and even missing. This tutorial begins with a single common realistic example of a safety- and security-critical system that will be used throughout to provide good examples of safety- and security-related requirements. The tutorial provides a consistent ontology of safety, security, and requirements concepts and terminology, provides clear definitions and descriptions of the different kinds of safety- and security-related requirements, and finishes with a practical consistent combined process for engineering them.","","0-7695-2892-9","10.1109/ICSECOMPANION.2007.35","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4222729","","Software safety;Security;Software systems;Accidents;Collaboration;Design engineering;Computer architecture;Hazards;Failure analysis;Hardware","","13","","","IEEE","4 Jun 2007","","","IEEE","IEEE Conferences"
"Sketching with a Purpose: Moving from Supporting Modeling to Supporting Software Engineering Activities","M. Book; A. van der Hoek","University of Iceland, Reykjavik, Iceland; University of California, Irvine, Irvine, California",2018 IEEE/ACM 11th International Workshop on Cooperative and Human Aspects of Software Engineering (CHASE),"26 Aug 2018","2018","","","93","96","With the advent of large interactive displays and the increasing ubiquity of touch-enabled devices, digital sketching tools are becoming viable alternatives to classic whiteboards for the design and engineering of software systems. In this paper, we argue that current sketching tools still focus largely on creating sketches as artifacts (mostly, models), rather than recognizing sketches as byproducts of engineers' thought processes as they tackle a broad variety of complex engineering activities. We therefore advocate a more activity-than artifact-oriented view of sketching and propose research on a number of ways in which digital sketching can support cognitively demanding software engineering activities more directly.","2574-1837","978-1-4503-5725-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8445545","sketching;software development;tools;interaction modality","Tools;Software;Software engineering;Stakeholders;Unified modeling language;Collaboration;Visualization","","","","21","","26 Aug 2018","","","IEEE","IEEE Conferences"
"Who Are We Doing Global Software Engineering Research For?","S. Beecham; P. OLeary; I. Richardson; S. Baker; J. Noll","Lero – The Irish Software Engineering Research Centre, University of Limerick, Ireland; Lero – The Irish Software Engineering Research Centre, University of Limerick, Ireland; Lero – The Irish Software Engineering Research Centre, University of Limerick, Ireland; Incaplex Limited, Dublin, Ireland; Lero – The Irish Software Engineering Research Centre, University of Limerick, Ireland",2013 IEEE 8th International Conference on Global Software Engineering,"30 Sep 2013","2013","","","41","50","Twelve years ago a group of practitioners and researchers came together to try to solve problems relating specifically to Global Software Engineering (GSE) practice. This paper aims to assess whether the many hundreds of GSE research papers written over this period have had an impact on practice. We conducted semi-structured interviews with senior managers and project managers from ten companies, four of which are large multinationals (three in Fortune 100), four are medium sized enterprises, and two are small startups. GSE research is perceived as useful by industry with all participants stating that studying the subject would improve GSE performance, but all were unanimous in saying they did not read articles on GSE. Practitioners go to books, blogs, colleagues, forums, experience reports of 1-2 pages in length, or depend on their own experience to solve problems in GSE. Controversially, many didn't see GSE as separate from general project management. Practitioners don't want frameworks, they want patterns of context specific help. While dissemination techniques need to be improved, that is not sufficient. Experience-based advice is just as important.","2329-6313","978-0-7695-5057-2","10.1109/ICGSE.2013.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6613067","Global Software Development;Global Software Engineering;empirical research;theory and practice;research dissemination;practitioner experience","Interviews;Companies;Software engineering;Software;Conferences;Industries","","20","","44","IEEE","30 Sep 2013","","","IEEE","IEEE Conferences"
"Educating software engineers to become systems engineers","S. Koolmanojwong; B. Boehm","Center of Systems and Software Engineering (CSSE), University of Southern California, Los Angeles, CA, USA; Center of Systems and Software Engineering (CSSE), University of Southern California, Los Angeles, CA, USA",2011 24th IEEE-CS Conference on Software Engineering Education and Training (CSEE&T),"16 Jun 2011","2011","","","209","218","Our two-semester USC core software engineering project course CS577ab devotes its first semester to having students learn and do systems engineering on a real-client project. This requires a good deal of just-in-time lectures, tutorials, and homework to prepare the students, and feedback in terms of mentoring, artifact grading, and live milestone reviews to help them succeed. This paper provides some initial motivation and context; discusses our approach to introduce systems engineering into software engineering relative to that in the GSwE 2009 curriculum guidelines, SEBOK draft 2010, and SWEBOK 2004; describes the course practices during the systems engineering and software engineering semesters; and summarizes the project results and conclusions.","2377-570X","978-1-4577-0348-5","10.1109/CSEET.2011.5876089","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5876089","","Software engineering;Software;Modeling;Spirals;Business;Problem-solving","","8","","19","IEEE","16 Jun 2011","","","IEEE","IEEE Conferences"
"Vulnerability of the Day: Concrete demonstrations for software engineering undergraduates","A. Meneely; S. Lucidi","Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA",2013 35th International Conference on Software Engineering (ICSE),"26 Sep 2013","2013","","","1154","1157","Software security is a tough reality that affects the many facets of our modern, digital world. The pressure to produce secure software is felt particularly strongly by software engineers. Today's software engineering students will need to deal with software security in their profession. However, these students will also not be security experts, rather, they need to balance security concerns with the myriad of other draws of their attention, such as reliability, performance, and delivering the product on-time and on-budget. At the Department of Software Engineering at the Rochester Institute of Technology, we developed a course called Engineering Secure Software, designed for applying security principles to each stage of the software development lifecycle. As a part of this course, we developed a component called Vulnerability of the Day, which is a set of selected example software vulnerabilities. We selected these vulnerabilities to be simple, demonstrable, and relevant so that the vulnerability could be demonstrated in the first 10 minutes of each class session. For each vulnerability demonstration, we provide historical examples, realistic scenarios, and mitigations. With student reaction being overwhelmingly positive, we have created an open source project for our Vulnerabilities of the Day, and have defined guiding principles for developing and contributing effective examples.","1558-1225","978-1-4673-3076-3","10.1109/ICSE.2013.6606667","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6606667","security;design;vulnerability;Common Weakness Enumeration;historicla","Software;Security;Software engineering;Encoding;Education;Java;Information technology","","4","","10","IEEE","26 Sep 2013","","","IEEE","IEEE Conferences"
"A Software Engineering Education Game in a 3-D Online Virtual Environment","T. Wang; Q. Zhu","College of Computer Science and Technology, Hubei University of Economics, Wuhan, China; College of Computer Science and Technology, Hubei University of Economics, Wuhan, China",2009 First International Workshop on Education Technology and Computer Science,"26 May 2009","2009","2","","708","710","The typical software engineering course consists of a series of lectures in which theories and concepts are communicated, and, in an attempt to put this knowledge into practice, a small software engineering project that the students must develop. But there are simply not enough time and resources for the students to work on a project of a large enough size to exhibit many of the phenomena present in real-world software engineering processes. An approach to address this problem is that allowing the students to participate in a simulate software developing process. We develop a software engineering education game in a 3-D online virtual environment, second life. By playing the game, the students understand the correct software developing process. According to the data collected from student surveys, we found that 92.3 percent of the 52 students who play our online software engineering process game thought the games were at least somewhat helpful.","","978-1-4244-3581-4","10.1109/ETCS.2009.418","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4959133","3-D online virtual environment;software engineering education;Game","Software engineering;Virtual environment;Second Life;Computer science education;Educational technology;Computer science;Educational institutions;Environmental economics;Avatars;Game theory","","13","","4","IEEE","26 May 2009","","","IEEE","IEEE Conferences"
"Applying Pattern Oriented Software Engineering to Web Service Development","",,2008 International Seminar on Future Information Technology and Management Engineering,"9 Jan 2009","2008","","","214","217","Service-based software development is becoming a prominent paradigm. However, less attention has been paid to the development method of Web service. In this paper, a pattern oriented service development approach (POSE) is presented. Patterns are used as the means to express the results of different development phases, so that the services can be organized and retrieved easily. The business model is constructed explicitly, thus the gap between business goal and services is bridged by the component relationships and the compositions of them. The service maintainer profits from the trace ability because the impact of requirement or design modifications can be better assessed. The patterns support to integrate services of varying levels of granularity.","","978-0-7695-3480-0","10.1109/FITME.2008.45","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4746477","Applying Pattern;Software Engineering;Web Service","Software engineering;Web services;Programming;Application software;Seminars;Information technology;Information management;Software development management;Technology management;Engineering management","","2","","13","IEEE","9 Jan 2009","","","IEEE","IEEE Conferences"
"Software Stability in Software Reengineering","C. -C. Chiang","Department of Computer Science, University of Arkansas, Little Rock, Little Rock, AR, USA",2007 IEEE International Conference on Information Reuse and Integration,"4 Sep 2007","2007","","","719","723","Legacy systems won't evolve well in today's modern computing environments without reengineering. Unfortunately, most reengineering projects are only concerned about whether the systems can be seamlessly integrated into the environments and usually ignore the quality in the improvement of the legacy systems. We all agree that it would be better to observe both integration and quality improvement implemented in the reengineering process. Software stability makes this possible in the reengineering process so that the new systems can run in a heterogeneous computing environment but also be stable enough to reduce the maintenance costs and efforts. In this paper, a connection between the stability modeling and reengineering process for legacy system is described. A preliminary study on techniques for building a better stable system will be presented although the techniques are still not very promising yet. We will also discuss the issues and challenges of applying software stability into the legacy reengineering process.","","1-4244-1499-7","10.1109/IRI.2007.4296705","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4296705","Forward Engineering;Legacy Integration;Reverse Engineering;Software Engineering;Software Maintenance;Software Stability;Software Reengineering","Stability;Software maintenance;Reverse engineering;Wrapping;Costs;Business process re-engineering;Companies;Maintenance engineering;Software systems;Computer science","","3","","24","IEEE","4 Sep 2007","","","IEEE","IEEE Conferences"
"Work-in-Progress–Supporting Software Engineering Education through Immersive Learning","F. Fernandes; C. Werner","Computer Science Department, IF Sudeste MG - Federal Institute of Southeast Minas Gerais, Manhuaçu, MG, Brazil; System Engineering and Computer Science Department, COPPE/UFRJ-Federal University of Rio de Janeiro, Rio de Janeiro, RJ, Brazil",2021 7th International Conference of the Immersive Learning Research Network (iLRN),"28 Jun 2021","2021","","","1","3","Software Engineering Education (SEE) community has been looking for alternatives to improve teaching, since the study of Software Engineering (SE) currently involves the application of a lot of theory in the classroom and little application in scenarios that convey the reality of software development. In this sense, Immersive Learning emerges as a potential approach to support the improvement of learning outcomes in SE. Therefore, the goal of this work is to present Immersive Software Engineering Education (iSEE), in which a theoretical framework is proposed by the researchers to support the planning and development of immersive educational applications for SE, as well as a platform to encourage the use of these applications by the SEE community. An example of using the theoretical framework and a preliminary evaluation of a game to teach basic object-oriented concepts are also presented.","","978-1-7348995-2-8","10.23919/iLRN52045.2021.9459361","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9459361","immersive educational application;immersive learning (iL);immersive platform;mixed reality (MR);software engineering education (SEE);virtual reality (VR)","Games;Software;Planning;Engineering education;Software engineering","","3","","7","","28 Jun 2021","","","IEEE","IEEE Conferences"
"2nd International Workshop on Rapid Continuous Software Engineering (RCoSE 2015)","M. Tichy; J. Bosch; M. Goedicke; B. Fitzgerald","Chalmers University of Gothenburg, Sweden; Chalmers University of Gothenburg, Sweden; University of Duisburg-Essen, Germany; Lero, Ireland/University of Limerick, Ireland",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","993","994","Continuous software engineering refers to the organizational  capability to develop, release and learn from software in very short  rapid cycles, typically hours, days or a very small numbers of  weeks.  This requires not only agile processes in teams but in the  complete research and development organization. Additionally, the  technology used in the different development phases, like  requirements engineering and system integration, must support the  quick development cycles. Finally, automatic live experimentation  for different system alternatives enables fast gathering of required  data for decision making. The workshop, the second in the series  after the first one at ICSE 2014, aims to bring the research  communities of the aforementioned areas together to exchange  challenges, ideas, and solutions to bring software engineering a  step further to being a holistic continuous process. The workshop  program is based on eight papers selected in the peer-review process  and supplemented by interaction and discussions at the workshop. The  topics range from agile methods, continuous software engineering  practices to specific techniques, like visualization and testing.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.343","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203144","","Conferences;Software engineering;Software;Companies;Testing","","2","","8","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Self-Perceptions about Software Engineering: A Survey of Scientists and Engineers","J. Carver; D. Heaton; L. Hochstein; R. Bartlett","University of Maryland, USA; University of Alabama, USA; University of Maryland, USA; Carnegie Mellon University, USA",Computing in Science & Engineering,"21 Jan 2013","2013","15","1","7","11","Scientists and engineers devote considerable effort to developing large, complex codes to solve important problems. However, while they often develop useful code, many scientists and engineers are frequently unaware of how various software engineering practices can help them write better code. This article presents the results of a survey on this topic.","1558-366X","","10.1109/MCSE.2013.12","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6415898","best practices;software engineering practices;computational science;scientific computing","Best practices;Production;Software engineering;Coding;Computational modeling;Scientific computing","","19","","10","IEEE","21 Jan 2013","","","IEEE","IEEE Magazines"
"Workshop on Emerging Trends in Software Metrics (WETSoM 2010)","G. Canfora; G. Concas; M. Marchesi; E. Tempero; H. Zhang","Department of Engineering-RCOST, University of Sannio, Italy; Department of Electrical and Electronic Engineering, University of Cagliari, Italy; Department of Electrical and Electronic Engineering, University of Cagliari, Italy; Department of Computer Science, University of Auckland, New Zealand; School of Software, Tsinghua University, Beijing, China",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","459","460","The Workshop on Emerging Trends in Software Metrics aims at bringing together researchers and practitioners to discuss the progress of software metrics. The motivation for this workshop is the low impact that software metrics has on current software development. The goals of this workshop are to critically examine the evidence for the effectiveness of existing metrics and to identify new directions for development of software metrics.","1558-1225","978-1-60558-719-6","10.1145/1810295.1810428","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062247","complexity;software metrics;software quality","Educational institutions;Conferences;Software;Complexity theory;Software metrics","","","","","","27 Oct 2011","","","IEEE","IEEE Conferences"
"An historical investigation of graduate software engineering curriculum","S. L. Duggins; B. B. Thomas","Southern Polytechnic State University, USA; Southern Polytechnic State University, USA",Proceedings 15th Conference on Software Engineering Education and Training (CSEE&T 2002),"7 Aug 2002","2002","","","78","87","This article presents a concise history of the evolution of graduate software engineering curriculum over the decades and examines its apparent direction. Presented here are the cornerstones that shaped the foundations of what we as educators viewed as relevant and current over the years as a continuum of progress extending over two decades. The current impact of the SWECC and the SWEBOK project on software engineering curriculum is examined and the significance that licensing professional software engineers will have on what we teach is discussed.","1093-0175","0-7695-1515-0","10.1109/CSEE.2002.995200","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=995200","","Software engineering;Educational programs;History;Computer science;Licenses;Software design;Continuing education;Conducting materials;Educational institutions;Computer science education","","3","","17","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"The Role of Software Trust in Selection of Open-Source and Closed Software","F. Hou; F. Jansen; A. de Vries; S. Jansen","Utrecht University, Utrecht, the Netherlands; Utrecht University, Utrecht, the Netherlands; Utrecht University, Utrecht, the Netherlands; Utrecht University, Utrecht, the Netherlands",2023 IEEE/ACM 11th International Workshop on Software Engineering for Systems-of-Systems and Software Ecosystems (SESoS),"27 Jul 2023","2023","","","30","37","Software selection is a critical part of any software engineering project, as projects depend on a rich ecosystem of components and frameworks. Software engineers always find it challenging to select a trustworthy software product despite the availability of a large number of software selection tools. This study explores the trust factors in open-source and closed software selection from a practitioner’s perspective, to gain insight into perceptions of software trust. To this aim, we conducted semi-structured interviews with 24 software practitioners from different businesses, including 12 experts in open-source software selection and 12 experts in closed software selection. By summarizing we found: (1) software selection is affected by three categories of factors, being technical, organizational, and structural assurance factors; (2) the most important factors are technical factors and organizational factors; and (3) software selection process and trust factors differ depending on the project risk tolerance. In addition, we compared the trust factors derived from the interviews with those found in the literature. Our findings revealed that there is a difference between the two.","","979-8-3503-0174-8","10.1109/SESoS59159.2023.00010","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10190584","Software Selection;Software Trust;Software Ecosystem;Open-Source Software;Software Business","Conferences;Ecosystems;Software;Interviews;Open source software;Software engineering;Business","","2","","17","IEEE","27 Jul 2023","","","IEEE","IEEE Conferences"
"On an Embedded Software Design Architecture for Improving the Testability of In-vehicle Multimedia Software","B. O. Obele; D. Kim","Software Quality Assurance (SQA) Team, Hyundai Mobis Co. Ltd, Gyeonggi-Do, South Korea; Software Quality Assurance (SQA) Team, Hyundai Mobis Co. Ltd, Gyeonggi-Do, South Korea","2014 IEEE Seventh International Conference on Software Testing, Verification and Validation Workshops","5 Jun 2014","2014","","","349","352","In-vehicle multimedia software quality remains critical to assuring vehicle-owner satisfaction and loyalty. Automated software testing has been identified as fundamental to software quality assurance but the success of such automated testing depends largely on the testability of the software under test. Accordingly, this paper presents an industry experience report which discusses a software design architecture that helps to improve software testability. This architecture which is currently being used in our software verification laboratory is simple, easily scalable, efficient, reliable and practical to implement. It enforces close collaboration between the software engineers and automation tool developers (testers) which helps to alleviate limitations of off-the-shelf test automation solutions such as tool compatibility, reusability, maintenance and usefulness.","","978-1-4799-5790-3","10.1109/ICSTW.2014.40","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6825684","Embedded Multimedia Software;Software Testing;Verification and Validation;Software Quality;Test Automation","Software;Automation;Software testing;Computer architecture;Multimedia communication;Automotive engineering","","1","","13","IEEE","5 Jun 2014","","","IEEE","IEEE Conferences"
"Software engineering framework for digital service-oriented EcoSystem","E. Kajan; L. Lazić; Z. Maamar","State University of Novi Pazar, Novi Pazar, Serbia; State University of Novi Pazar, Novi Pazar, Serbia; Zayed University, Dubai, UAE",2011 19thTelecommunications Forum (TELFOR) Proceedings of Papers,"2 Feb 2012","2011","","","1320","1323","This paper deals with a software development process framework intended to act as a testbed in a service-oriented digital ecoSystem. After short introduction to software ecosystems a concise overview of the framework and its role in such environment is given. After that, the main software engineering components of the framework are described with few examples of how it works.","","978-1-4577-1498-6","10.1109/TELFOR.2011.6143796","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6143796","Software Development Process;Service-Oriented Architecture;Software EcoSystem;Software Metrics;Software Quality Assurance","Software;Ecosystems;Business;Testing;Programming;Computer architecture;Software engineering","","","","15","IEEE","2 Feb 2012","","","IEEE","IEEE Conferences"
"Teaching Software Testing Concepts Using a Mutation Testing Game","B. S. Clegg; J. M. Rojas; G. Fraser","Department of Computer Science, The University of Sheffield, Sheffield, United Kingdom; Department of Computer Science, The University of Sheffield, Sheffield, United Kingdom; Department of Computer Science, The University of Sheffield, Sheffield, United Kingdom",2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering Education and Training Track (ICSE-SEET),"24 Aug 2017","2017","","","33","36","Software testing is a core aspect of software development, but testing programs systematically is not always a core aspect of software engineering education. As a result, software developers often treat testing as a liability, and overall software quality suffers. One of the reasons for this is that standard testing techniques are often perceived as boring and difficult when compared to creative programming and design activities, which dominate education. To make software testing education more enjoyable, we recently introduced the Code Defenders game, in which players engage with testing activities in a fun and competitive way. In this short paper, we explore the idea of using Code Defenders to systematically teach software testing concepts. We present a mapping of core developer testing concepts, such as statement or branch coverage, to categories of puzzles in the framework of the game. As players progress through levels of this game, they incrementally learn and practice testing concepts. By presenting software testing as an enjoyable activity, we hope that learners will not only acquire better testing skills, but will in the long term become better software engineers.","","978-1-5386-2671-9","10.1109/ICSE-SEET.2017.1","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7964327","software engineering education;software testing;mutation testing","Games;Education;Software;Software testing;Software engineering;Computer bugs","","30","","6","IEEE","24 Aug 2017","","","IEEE","IEEE Conferences"
"Motivation to Perform Systematic Reviews and their Impact on Software Engineering Practice","R. E. S. Santos; F. Q. B. d. Silva","Centre for Informatics (CIn), Cidade Universitária, Recife, Brasil; NA",2013 ACM / IEEE International Symposium on Empirical Software Engineering and Measurement,"12 Dec 2013","2013","","","292","295","Context: Systematic literature reviews (SLRs) are a particular type of secondary study used as the main research method in evidence based research and practice. The starting point of a SLR should be a problem from the practice and the results should, somehow, have an impact on improving practice. Objective: To investigate the motivation of software engineering researchers to conduct a SLR and how the results of their reviews are potentially impacting the software engineering practice. Method: We conducted a cross-sectional survey with authors of 120 SLRs published between 2004 and 2010 identified by three tertiary studies previously published. Results: Forty-four authors of SLR participate in the survey. The motivation behind the vast majority of the SLRs was to gather knowledge about a particular field of study. However, only six participants affirmed that their reviews actually had a direct impact in industrial practice. Conclusions: The use of SLR has increased over the years but they were mostly focused on academic problems and had very little impact on industrial practice. Therefore, the full potential benefits of evidence-based software engineering are not being achieved.","1949-3789","978-0-7695-5056-5","10.1109/ESEM.2013.36","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6681370","evidence based software engineering;systematic literature reviews;survey research;empirical software engineering","Software engineering;Context;Systematics;Industries;Software;Educational institutions;Decision making","","10","","7","IEEE","12 Dec 2013","","","IEEE","IEEE Conferences"
"Statistical techniques for software engineering practice","D. N. Card",Software Productivity Consortium,Proceedings. 26th International Conference on Software Engineering,"26 Jul 2004","2004","","","722","723","Many factors are combining to promote the use of quantitative and statistical methods by practicing software engineers. While these techniques are not new to industry in general, they are relatively new to the software industry. Consequently, there is significant uncertainty in the community about their difficulty and applicability. This paper provides an introduction to basic concepts and shows how they can be applied to help solve common software engineering problems.","0270-5257","0-7695-2163-0","10.1109/ICSE.2004.1317505","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1317505","","Software engineering;Statistical analysis;Computer industry;Control charts;Uncertainty;Quality management;Application software;Engineering management;Statistical distributions;Decision making","","4","","7","IEEE","26 Jul 2004","","","IEEE","IEEE Conferences"
"Software engineering education 2010: a challenge to educators","D. J. Frailey","Raytheon Company, Southern Methodist University, USA","17th Conference on Software Engineering Education and Training, 2004. Proceedings.","30 Mar 2004","2004","","","154","155","This panel discusses what industry needs from software engineering education programs to prepare for the next decade.","1093-0175","0-7695-2099-5","10.1109/CSEE.2004.1276527","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1276527","","Software engineering;Educational programs;Computer industry;Computer science education;Application software;Solid modeling;Certification;Software quality;Programming profession;Java","","","","","IEEE","30 Mar 2004","","","IEEE","IEEE Conferences"
"Proposing a new software cost estimation model based on artificial neural networks","I. Attarzadeh; Siew Hock Ow","Department of Software Engineering, Faculty of Computer Science & Information Technology, University of Malaya, Kuala Lumpur, Malaysia; Department of Software Engineering, Faculty of Computer Science & Information Technology, University of Malaya, Kuala Lumpur, Malaysia",2010 2nd International Conference on Computer Engineering and Technology,"17 Jun 2010","2010","3","","V3-487","V3-491","The precision of software project estimation such as project cost estimation, project quality estimation and project risk analysis are important issues in software project management. The ability to accurately estimate software development costs is required by the project managers in planning and conducting software development activities. Since software effort drivers are vague and uncertain, software effort estimates, especially in the early stages of the development life cycle. The estimates are often the least accurate, because very little detail is known about the project and the product at the beginning. The need for reliable and accurate cost predictions in software engineering is an ongoing challenge for software engineers. In this paper a novel neural network Constructive Cost Model (COCOMO) is proposed for software cost estimation. This model carries some of the desirable features of neural networks approach, such as learning ability and good interpretability, while maintaining the merits of the COCOMO model. Unlike the standard neural networks approach, the proposed model can be interpreted and validated by experts, and has good generalisation capability. The model deals effectively with imprecise and uncertain input and enhances the reliability of software cost estimates. From the experimental results, it was concluded that, by the proposed neural network model, the accuracy of cost estimation can be improved and the estimated cost can be very close to the actual cost.","","978-1-4244-6349-7","10.1109/ICCET.2010.5485840","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5485840","Software engineering;software cost estimation models;COCOMO model;soft computing techniques;artificial neural networks","Costs;Artificial neural networks;Neural networks;Software quality;Project management;Programming;Risk analysis;Software development management;Life estimation;Software engineering","","35","","14","IEEE","17 Jun 2010","","","IEEE","IEEE Conferences"
"Systematic reviews in requirements engineering: A systematic review","M. I. Babar; M. Ghazali; D. N. A. Jawawi","Department of Software Engineering, Universiti Teknologi Malaysia UTM, Johor, Malaysia; Department of Software Engineering, Universiti Teknologi Malaysia UTM, Johor, Malaysia; Department of Software Engineering, Universiti Teknologi Malaysia UTM, Johor, Malaysia",2014 8th. Malaysian Software Engineering Conference (MySEC),"18 Dec 2014","2014","","","43","48","Requirements engineering (RE) in software development life cycle is considered as a main pillar of success of a software system. RE process is used to find out the key requirements in order to develop a system as per needs of the stakeholders. The two focal points in RE process are stakeholders and requirements. Systematic literature review (SLR) is the mean of collecting evidence-based data about the key areas of a research topic and its related issues. In this paper, a study of existing SLRs on RE is conducted in order to find out the key intricacies dealt in the domain of RE. The main purpose of this study is to aggregate the knowledge in the domain of software RE as elicited in different SLRs about different RE problems.","","978-1-4799-5439-1","10.1109/MySec.2014.6985987","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6985987","software requirements engineering;software quality;systematic literature review;requirements issues;innovative directions","Software;Systematics;Software engineering;Protocols;Bibliographies;Libraries;Security","","6","","66","IEEE","18 Dec 2014","","","IEEE","IEEE Conferences"
"Collaborative Learning Model of Software Engineering using Github for informatics student","A. Zakiah; M. N. Fauzan","Department of Informatics Engineering, Widyatama University, Bandung, Indonesia; Department of Informatics Engineering, Widyatama University, Bandung, Indonesia",2016 4th International Conference on Cyber and IT Service Management,"29 Sep 2016","2016","","","1","5","Collaborative Learning Model Of Software Engineering Using Github is a learning method based on the Student-Centered Learning (SCL) that combines the collaborative method with the help of instructional media such as Github which implemented at courses of software engineering. core courses of informatics engineering study program is defined a software engineering. The outcome of this course is that students are able to apply the principles of software development. A medium is required to assist students in collaborative learning process so that the learning objectives can be achieved. GitHub is a web-based software that can be used as a medium for collaborating in the development of application software projects. Github is a source code management (SCM). Collaborative Learning Model of software engineering using Github for informatics student not only facilitate the learning process but also facilitate students to collaborate so that the learning objectives can be achieved.","","978-1-4673-8443-8","10.1109/CITSM.2016.7577521","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7577521","Collaborative Learning;Software Engineering;Github;Informtics Student","Software engineering;Collaborative work;Software;Informatics;Education;Computer architecture;Learning systems","","2","","4","IEEE","29 Sep 2016","","","IEEE","IEEE Conferences"
"Software Engineering Ethical Decision Making and Professional Responsibility","P. Oriogun; O. Akinbule; C. Ibecheozor; Z. Nyako","School of Information Technology and Communication, American University of Nigeria, Yola, Adamawa, Nigeria; School of Information Technology and Communication, American University of Nigeria, Yola, Adamawa, Nigeria; School of Information Technology and Communication, American University of Nigeria, Yola, Adamawa, Nigeria; School of Information Technology and Communication, American University of Nigeria, Yola, Adamawa, Nigeria",2012 African Conference for Sofware Engineering and Applied Computing,"16 Sep 2013","2012","","","7","14","Software systems cut across miscellaneous spheres including medicine, business, warfare and aerospace. And as thus, the actions of software engineers have a non-trivial effect on software users and stakeholders. Therefore, more than ever, software engineers are faced not only with technical adequacy of software but also with the non-technical concerns, primarily, the ethical impact of their decisions through the software development process. With accountability abounding to varied constituents, professionals are constantly faced with conflicting loyalties or decisions and must make practical and ethically grounded choices. Although, there are codes of ethics in Software Engineering to guide software engineers on ethical decision making, it is not enough because it is general. A more specific approach is necessary as well. This paper proposes to explore practical ethical decision making processes, professional responsibility of software engineering practitioners and also a solution to the generalization of the present code of ethics.","","978-0-7695-4909-5","10.1109/ACSEAC.2012.9","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6597842","Code of Ethics;Professional Responsibility;Ethical Decision Making;Software Engineer","Ethics;Software engineering;Decision making;Educational institutions;Information technology;Software systems","","2","","9","IEEE","16 Sep 2013","","","IEEE","IEEE Conferences"
"Discovering the essence of Software Engineering an integrated game-based approach based on the SEMAT Essence specification","J. Pieper","IACS - Institute of Applied Computer Science, University of Applied Sciences Stralsund, Stralsund, Germany",2015 IEEE Global Engineering Education Conference (EDUCON),"30 Apr 2015","2015","","","939","947","Software processes and Software Engineering (SE) methods belong to those knowledge areas which are challenging to be taught intuitively accessible. The specification “Kernel and Language for Software Engineering Methods (Essence)” [1] claims to deliver an approach to consolidate all essential dimensions of SE-endeavors into an universal compact and actionable kernel. This paper describes the characteristics of the Essence specification with respect to its suitability for use in academic SE education where students get introduced to the world of SE methods and software processes. To enable a deep understanding of the Essence concepts in an academic setting a suitable approach is needed. The integrated approach presented in this paper introduces students stepwise into the concepts of Essence. It lets them explore the concepts in a virtual simulated game environment and finally deploy them in real world SE endeavors. Thereby an efficient and engaging learning arrangement supports the active construction of knowledge. It encourages active exploration, enables the viewing of the learning object from different perspectives and promotes articulation and reflection in social interchange early in the learning process. Key objectives of this approach are to sensitize students for the diversity of dimensions that have to be taken into account in a SE endeavor, to provide a valuable guidance for using SE methods inside and outside of their curriculum and to enable students to transfer their newly acquired knowledge to other contexts.","2165-9567","978-1-4799-1908-6","10.1109/EDUCON.2015.7096086","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7096086","software engineering;software engineering education;software engineering practices;software engineering methods;software process;game-based learning;digital gamebased learning;simulation;software process simulation;SEMAT;Essence","Kernel;Software engineering;Context;Software systems;Engineering education;Conferences","","9","","22","IEEE","30 Apr 2015","","","IEEE","IEEE Conferences"
"Text Retrieval-Based Tagging of Software Engineering Video Tutorials","J. Escobar-Avila; E. Parra; S. Haiduc","Department of Computer Science, Florida State University, Tallahassee, FL, USA; Department of Computer Science, Florida State University, Tallahassee, FL, USA; Department of Computer Science, Florida State University, Tallahassee, FL, USA",2017 IEEE/ACM 39th International Conference on Software Engineering Companion (ICSE-C),"3 Jul 2017","2017","","","341","343","Video tutorials are an emerging form of documentation in software engineering and can efficiently provide developers with useful information needed for their daily tasks. However, to get the information they need, developers have to find the right tutorial for their task at hand. Currently, there is little information available to quickly judge whether a tutorial is relevant to a topic or helpful to the task at hand, which can lead to missing the best tutorials and wasting time watching irrelevant ones. We present the first efforts towards new tagging approaches using text retrieval that describe the contents of software engineering video tutorials, making it easier and faster to understand their purpose and contents. We also present the results of a preliminary evaluation of thirteen such approaches, revealing the potential of some and limitations of others.","","978-1-5386-1589-8","10.1109/ICSE-C.2017.121","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7965352","software engineering;video tutorials;tagging;text retrieval","Tutorials;Software engineering;Software;Tagging;YouTube;Conferences;Java","","17","","11","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"Incorporating development for mobile devices when teaching software engineering","A. Nahapetian","Computer Science Department, California State University, Northridge, USA",2013 3rd Interdisciplinary Engineering Design Education Conference,"10 Jun 2013","2013","","","49","50","This work presents a case study of incorporating projects on software and middleware development for mobile devices, into existing software engineering courses of a Computer Science curriculum. As a predominant technology among our student bodies (with smart phones and tablets), along with the growing market for Android or iPhone developers, students are yearning for opportunities to develop apps and interface with mobile devices. Here, we incorporate knowledge and practical experience with mobile systems (including app development, interfacing with research systems and off-the-shelf embedded devices) with existing software engineering courses.","","978-1-4673-5112-6","10.1109/IEDEC.2013.6526759","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6526759","Software Engineering;Mobile Systems;Body Area Networks","Software engineering;Computer science;Education;Software;Mobile communication;Mobile handsets;Mobile computing","","","","7","IEEE","10 Jun 2013","","","IEEE","IEEE Conferences"
"Everything Is Possible to Structure - Even the Software Engineering Body of Knowledge","M. Kajko-Mattsson; A. Sjögren; L. Lindbäck","School of Information and Communication Technology, KTH Royal Institute of Technology, Stockholm, Sweden; School of Information and Communication Technology, KTH Royal Institute of Technology, Stockholm, Sweden; School of Information and Communication Technology, KTH Royal Institute of Technology, Stockholm, Sweden",2017 IEEE/ACM 1st International Workshop on Software Engineering Curricula for Millennials (SECM),"3 Jul 2017","2017","","","61","67","Everything is possible to structure, even the software engineering body of knowledge. In this paper, we suggest a conceptual model of the software engineering body of knowledge. The model is a restructured version of SWEBOK and ACM/IEEE Curriculum Guidelines. It constitutes the first attempt to create an underlying structure that is common to most of the software engineering bodies of knowledge.","","978-1-5386-2795-2","10.1109/SECM.2017.5","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7964624","conceptual model of the software engineering body of knowledge;SWEBOK;knowledge areas;knowledge subareas","Software engineering;Knowledge engineering;Software systems;Standards organizations;Organizations","","2","","9","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"2nd International workshop on realizing artificial intelligence synergies in software engineering (RAISE 2013)","R. Harrison; M. Mernik; P. Henriques; D. da Cruz; T. Menzies; D. Rodriguez","Oxford Brookes University, UK; NSF, USA; West Virginia University, USA; University of Maribor, Slovenia; University of Minho, Portugal; University of Minho, Portugal",2013 35th International Conference on Software Engineering (ICSE),"26 Sep 2013","2013","","","1543","1544","The RAISE'13 workshop brought together researchers from the AI and software engineering disciplines to build on the interdisciplinary synergies which exist and to stimulate research across these disciplines. The first part of the workshop was devoted to current results and consisted of presentations and discussion of the state of the art. This was followed by a second part which looked over the horizon to seek future directions, inspired by a number of selected vision statements concerning the AI-and-SE crossover. The goal of the RAISE workshop was to strengthen the AI-and-SE community and also develop a roadmap of strategic research directions for AI and software engineering.","1558-1225","978-1-4673-3076-3","10.1109/ICSE.2013.6606778","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6606778","AI;software engineering;computational intelligence;data mining;machine learning","Artificial intelligence;Conferences;Software engineering;Educational institutions;Software;Cognition;Communities","","","","","IEEE","26 Sep 2013","","","IEEE","IEEE Conferences"
"Protocol and Tools for Conducting Agile Software Engineering Research in an Industrial-Academic Setting: A Preliminary Study","K. Biesialska; X. Franch; V. Muntés-Mulero","CA Technologies, Barcelona, Spain; Universitat Politècnica de Catalunya, Barcelona, Spain; CA Technologies, Barcelona, Spain",2018 IEEE/ACM 6th International Workshop on Conducting Empirical Studies in Industry (CESI),"27 Sep 2018","2018","","","29","32","Conducting empirical research in software engineering industry is a process, and as such, it should be generalizable. The aim of this paper is to discuss how academic researchers may address some of the challenges they encounter during conducting empirical research in the software industry by means of a systematic and structured approach. The protocol developed in this paper should serve as a practical guide for researchers and help them with conducting empirical research in this complex environment.","2575-4793","978-1-4503-5736-4","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8473423","Research Methodology;Industry Collaboration;Software Research;Empirical Studies;Empirical Software Engineering;Design Science;Action Research;Agile;Lean","Software;Collaboration;Industries;Software engineering;Companies;Tools","","","","22","","27 Sep 2018","","","IEEE","IEEE Conferences"
"Workshop on cooperative supports for distributed software engineering processes","G. Canfora; A. De Lucia","RCOST-Research Centre on Software Technology, Department of Engineering, University of Sannio, Benevento, Italy; RCOST-Research Centre on Software Technology, Department of Engineering, University of Sannio, Benevento, Italy",Proceedings 26th Annual International Computer Software and Applications,"10 Dec 2002","2002","","","1047","1048","Globally distributed software development challenges traditional techniques of software engineering and new approached to solved communication, collaboration and coordination problems are to be sought. This workshop intends to gather practitioners and researchers from academia, industry, and government, to review the current state of the practice, to report on, and to present issues and solutions in the general area of computer supported cooperative methodologies and technologies applied to software engineering processes.","0730-3157","0-7695-1727-7","10.1109/CMPSAC.2002.1045146","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1045146","","Software engineering;Software development management;Collaborative work;Open systems;Distributed computing","","","","","IEEE","10 Dec 2002","","","IEEE","IEEE Conferences"
"A Practical Model for Dynamic Software Measurement","F. Huang; Y. Yin; Z. Yao","Faculty of Software, Fujian Normal University, Fuzhou, China; School of Automation Science and Electrical Engineering, Beijing Aeronautics and Astronautics University, Beijing, China; Faculty of Software, Fujian Normal University, Fuzhou, China",2008 International Conference on Computer Science and Software Engineering,"22 Dec 2008","2008","2","","578","581","Usually, software measurement model is considered can not be used in practice; however, in this paper, we present a dynamic software measurement model, which performs very well in practice. In this model, the CPU utilization, memory occupied, threads and execution time are encapsulated into a multi-dimensional vector, viz. software state vector x; further, a state space method is incorporated to compute the software total complexity according to the relations between the state vector x and the program scale, difficulties, program structures, and development expenses. By such technique (feedback alike), the complexity of the developing software could be dynamically obtained and regulated, so that the software development life cycle and software reliability are affected by the regulated factors, recursively. A prototype has been implemented to demonstrate the feasibility of the proposed model through a funded software project. We also present the initial findings and results concerning the software project.","","978-0-7695-3336-0","10.1109/CSSE.2008.1213","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4722118","Software measurement;state space model;dynamic control","Software measurement;State-space methods;Software engineering;Aerodynamics;Performance evaluation;Vectors;Extraterrestrial measurements;Software performance;Programming;Technology management","","","","17","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Sixth international workshop on traceability in emerging forms of software engineering: (TEFSE 2011)","D. Poshyvanyk; M. Di Penta; H. Kagdi","The College of William and Mary, USA; Department of Engineering, University of Sannio, Italy; Winston-Salem State University, USA",2011 33rd International Conference on Software Engineering (ICSE),"10 Oct 2011","2011","","","1214","1215","The Sixth International Workshop on Traceability in Emerging Forms of Software Engineering (TEFSE 2011) will bring together researchers and practitioners to examine the challenges of recovering and maintaining traceability for the myriad forms of software engineering artifacts, ranging from user needs to models to source code. The objective of the 6th edition of TEFSE is to build on the work the traceability research community has completed in identifying the open traceability challenges. In particular, it is intended to be a working event focused on discussing the main problems related to software artifact traceability and propose possible solutions for such problems. Moreover, the workshop also aims at identifying key issues concerning the importance of maintaining the traceability information during software development, to further improve the cooperation between academia and industry and to facilitate technology transfer.","1558-1225","978-1-4503-0445-0","10.1145/1985793.1986052","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6032642","software evolution;software traceability","Software;Conferences;Software engineering;Educational institutions;Productivity;Documentation;Industries","","2","","7","","10 Oct 2011","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE International Standard - Systems and software engineering - Life cycle processes - Project management - Redline","",,ISO/IEC/IEEE 16326:2019(E) - Redline,"21 Feb 2020","2019","","","1","83","This document provides normative content specifications for project management plans concerned with systems, and software systems. This document also provides detailed discussion and advice on applying a set of technical management processes that are common to both the system and software life cycles as covered by ISO/IEC/IEEE 15288 and ISO/IEC/IEEE 12207 respectively. The discussion and advice are intended to aid in the preparation of the normative content of project management plans.;This document provides normative content specifications for project management plans concerned with systems, and software systems. This document also provides detailed discussion and advice on applying a set of technical management processes that are common to both the system and software life cycles as covered by ISO/IEC/IEEE 15288 and ISO/IEC/IEEE 12207 respectively. The discussion and advice are intended to aid in the preparation of the normative content of project management plans.","","978-1-5044-6506-9","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9006999","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Systems engineering and theory;Product life cycle management;Project management","","","","","","21 Feb 2020","","","IEEE","IEEE Standards"
"Open Source Software: A Source of Possibilities for Software Engineering Education and Empirical Software Engineering","L. Jaccheri; T. Osterlie","Norwegian University of Science and Technology, Norway; Norwegian University of Science and Technology, Norway",First International Workshop on Emerging Trends in FLOSS Research and Development (FLOSS'07: ICSE Workshops 2007),"16 Jul 2007","2007","","","5","5","Open source projects are an interesting source for software engineering education and research. By participating in open source projects students can improve their programming and design capabilities. By reflecting on own participation by means of an established research method and plan, master's students can in addition contribute to increase knowledge concerning research questions. In this work we report on a concrete study in the context of the Net- beans open source project. The research method used is a modification of action research.","","0-7695-2961-5","10.1109/FLOSS.2007.12","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4273076","","Software engineering;Open source software;Educational programs;Computer industry;Programming profession;Educational technology;Concrete;Knowledge engineering;Personnel;Acoustical engineering","","22","","9","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"Google Scholar vs. Dblp vs. Microsoft Academic Search: An Indexing Comparison for Software Engineering Literature","R. Fatima; A. Yasin; L. Liu; J. Wang","School of Software, Tsinghua University, Beijing, P.R.China; School of Software, Tsinghua University, Beijing, P.R.China; School of Software, Tsinghua University, Beijing, P.R.China; School of Software, Tsinghua University, Beijing, P.R.China","2020 IEEE 44th Annual Computers, Software, and Applications Conference (COMPSAC)","22 Sep 2020","2020","","","1097","1098","Background: One of the necessary conditions for any substantial research work is to synthesis the depth and the breath of the existing published literature on that topic. It is, thus, of extreme importance for a researcher to understand and look for both credible and exhaustive information sources. This first (important) step can be made significantly easier if the researcher can employ a more systematic way to extract the maximum of the literature on the topic. Objective: Essentially, the objective of this preliminary study is to rank three freely available academic search engines (Google Scholar, DBLP, Microsoft Academic Search) on the basis of the indexed Software Engineering academic literature they contain. Method: We have used a systematic mapping to conduct the study. Results: After extracting and analyzing 1067 secondary studies (from 18 tertiary studies), we have concluded that Google Scholar has indexed 98.96%, DBLP has indexed 93.43%, and Microsoft Academic Search engine has indexed 97.46% of the secondary studies. Thus, this implies that Google Scholar and Microsoft Academic Search might be a better-suited option for searching for secondary studies.","0730-3157","978-1-7281-7303-0","10.1109/COMPSAC48688.2020.0-122","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9202826","Search Engines;Google Scholar;dblp;Microsoft Academic Search;Software Engineering;Indexing;Tertiary Study;Mapping Study","Google;Systematics;Software engineering;Software;Bibliographies;Search engines;Indexing","","1","","5","IEEE","22 Sep 2020","","","IEEE","IEEE Conferences"
"Current and Future Bots in Software Development","L. Erlenhov; F. Gomes de Oliveira Neto; R. Scandariato; P. Leitner","Software Engineering Division, University of Gothenburg Chalmers, Gothenburg, Sweden; Software Engineering Division, University of Gothenburg Chalmers, Gothenburg, Sweden; Software Engineering Division, University of Gothenburg Chalmers, Gothenburg, Sweden; Software Engineering Division, University of Gothenburg Chalmers, Gothenburg, Sweden",2019 IEEE/ACM 1st International Workshop on Bots in Software Engineering (BotSE),"5 Sep 2019","2019","","","7","11","Bots that support software development (""DevBots"") are seen as a promising approach to deal with the ever-increasing complexity of modern software engineering and development. Existing DevBots are already able to relieve developers from routine tasks such as building project images or keeping dependencies up-to-date. However, advances in machine learning and artificial intelligence hold the promise of future, significantly more advanced, DevBots. In this paper, we introduce the terminology of contemporary and ideal DevBots. Contemporary DevBots represent the current state of practice, which we characterise using a facet-based taxonomy. We exemplify this taxonomy using 11 existing, industrial-strength bots. We further provide a vision and definition of future (ideal) DevBots, which are not only autonomous, but also adaptive, as well as technically and socially competent. These properties may allow ideal DevBots to act more akin to artificial team mates than simple development tools.","","978-1-7281-2262-5","10.1109/BotSE.2019.00009","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8823643","Software Bot, Taxonomy, Sotware Engineering","Taxonomy;Task analysis;Bot (Internet);Software;Artificial intelligence;Tools;Software engineering","","43","","15","IEEE","5 Sep 2019","","","IEEE","IEEE Conferences"
"Comparative analysis of software engineering paradigms","A. Verma; I. Kaur; N. Arora","CGC Landran, Mohali, INDIA; CGC Landran, Mohali, INDIA; Chandigarh University, Mohali, INDIA",2016 3rd International Conference on Computing for Sustainable Global Development (INDIACom),"31 Oct 2016","2016","","","994","999","In today's computer domain, the world has fast become a global village. The amalgamation of fast processing computers, high storage hardware and effective automated software with the basis of interlinked network has been working like a huge web connections for all kinds of activities. Software crisis paved way to agile technologies in software engineering. The basic objective remains development of good quality software within specified budgets and within limited time constraints. Thus began the improvised form of various approaches like object oriented concept, component based development and reengineering. These paradigms find suitability according to the requirement of the specific application in question. This paper provides a comparative analysis of all current state-of the-art approaches of software engineering.","","978-9-3805-4421-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7724411","Agile Technologies;Components based software engineering;Reverse Engineering;Software Development Life Cycle;Software Engineering","Software;Object oriented modeling;Software engineering;Biological system modeling;Maintenance engineering;Testing;Computational modeling","","","","24","","31 Oct 2016","","","IEEE","IEEE Conferences"
"Process models in the development of aerospace embedded software","W. Zhang; X. Jing","Institute of Information Engineering, China Academy of Aerospace Systems Science and Engineering, Beijing, China; Institute of Information Engineering, China Academy of Aerospace Systems Science and Engineering, Beijing, China",2015 8th International Conference on Biomedical Engineering and Informatics (BMEI),"11 Feb 2016","2015","","","700","704","In order to solve the problems existing during the development of aerospace real-time embedded software, the process models of software development based on software engineering are studied and a set of methodology is put forward to support the basic steps and each stage of embedded software design. And an aerospace real-time embedded software developing platform based on this methodology is realized. This platform is now in the using stage of the project.","","978-1-5090-0022-7","10.1109/BMEI.2015.7401593","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7401593","software engineering;process model;methodology;embedded software;software development platform","Analytical models;Embedded software;Data models;Aerospace engineering;Software systems;Dictionaries","","","","5","IEEE","11 Feb 2016","","","IEEE","IEEE Conferences"
"Problem Oriented Software Engineering: Solving the Package Router Control Problem","J. Hall; L. Rapanotti; M. Jackson","Centre for Research in Computing, Open University, Milton Keynes, UK; Centre for Research in Computing, Open University, Milton Keynes, UK; Centre for Research in Computing, Open University, Milton Keynes, UK",IEEE Transactions on Software Engineering,"31 Mar 2008","2008","34","2","226","241","Problem Orientation is gaining interest as a way of approaching the development of software intensive systems and yet a significant example that explores its use is missing from the literature. In this paper, we present the basic elements of Problem Oriented Software Engineering (POSE) which aims to bring both non-formal and formal aspects of software development together in a single framework. We provide an example of a detailed and systematic POSE development of a software problem, that of designing the controller for a package router. The problem is drawn from the literature, but the analysis presented here is new. The aim of the example is twofold: to illustrate the main aspects of POSE and how it supports software engineering design, and to demonstrate how a non-trivial problem can be dealt with by the approach.","1939-3520","","10.1109/TSE.2007.70769","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4384506","Software Engineering;Requirements/Specifications;Methodologies;Software Engineering;Requirements/Specifications;Methodologies","Software engineering;Software packages;Packaging;Programming;Control systems;Software design;Hardware;Humans;Computer Society;Software systems","","46","","39","IEEE","31 Mar 2008","","","IEEE","IEEE Journals"
"Formal concept analysis in software engineering","P. Tonella","ITC-irst, Centro per la Ricerca Scientifica e Tecnologica, Trento, Italy",Proceedings. 26th International Conference on Software Engineering,"26 Jul 2004","2004","","","743","744","Given a binary relationship between objects and attributes, concept analysis is a powerful technique to organize pairs of related sets of objects and attributes into a concept lattice, where higher level concepts represent general features shared by many objects, while lower level concepts represent the object-specific features. Concept analysis was recently applied to several software engineering problems, such as: restructuring the code into more cohesive components, identifying class candidates, locating features in the code by means of dynamic analysis, reengineering class hierarchies. This paper provides the background knowledge required by such applications. Moreover, the methodological issues involved in the different applications of this technique are considered by giving a detailed presentation of three of them: module restructuring, design pattern inference and impact analysis based on decomposition slicing. The paper is concluded by an overview on other kinds of applications.","0270-5257","0-7695-2163-0","10.1109/ICSE.2004.1317515","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1317515","","Software engineering;Application software;Lattices;Software systems;Pattern analysis;Software maintenance;Information analysis;Books","","13","","8","IEEE","26 Jul 2004","","","IEEE","IEEE Conferences"
"Software engineering or soft engineering?","K. Robinson; P. Ho","School of CS&E, University of New South Wales, Sydney, NSW, Australia; School of CS&E, University of New South Wales, Sydney, NSW, Australia",2011 24th IEEE-CS Conference on Software Engineering Education and Training (CSEE&T),"16 Jun 2011","2011","","","459","466","The conflict raised by the title of this paper is familiar and may be considered too well worn to continue discussing? On the contrary, the fact that there is no serious resolution of this specific aspect of Software Engineering - despite many advances in software and software tools - suggests to these authors, both from general concern for the implications for the discipline as well as even greater concern for the teaching of software engineering students, that it is worth pursuing. The paper discusses the topic in general and also with particular reference to curricula. Experience in the School of Computer Science and Engineering at UNSW including attempts to address this problem are discussed.","2377-570X","978-1-4577-0348-5","10.1109/CSEET.2011.5876125","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5876125","","Software engineering;Software;Programming;Educational institutions;Context;Bridges","","1","","9","IEEE","16 Jun 2011","","","IEEE","IEEE Conferences"
"GSD Sim: A Global Software Development Game","J. Noll; A. Butterfield; K. Farrell; T. Mason; M. McGuire; R. McKinley","Lero, the Irish Software Engineering Research Centre, University of Limerick, Ireland; Trinity College Dublin, Ireland; Trinity College Dublin, Ireland; Trinity College Dublin, Ireland; Trinity College Dublin, Ireland; Trinity College Dublin, Ireland",2014 IEEE International Conference on Global Software Engineeering Workshops,"29 Sep 2014","2014","","","15","20","Context: Software development is often characterised as a ""wicked problem"" due to changing requirements and the realization that the problem to be solved is not really understood until a solution is created. global software development (GSD) introduces a host of additional complexities to software development as a result of global distance (geographic separation, timezone differences, and language and cultural gaps). Problem: A common approach to teaching software engineering concepts is to have students form teams to create a software product, this allow them to experience the problems first hand. However, this approach is much more difficult for GSD, due to the need to have distributed project teams. Approach: We developed a serious game, called ""GSD Sim"", that allows players to manage a globally distributed software project. Players allocate teams of programmers to different locations around the world, and assign these teams to develop modules that comprise the software product. A simulator generates events, such as integration failures or requirements misunderstandings that cause project delays, players can make tactical and strategic interventions to address and prevent adverse events. Result: GSD Sim allows students to experience the difficulties involved in GSD from a project manager's point of view, in a much shorter time and at lower cost than a real global software development project. The game is also entertaining in its own right. Conclusion: GSD Sim has the potential to reinforce conceptual instruction with hands-on learning at a fraction of the time and cost that would be required to run a true distributed software project.","2329-6313","978-1-4799-5206-9","10.1109/ICGSEW.2014.12","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6912080","Global Software Engineering;Serious Games;Simulation","Software;Games;Software engineering;Education;Cultural differences;Delays;Global communication","","6","","12","IEEE","29 Sep 2014","","","IEEE","IEEE Conferences"
"On the Meeting of Software Architecture and Reverse Engineering","E. Chikofsky","Northeastern University, Boston, USA",5th Working IEEE/IFIP Conference on Software Architecture (WICSA'05),"24 Apr 2006","2005","","","17","24","This year, the 12th Working Conference on Reverse Engineering (WCRE) is meeting in conjunction with the 5th IEEE/IFIP Working Conference on Software Architecture (WICSA) in Mellon University. However, that linking phrase ""in conjunction with"" does not do justice to the vision, discussions, creativity, and effort that have brought us here.","","0-7695-2548-2","10.1109/WICSA.2005.48","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1620087","","Software architecture;Reverse engineering;Software engineering;Meetings;Software systems;Minutes;Research and development management;Joining processes;Computer architecture;Collaborative software","","1","","1","IEEE","24 Apr 2006","","","IEEE","IEEE Conferences"
"Changing conditions for undergraduate software engineering programs","G. W. Hislop; M. J. Lutz; D. A. Umphress; R. Vaughn","Drexel University, USA; Rochester Institute of Technology, USA; Mississippi State University, USA; Aubum University, USA",Proceedings 15th Conference on Software Engineering Education and Training (CSEE&T 2002),"7 Aug 2002","2002","","","230","232","","1093-0175","0-7695-1515-0","10.1109/CSEE.2002.995217","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=995217","","Software engineering;Educational programs;Accreditation;Licenses;Engineering management","","","","","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Human Values in Software Engineering: Contrasting Case Studies of Practice","W. Hussain; H. Perera; J. Whittle; A. Nurwidyantoro; R. Hoda; R. A. Shams; G. Oliver","Faculty of Infrmation Technology, Monash University, Clayton, VIC, Australia; Faculty of Infrmation Technology, Monash University, Clayton, VIC, Australia; Faculty of Infrmation Technology, Monash University, Clayton, VIC, Australia; Faculty of Infrmation Technology, Monash University, Clayton, VIC, Australia; Faculty of Infrmation Technology, Monash University, Clayton, VIC, Australia; Faculty of Infrmation Technology, Monash University, Clayton, VIC, Australia; Faculty of Infrmation Technology, Monash University, Clayton, VIC, Australia",IEEE Transactions on Software Engineering,"16 May 2022","2022","48","5","1818","1833","The growing diffusion of software in society and its influence on people demands from its creators that their work carefully considers human values such as transparency, social responsibility, and equality. But how do software practitioners address human values in software engineering practice? We interviewed 31 software practitioners from two organizations, each having a strong values framework, with the aim to understand: (a) practitioners’ perceptions of human values and their role in software engineering; (b) practices that practitioners use to address human values in software; and (c) challenges they face during this process. We report our findings from two contrasting case organizations on how practitioners “engineer” values in their unique organizational settings. We found evidence that organizational culture significantly contributes to how values are addressed in software. We summarize recommendations from the practitioners to support proactive engineering of values-conscious software.","1939-3520","","10.1109/TSE.2020.3038802","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9261980","Engineering human values;software engineering;human values in software practice;challenges in human values;case studies of practice;ethics;responsible innovations;non-functional requirements","Software;Software engineering;Privacy;Security;Companies;Human factors;Artificial intelligence","","28","","73","IEEE","17 Nov 2020","","","IEEE","IEEE Journals"
"What makes it hard to design instructional software? Towards a collaborative platform for stakeholders of instructional software","S. Chimalakonda; K. V. Nori","Software Engineering Research Laboratory, International Institute of Information Technology Hyderabad, Hyderabad, India; Software Engineering Research Laboratory, International Institute of Information Technology Hyderabad, Hyderabad, India",2012 5th International Workshop on Co-operative and Human Aspects of Software Engineering (CHASE),"25 Jun 2012","2012","","","15","19","People and communication between them is often ignored in software engineering even though they are crucial to the success or failure of a software project. During the life cycle of software, there is communication, cooperation and collaboration (C3) between a wide range of diversified stakeholders ranging from management team to maintenance team. We believe that the lack of emphasis on improving C3 is often the major cause for software failures. In this paper, we summarize four and half years of our experience of a analyzing a decade-long instructional software for adult literacy developed by 9 different teams spread across 9 different locations following 9 varied processes. We present the different kinds of stakeholders that we came across during this analysis and present the challenges of C3 in that context. We then present the initial facets of our solution from three major dimensions (i) designing a unifying modeling language for improving stakeholder C3 (ii) modeling information for multiple stakeholders using various modes of rendering at multiple levels of granularity (iii) harnessing the power of social networking to improve C3 among all stakeholders.","","978-1-4673-1824-2","10.1109/CHASE.2012.6223013","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6223013","instructional software;collaborative platform;stakeholder communication;cooperation;collaboration;modeling language;social networking","Software;Social network services;Unified modeling language;Collaboration;Electronic learning;Software engineering;Programming","","1","","20","IEEE","25 Jun 2012","","","IEEE","IEEE Conferences"
"GQM^+ Strategies -- Aligning Business Strategies with Software Measurement","V. Basili; J. Heidrich; M. Lindvall; J. Munch; M. Regardie; A. Trendowicz","Fraunhofer Center for Experimental Software Engineering, College Park, MD, USA; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Fraunhofer Center for Experimental Software Engineering, College Park, MD, USA; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Fraunhofer Center for Experimental Software Engineering, College Park, MD, USA; Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany",First International Symposium on Empirical Software Engineering and Measurement (ESEM 2007),"15 Oct 2007","2007","","","488","490","GQM+Strategies is a measurement approach that builds on the well-tested GQM approach to planning and implementing software measurement. Although GQM has proven itself useful in a variety of industrial settings, one recognized weakness is the difficulty for GQM users to link software measurement goals to higher-level goals of the organization in which the software is being developed. This linkage is important, as it helps to justify software measurement efforts and allows measurement data to contribute to higher-level decisions. GQM+strategies provides mechanisms for explicitly linking software measurement goals, to higher-level goals for the software organization, and further to goals and strategies at the level of the entire business.","1949-3789","978-0-7695-2886-1","10.1109/ESEM.2007.66","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4343788","","Software measurement;Programming;Software engineering;Joining processes;Computer industry;Educational institutions;Software quality;Strategic planning;Couplings;Embedded software","","40","","7","IEEE","15 Oct 2007","","","IEEE","IEEE Conferences"
"Measuring Team Members’ Contributions in Software Engineering Projects using Git-driven Technology","R. M. Parizi; P. Spoletini; A. Singh","Department of Software Engineering and Game Development, Kennesaw State University, Marietta, GA, USA; Department of Software Engineering and Game Development, Kennesaw State University, Marietta, GA, USA; Department of Software Engineering and Game Development, Kennesaw State University, Marietta, GA, USA",2018 IEEE Frontiers in Education Conference (FIE),"7 Mar 2019","2018","","","1","5","Software engineering is inherently a human-centric and collaborative process and this reflects in its teaching programs, as most of the courses comprise projects and team efforts. In order to fairly evaluate students, there is the problem of quantifying the amount of work contributed to the team development project by each of its members. Most commonly, in order to estimates student contributions, instructors use arbitrary and subjective judgment derived from observations and evaluations. The currently used process is not a complete picture and is time consuming since it requires numerous observations and extensive paperwork's review. Emerging decentralized systems (such as git) and their widespread applications in all realms of development which capitalize on team-aware metrics, are worthwhile and can provide a solution to the problem. In this work we support a solution that utilizes git-driven technology, and its related features, to measure a team member's contributions objectively, based not only upon the completion of the project, but also at any time during progression development. Such performance assessment could generate more productive team-based learning with higher-quality graduates for better meeting software industry's expectations.","2377-634X","978-1-5386-1174-6","10.1109/FIE.2018.8658983","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8658983","Software engineering education;Team performance measurement;Team-based learning;Contribution metrics;Git technology","Software engineering;Data mining;Software;Tools;Encoding;Time measurement","","17","","17","IEEE","7 Mar 2019","","","IEEE","IEEE Conferences"
"The Design of the Software Engineering Education Platform","N. Li; Q. Liang; Z. -p. Zhang","Computer School, Beijing Information Science and Technology University, Beijing, China; Computer School, Beijing Information Science and Technology University, Beijing, China; Computer School, Beijing Information Science and Technology University, Beijing, China",2010 Second International Workshop on Education Technology and Computer Science,"6 May 2010","2010","1","","781","784","Combining with the ""software project practice"", a software engineering education course, the design discipline and design technique of education platform for this course is introduced in detail. Built on the open source platform of Eclipse, this platform integrates effectively the project management tool, configuration management tool, requirement tool, development tool and document tool together, and realizes the sharing and integration of information by establishing the configuration base and information base. Moreover, it can be combined with the training cases to support various development activities and methods.","","978-1-4244-6389-3","10.1109/ETCS.2010.104","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5459659","software tools;project management;training platform;software engineering","Software design;Software engineering;Educational technology;Information science;Computer science education;Project management;Management training;Software tools;Programming;Software quality","","2","","4","IEEE","6 May 2010","","","IEEE","IEEE Conferences"
"The co-evolution of socio-technical structures in sustainable software development: Lessons from the open source software communities","M. S. Zanetti","ETH Zurich, Switzerland",2012 34th International Conference on Software Engineering (ICSE),"28 Jun 2012","2012","","","1587","1590","Software development depends on many factors, including technical, human and social aspects. Due to the complexity of this dependence, a unifying framework must be defined and for this purpose we adopt the complex networks methodology. We use a data-driven approach based on a large collection of open source software projects extracted from online project development platforms. The preliminary results presented in this article reveal that the network perspective yields key insights into the sustainability of software development.","1558-1225","978-1-4673-1067-3","10.1109/ICSE.2012.6227030","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6227030","complex networks;statistical physics;social networks;software dependency graphs;open source software;free software;quantitative analysis;mining software repositories","Software;Programming;Complex networks;Measurement;Software engineering;Communities;Collaboration","","10","","15","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"Software engineering education: The gap between industry's requirements and graduates' readiness","N. E. A. M. Almi; N. A. Rahman; D. Purusothaman; S. Sulaiman","School of Computer Sciences, Universiti Sains Islam Malaysia, Penang, Malaysia; School of Computer Sciences, Universiti Sains Islam Malaysia, Penang, Malaysia; School of Computer Sciences, Universiti Sains Islam Malaysia, Penang, Malaysia; School of Computer Sciences, Universiti Sains Islam Malaysia, Penang, Malaysia",2011 IEEE Symposium on Computers & Informatics,"21 Jul 2011","2011","","","542","547","Software engineering is one of the most demanding jobs in software industry nowadays and its demand keeps on increasing. However, there are several issues arise with regard to readiness of Information Technology (IT) or Computer Science (CS) graduates from the point of views of software industry. This perspective causes the supply of graduates mainly in software engineering field seems to be insufficient. The industry claims that the software engineering graduates are not able to meet their requirements in software industry. This is really surprising to the academia that offers software engineering specialisation or related programmes in IT or CS field. This phenomenon creates the gap between industry's requirements and graduates' readiness which indirectly reflects the gap between software engineering education and industry. A number of studies and frameworks are available to ponder the issues on software engineering education and industry. This paper reports the gap between industry's requirements and graduates' readiness in software engineering perspectives to face the real world. From the findings, we conclude that there is a gap due to high demands from the industry in highly skilled fresh graduates. In contrast, future graduates are still lack of confidence and readiness though they specialise in software engineering field that has more job opportunities in IT or CS field.","","978-1-61284-691-0","10.1109/ISCI.2011.5958974","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5958974","Software Engineering Education;Software Engineering Industry;Industry's Requirement;Graduates' Readiness","Industries;Software engineering;Industrial training;Software;Face;Companies","","26","","18","IEEE","21 Jul 2011","","","IEEE","IEEE Conferences"
"Enriching Traditional Software Engineering Curricula with Software Project Management Knowledge","A. M. Moreno; M. -I. Sánchez-Segura; F. Medina-Domínguez; L. Peters; J. Araujo","Technical University of Madrid, Spain; Carlos III University Madrid; Software Consultants International, Washington, USA; Tomtom, Amsterdam, The Netherlands; Technical University of Madrid, Spain",2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C),"23 Mar 2017","2016","","","404","411","Training existing and future software project managers presents a challenge to the academic community. Software project management is usually taught as part of software engineering bachelor or master programs which are generally based on SWEBOK. However, evidence shows that even when SWEBOK provides some software project management knowledge it is not enough to satisfy the software industry requirements. On the other hand, the Software Extension to the PMBOK Guide was recently published. The extension complements the original PMBOK with software specific contents, so it constitutes valuable referential information for software project managers. This paper describes a smooth transition to enrich our traditional software engineering curricula based on SWEBOK with specific software project management knowledge. To that end, we identify which software project management knowledge suggested by the Software Extension to the PMBOK provides special added value to the SWEBOK contents. The results can be useful for academia but also for software engineering practitioners that can identify training opportunities to complement their SWEBOK background.","","978-1-4503-4205-6","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7883326","","Software;Project management;Software engineering;Knowledge engineering;Training;Stakeholders;Organizations","","","","27","","23 Mar 2017","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE International Approved Draft Standard - Systems and Software Engineering - Life Cycle Processes - Risk Management","",,"ISO/IEC/IEEE P16085/ FDIS, August 2020","14 Oct 2020","2020","","","1","60","","","978-1-5044-7128-2","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9224256","","IEEE Standards;IEC Standards;ISO Standards;Software engineering;Product life cycle management;Risk management;Systems engineering and theory","","","","","","14 Oct 2020","","","IEEE","IEEE Standards"
"Modular verification of software components in C","S. Chaki; E. M. Clarke; A. Groce; S. Jha; H. Veith","School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA; School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA; School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA; Computer Sciences Department, University of Wisconsin, Madison, WI, USA; Institut fuer Informatik (I7), Technische Universität München, Garching, Germany",IEEE Transactions on Software Engineering,"9 Aug 2004","2004","30","6","388","402","We present a new methodology for automatic verification of C programs against finite state machine specifications. Our approach is compositional, naturally enabling us to decompose the verification of large software systems into subproblems of manageable complexity. The decomposition reflects the modularity in the software design. We use weak simulation as the notion of conformance between the program and its specification. Following the counterexample guided abstraction refinement (CEGAR) paradigm, our tool MAGIC first extracts a finite model from C source code using predicate abstraction and theorem proving. Subsequently, weak simulation is checked via a reduction to Boolean satisfiability. MAGIC has been interfaced with several publicly available theorem provers and SAT solvers. We report experimental results with procedures from the Linux kernel, the OpenSSL toolkit, and several industrial strength benchmarks.","1939-3520","","10.1109/TSE.2004.22","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1321061","Software engineering;formal methods;verification.","Software engineering;Programming;Protocols;Automata;Software systems;Software design;Linux;Kernel;Unified modeling language;Visualization","","145","3","60","IEEE","9 Aug 2004","","","IEEE","IEEE Journals"
"A unified framework for software engineering process improvement — A taxonomy comparative analysis","A. A. Rahman; S. Sahibuddin; S. Ibrahim","Software Engineering Section, MIIT, Universiti Kuala Lumpur, Kuala Lumpur, Malaysia; Faculty of Computer Science & Information Systems, Universiti Teknologi Malaysia, Johor, Malaysia; Faculty of Computer Science & Information Systems, Universiti Teknologi Malaysia, Johor, Malaysia",2011 Malaysian Conference in Software Engineering,"26 Jan 2012","2011","","","153","158","Concurrent adoption of software engineering process improvement frameworks have been widely practiced by the software organizations. The software development organizations leverage these frameworks to better address process improvement challenges. This paper develops an integrated framework for software engineering process improvement practices and unifies the theories in process definition and establishment. The unified framework provides a set of formal descriptions for software engineering process improvement frameworks. Requirements and architectures for software engineering process improvement frameworks are investigated. The main challenge in the integration is the interoperability of the frameworks. Inaccurate integration approach results in inefficiency of the integration process. Common interoperability issues in the integration of current process models and methodologies are addressed. In addition to this, omissions, differences and gaps can be identified and further examined for development of new unified framework. Taxonomy for software engineering process framework is used to support the understanding and comparison of diverse software quality frameworks. The taxonomy should be based on discipline-specific framework. Besides, other alternative approaches for comparing the software engineering process improvement framework are presented. The research outcome is expected to identify the structural relationships among the frameworks. Derivation from the taxonomy includes characteristics and categories of attributes tailored to the discipline-specific framework.","","978-1-4577-1531-0","10.1109/MySEC.2011.6140661","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6140661","software engineering process improvement;process improvement framework;unified process;taxonomy;software quality","ISO standards;IEC standards;Software engineering;Software;Organizations;Taxonomy;Process control","","4","","39","IEEE","26 Jan 2012","","","IEEE","IEEE Conferences"
"Seventh international workshop on software engineering for secure systems: (SESS 2011)","S. -W. Lee; M. Monga; J. Jurjens","Department of Computer Science and Engineering, University of Nebraska-Lincoln, Lincoln, NE, USA; Dipartimento Informatica e Comunicazione, Università degli Studi di Milano, Milan, Italy; Department of Computer Science, TU Dortmund, Dortmund, Germany",2011 33rd International Conference on Software Engineering (ICSE),"10 Oct 2011","2011","","","1200","1201","The 7th edition of the SESS workshop aims at providing a venue for software engineers and security researchers to exchange ideas and techniques. In fact, software is at core of most of the business transactions and its smart integration in an industrial setting may be the competitive advantage even when the core competence is outside the ICT field. As a result, the revenues of a firm depend directly on several complex software-based systems. Thus, stakeholders and users should be able to trust these systems to provide data and elaborations with a degree of confidentiality, integrity, and availability compatible with their needs. Moreover, the pervasiveness of software products in the creation of critical infrastructures has raised the value of trustworthiness and new efforts should be dedicated to achieve it. However, nowadays almost every application has some kind of security requirement even if its use is not to be considered critical.","1558-1225","978-1-4503-0445-0","10.1145/1985793.1986045","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6032635","information security;secure systems;software engineering","Security;Software engineering;Conferences;Educational institutions;Software;Context;Computer science","","","","10","","10 Oct 2011","","","IEEE","IEEE Conferences"
"Industry Voices on Software Engineering Challenges in Cyber-Physical Production Systems Engineering","K. Feichtinger; K. Meixner; F. Rinker; I. Koren; H. Eichelberger; T. Heinemann; J. Holtmann; M. Konersmann; J. Michael; E. -M. Neumann; J. Pfeiffer; R. Rabiser; M. Riebisch; K. Schmid","LIT Cyber-Physical Systems Lab, Johannes Kepler University, Linz, Austria; CDL SQI, Institute of Information Systems Engineering, Technische Universität, Wien, Austria; CDL SQI, Institute of Information Systems Engineering, Technische Universität, Wien, Austria; Chair of Process and Data Science, RWTH Aachen University, Germany; Software Systems Engineering, Institute of Computer Science, University of Hildesheim, Germany; Institute for Control Engineering of Machine Tools and Manufacturing Units, University of Stuttgart, Germany; Department of Computer Science and Engineering, Chalmers | University of Gothenburg, Sweden; Institute for Software Technology, University of Koblenz-Landau, Germany; Software Engineering, RWTH Aachen University, Germany; Institute of Automation and Information Systems, Technical University of Munich, Germany; Institute for Control Engineering of Machine Tools and Manufacturing Units, University of Stuttgart, Germany; LIT Cyber-Physical Systems Lab, Johannes Kepler University, Linz, Austria; Software Development and Software Construction Methods, Universität Hamburg, Germany; Software Systems Engineering, Institute of Computer Science, University of Hildesheim, Germany",2022 IEEE 27th International Conference on Emerging Technologies and Factory Automation (ETFA),"25 Oct 2022","2022","","","1","8","Cyber-Physical Production Systems (CPPSs) are envisioned as next-generation adaptive production systems combining modern production techniques with the latest information technology. A CPPS creates a complex environment between different domains (mechanical, electrical, software engineering), requiring multidisciplinary solutions to tackle growing complexity issues and reduce (maintenance) effort. Software plays an increasingly important role in assuring an effective and efficient operation of CPPSs. However, software engineering methods applied for CPPSs seem to lag behind modern software engineering methods, where tremendous progress has been made in the last years. We initiated the Software Engineering in Cyber-Physical Production Systems Workshop (SECPPS-WS) to analyze and overcome this gap. After two instances with mostly academic participants, we conducted a full-day workshop with nine industry representatives from eight companies that develop and maintain CPPSs. Each industry representative presented their current work and challenges. We collected these challenges and condensed a categorized list of challenges backed by industry statements and literature. This paper presents the resulting list and pointers to (partial) solutions to offer guidance for academia and identify promising research opportunities in this area.","","978-1-6654-9996-5","10.1109/ETFA52439.2022.9921568","Ministry of Education; Ministry of Economic Affairs; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9921568","Digital Transformation;CPPS Engineering;Research Challenges","Industries;Production systems;Conferences;Companies;Maintenance engineering;Software;Complexity theory","","18","","59","IEEE","25 Oct 2022","","","IEEE","IEEE Conferences"
"The analysis of CASE tools to the efficiency of software developmen","Y. Li; C. Ye","Mathematics and Computer Science Department, Hengshui University, Hengshui, China; Mathematics and Computer Science Department, Hengshui University, Hengshui, China",Proceedings of 2011 International Conference on Electronic & Mechanical Engineering and Information Technology,"19 Sep 2011","2011","1","","67","69","Through the analysis of CASE Tools to the efficiency of software development, it has proven effectively that a high degree of automation is achieved in software development by using CASE Tools. Meanwhile, it can shorten software development cycle, increase the time of upstream cycle, reduce the software development costs and the risk of the project, improve the system operational efficiency and the system maintainability, etc.","","978-1-61284-088-8","10.1109/EMEIT.2011.6022840","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6022840","Computer Aided Software Engineering;Software Engineering;Data Model;Reverse Engineering","Computer aided software engineering;Programming;Data models;Encoding;Software;System analysis and design","","1","","5","IEEE","19 Sep 2011","","","IEEE","IEEE Conferences"
"The Software Factory: combining undergraduate computer science and software engineering education","J. D. Tvedt; R. Tesoriero; K. A. Gary","Department of EE & Contputer Science, Catholic University of America, Washington D.C., DC, USA; Experimental Software Engineering,Fraunhofer Center for Experimental Software Engineering, CUA, College Park, MD, USA; UNICON, Inc., Chandler, AZ, USA",Proceedings of the 23rd International Conference on Software Engineering. ICSE 2001,"7 Aug 2002","2001","","","633","642","Industry often complains that current university curricula fail to address the practical issues of real software development. This paper outlines a proposal for an innovative core curriculum for a Bachelor of Science in computer science. The proposed core curriculum contains elements of traditional computer science programs combined with software engineering via a team-oriented, hands-on approach to large-scale software development. In addition to traditional lecture/project/exam courses, students are required to take an eight-semester sequence of ""Software Factory"" courses. Software Factory courses put the students' newly acquired skills to work in a real software organization staffed and managed by all students in the program. Students from all courses in the Software Factory sequence meet simultaneously to fulfil their roles in the software organization. We expect the students will be better-prepared software engineering practitioners after completing a curriculum that combines traditonal courses with practical Software Factory experience.","0270-5257","0-7695-1050-7","10.1109/ICSE.2001.919137","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=919137","","Production facilities;Computer science;Software engineering;Computer science education;Educational institutions;Computer industry;Software quality;Large-scale systems;Programming;Industrial training","","20","","16","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Software Engineering Education in India: Issues and Challenges","K. Garg; V. Varma","International Institute of Information Technology, Hyderabad, India; International Institute of Information Technology, Hyderabad, India",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","110","117","Indian software industry has set up huge growth targets for future. These targets would be heavily affected by the software engineering (SE) education scenario in the country. The purpose of this paper is to provide a holistic understanding of SE education issues and challenges specific to Indian context, from both industry and academic perspective. This study is based on our (a) interaction with industry through SE education related projects, surveys and discussions. (B) Observations as an integral part of Indian SE educators' community. There is an urgent need for addressing these deep rooted issues, as the lack of proper SE education may be the single largest factor that may negatively affect the industry. Understanding these issues will help to identify the action items that initiate software engineering educational reforms in the country. We also discuss the essential and minimal set of SE knowledge, skills and dispositions that the Indian industry expects from engineers who will be joining the industry. Indian software industry is a global leader in software application development and maintenance services, but there very few studies on the issues and effects associated with SE education in the Indian context. Though this discussion is limited to India, but we believe that it represents the existing conditions in many developing countries where IT and ITES (IT enabled services) industry is gaining importance.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.36","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556956","Software Engineering education;India Industry","Software engineering;Industrial training;Computer industry;Software maintenance;Management training;Information technology;Knowledge engineering;Application software;Context-aware services;Educational programs","","14","","13","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"A Formal Definition of Software Testing Based on Fuzzy Measure","Z. He; C. Liu; H. Yan; H. He","School of Computer Science and Technology, Beihang University, Beijing, China; School of Computer Science and Technology, Beihang University, Beijing, China; School of Computer Science and Technology, Beihang University, Beijing, China; Computer School, North-western Polytechnic University, Xi'an, China",2013 Fourth World Congress on Software Engineering,"27 Mar 2014","2013","","","59","63","Software systems are faced with serious dependability crisis. It brings out a series of software dependability related research areas and the trusted software testing process is one of the core issues. In order to conduct the trusted software testing research, a high priority issue to be solved is how to create a formal model of software testing describing the nature of software testing and then to provide a theoretical basis for the related studies. In the paper, a study was started from the essence of software testing, with a series of formal definitions such as software features, software requirements, software use-case set, software test requirements and software test case set, and with the definitions of four basic activities of a software testing process, a formal definition of software testing was proposed based on the fuzzy measure concept, with which test execution is expressed as a fuzzy truth degree measure to a proposition in a certain domain. As a result, the formal definition provides a new approach to study software testing with highlighting the nature and essence of it, and also provides a theoretical model for the subsequent research on the evolution of software testing quality and software testing dependability.","","978-1-4799-2883-5","10.1109/WCSE.2013.13","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6754263","software testing;formal definition;fuzzy measure;trusted software;dependability of software testing","Software testing;Software measurement;Educational institutions;Software systems;Software engineering","","1","","5","IEEE","27 Mar 2014","","","IEEE","IEEE Conferences"
"The Role of Semiotic Engineering in Software Engineering","V. Abdelzad; T. C. Lethbridge; M. Hosseini","School of Electrical Engineering and Computer Science, University of Ottawa, Ottawa, Ontario, Canada; University of Ottawa Faculty of Medicine, Ottawa, ON, CA; Faculty of Science and Technology, Bournemouth University, Poole, United Kingdom",2016 IEEE/ACM 5th International Workshop on Theory-Oriented Software Engineering (TOSE),"9 Jan 2017","2016","","","15","21","Semiotic engineering is based upon the semiotic theory of Human-Computer Interaction (HCI), which focuses on communication between designers and users. Semiotic engineering tries to improve users' interpretation through meta-communication and emphasizes that designers should play the role of legitimate interlocutors in interactive systems. On the other hand, there is a gap in software engineering on how to obtain systems specifications efficiently, how to create easy-to-understand and communicative models, and how to produce comprehensive modeling languages and development processes. In this paper, we explore several contributions of semiotic engineering to software engineering and discuss how the theory can facilitate the creation of comprehensive artifacts. We also discuss semiotic engineering for assessing and improving software modeling languages, in our case UML. We anticipate that our work would lead to the semiotic theory becoming recognized as a central theory driving software engineering research and practice","","978-1-4503-4174-5","10.1145/2897134.2897136","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7809346","Semiotic engineering;communication;software engineering;modeling;artifact;UML","Semiotics;Software engineering;Unified modeling language;Human computer interaction;Software;Protocols;Computational modeling","","","","26","","9 Jan 2017","","","IEEE","IEEE Conferences"
"Teamwork, coordination and customer relationship management skills: As important as technical skills in preparing our SE graduates","D. Damian; A. Borici","Software Engineering Global Interaction Laboratory Department of Computer Science, University of Victoria, Canada; Software Engineering Global Interaction Laboratory Department of Computer Science, University of Victoria, Canada",2012 First International Workshop on Software Engineering Education Based on Real-World Experiences (EduRex),"28 Jun 2012","2012","","","37","40","Teaching real-world software engineering (SE) skills requires innovative methods to facilitate students' learning technical as well as communication, teamwork, and analysis of ill-structured problems. In this paper we describe our experiences in designing and teaching these skills in our SE courses at the University of Victoria in the last 10 years. We describe the learning outcomes and instructional design in our courses, as well as the challenges we face.","","978-1-4673-1805-1","10.1109/EduRex.2012.6225704","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6225704","Software engineering education;software engineering instruction;education strategies","Software;Teamwork;Programming;Software engineering;Educational institutions","","3","","9","IEEE","28 Jun 2012","","","IEEE","IEEE Conferences"
"Big data analytics on large-scale socio-technical software engineering archives","S. Bayati; D. Parsons; T. Susnjak; M. Heidary","School of Engineering and Advanced Technology, Massey University, Auckland, New Zealand; School of Engineering and Advanced Technology, Massey University, Auckland, New Zealand; School of Engineering and Advanced Technology, Massey University, Auckland, New Zealand; School of Engineering and Advanced Technology, Massey University, Auckland, New Zealand",2015 3rd International Conference on Information and Communication Technology (ICoICT),"3 Sep 2015","2015","","","65","69","Given the fast growing nature of software engineering data in online software repositories and open source communities, it would be helpful to analyse these assets to discover valuable information about the software engineering development process and other related data. Big Data Analytics (BDA) techniques and frameworks can be applied on these data resources to achieve a high-performance and relevant data collection and analysis. Software engineering is a socio-technical process which needs development team collaboration and technical knowledge to develop a high-quality application. GitHub, as an online social coding foundation, contains valuable information about the software engineers' communications and project life cycles. In this paper, unsupervised data mining techniques are applied on the data collected by general Big Data approaches to analyse GitHub projects, source codes and interactions. Source codes and projects are clustered using features and metrics derived from historical data in repositories, object oriented programming metrics and the influences of developers on source codes.","","978-1-4799-7752-9","10.1109/ICoICT.2015.7231398","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7231398","Big Data;GitHub Mining;Clustering;Mining Software Repositories (MSR);Empirical Software Engineering","Software;Data mining;Software engineering;Big data;Measurement;Encoding;Feature extraction","","2","","16","IEEE","3 Sep 2015","","","IEEE","IEEE Conferences"
"Teaching the Essence of Software Development","P. Ciancarini; M. Missiroli","University of Bologna, Bologna, Italy; University of Bologna, Bologna, Italy",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","2","We present our plan to introduce Essence in our courses in software engineering, including a plan to evaluate our results and develop Essentialized tools.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206188","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206188","Software Engineering Education;Serious Games;Software Engineering Tools;Essence language","Tools;Software engineering;Education;Software;Games;Visualization;Unified modeling language","","1","","10","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"Exploring topic models in software engineering data analysis: A survey","X. Sun; X. Liu; B. Li; Y. Duan; H. Yang; J. Hu","School of Information Engineering, Yangzhou University, Yangzhou, China; School of Information Engineering, Yangzhou University, Yangzhou, China; School of Information Engineering, Yangzhou University, Yangzhou, China; Hainan University, Haikou, China; School of Information Engineering, Yangzhou University, Yangzhou, China; School of Information Engineering, Yangzhou University, Yangzhou, China","2016 17th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD)","21 Jul 2016","2016","","","357","362","Topic models are shown to be effective to mine unstructured software engineering (SE) data. In this paper, we give a simple survey of exploring topic models to support various SE tasks between 2003 and 2015. The survey results show that there is an increasing concern in this area. Among the SE tasks, source code comprehension and software history comprehension are the mostly studied, followed by software defects prediction. However, there is still only a few studies on other SE tasks, such as feature location and regression testing.","","978-1-5090-2239-7","10.1109/SNPD.2016.7515925","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7515925","Software engineering;topic models;survey","Software;Object oriented modeling;Software engineering;Conferences;Analytical models;Predictive models;Data models","","29","","68","IEEE","21 Jul 2016","","","IEEE","IEEE Conferences"
"Sustainable Software Engineering: Visions and Perspectives Beyond Energy Efficiency","C. König","Karlsruhe Institute of Technology, Karlsruhe, Germany",2024 IEEE/ACM 46th International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"20 Jun 2024","2024","","","231","233","In the face of multiple global crises such as climate change, a transformation towards sustainable development is more urgent than ever. Digitalization, as a fundamental change in society and the economy, offers great opportunities for sustainable development, but also poses its own threats, as evident in the immense resource consumption and growing surveillance tendencies. To leverage digitalization for sustainability transformation without compromising it, software engineering requires a significant shift in practices and structures. However, research in this area is still immature, lacking a deeper understanding of sustainability, its application in practice and solid engineering approaches. To bridge these gaps, this thesis aims to operationalize sustainability by proposing sustainability goals for software engineering, followed by the development of novel assessment methods and appropriate tool support.","2574-1934","979-8-4007-0502-1","10.1145/3639478.3639782","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10554846","Sustainable development;Sustainability;Sustainable Software Engineering","Climate change;Sustainable development;Software engineering;Digital systems;Surveillance;Globalization;Social factors;Economics;Energy efficiency;Energy management;Software design;Software development management","","","","36","CCBY","20 Jun 2024","","","IEEE","IEEE Conferences"
"Usage-centered software engineering: an agile approach to integrating users, user interfaces, and usability into software engineering practice","L. L. Constantine; L. A. D. Lockwood","Constantine & Lockwood, Ltd., University of Technology, Sydney, Australia; Constantine and Lockwood Limited, USA","25th International Conference on Software Engineering, 2003. Proceedings.","28 May 2003","2003","","","746","747","Usage-centered design is a systematic, model-driven approach to visual and interaction design with an established record of effectiveness in a wide variety of settings and areas of application. The tutorial introduces the models and methods of usage-centered design and explores the integration of usage-centered approaches into software engineering practice. Agile approaches to modeling will be emphasized, with the focus on use cases, which are central to usage-centered design and serve as a common thread throughout an integrated usage-centered software engineering process.","0270-5257","0-7695-1877-X","10.1109/ICSE.2003.1201267","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1201267","","Software engineering;User interfaces;Usability","","15","","16","IEEE","28 May 2003","","","IEEE","IEEE Conferences"
"Teaching Object-Oriented Software Engineering through Problem-Based Learning in the Context of Game Design","J. Ryoo; F. Fonseca; D. S. Janzen","Information Sciences and Technology, Pennsylvania State University, Altoona, Altoona, PA, USA; Information Sciences and Technology, State College, Pennsylvania State University, Altoona, PA, USA; Computer Science Department, California Polytechnic State University, San Louis Obispo, CA, USA",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","137","144","Although Object Orientation is emphasized in software engineering education, few have attempted to alleviate the initial learning curve associated with an inexperienced audience in non-computer science disciplines. The authors propose a Problem-Based Learning curriculum centered on game development to deliver basic Object-Oriented programming concepts in an interactive and engaging manner. Class activities occur within the context of the Object-Oriented Rational Unified Process. One of the most significant contributions of this paper lies in the design of class modules containing tasks intended to educate students on Object-Oriented Software Engineering in an incremental and self-actuated way.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.26","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556959","Object-Oriented Software Engineering;Problem-Based Learning;Game Design","Software engineering;Object oriented programming;Programming profession;Computer science education;Computer science;Unified modeling language;Educational technology;Educational programs;Java;Games","","12","","16","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
"Quantum Software Engineering Challenges from Developers' Perspective: Mapping Research Challenges to the Proposed Workflow Model","M. Haghparast; T. Mikkonen; J. K. Nurminen; V. Stirbu","University of Jyväskylä, Jyväskylä, Finland; University of Jyväskylä, Jyväskylä, Finland; University of Helsinki, Helsinki, Finland; University of Jyväskylä, Jyväskylä, Finland",2023 IEEE International Conference on Quantum Computing and Engineering (QCE),"30 Nov 2023","2023","02","","173","176","Despite the increasing interest in quantum computing, the aspect of development to achieve cost-effective and reliable quantum software applications has been slow. One barrier is the software engineering of quantum programs, which can be approached from two directions. On the one hand, many software engineering practices, debugging in particular, are bound to classical computing. On the other hand, quantum programming is closely associated with the phenomena of quantum physics, and consequently, the way we express programs resembles the early days of programming. Moreover, much of the software engineering research today focuses on agile development, where computing cycles are cheap and new software can be rapidly deployed and tested, whereas in the quantum context, executions may consume lots of energy, and test runs may require lots of work to interpret. In this paper, we aim at bridging this gap by starting with the quantum computing workflow and by mapping existing software engineering research to this workflow. Based on the mapping, we then identify directions for software engineering research for quantum computing.","","979-8-3503-4323-6","10.1109/QCE57702.2023.10204","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10313635","Quantum software engineering;software development;quantum computing","Quantum computing;Quantum algorithm;Debugging;Programming;Reliability engineering;Data engineering;Software","","3","","35","IEEE","30 Nov 2023","","","IEEE","IEEE Conferences"
"An Approach for Enabling Effective and Systematic Software Reuse: In a Globally Distributed Software Engineering Team That Uses a Lean Development Methodology","M. S. Roopa; V. S. Mani; H. Stefan","Siemens Technology and Services Pvt. Ltd., Bangalore, India; Siemens Technology and Services Pvt. Ltd., Bangalore, India; Siemens AG, Munchen, Bayern, DE",2016 IEEE 11th International Conference on Global Software Engineering (ICGSE),"29 Sep 2016","2016","","","134","138","We share our experience in pursuing effective software reuse in a globally distributed software engineering team that uses a lean development methodology. The paper outlines the journey, starting from recognizing the potential for reuse, the steps taken to enable systematic reuse in lean projects, the challenges faced, and the corrective actions taken to ensure effectiveness of systematic reuse. The main lessons learned include: (i) identification of relevant domains for reuse, (ii) explicitly assigning responsibilities for reuse component development, (iii) providing enabling infrastructure, (iv) defining more rigorous software development processes for reuse components, and (v) establishing a centralized team for developing reuse components. The results of our successful reuse initiative including the significant increase in quality and a 12 percent reuse of total code developed have been presented.","2329-6313","978-1-5090-2680-7","10.1109/ICGSE.2016.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7577430","software reuse;global software engineering;lean development methodology","Software reusability;Testing;Software engineering;Systematics;Portals;Maintenance engineering","","","","10","IEEE","29 Sep 2016","","","IEEE","IEEE Conferences"
"Metadesign: Guidelines for Supporting Domain Experts in Software Development","G. Fischer; K. Nakakoji; Y. Ye","University of Colorado, Boulder, USA; SRA Key Technology Laboratories; Software Research Associates",IEEE Software,"25 Aug 2009","2009","26","5","37","44","Our collaborative research activities in software development (at the University of Colorado's Center for Lifelong Learning and Design, the University of Tokyo, and Software Research Associates) have focused on understanding the implications of the quickly disappearing distinction between users and developers. We've also concentrated on establishing new software development methodologies by viewing software systems as continuously evolving sociotechnical systems driven by design activities of both professional software engineers and users. We believe that domain experts, as the owners of problems, need to be in charge of developing the software they require. Toward that end, we've created the metadesign framework, which reformulates software development activities as a continuum of different degrees of design and use. In addition, on the basis of our research and our findings in the research literature, we've developed a set of guidelines for supporting domain experts in software development.","1937-4194","","10.1109/MS.2009.134","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5222792","software developers;domain experts;end-user development;end-user software engineering;domain-specific software development;domain-oriented design environments;seeding;evolutionary growth;reseeding;metadesign;mash-ups;open source;ecologies of participation;software development","Guidelines;Software systems;Application software;Software engineering;Instruments;Biological system modeling;Environmental factors;Data analysis;Programming profession;Productivity","","35","","17","IEEE","25 Aug 2009","","","IEEE","IEEE Magazines"
"Software engineering for future healthcare and clinical systems","R. A. Schrenker","Massachusetts General Hospital, USA",Computer,"18 Apr 2006","2006","39","4","26","32","Systems and software engineering contribute not only to advancing and improving the delivery of healthcare but also to doing it more safely than has been the case in the past. The articles discussed touch on both types of systems, while focusing primarily on the application of software and systems engineering to software-based medical devices and device systems used at the bedside.","1558-0814","","10.1109/MC.2006.139","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1620991","Clinical software engineering;Medical software;MD PnP;Software interoperability;Healthcare technology","Software engineering;Medical services;Biomedical monitoring;Software quality;Condition monitoring;Computer errors;Patient monitoring;Technology management;Biomedical equipment;Environmental management","","14","","10","IEEE","18 Apr 2006","","","IEEE","IEEE Magazines"
"Machine Learning in Value-Based Software Test Data Generation","D. Zhang","Department of Computer Science, California State University, Sacramento, CA, USA",2006 18th IEEE International Conference on Tools with Artificial Intelligence (ICTAI'06),"19 Dec 2006","2006","","","732","736","Software engineering research and practice thus far are primarily conducted in a value-neutral setting where each artifact in software development such as requirement, use case, test case, and defect, is treated as equally important during a software system development process. There are a number of shortcomings of such value-neutral software engineering. Value-based software engineering is to integrate value considerations into the full range of existing and emerging software engineering principles and practices. Machine learning has been playing an increasingly important role in helping develop and maintain large and complex software systems. However, machine learning applications to software engineering have been largely confined to the value-neutral software engineering setting. In this paper, we advocate a shift to applying machine learning methods to value-based software engineering. We propose a framework for value-based software test data generation. The proposed framework incorporates some general principles in value-based software testing and can help improve return on investment","2375-0197","0-7695-2728-0","10.1109/ICTAI.2006.77","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4031966","value-based software engineering;value-based software test data generation;genetic algorithms.","Machine learning;Software testing;Software engineering;Programming;Software systems;Application software;Engineering management;System testing;Genetic algorithms;Knowledge management","","15","","23","IEEE","19 Dec 2006","","","IEEE","IEEE Conferences"
"Economic models of software engineering and the software maintenance crisis","Yingxu Wang","Theoretical and Empirical Software Engineering Research Centre, Theoretical and Empirical Software Engineering Research Centre, University of Calgary, Calgary, AB, Canada","Canadian Conference on Electrical and Computer Engineering, 2005.","3 Jan 2006","2005","","","1827","1830","This paper presents a transdisciplinary study on economic models of software engineering and their formal description. It is recognized that the adaptive equilibrium of market systems is rooted in the negative feedback mechanism of demands and supplies. A mathematical model of economic equilibrium developed in this paper provides a formal proof of Adam Smith's genius hypothesis of 'invisible hand' proposed in 1776. A set of mathematical models is developed for dynamic cost analyses and for estimation of economical outcomes of software engineering projects. A significant phenomenon in software engineering known as the software maintenance crisis is identified, and possible solutions are proposed. The risks and impacts of software maintenance crisis are too high to be ignored when the society is highly dependent on various software systems.","0840-7789","0-7803-8885-2","10.1109/CCECE.2005.1557337","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1557337","","Software engineering;Software maintenance;Costs;Negative feedback;Mathematical model;Drives;Resists;State estimation;Software systems;Force feedback","","1","","4","IEEE","3 Jan 2006","","","IEEE","IEEE Conferences"
"On the Use of the Modern Software in the Programs of Basic and Additional Professional Education in the Field of Electric Power Engineering","I. V. Putilova; M. P. Zhokhova; A. A. Kiriakin; E. A. Malikova; M. A. Kiryakina","National Research University ""MPEI"", Moscow, Russia; National Research University ""MPEI"", Moscow, Russia; National Research University ""MPEI"", Moscow, Russia; National Research University ""MPEI"", Moscow, Russia; National Research University ""HSE"", Moscow, Russia",2022 VI International Conference on Information Technologies in Engineering Education (Inforino),"1 Jun 2022","2022","","","1","4","The article presents the experience of using software programs for calculating, analyzing, and modeling electrical engineering and electrical power systems by students of various energy specialties, as well as trainees of professional retraining programs in the field of Electrical Power and Electrical Engineering. An assessment of the current situation regarding the use of traditional and new information technologies by employees working in the energy sector is given. The drawbacks and gaps in the knowledge of trainees being the reason of the ineffective use of computer technology in various fields of their activity are analyzed. The issues of improvement of the basic and additional education programs in the field of Electric Power Engineering at the Moscow Power Engineering Institute are discussed. The ways of applying active teaching methods for acquiring skills in solving production problems using information technologies are shown.","","978-1-6654-0577-5","10.1109/Inforino53888.2022.9782962","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9782962","Information technology;software;professional retraining;teaching methods;electrical engineering and electrical power systems","Electrical engineering;Power engineering;Analytical models;Education;Production;Software;Ecology","","1","","15","IEEE","1 Jun 2022","","","IEEE","IEEE Conferences"
"Plug-in Software Engineering Case Studies","T. G. Grbac; P. Runeson","Faculty of Engineering, University of Rijeka, Rijeka, Croatia; Dept. Computer Science, Lund University, Lund, Sweden",2016 IEEE/ACM 4th International Workshop on Conducting Empirical Studies in Industry (CESI),"9 Jan 2017","2016","","","21","24","Empirical software engineering is a growing research area. Industrial experience gathered by systematic empirical case studies is extremely important for further evolution of the software engineering discipline. Scientic theory cannot provide eective means for software industry without fundamental understanding of the evolutionary development of complex software systems. However, there are certain limitations in performing observational quantitative case studies in real software engineering environments, and to enable their replication. In this paper, we propose a framework that would allow plug-in case studies for industries, aiming to overcome obstacles of engagement and wide replications of industrial empirical studies.","","978-1-4503-4154-7","10.1145/2896839.2896840","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7809363","Replications;Industry Research Collaboration;Software Science;Empirical Software Engineering","Industries;Software engineering;Software;Companies;Context;Data collection;Knowledge engineering","","","1","17","","9 Jan 2017","","","IEEE","IEEE Conferences"
"Research on National and International Software Engineering Standard Bodies","G. Li; H. Dong; Q. Zheng; M. Zhou; Y. Guo","Shandong Computer Science Center, Jinan, China; Shandong Computer Science Center, Jinan, China; Shandong Computer Science Center, Jinan, China; Shandong Computer Science Center, Jinan, China; Shandong Computer Science Center, Jinan, China",2009 International Conference on Computational Intelligence and Software Engineering,"28 Dec 2009","2009","","","1","4","The article analyzed the basic life cycle model of the software engineering process, and studied software engineering standards body model and main standards of ISO (International standard organization) and IEEE (Institute of Electrical and Electronics Engineers). It put forward the body model of China's software engineering standards, and pointed out the distinction of the two standard body models through comparative analysis. At last some advices were given for the future development of the standards body and standards of software engineering of China.","","978-1-4244-4507-3","10.1109/CISE.2009.5366526","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5366526","","Software engineering;Standards organizations;Software standards;ISO standards;Project management;Standards development;Software performance;Software quality;Collaborative software;Computer science","","","","7","IEEE","28 Dec 2009","","","IEEE","IEEE Conferences"
"Domain-Analysis in Software Reuse - Application in Warehouse Management","Y. Meng; A. Young; X. Wang; K. Shao","Computer Science Department, Qingdao University of Science and Technology, China; Qingdao University of Science and Technology, China; Computer Science Department, Qingdao University of Science and Technology, China; Webster University, USA","Eighth ACIS International Conference on Software Engineering, Artificial Intelligence, Networking, and Parallel/Distributed Computing (SNPD 2007)","13 Aug 2007","2007","1","","505","510","A domain-analysis based process was developed to facilitate software reuse. This process starts with analyzing domain common features/differences systematically based on software architectural considerations. The end result of domain-analysis is a domain model with a collection of well-defined and well-developed packages/components ready for reuse. The advantages of domain-analysis were demonstrated in warehouse management software system development process. Furthermore, a number of systems integrated with this domain model were successfully applied to various industries, such as electronics, chemical, and rubber industries. The results in this paper supported the notion that domain-analysis is an effective way to develop efficient component-based software system with maximized code reuse, minimized code duplication, and enhanced software quality in a substantially reduced development timeframe.","","978-0-7695-2909-7","10.1109/SNPD.2007.524","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4287560","Software component;domain-analysis;applied software system;software reuse.","Application software;Software systems;Software quality;Programming;Software reusability;Software development management;Engineering management;Computer science;Electronic mail;Chemical industry","","5","","11","IEEE","13 Aug 2007","","","IEEE","IEEE Conferences"
"Supporting Reflective Practice in Software Engineering Education through a Studio-Based Approach","C. N. Bull; J. Whittle",Lancaster University; Lancaster University,IEEE Software,"13 Jun 2014","2014","31","4","44","50","Learning is a lifelong process, especially in the fast-paced software industry. In addition to formal training courses, good software developers continually learn by reflecting on what they've done in the past. However, reflective practice is rarely taught explicitly in university software engineering education. One way to teach reflective techniques from the start is through studio-based learning.","1937-4194","","10.1109/MS.2014.52","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6774769","software studio;studio;atelier;software engineering education;collaboration;collocation;reflective practice;software engineering;pervasive computing;project management","Learning;Software engineering;Computer science education;Reflection;Computer architecture","","31","","13","IEEE","18 Mar 2014","","","IEEE","IEEE Magazines"
"BoF: new directions in UK software engineering research","D. Bustard; M. Holcombe; I. Sommerville","School of Computing and Information Engineering, University of Ulster, Coleraine, UK; Department of Computer Science, University of Sheffield, Sheffield, UK; Department of Computing, Lancaster University, Lancaster, UK",Proceedings. 26th International Conference on Software Engineering,"26 Jul 2004","2004","","","693","694","A large number of UK researchers in software engineering are expected to attend ICSE 2004. The BoF session will use this opportunity to bring many of them together to consider ways of significantly improving the impact of UK software engineering research.","0270-5257","0-7695-2163-0","10.1109/ICSE.2004.1317493","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1317493","","Software engineering;Computer science;Computer industry;Education;Australia;Buildings;Systems engineering and theory;Profitability;Technology transfer;Testing","","","","5","IEEE","26 Jul 2004","","","IEEE","IEEE Conferences"
"Teaching Global Software Engineering: Interactive Exercises for the Classroom","C. Lescher; Y. Li; B. Bruegge","Siemens AG, Infrastructure & Cities Sector, München, Germany; Chair for Applied Software Engineering, Technische Universität München, Garching, Germany; Chair for Applied Software Engineering, Technische Universität München, Garching, Germany",2014 IEEE 9th International Conference on Global Software Engineering,"2 Oct 2014","2014","","","163","172","Companies transfer part of their development activities to distributed countries in order to ensure their global competitiveness, gain access to local markets and react to the prevailing lack of specialized workforce. Global Software Engineering has brought new challenges to development teams: Geographic separation, different time zones, different culture and language barriers. They introduce communication delay and often lead to quality problems and cost overruns. Despite these challenges Global Software Engineering has become a mainstream trend in industry. However, university instructors face the difficulty how to make students with little or no experience in global software development aware of these challenges and equip them with skills to deal with them. In this paper, we describe a set of interactive exercises for teaching Global Software Engineering in a single classroom and report on our experiences.","2329-6313","978-1-4799-4360-9","10.1109/ICGSE.2014.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6915267","global software engineering;teaching;education;communication;collaboration","Seminars;Software engineering;NASA;Educational institutions;Software;Delays","","7","","28","IEEE","2 Oct 2014","","","IEEE","IEEE Conferences"
"Organizational Testing Management Maturity Model for a Software Product Line","E. Lamas; É. Ferreira; M. Ribeiro do Nascimento; L. A. V. Dias; F. F. Silveira","ITA, Brazilian Aeronautical Institute of Technology-ITA, Sao Paulo, Brazil; ITA, Brazilian Aeronautical Institute of Technology-ITA, Sao Paulo, Brazil; ITA, Brazilian Aeronautical Institute of Technology-ITA, Sao Paulo, Brazil; ITA, Brazilian Aeronautical Institute of Technology-ITA, Sao Paulo, Brazil; UNIFESP, Federal University of São Paulo, Sao Paulo, Brazil",2010 Seventh International Conference on Information Technology: New Generations,"1 Jul 2010","2010","","","1026","1031","This paper presents a framework entitled Organizational Testing Management Maturity Model (OTM3). The proposed framework is a set of structures to support the development and testing of Software Product Lines. This set follows the Experimental Software Engineering concepts. OTM3 is a framework for interactive, incremental, and continuous models. It shall provide the information for the organization, and a method to identity, establish and keep the capabilities demanded by test maturity models. This is achieved through: patterns, measures, controls, and software engineering best practices.","","978-1-4244-6271-1","10.1109/ITNG.2010.134","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5501496","Software Testing;Maturity Models for Software Testing;Software Product Line;Experimental Software Engineering;Process Management with Testing","Software testing;Software engineering;Software measurement;Inspection;Engineering management;Software development management;Conference management;Technology management;Project management;Application software","","3","","26","IEEE","1 Jul 2010","","","IEEE","IEEE Conferences"
"Deploying Software Team Analytics in a Multinational Organization","V. Augustine; J. Hudepohl; P. Marcinczak; W. Snipes",ABB; ABB; ABB; ABB,IEEE Software,"25 Dec 2017","2018","35","1","72","76","Implementing a software engineering analytics solution poses challenges and offers significant value for the globally distributed software development organization at ABB. Because software development activities in agile methodologies revolve around the team, ABB decided to implement an analytics solution focused on team metrics as part of its Software Development Improvement Program. Using key indicators focused around team improvement, researchers found that teams could manage their activities with metrics such as cycle time. Key lessons learned include paying attention to visual design and navigation and providing drill-down capabilities for the user. This article is part of a special issue on Actionable Analytics for Software Engineering.","1937-4194","","10.1109/MS.2017.4541044","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8239945","software metrics;software quality;ABB;software engineering;software development management;software development","Software engineering;Software measurement;Data visualization;Software development","","11","","13","IEEE","25 Dec 2017","","","IEEE","IEEE Magazines"
"Software Sketchifying: Bringing Innovation into Software Development","Ž. Obrenović",Software Improvement Group,IEEE Software,"18 Apr 2013","2013","30","3","80","86","Inspired by general ideas about how the automotive industry brings innovation into lean manufacturing, the author proposes introducing an activity called software sketchifying into software product development. Sketchifying aims to stimulate software stakeholders to spend more time generating and considering alternative ideas before making a decision to proceed with engineering. To support this exploration activity, Sketchlet is a flexible tool that empowers nonengineers to work with emerging software and hardware technologies, explore their possibilities, and create working examples—called sketchlets—that incorporate these emerging technologies. Software sketchifying's main output is a set of realistic proposals for new software solutions that give the engineering process a clear focus and goal. The author also presents some lessons learned in applying this idea and tool in several projects.","1937-4194","","10.1109/MS.2012.71","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6212431","software development;software tools","Software development;Manufacturing;Technological innovation;Industries;Automotive engineering","","1","","13","IEEE","5 Jun 2012","","","IEEE","IEEE Magazines"
"Advanced hands-on training for distributed and outsourced software engineering","M. Nordio; R. Mitin; B. Meyer","ETH Zurich, Zurich, Switzerland; ETH Zurich, Zurich, Switzerland; ETH Zurich, Zurich, Switzerland",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","1","","555","558","Today's software projects are often distributed across multiple locations. This distribution poses new challenges produced by the cooperation across different countries, times zones, and cultures. Software engineering courses have to prepare students accordingly. This paper reports an experience on teaching a distributed software engineering course. In this course, students develop software in collaboration with five universities located in Italy, Hungary, Russia, Switzerland, and Ukraine. The projects allow students to face the difficulties of developing software in a globalized context, and provide a practical experience on distributed software engineering. We describe the major obstacles on organizing such a course, and we suggest best practices to achieve successful outcome.","1558-1225","978-1-60558-719-6","10.1145/1806799.1806879","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062059","distributed software engineering;multinational project;teaching","Software engineering;Educational institutions;Software;Contracts;Face;Schedules","","7","","10","","27 Oct 2011","","","IEEE","IEEE Conferences"
"An Empirical Study on Female Participation in Software Project Courses","A. Nguyen-Duc; L. Jaccheri; P. Abrahamsson","University of Southeast Norway, Bøi Telemark, Norway; Norwegian University of Science and Technology, Trondheim, Norway; University of Jyväskylä, Finland",2019 IEEE/ACM 41st International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"19 Aug 2019","2019","","","240","241","Gender issues in software engineering education are gaining research attention due to the desire to promote female participation in the field. The objective of this work is to enhance the understanding of female students' participation in software engineering projects to support gender-aware course optimization. Since 2015, we have investigated the participation of female students in terms of software engineering activities and team dynamics in a software project course that involves a real customer. We found that female students are more active with project management and requirement engineering, while they remain under-represented in highly complex or specific tasks, i.e. architecture work, and user experience design. We found no statistically significant difference in perceived team dynamics between male and female students. Insights on female project activities would facilitate the arrangement of project teams so that learning can be distributed equally across genders.","2574-1934","978-1-7281-1764-5","10.1109/ICSE-Companion.2019.00094","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8802853","female participation, gender, software engineering project course, mixed approach research","Software engineering;Software;Task analysis;Education;Project management;Computer architecture;Leadership","","2","","10","IEEE","19 Aug 2019","","","IEEE","IEEE Conferences"
"Towards the Visualization of Usage and Decision Knowledge in Continuous Software Engineering","J. O. Johanssen; A. Kleebaum; B. Bruegge; B. Paech","Department of Informatics, Technical University of Munich, Garching b. München, Germany; Heidelberg University, Institute of Computer Science, Heidelberg, Germany; Technische Universitat Munchen, Munchen, Bayern, DE; Heidelberg University, Institute of Computer Science, Heidelberg, Germany",2017 IEEE Working Conference on Software Visualization (VISSOFT),"2 Nov 2017","2017","","","104","108","Continuous software engineering (CSE) includes activities to continuously evolve software artifacts. Along with these activities, developers employ knowledge such as usage and decision knowledge. Usage knowledge helps developers to understand how users apply software, while decision knowledge comprises all decisions taken during CSE and their rationale. However, due to the frequency, extent, and complexity of knowledge in CSE environments, accessing and processing knowledge is challenging for developers. We propose a dashboard for developers that visualizes knowledge from various sources. This enables developers to follow, reflect, interact, and react on knowledge in CSE environments. We introduce springboards that serve as knowledge selectors while the selected extract of knowledge is visualized in widgets. Widgets allow developers to gain insight into knowledge. We suggest three widget classes: spot, compare, and range. We discuss dashboard extensions such as interaction triggers to add, modify, or combine knowledge. We plan to implement the dashboard and evaluate it with teams during software development projects in an industrial setting.","","978-1-5386-1003-9","10.1109/VISSOFT.2017.18","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8091192","Continuous Software Engineering;Knowledge Visualization;Usage Knowledge;Decision Knowledge;Dashboard;Springboard;Widget","Visualization;Data visualization;Software engineering;Complexity theory;Software quality;Tools","","8","","14","IEEE","2 Nov 2017","","","IEEE","IEEE Conferences"
"GDGSE: Game Development with Global Software Engineering","A. Fatima; T. Rasool; U. Qamar","National University of Science and Technology, Islamabad, Pakistan; National University of Science and Technology, Islamabad, Pakistan; National University of Science and Technology, Islamabad, Pakistan","2018 IEEE Games, Entertainment, Media Conference (GEM)","1 Nov 2018","2018","","","1","9","The management models and skilled workforce required for game development is different from those of traditional software development. Multidisciplinary nature of the game development process requires people with different skills and incurs higher cost as compared to traditional software engineering. Global software engineering (GSE), which involves the development of top level software projects by different teams located around the globe, can be used for game development. The core benefits offered by GSE include reduced costs and increased workforce skillset through coordination of people with diverse expertise. However, such integration of widely distributed teams requires efficient communication and coordination which is a challenging task. In this paper, we propose a global game development methodology. This methodology makes the game development process more cost effective. In this methodology, we combine the concept of game development methodology with GSE. Furthermore, successful team coordination will be achieved by proper documentation and prototyping in the pre-production phase of our methodology. This combination will provide a means of communicating functionality and interaction as a single package to the team.","","978-1-5386-6304-2","10.1109/GEM.2018.8516498","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8516498","Game development;Global software Engineering;outsourcing;documentation;communication;game development cost","Games;Production;Software;Software engineering;Documentation;Testing;Industries","","1","","22","IEEE","1 Nov 2018","","","IEEE","IEEE Conferences"
"Towards a European Master Programme on Global Software Engineering","P. Lago; H. Muccini; L. Beus-Dukic; I. Crnkovic; S. Punnekkat; H. Van Vliet","Vrije Universiteit, Netherlands; University of L 'Aquila, Italy; University of Westminster, UK; Mälardalen University, Sweden; Mälardalen University, Sweden; Vrije Universiteit, Netherlands",20th Conference on Software Engineering Education & Training (CSEET'07),"16 Jul 2007","2007","","","184","194","This paper presents a European Master programme on global software engineering (SE), being put forward by four leading institutions from Sweden, UK, Netherlands and Italy. The Global SE European Master (GSEEM) programme aims to provide students with an excellence in SE based on sound theoretical foundations and practical experience, as well as prepare them to participate in global development of complex and large software systems. GSEEM has been designed with three noteworthy aspects: 1) Three specialization profiles in which the consortium excels: Software Architecting, Real-time Embedded Systems Engineering, and Web Systems and Services Engineering. 2) Two market-driven routes: ""professional"" to work as professionals, and ""scientific"" to continue the education towards research degrees. 3) An innovative concept of ""shared modules"", delivered together by multiple institutions. Four types of shared modules are foreseen: ""parallel"" twin modules which run remotely between universities, ""shifted"" modules which teach SE concepts incrementally with shifts in study locations and timeline ,""complementary"" modules in which complementary SE concepts are taught in parallel through shared projects, and ""common"" modules which share the presentations and the project. The profiles realize ""integrated knowledge"" by complementing partial knowledge available at partner institutions. The paper explains how GSEEM achieves the objectives of educating global software engineers.","2377-570X","0-7695-2893-7","10.1109/CSEET.2007.52","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4271605","","Software engineering;Acoustical engineering;Design engineering;Systems engineering and theory;Software systems;Embedded software;Real time systems;Embedded system;Continuing education;Systems engineering education","","17","","14","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"Global Software Engineering: Challenges in Customer Value Creation","R. Bavani","MindTree Limited, Pune, India",2010 5th IEEE International Conference on Global Software Engineering,"27 Sep 2010","2010","","","119","122","Global Software Engineering (GSE) involves software engineering projects executed with virtual teams from different time zones and diverse cultures. Over the past decade GSE has become the norm influenced by several factors such as optimal costs, availability of skilled pool of resources and globalization trends such as mergers and acquisitions. Adoption of Customer Value Management (CVM) and implementing value-based practices in GSE context is at a nascent stage. Realizing stakeholder values and implementing value-based practices are crucial to offer tangible as well as intangible value additions besides ensuring high quality deliverables on schedule. On GSE perspective it is mandatory to align the values offered by projects with stakeholder values in order to improve customer satisfaction and retention. This paper is based on our experience in executing Outsourced Product Development & Testing engagements. This paper discusses the challenges we faced in implementing value-based practices in a set of projects, and the approach we followed to overcome some of these challenges. Also, this paper presents our findings and results obtained through annual Customer Experience Surveys.","2329-6313","978-1-4244-7620-6","10.1109/ICGSE.2010.21","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5581500","Global Software Engineering;Customer Value;Customer Value Creation","Testing;Software engineering;Business;Lead;Context;Software;Automation","","","","13","IEEE","27 Sep 2010","","","IEEE","IEEE Conferences"
"Introducing Software Engineering to Computer Engineering Students","G. W. Skelton","Computer Engineering Department, Jackson State University, USA",Proceedings of the IEEE SoutheastCon 2006,"15 May 2006","2006","","","313","318","Software engineering is an important topic computer engineering students should learn at the undergraduate level. Many traditional software engineering courses focus on Web-based and database applications with only limited attention to embedded microprocessor topics. For the computer engineering student that approach is not satisfactory. The course described in this paper focuses on topics important to a computer engineering disciple. The evolution of the course over a three semester period is discussed and key issues related to teaching software engineering to computer engineering students are presented","1558-058X","1-4244-0168-2","10.1109/second.2006.1629370","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1629370","","Software engineering;Engineering students;Application software;Programming profession;Education;Computer science;Object oriented programming;Data structures;Embedded system;Hardware","","","","22","IEEE","15 May 2006","","","IEEE","IEEE Conferences"
"Measuring, changing, and measuring changes in: students' attitudes toward and understanding of software engineering process","L. Bernstein; D. Klappholz; C. Kelley","Stevens Institute of Technology, USA; Stevens Institute of Technology, USA; Fairleigh Dickinson University, USA",Proceedings 15th Conference on Software Engineering Education and Training (CSEE&T 2002),"7 Aug 2002","2002","","","245","245","","1093-0175","0-7695-1515-0","10.1109/CSEE.2002.995224","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=995224","","Software engineering;Instruments;Attitude control;Best practices;Education;Educational technology;Software measurement;Measurement standards;Software standards;Standards development","","","","","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"The History of Software Engineering","G. Booch",NA,IEEE Software,"27 Sep 2018","2018","35","5","108","114","Grady Booch, one of UML’s original authors, offers his perspective on the history of software engineering. This article is part of a theme issue on software engineering’s 50th anniversary. The Web Extra, a version of the article with an expanded bibliography, is at https://extras.computer.org/extra/mso2018050108s1.pdf.","1937-4194","","10.1109/MS.2018.3571234","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8474489","history of software engineering;software development;Grady Booch","Computers;Software engineering;Software development;Programming;History","","24","","10","IEEE","27 Sep 2018","","","IEEE","IEEE Magazines"
"Assessing the Representativeness of Open Source Projects in Empirical Software Engineering Studies","H. Zhong; Y. Yang; J. Keung","Laboratory for Internet Software Technologies Institute of Software, Chinese Academy of Sciences, Beijing, China; Laboratory for Internet Software Technologies Institute of Software, Chinese Academy of Sciences, Beijing, China; Department of Computing, Hong Kong Polytechnic University, Hong Kong, China",2012 19th Asia-Pacific Software Engineering Conference,"18 Feb 2013","2012","1","","808","817","BACKGROUND: Software engineering researchers have carried out many empirical studies on open source software (OSS) projects to understand the OSS phenomenon, and to develop better software engineering techniques. Many of these studies typically use only a few successful projects as study subjects. Recently, these studies have received criticisms and challenges on their representativeness on OSS projects. AIM: First, we aim to examine to what extent data extracted from successful projects are different from data extracted from the majority. If data extracted from successful projects are quite different from data extracted from the majority, approaches that are effective on successful projects may not be effective in general. Second, we aim to examine whether successful OSS projects are representative to the whole population of OSS. If they are not, conclusions that are drawn from only successful projects may reflect the OSS phenomenon partially. METHODOLOGY: We analyzed 11, 684 OSS projects that are hosted on Source Forge. When researchers select subjects, they typically select successful projects that are attractive to both users and developers. Considering this preference, we clustered these projects into four categories based their attractiveness to users and developers. Here, we use the K-means clustering technique to produce combined result. Furthermore, we selected eight indicators that are used in many existing studies (e.g., team sizes), and compared indicators that are extracted from different categories to investigate to what degree they are different. RESULT: For the first research aim, the result shows that 66.1% projects are under developing projects, 14.7% projects are user-preference projects, 14.2% projects are developer-preference projects, and only 5.0% projects are considered successful. For the second research aim, the result shows that all the eight analyzed indicators are highly unbalanced with the gamma distribution. Furthermore, the result reveals that users and developers of Source Forge have different perceptions on the development status defined by Source Forge. CONCLUSION: We conclude that successful projects are not representative to the whole population of OSS, and data extracted from successful projects are quite different from data extracted from the majority. The result implies that conclusions drawn from only a few successful projects may be challenged. This work is important to allow researchers to refine conclusions of existing studies, and to better understand and to carefully select OSS project subjects for their future empirical experiments.","1530-1362","978-1-4673-4930-7","10.1109/APSEC.2012.36","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6462750","Open source software;Empirical Studies","Data mining;Electronic mail;Software engineering;Software;Sociology;Statistics;Production","","3","","38","IEEE","18 Feb 2013","","","IEEE","IEEE Conferences"
"Software Requirements Patterns - A State of the Art and the Practice","X. Franch","Group of Software and Service Engineering (GESSI), Universitat Politècnica de Catalunya (UPC-BarcelonaTech), Barcelona, Spain",2015 IEEE/ACM 37th IEEE International Conference on Software Engineering,"17 Aug 2015","2015","2","","943","944","Software requirement patterns are an increasingly popular approach to knowledge reuse in the requirements engineering phase. Several research proposals have been formulated in the last years, and this technical briefing presents them. Beyond that, a report on the current adoption of these proposals (or any other ad-hoc approach) in industry is presented. This state of the practice will show that the need to pave the road to successful adoption still persists.","1558-1225","978-1-4799-1934-5","10.1109/ICSE.2015.298","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7203120","Software Requirements Patterns;Requirements Engineering;Patterns;Requirements Reuse;Knowledge Engineering;Empirical Study;Literature Review;Survey","Software;Requirements engineering;Software engineering;Bibliographies;Systematics;Proposals;Industries","","4","","16","IEEE","17 Aug 2015","","","IEEE","IEEE Conferences"
"Analysis of Software Engineering Practices in General Software and Machine Learning Startups","B. Lakha; K. Bhetwal; N. U. Eisty","Computer Science Department, Boise State University, Boise, ID, USA; Computer Science Department, Boise State University, Boise, ID, USA; Computer Science Department, Boise State University, Boise, ID, USA","2023 IEEE/ACIS 21st International Conference on Software Engineering Research, Management and Applications (SERA)","3 Aug 2023","2023","","","39","46","Context: On top of the inherent challenges startup software companies face applying proper software engineering practices, the non-deterministic nature of machine learning techniques makes it even more difficult for machine learning (ML) startups. Objective: Therefore, the objective of our study is to understand the whole picture of software engineering practices followed by ML startups and identify additional needs. Method: To achieve our goal, we conducted a systematic literature review study on 37 papers published in the last 21 years. We selected papers on both general software startups and ML startups. We collected data to understand software engineering (SE) practices in five phases of the software development life-cycle: requirement engineering, design, development, quality assurance, and deployment. Results: We find some interesting differences in software engineering practices in ML startups and general software startups. The data management and model learning phases are the most prominent among them. Conclusion: While ML startups face many similar challenges to general software startups, the additional difficulties of using stochastic ML models require different strategies in using software engineering practices to produce high-quality products.","2770-8209","979-8-3503-4588-9","10.1109/SERA57763.2023.10197836","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10197836","Software Engineering;Machine Learning Startups;Software Startups;Systematic Literature Review","Systematics;Quality assurance;Bibliographies;Stochastic processes;Machine learning;Software;Requirements engineering","","","","57","IEEE","3 Aug 2023","","","IEEE","IEEE Conferences"
"A Systematic Review of Theory Use in Software Engineering Experiments","J. E. Hannay; D. I. K. Sjoberg; T. Dyba","Department of Software Engineering, Simula Research Laboratory, Lysaker, Norway; Department of Software Engineering, Simula Research Laboratory, Lysaker, Norway; Simula Research Laboratory, Department of Software Engineering, Safety, and Security, SINTEF ICT, Trondheim, Norway",IEEE Transactions on Software Engineering,"8 Jan 2007","2007","33","2","87","107","Empirically based theories are generally perceived as foundational to science. However, in many disciplines, the nature, role and even the necessity of theories remain matters for debate, particularly in young or practical disciplines such as software engineering. This article reports a systematic review of the explicit use of theory in a comprehensive set of 103 articles reporting experiments, from of a total of 5,453 articles published in major software engineering journals and conferences in the decade 1993-2002. Of the 103 articles, 24 use a total of 40 theories in various ways to explain the cause-effect relationship(s) under investigation. The majority of these use theory in the experimental design to justify research questions and hypotheses, some use theory to provide post hoc explanations of their results, and a few test or modify theory. A third of the theories are proposed by authors of the reviewed articles. The interdisciplinary nature of the theories used is greater than that of research in software engineering in general. We found that theory use and awareness of theoretical issues are present, but that theory-driven research is, as yet, not a major issue in empirical software engineering. Several articles comment explicitly on the lack of relevant theory. We call for an increased awareness of the potential benefits of involving theory, when feasible. To support software engineering researchers who wish to use theory, we show which of the reviewed articles on which topics use which theories for what purposes, as well as details of the theories' characteristics","1939-3520","","10.1109/TSE.2007.12","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4052585","Theory;experiments;research methodology;empirical software engineering.","Software engineering;Design for experiments;Testing;Computer industry;Programming","","139","","125","IEEE","8 Jan 2007","","","IEEE","IEEE Journals"
"Development of Educational Software for Electrical Engineering Subjects using MATLAB","N. F. Naim; N. Syahida Mat Nusi; S. S. Sarnin; N. Yaa’cob","Faculty of Electrical Engineering, University Teknologi MARA Malaysia, Selangor, Malaysia; Faculty of Electrical Engineering, University Teknologi MARA Malaysia, Selangor, Malaysia; Faculty of Electrical Engineering, University Teknologi MARA Malaysia, Selangor, Malaysia; Faculty of Electrical Engineering, University Teknologi MARA Malaysia, Selangor, Malaysia",2019 International Conference on Information and Communications Technology (ICOIACT),"23 Dec 2019","2019","","","884","888","In this paper, an educational software was developed using MATLAB and its Graphical User Interface (GUI). This interactive and user-friendly software focuses on three subjects which are electromagnetic, communication engineering and power engineering. The user uses MATLAB GUI in designing the educational software and compiled together with M-file program to develop a standalone program. Standalone program was created to ease the students to use this educational software without installing MATLAB software in their personal computer. This software may help user to get a better understanding on electrical engineering subjects such as electromagnetic, communication engineering and power engineering.","","978-1-7281-1655-6","10.1109/ICOIACT46704.2019.8938418","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8938418","Educational software;Graphical User Interface (GUI);Electromagnetic;Communication Engineering;Power Engineering.","Electrical engineering;Power engineering;Education;Software;Electromagnetics;Matlab;Graphical user interfaces","","","","12","IEEE","23 Dec 2019","","","IEEE","IEEE Conferences"
"A Collection of Software Engineering Challenges for Big Data System Development","O. Hummel; H. Eichelberger; A. Giloj; D. Werle; K. Schmid","Faculty of Computer Science, Mannheim University of Applied Sciences; Software Systems Engineering, University of Hildesheim; Software Systems Engineering, University of Hildesheim; Institute for Program Structures and Data Organization, Karlsruhe Institute of Technology; NA",2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA),"21 Oct 2018","2018","","","362","369","In recent years, the development of systems for processing and analyzing large amounts of data (so-called Big Data) has become an important sub-discipline of software engineering. However, to date there exits no comprehensive summary of the specific idiosyncrasies and challenges that the development of Big Data systems imposes on software engineers. With this paper, we aim to provide a first step towards filling this gap based on our collective experience from industry and academic projects as well as from consulting and initial literature reviews. The main contribution of our work is a concise summary of 26 challenges in engineering Big Data systems, collected and consolidated by means of a systematic identification process. The aim is to make practitioners more aware of common challenges and to offer researchers a solid baseline for identifying novel software engineering research directions.","","978-1-5386-7383-6","10.1109/SEAA.2018.00066","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8498233","Big Data;Software Development;Challenges;Software Engineering","Big Data;Software;Software engineering;Computer architecture;Data analysis;Data privacy;Systematics","","21","","43","IEEE","21 Oct 2018","","","IEEE","IEEE Conferences"
"Toward Data-Driven Requirements Engineering","W. Maalej; M. Nayebi; T. Johann; G. Ruhe",University of Hamburg; University of Calgary; University of Hamburg; University of Calgary,IEEE Software,"29 Dec 2015","2016","33","1","48","54","Nowadays, users can easily submit feedback about software products in app stores, social media, or user groups. Moreover, software vendors are collecting massive amounts of implicit feedback in the form of usage data, error logs, and sensor data. These trends suggest a shift toward data-driven user-centered identification, prioritization, and management of software requirements. Developers should be able to adopt the requirements of masses of users when deciding what to develop and when to release. They could systematically use explicit and implicit user data in an aggregated form to support requirements decisions. The goal is data-driven requirements engineering by the masses and for the masses.","1937-4194","","10.1109/MS.2015.153","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7325177","app reviews;decision support;requirements engineering;software analytics;usage data;software engineering;software development","Requirements engineering;Software engineering;Stakeholders;Media;Feature extraction;Market research","","179","","19","IEEE","11 Nov 2015","","","IEEE","IEEE Magazines"
"Thoughts on software engineering knowledge, and how to organize it","D. J. Bagert; M. Barbacci; D. Budgen; T. C. Lethbridge; W. Suryn; H. van Vliet","Rose Hulman Institute of Technology, Terre Haute, IN, USA; Software Engineering Institute, Pittsburgh, USA; Keele University, Staffordshire, UK; University of Ottawa, Ottawa, Canada; École de Technologie Supérieure, Montreal, Canada; Vrije Universiteit, Amsterdam, Netherlands",10th International Workshop on Software Technology and Engineering Practice,"26 Feb 2004","2002","","","24","35","SWEBOK describes what knowledge a software engineer who has a Bachelor's degree and four years of experience should have. SEEK describes the knowledge to be taught in an undergraduate program in software engineering. Although different in scope and purpose, there are many similarities between the two, and after all, even experienced developers need an education, don't they? A full-day workshop on the alignment between SWEBOK and SEEK, held at STEP 2002, revealed a number of issues that received either a scant or a scattered treatment in either or both documents. These issues include: software architecture, software measurement, and software quality. In addition, topics of debate were whether or not user interface design should be considered part of software design, or rather deserves its own, separate treatment; and whether maintenance/evolution merits a separate discussion, or should rather be seen as the default mode of operation in software development. This paper elaborates the discussions of this workshop.","","0-7695-1878-8","10.1109/STEP.2002.1267596","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1267596","","Software engineering;Knowledge engineering;Educational programs;Scattering;Software architecture;Software measurement;Software quality;User interfaces;Software design;Programming","","3","","23","IEEE","26 Feb 2004","","","IEEE","IEEE Conferences"
"Seminal software engineering using metaheuristic innovative algorithms","M. Harman; B. Jones","Brunei University, Uxbridge, UK; School of Computing, University of Glamorgan, Pontypridd, UK",Proceedings of the 23rd International Conference on Software Engineering. ICSE 2001,"7 Aug 2002","2001","","","762","763","","0270-5257","0-7695-1050-7","10.1109/ICSE.2001.919166","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=919166","","Software engineering;Software algorithms;Software testing;Genetic algorithms;Computer science;Application software;Data engineering;Genetic engineering;Design engineering;Algorithm design and analysis","","2","","11","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Yoopeedoo (UPEDU): a process for teaching software process","P. N. Robillard; P. Kruchten; P. d'Astous","Ecole Polytechnique de Montréal, Montréal, QC, Canada; Rational Software Canada, Vancouver, BC, Canada; Ecole Polytechnique de Montréal",Proceedings 14th Conference on Software Engineering Education and Training. 'In search of a software engineering profession' (Cat. No.PR01059),"7 Aug 2002","2001","","","18","26","The software engineering process is a growing concern for many software development organizations. The need for well-educated software engineers is bringing new software engineering programs to universities. In many programs, software process education adds up to a few hours of lectures in an introductory software engineering course. This paper presents the structure and the content for a full, one-semester course on software processes, which has been designed in close collaboration with industry. The course is based on a software process called UPEDU (Unified Process for EDUcation), pronounced Yoopeedoo, and has been customized from the Rational Unified Process (RUP) for the educational environment. Many artifacts derived from a project case study are used as examples or templates. The content of the course is oriented towards the cognitive skills needed to perform the various activities required in the software process.","1093-0175","0-7695-1059-0","10.1109/CSEE.2001.913815","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=913815","","Education;Coordinate measuring machines;Software engineering;Capability maturity model;Programming;Educational institutions;Computer industry;ISO standards;IEC standards;Software tools","","13","","18","IEEE","7 Aug 2002","","","IEEE","IEEE Conferences"
"Lean Learning - Applying Lean Techniques to Improve Software Engineering Education","R. Chatley; T. Field","Imperial College London, London, UK; Imperial College London, London, UK",2017 IEEE/ACM 39th International Conference on Software Engineering: Software Engineering Education and Training Track (ICSE-SEET),"3 Jul 2017","2017","","","117","126","Building a programme of education that reflects and keeps pace with industrial practice is difficult. We often hear of a skills shortage in the software industry, and the gap between what people are taught in university and the ""real world"". This paper is a case study showing how we have developed a programme at Imperial College London that bridges this gap, providing students with relevant skills for industrial software engineering careers. We give details of the structure and evolution of the programme, which is centred on the tools, techniques and issues that feature in the everyday life of a professional developer working in a modern team. We also show how aligning our teaching methods with the principles of lean software delivery has enabled us to provide sustained high quality learning experiences. The contributions of this paper take the form of lessons learnt, which may be seen as recommendations for others looking to evolve their own teaching structures and methods.","","978-1-5386-2671-9","10.1109/ICSE-SEET.2017.5","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7964336","education;software engineering;curriculum design","Software engineering;Software;Education;Programming profession;Industries;Tools","","23","","24","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"Experience Management Wikis for Reflective Practice in Software Capstone Projects","E. Ras; R. Carbon; B. Decker; J. Rech","Department of Education and Training, Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Department of Product Line Architectures, Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Department of Experience Management, Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany; Department of Experience Management, Fraunhofer Institute of Experimental Software Engineering (IESE), Kaiserslautern, Germany",IEEE Transactions on Education,"12 Nov 2007","2007","50","4","312","320","Software engineering curriculum guidelines state that students should practice methods, techniques, and tools. A capstone project is one possibility to address this aim. A capstone project helps the students to increase their problem solving competencies, improve their social skills (e.g., communication skills), and gather practical experience. A crux of such projects is that students perform ldquoreflectiverdquo practice in order to learn from their experiences. The authors believe that experience gathering and reuse are effective techniques to stimulate reflective activities. An adapted free- and open-source Wiki-based system called software organization platform (SOP) is used to support students in managing their observations and experiences. The system can be used for experience exchange within the team and for experience reuse in forthcoming projects. The results of a case study show that standard Wiki functions improve communication and information sharing by means of explicit observation and experience documentation. A total of 183 documented observations and experiences at the end of the project provide a measure for the amount of reflection students have had during the capstone project. Still, the advantages of using Wikis will decrease when no technical adaptations of the Wiki to the learning objectives and to the software engineering tasks are made. Limitations of the case study, future evaluation steps, and planned developments of SOP will be provided in this paper.","1557-9638","","10.1109/TE.2007.904580","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4358726","Capstone project;experience management;knowledge-based systems;open-source software;reflection;software engineering;Capstone project;experience management;knowledge-based systems;open-source software;reflection;software engineering","Open source software;Software engineering;Knowledge based systems","","16","","41","IEEE","12 Nov 2007","","","IEEE","IEEE Journals"
"Impact of Budget and Schedule Pressure on Software Development Cycle Time and Effort","N. Nan; D. E. Harter","Price College of Business, University of Oklahama, Norman, OK, USA; Whitman School of Management, Syracuse University, Syracuse, NY, USA",IEEE Transactions on Software Engineering,"2 Oct 2009","2009","35","5","624","637","As excessive budget and schedule compression becomes the norm in today's software industry, an understanding of its impact on software development performance is crucial for effective management strategies. Previous software engineering research has implied a nonlinear impact of schedule pressure on software development outcomes. Borrowing insights from organizational studies, we formalize the effects of budget and schedule pressure on software cycle time and effort as U-shaped functions. The research models were empirically tested with data from a 25 billion/year international technology firm, where estimation bias is consciously minimized and potential confounding variables are properly tracked. We found that controlling for software process, size, complexity, and conformance quality, budget pressure, a less researched construct, has significant U-shaped relationships with development cycle time and development effort. On the other hand, contrary to our prediction, schedule pressure did not display significant nonlinear impact on development outcomes. A further exploration of the sampled projects revealed that the involvement of clients in the software development might have “eroded” the potential benefits of schedule pressure. This study indicates the importance of budget pressure in software development. Meanwhile, it implies that achieving the potential positive effect of schedule pressure requires cooperation between clients and software development teams.","1939-3520","","10.1109/TSE.2009.18","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4815275","Cost estimation;time estimation;schedule and organizational issues;systems development.","Programming;Job shop scheduling;Software performance;Computer industry;Financial management;Software development management;Software engineering;Testing;Pressure control;Size control","","63","","74","IEEE","17 Apr 2009","","","IEEE","IEEE Journals"
"Three Innovative Software Engineering Methodologies","E. C. Foster","Department of Computer Science, Keene State College, Keene",2015 Annual Global Online Conference on Information and Computer Technology (GOCICT),"18 Aug 2016","2015","","","90","103","Software engineering has come to the stage where speed of development, level of correctness, interoperability, user friendliness, usefulness, and reusability in different projects are very important factors in determining the success of a software engineering venture. Equally important is the use of methodologies for software design. In just over six decades, we have seen the progress of software design from an amorphous set of informal methodologies to structured techniques, formal methodologies, and object-oriented methodologies. In the area of object-oriented methodologies (OOM), the unified modeling language (UML) has made a significant contribution in defining a set of methodologies that can be applied to any software engineering effort. This paper draws on the UML methodologies and proposes three methodologies that could add richness and additional flexibility to the software engineering experience. They are system topology charts, object/entity specification grid, and the extended operation specification. The system topology charts include an information topology chart (ITC) that presents the object types and/or information entities in the way they will be managed in the software system, and a user interface topology chart (UITC) that presents operations the way they will appear in the system. The object/entity specification grid (O/ESG) adopts the conventions of the UML class diagram, but expands it to include additional critical information that lead to better software construction. The extended operation specification (EOS) embraces the UML guidelines for the activity diagram, but is flexible enough to include other techniques such as pseudo-code, Warnier-Orr diagram, and collaboration diagram. It also allows for the specification of other critical information not covered in these standard techniques.","","978-1-5090-2314-1","10.1109/GOCICT.2015.25","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7545104","Software Design Methodologies;Software Documentation;Software Requirements Engineering;Database Specification;User Interface Design","Software engineering;Topology;Unified modeling language;Software systems;User interfaces;Databases","","1","","14","IEEE","18 Aug 2016","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE International Standard - Systems and software engineering - Life cycle processes - Project management","",,ISO/IEC/IEEE 16326:2019(E),"13 Dec 2019","2019","","","1","42","This document provides normative content specifications for project management plans concerned with systems, and software systems. This document also provides detailed discussion and advice on applying a set of technical management processes that are common to both the system and software life cycles as covered by ISO/IEC/IEEE 15288 and ISO/IEC/IEEE 12207 respectively. The discussion and advice are intended to aid in the preparation of the normative content of project management plans.","","978-1-5044-6299-0","10.1109/IEEESTD.2019.8932690","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8932690","","IEEE Standards;ISO Standards;IEC Standards;Systems engineering and theory;Software engineering;Project management;Product life cycle management","","1","","","","13 Dec 2019","","","IEEE","IEEE Standards"
"Synthesized essence: what game jams teach about prototyping of new software products","J. Musil; A. Schweda; D. Winkler; S. Biffl","Christian Doppler Laboratory for Software Engineering Integration for Flexible Automation Systems, Institute of Software Technology and Interactive Systems, Vienna University of Technology, Austria; Christian Doppler Laboratory for Software Engineering Integration for Flexible Automation Systems, Institute of Software Technology and Interactive Systems, Vienna University of Technology, Austria; Christian Doppler Laboratory for Software Engineering Integration for Flexible Automation Systems, Institute of Software Technology and Interactive Systems, Vienna University of Technology, Austria; Christian Doppler Laboratory for Software Engineering Integration for Flexible Automation Systems, Institute of Software Technology and Interactive Systems, Vienna University of Technology, Austria",2010 ACM/IEEE 32nd International Conference on Software Engineering,"27 Oct 2011","2010","2","","183","186","The development of video games comprises engineering teams within various disciplines, e.g., software engineering, game production, and creative arts. Game jams are a promising approach for (software+) development projects to foster on new product development. This paper evaluates the concept of game jam, a community design/development activity, and its positive effects on new software product development with tight schedules in time-oriented, competitive environments. Game jams have received more public attention in recent times, but the concept itself has not been formally discussed so far. A game jam is a composition of design and development strategies: new product development, participatory design, lightweight construction, rapid experience prototyping, product-value focusing, aesthetics and technology, concurrent development and multidisciplinarity. Although game jams are normally used for rapid prototyping of small computer games, the constellation of the mentioned elements provides a powerful technique for rapidly prototyping new product ideas and disruptive innovations.","1558-1225","978-1-60558-719-6","10.1145/1810295.1810325","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6062155","agile;game development;innovation;new product development;participatory design;prototyping","Games;Technological innovation;Software;Product development;Software engineering;Collaboration;Testing","","6","","16","","27 Oct 2011","","","IEEE","IEEE Conferences"
"Decoding Grounded Theory for Software Engineering","R. Hoda","Faculty of Information Technology, Monash University, Melbourne, Australia",2021 IEEE/ACM 43rd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion),"7 May 2021","2021","","","326","327","Grounded Theory, while becoming increasingly popular in software engineering, is also one of the most misunderstood, misused, and poorly presented and evaluated method in software engineering. When applied well, GT results in dense and valuable explanations of how and why phenomena occur in practice. GT can be applied as a full research method leading to mature theories and also in limited capacity for data analysis within other methods, using its robust open coding and constant comparison procedures. This technical briefing will go through the social origins of GT, present examples of grounded theories developed in SE, discuss the key challenges SE researchers face, and provide a gentle introduction to socio-technical grounded theory, a variant of GT for software engineering research.","2574-1926","978-1-6654-1219-3","10.1109/ICSE-Companion52605.2021.00139","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9402279","socio-technical grounded theory;grounded theory;software engineering;research method","Data analysis;Encoding;Decoding;Faces;Software engineering","","5","","14","IEEE","7 May 2021","","","IEEE","IEEE Conferences"
"A Research on the Education Mode of Innovative Software Talents Oriented to Emerging Engineering","H. Zhao; J. She; Z. Li; H. Rong; X. He; N. Bian","Dept. of Computer Engineering, Hunan University, Changsha, China; Dept. of Computer Engineering, Hunan University, Changsha, China; Dept. of Computer Engineering, Hunan University, Changsha, China; Dept. of Software Engineering, Hunan University, Changsha, China; Business School, Hunan University, Changsha, China; Dept. of Software Engineering, Hunan University, Changsha, China",2019 14th International Conference on Computer Science & Education (ICCSE),"23 Sep 2019","2019","","","959","963","The new generation of technologies, represented by cloud computing, artificial intelligence (AI), internet of things (IoT), and mobile internet, is driving the great renovation of human society as well as the rapid development of new economy and new industries. New requirements are then emerged for the software engineering education at this new era. Hunan University (HNU) relies on outstanding platforms, such as the National Demonstration Software College, the National Featured Software Engineering Major, and the National Pilot Zone for Software Talents Education, carrying out researches on teaching mode renovation, course scheme renovation, and practice scheme renovation within a series of teaching renovation projects. As a result, the Innovative Software Talents (IST) education scheme has been established with accountable achievements and it also has been widely introduced, demonstrated, and applied among Chinese universities.","2473-9464","978-1-7281-1846-8","10.1109/ICCSE.2019.8845451","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8845451","course scheme;practice scheme;system ability;software engineering;IST","Education;Software engineering;Software;Industries;Technological innovation;System analysis and design;Artificial intelligence","","4","","9","IEEE","23 Sep 2019","","","IEEE","IEEE Conferences"
"Impact of Software Engineering Research in Practice: A Patent and Author Survey Analysis","Z. Kotti; G. Gousios; D. Spinellis","Department of Management Science and Technology, Athens University of Economics and Business, Athens, Greece; Department of Software Technology, Delft University of Technology, CD Delft, The Netherlands; Department of Management Science and Technology, Athens University of Economics and Business, Athens, Greece",IEEE Transactions on Software Engineering,"18 Apr 2023","2023","49","4","2020","2038","Existing work on the practical impact of software engineering (SE) research examines industrial relevance rather than adoption of study results, hence the question of how results have been practically applied remains open. To answer this and investigate the outcomes of impactful research, we performed a quantitative and qualitative analysis of 4 354 SE patents citing 1 690 SE papers published in four leading SE venues between 1975–2017. Moreover, we conducted a survey on 475 authors of 593 top-cited and awarded publications, achieving 26% response rate. Overall, researchers have equipped practitioners with various tools, processes, and methods, and improved many existing products. SE practice values knowledge-seeking research and is impacted by diverse cross-disciplinary SE areas. Practitioner-oriented publication venues appear more impactful than researcher-oriented ones, while industry-related tracks in conferences could enhance their impact. Some research works did not reach a wide footprint due to limited funding resources or unfavorable cost-benefit trade-off of the proposed solutions. The need for higher SE research funding could be corroborated through a dedicated empirical study. In general, the assessment of impact is subject to its definition. Therefore, academia and industry could jointly agree on a formal description to set a common ground for subsequent research on the topic.","1939-3520","","10.1109/TSE.2022.3208210","European Union's Horizon 2020 research and innovation programme(grant numbers:825328); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9896170","Software engineering;practical impact;empirical study;survey;patent citations","Software;Patents;Industries;Companies;Software engineering;Interviews;Collaboration","","2","","126","EU","20 Sep 2022","","","IEEE","IEEE Journals"
"A multi-perspective framework for evaluating software engineering education by assessing students' competencies: SECAT — A software engineering competency assessment tool","Y. Sedelmaier; D. Landes","Faculty of Electrical Engineering and Informatics, University of Applied Sciences and Arts, Coburg, Germany; Faculty of Electrical Engineering and Informatics, University of Applied Sciences and Arts, Coburg, Germany",2014 IEEE Frontiers in Education Conference (FIE) Proceedings,"19 Feb 2015","2014","","","1","8","Education invariably aims at developing competencies, technical as well as non-technical ones. As a consequence, there is also a need for methods that can be used to assess the quality of education faithfully. One possible approach is an assessment of whether intended learning outcomes are achieved, i.e. an investigation if the target audience possesses the desired competencies. Assessment of competencies, however, is tricky since competencies are often only vaguely defined. This paper presents SECAT, an approach to assess competencies, and particularly those needed for proper software engineering. To that end, SECAT builds on Rauner's approach for competency assessment in vocational education. Rauner's approach uses nine competency criteria, which are further refined by suitable issues that indicate to which extent a competency is, or should be, present. The main contribution of this paper lies in the adaptation and enhancement of this framework in order to make it useable in software engineering education. Adaptation and enhancements encompass issues such as team and individual assessments, integration of multiple perspectives from various groups of stakeholders, and product- and process-orientation. The paper also presents first insights from using SECAT in a pilot university course in software engineering.","2377-634X","978-1-4799-3922-0","10.1109/FIE.2014.7044331","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7044331","software engineering;software engineering education;assessment and evaluation approaches;quality of teaching and learning;didactical approaches;evaluation of didactical approaches;competence-orientation;SECAT","Software engineering;Educational institutions;Context;Software;Adaptation models;Abstracts","","13","","30","IEEE","19 Feb 2015","","","IEEE","IEEE Conferences"
"Students’ perceptions of integrating a contribution measurement tool in software engineering projects","S. Hamer; C. Quesada-López; M. Jenkins","University of Costa Rica, San Pedro, Costa Rica; University of Costa Rica, San Pedro, Costa Rica; University of Costa Rica, San Pedro, Costa Rica",2023 IEEE 35th International Conference on Software Engineering Education and Training (CSEE&T),"31 Aug 2023","2023","","","21","30","Measuring developers’ and teams’ contributions in project-based software engineering courses is challenging. Instructors require measurement tools to identify early improvement opportunities and simplify the assessment of students’ contributions to projects. Besides, students could appreciate detailed, timely, and valuable feedback that encapsulates the multi-faceted nature of their contribution to improve their skills. With the rise of software repositories, data-driven tools that mine and visualize repository data have been proposed to help assess and improve software engineering courses. Still, little is known about students’ perceptions of integrating these tools to measure project contributions. This paper analyzes students’ perceptions of integrating a contribution measurement tool in agile software engineering projects. We collected the perceptions of 65 undergraduate students developing projects through a mixed-method approach. Our results show several benefits of using these tools in software engineering courses, providing valuable feedback, intending to use such tools in projects, and facilitating timely and helpful feedback. Additionally, students described the benefits of nine agile practices, including coding standards, reviews and inspections, and planning games. These tools were perceived as useful, easy to use, and intended to be used in future projects. Six challenges for integrating these tools in a course setting related to adoption, learning curves, configuration issues, measurement completeness, team dynamics, and Goodhart’s law were found. Our results showed the acceptance and utility of such tools to aid students in software engineering projects.","2377-570X","979-8-3503-2202-6","10.1109/CSEET58097.2023.00013","Universidad de Costa Rica; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10229405","measurement tool;code contributions;assessment;empirical software engineering;software engineering education","Data visualization;Games;Inspection;Software;Encoding;Planning;Software measurement","","","","57","IEEE","31 Aug 2023","","","IEEE","IEEE Conferences"
"Risk-Based Software Development Practices for CREATE Multiphysics HPC Software Applications","R. P. Kendall; L. G. Votta; D. E. Post; C. A. Atwood; N. Hariharan; S. A. Morton; M. Gilbert; E. T. Moyer; R. P. McNally; A. J. Wilson",US Department of Defense High Performance Computing Modernization Program (HPCMP); US Department of Defense High Performance Computing Modernization Program (HPCMP); US Department of Defense High Performance Computing Modernization Program (HPCMP); US Department of Defense High Performance Computing Modernization Program (HPCMP); US Department of Defense High Performance Computing Modernization Program (HPCMP); US Department of Defense High Performance Computing Modernization Program (HPCMP); US Department of Defense High Performance Computing Modernization Program (HPCMP); US Department of Defense High Performance Computing Modernization Program (HPCMP); US Air Force; Stellar Sciences,Computing in Science & Engineering,"27 Oct 2016","2016","18","6","35","46","The January/February 2016 issue of this magazine presented descriptions of the US Defense Department's Computational Research and Engineering Acquisition Tools and Environments (CREATE) program and the software engineering approach for managing its programmatic risks. This article describes the software engineering methodology deployed to manage the development risks faced by CREATE, that is, the risks arising in the product development cycle and environment. The approach here is similar to the one for the management of CREATE programmatic risks and is based on a set of shared development practices. The management of these risks is especially challenging in the environment of distributed teams developing physics-based, system-of-systems, high-performance computing software anchored in the three military departments. The CREATE experience provides a concrete example of successful implementation of best software engineering practices in a computational science and engineering milieu that has historically questioned the value of traditional software engineering wisdom and has resisted the adoption of plan-centered software engineering processes. It has allowed CREATE to adopt important software engineering practices such as use case-centered requirements management, use of pilot projects to align customer and developer expectations, continuous code integration of modular components, and scalable product support models, among others.","1558-366X","","10.1109/MCSE.2016.108","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7723798","military;engineering;software;software engineering;requirements specifications;management;scientific computing","Software development;Risk management;Military computing;Software engineering;Scientific computing;Product development;Requirements management","","4","1","18","IEEE","27 Oct 2016","","","IEEE","IEEE Magazines"
"Exploring the Cognitive Apprenticeship Approach for Teaching Introductory Software Engineering","Shen-Tzay Huang; Yi-Pei Cho; Yu-Jen Lin","Department of MIS, National Pingtung University of Science and Technology, Taiwan; Department of MIS, National Pingtung University of Science and Technology, Taiwan; Department of MIS, National Pingtung University of Science and Technology, Taiwan",19th Conference on Software Engineering Education and Training Workshops (CSEETW'06),"26 Jun 2006","2006","","","14","14","Cognitive apprenticeship is meshed with teaching the introductory software engineering. We sketch the idea and an exploratory experiment in a team-based process-oriented software project track in the fall of 2005. Several preliminary results are exciting while detailed examination should also be further pursued.","","0-7695-2647-0","10.1109/CSEETW.2006.8","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1644085","Cognitive Apprenticeship;Software Engineering Education;Learning","Education;Software engineering;Problem-solving;Writing;Mathematics;Sociology;Educational institutions;Cognitive science;Programming;Java","","","","8","IEEE","26 Jun 2006","","","IEEE","IEEE Conferences"
"A software engineering practice platform based on event ontology","W. Liu; D. Wang; Y. Wu; Y. Liu; Y. Zheng","School of Computer Engineering and Science, Shanghai University, Shanghai, China; School of Computer Engineering and Science, Shanghai University, Shanghai, China; School of Computer Engineering and Science, Shanghai University, Shanghai, China; School of Computer Engineering and Science, Shanghai University, Shanghai, China; School of Computer Engineering and Science, Shanghai University, Shanghai, China",2012 7th International Conference on Computer Science & Education (ICCSE),"6 Sep 2012","2012","","","1474","1479","Aiming at the software engineering practice of undergraduate, this paper proposes a software development practice platform. This platform effectively combines teaching management with software development process management, and realizes a complete lifecycle management of software engineering practice. As well, based on event ontology, this platform constructs a knowledge base of teaching resources and project development resources for sharing, and provides question-answering for users.","","978-1-4673-0242-5","10.1109/ICCSE.2012.6295342","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6295342","Software Engineering Practice Platform (SEPP);TSP;Event ontology;Question-answering","Software;Ontologies;Software engineering;Databases;Proposals;Educational institutions","","1","","7","IEEE","6 Sep 2012","","","IEEE","IEEE Conferences"
"Designing a First-Year Project Course to Engage Freshman Software Engineers: An Experience Report","D. Hendrix; D. Umphress; J. H. Cross","Computer Science and Software Engineering, Aubum University, Auburn, AL, USA; Computer Science and Software Engineering, Aubum University, Auburn, AL, USA; Computer Science and Software Engineering, Aubum University, Auburn, AL, USA",19th Conference on Software Engineering Education & Training (CSEET'06),"8 May 2006","2006","","","25","34","This paper describes a software engineering project course for freshman. The course has been designed to engage and motivate software engineering students at the beginning of their matriculation, while at the same time providing solid software engineering content. Student teams use a simple software process based on extreme programming to complete a semester-long project in computer animation. Course motivation, structure, and implementation are described","2377-570X","0-7695-2557-1","10.1109/CSEET.2006.14","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1617327","","Design engineering;Software engineering;Computer science;Animation;Solids;Programming profession;Motion pictures;Software standards;Accreditation;Educational institutions","","3","","18","IEEE","8 May 2006","","","IEEE","IEEE Conferences"
"Methodology to Construct Educational Video Games in Software Engineering","E. M. Jiménez-Hernández; H. Oktaba; M. Piattini; F. Frida Díaz-Barriga; A. M. Revillagigedo-Tulais; S. V. Flores-Zarco","National Autonomous University of Mexico Ciudad de México, Mexicoa; Universidad Nacional Autonoma de Mexico, Coyoacan, Distrito Federal, MX; Univ. of Castilla-La Mancha, Ciudad Real, Spain; Universidad de Castilla-La Mancha, Ciudad Real, Castilla-La Mancha, ES; Morelia Inst. of Technol., Morelia, Mexico; Morelia Institute of Technology Morelia, México",2016 4th International Conference in Software Engineering Research and Innovation (CONISOFT),"26 May 2016","2016","","","110","114","In this article, a methodology to construct educational video games in software engineering is presented. The methodology is an adaptation from the standard ISO/IEC 29110. Using the methodology, one educational video game named Alphaspot was developed to facilitate the learning of the kernel Alphas of the Essence. Some practitioners working at one software entity tested it.","","978-1-5090-1074-5","10.1109/CONISOFT.2016.25","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7477919","software engineering;methodology;video game;education;ISO/IEC 29110;Essence","Games;Software engineering;Kernel;ISO Standards;Education;IEC Standards","","10","","21","IEEE","26 May 2016","","","IEEE","IEEE Conferences"
"Evaluating Legal Implementation Readiness Decision-Making","A. K. Massey; P. N. Otto; A. I. Antón","Postdoctoral Fellow at the School of Interactive Computing, Georgia Institute of Technology, Atlanta, GA; Association of Computing Machinery, District of Columbia, 555 13th St. NW, Washington; Professor and Chair of the School of Interactive Computing, Georgia Institute of Technology, Atlanta, GA",IEEE Transactions on Software Engineering,"10 Jun 2015","2015","41","6","545","564","Software systems are increasingly regulated. Software engineers therefore must determine which requirements have met or exceeded their legal obligations and which requirements have not. Requirements that have met or exceeded their legal obligations are legally implementation ready, whereas requirements that have not met or exceeded their legal obligations need further refinement. In this paper, we examine how software engineers make these determinations using a multi-case study with three cases. Each case involves assessment of requirements for an electronic health record system that must comply with the US Health Insurance Portability and Accountability Act (HIPAA) and is measured against the evaluations of HIPAA compliance subject matter experts. Our first case examines how individual graduate-level software engineering students assess whether the requirements met or exceeded their HIPAA obligations. Our second case replicates the findings from our first case using a different set of participants. Our third case examines how graduate-level software engineering students assess requirements using the Wideband Delphi approach to deriving consensus in groups. Our findings suggest that the average graduate-level software engineering student is ill-prepared to write legally compliant software with any confidence and that domain experts are an absolute necessity.","1939-3520","","10.1109/TSE.2014.2383374","NSF ITR(grant numbers:522931); NSF(grant numbers:0430166); ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6991569","Legal Implementation Readiness;Regulatory Compliance Software Engineering;Legal Requirements;Requirements Engineering;Legal implementation readiness;regulatory compliance software engineering;legal requirements;requirements engineering","Law;Software;Software engineering;Atmospheric measurements;Particle measurements;Decision making","","10","","41","IEEE","18 Dec 2014","","","IEEE","IEEE Journals"
"Some myths of software engineering education","H. van Vliet","Department of Computer Science, Vrije Universiteit Amsterdam, Netherlands","Proceedings. 27th International Conference on Software Engineering, 2005. ICSE 2005.","19 Dec 2005","2005","","","621","622","Based on many years of teaching software engineering, I present a number of lessons I have learned over the years. I do so in the form of a series of myths, the reverse of which can be considered challenges to educators. The overall message I wish to convey is that there's more to software engineering than engineering. The engineering metaphor gives us a lot of useful guidance in shaping our profession. But there's also a downside, in that this goes at the expense of the human, social dimension that is an essential element of our profession.","1558-1225","1-59593-963-2","10.1109/ICSE.2005.1553616","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1553616","","Software engineering;Computer science education;Computer science;Information science;Human factors;Software quality;Organizing;Guidelines;Cultural differences;Programming","","1","","5","","19 Dec 2005","","","IEEE","IEEE Conferences"
"Capstone Project: From Software Engineering to “Informatics”","H. Ziv; S. Patil","Department of Informatics, University of California, Irvine, CA, USA; Department of Informatics, University of California, Irvine, CA, USA",2010 23rd IEEE Conference on Software Engineering Education and Training,"13 May 2010","2010","","","185","188","This paper reports on experiences in transitioning a capstone course from a single-quarter to three-quarters. A single-quarter project course in software design and development had been offered by our department for over twenty years. More recently, upon formation of a new undergraduate degree in Informatics, this course was transformed into a three-quarter capstone course taken by students in their final year. Correspondingly, some aspects of the course projects, such as the business scope and software complexity, grew in proportion to the increase in the project duration. At the same time, a number of ¿costs¿ were reduced, including the time and effort required to set up the development infrastructure and development environments, and learn new tools and languages. Most importantly, several other factors experienced substantial growth. The longer project duration allowed significant increase in the effort and attention paid to usability engineering and user-centered design, leading to systems that were deployable and more usable for the target users. It also enabled better software testing, deployment and release management. As a result, the final outcome was much closer to production quality than the prototypes and proof-of-concept systems typical of earlier single-quarter projects.","2377-570X","978-1-4244-7053-2","10.1109/CSEET.2010.41","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5463591","","Software engineering;Software design;Informatics;Business communication;Usability;Design engineering;User centered design;Software testing;Production systems;Software prototyping","","4","","8","IEEE","13 May 2010","","","IEEE","IEEE Conferences"
"A Multidimensional Software Engineering Course","O. Barzilay; O. Hazzan; A. Yehudai","Blavatnik School of Computer Science, Tel-Aviv University, Tel-Aviv, Israel; Department of Education in Technology and Science, Technion-Israel Institute of Technology, Haifa, Israel; Blavatnik School of Computer Science, Tel-Aviv University, Tel-Aviv, Israel",IEEE Transactions on Education,"4 Aug 2009","2009","52","3","413","424","Software engineering (SE) is a multidimensional field that involves activities in various areas and disciplines, such as computer science, project management, and system engineering. Though modern SE curricula include designated courses that address these various subjects, an advanced summary course that synthesizes them is still missing. Such a course would enable young practitioners to get a comprehensive description of SE, to experience a genuine software development process, and to appreciate the relations and tradeoffs between the various domains of SE. This paper proposes a multidimensional SE course framework aimed at giving SE students just such comprehensive, cross-paradigm, practical, and theoretical experience and background. The course is organized along four axes: a) fundamentals of SE; b) practices and tools; c) productization; and d) technology evolution. Each of these axes, in themselves multifaceted, enables an examination of SE on various scales and from different perspectives; together they create a holistic multidimensional description of SE. The course is evaluated according to accepted criteria highlighting the course scope, pedagogic decisions, and relevance. The authors also describe their experience of teaching the course three times in the Tel Aviv University and the academic college of Tel-Aviv-Yaffo, Israel.","1557-9638","","10.1109/TE.2008.930094","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4908981","Course design;course evaluation;educational axes;multidimensional domain;multidimensional software engineering course;software engineering;software engineering education","Software;Programming;Redundancy;Programming profession;Education;Software engineering;Evolution (biology)","","11","","22","IEEE","5 May 2009","","","IEEE","IEEE Journals"
"Developing software engineers at the C-130J Software Factory","R. Conn","Lockheed Martin and Kennesaw and Southern Polytechnic State Universities, Marietta, GA, USA",IEEE Software,"7 Nov 2002","2002","19","5","25","29","Lockheed Martin's C-130J Avionics/Software Integrated Product Team (IPT) creates software that runs a wide variety of systems on the C-130J aircraft. This team develops embedded safety-critical real-time air vehicle software and a ground-based data analysis system for aircraft analysis. The IPT operates within the infrastructure of the C-130J Software Factory, which consists of Sun workstations and PCs networked to Web servers, a configuration management server, an aircraft simulator implemented in software, and laboratories are composed of the aircraft's hardware mounted in equipment racks for easy access. The article discusses the IPT's diverse education and training needs, focusing on how to address shortfalls in conventional computer science and engineering education that result in mismatched expectations between the new hire and the company.","1937-4194","","10.1109/MS.2002.1032849","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1032849","","Production facilities;Aircraft propulsion;Aerospace electronics;Aerospace engineering;Automotive engineering;Real time systems;Land vehicles;Vehicle safety;Embedded software;Software safety","","26","","2","IEEE","7 Nov 2002","","","IEEE","IEEE Magazines"
"Bridging Theory to Practice in Software Testing Teaching through Team-based Learning (TBL) and Open Source Software (OSS) Contribution","E. Venson; R. Alfayez","University of Brasilia, Brasilia, Brazil; College of Computer and Information Sciences King Saud University, Riyadh, Saudi Arabia",2024 IEEE/ACM 46th International Conference on Software Engineering: Software Engineering Education and Training (ICSE-SEET),"19 Jun 2024","2024","","","72","81","Curricula recommendation for undergraduate Software Engineering courses underscore the importance of transcending from traditional lecture format to actively involving students in time-limited, iterative development practices. This paper presents a teaching approach for a software testing course that integrates theory and practical experience through the utilization of both TBL and active contributions to OSS projects. The paper reports on our experience implementing the pedagogical approach over four consecutive semesters of a Software Testing course within an undergraduate Software Engineering program. The experience encompassed both online and in-person classes, involving a substantial cohort of over 300 students spanning four semesters. Students' perceptions regarding the course are analyzed and compared with previous, related studies. Our results are positively aligned with the existing literature of software engineering teaching, confirming the effectiveness of combining TBL with OSS contributions. Additionally, our survey has shed light on the challenges that students encounter during their first contribution to OSS projects, highlighting the need for targeted solutions. Overall, the experience demonstrates that the proposed pedagogical structure can effectively facilitate the transition from theoretical knowledge to real-world practice in the domain of Software Testing.","2832-7578","979-8-4007-0498-7","10.1145/3639474.3640081","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10554691","Software Engineering Education;Team-Based Learning;Open Source Software;Software Testing","Software testing;Surveys;Knowledge engineering;Training;Education;Planning;Iterative methods","","","","26","","19 Jun 2024","","","IEEE","IEEE Conferences"
"Reuse of legacy software in object-oriented re-engineering: A case study","S. Datar; S. R. Schach","Vanderbilt University, Department of Computer Science, Nashville, Tennessee, USA; Vanderbilt University, Department of Computer Science, Nashville, Tennessee, USA",Transactions of the South African Institute of Electrical Engineers,"15 Jul 2021","1996","87","3","101","107","There appear to be formidable obstacles to reuse when using the object-oriented paradigm to re-engineer legacy software developed using the structured paradigm. These obstacles are a consequence of the fundamental differences between the structured paradigm and the object-oriented paradigm. Nevertheless, as demonstrated by the case study presented here, it is possible to achieve reuse of specifications, design, code, and test cases. A high proportion of code reuse was achieved because the legacy software was written in C and the re-engineered software in C++, a syntactic superset of C. At the module level, reuse of 100% was obtained. Worldwide, there is more legacy software written in COBOL than in any other language. The results of this paper may have implications for the re-engineering of COBOL legacy software in OO-COBOL, the syntactic superset of COBOL to be standardized in 1997.","0038-2221","","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9486230","Object-oriented paradigm;re-engineering;reuse;legacy software;object-oriented programming languages;object-oriented software engineering","Software;Object oriented modeling;Documentation;Manuals;Organizations;Maintenance engineering;Graphical user interfaces","","","","","","15 Jul 2021","","","SAIEE","SAIEE Journals"
"Fully Online Implementation of Introductory Software Engineering Education Including Web Application Development Practice","Y. Yamada; K. Furukawa; A. Hazeyama","Graduate School of Education, Tokyo Gakugei University, Tokyo, JAPAN; Graduate School of Education, Tokyo Gakugei University, Tokyo, JAPAN; Department of Information Science, Tokyo Gakugei University, Tokyo, JAPAN","2020 IEEE International Conference on Teaching, Assessment, and Learning for Engineering (TALE)","8 Mar 2021","2020","","","591","594","Owing to the COVID-19 pandemic, a number of educational institutes have been forced to execute online distributed education. In traditional courses conducting not only lectures but also practice, the instructor and teaching assistants walk around the class, check how the students are doing, find students who are having trouble, and guide them. However, in distributed education, it is difficult to do the same things as in a collocated environment; therefore, some measures are required. We have been conducting introductory software engineering education that applies web application development in addition to lectures. In the fully online implementation of this course, the following issues need to be considered: (1) the creation of a mechanism to mitigate problems regarding the building of a software engineering environment, and (2) the creation of a question and answer process during application development on a remote meeting system. This paper describes some solutions to the two issues.","2470-6698","978-1-7281-6942-2","10.1109/TALE48869.2020.9368334","Ministry of Education; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9368334","COVID-19;fully online software engineering education;building of a software engineering environment;web application development;question and answer","COVID-19;Cloud computing;Pandemics;Education;Buildings;Writing;Software engineering","","1","","4","IEEE","8 Mar 2021","","","IEEE","IEEE Conferences"
"Research on the Radar Intelligent BIT Testability Maturity Based on Multi-agent Software Engineering Algorithm","X. Jia; M. Sasa; L. Zhizhou","Optics and Electronic Engineering Department, Ordnance Engineering College, Shijiazhuang, China; Ordnance Technology Institute, Ordnance Engineering College, Shijiazhuang, China; Hebei Province Education and Examination Authority, Shijiazhuang, China",2009 WRI World Congress on Software Engineering,"10 Nov 2009","2009","3","","256","259","Because the expense is quite high if we want to increase the radar intelligent BIT testability through hardware maintenance approaches. In this paper, for the first time we adopt the software engineering thinking-structural method to model radar intelligent BIT software. In the end, we present an intelligent BIT software modeling based on Multi-Agent. In this way, the intelligent BIT software maintenance becomes possible. The modification or improvement of intelligent BIT software can be easy and effective. So that the intelligent BIT testability maturity can be accelerated as the diagnosis capability will be enhanced and the false alarm rate will be decreased.","","978-0-7695-3570-8","10.1109/WCSE.2009.298","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5319405","Intelligent BIT;Multi-Agent;multisignal modeling;testability maturity","Radar;Software testing;Software engineering;Software algorithms;System testing;Hardware;Intelligent structures;Costs;Electronic equipment testing;Software maintenance","","1","","7","IEEE","10 Nov 2009","","","IEEE","IEEE Conferences"
"Using the effort of academic projects for the Community Service: A Software Engineering practical approach","J. Marcos-Abed","Computer Science Department, Tecnologico de Monterrey, Monterrey, N.L., México",2016 IEEE Frontiers in Education Conference (FIE),"1 Dec 2016","2016","","","1","4","Work in Progress. Many of our students in the Bachelor in Computer Science start working when they are sophomores. By the time they are senior students, they have already learned different computer languages and technologies and have developed skills that are very well appreciated in the labor market. Tomorrow, the best companies will hire these students with a good salary. So, why not use their knowledge for the common good today? Many academic projects require too much effort from students, and at the end of the semester all this work is thrown away. The main achievement of this approach is to establish a win-win relationship between students from two different courses and social organizations, where students learn more, sharing their knowledge and practicing with real-life projects and team roles, and at the same time, users benefit from products developed.","","978-1-5090-1790-4","10.1109/FIE.2016.7757498","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7757498","Software Engineering;Software Project Management;Software Process Model;Social Projects","Software;Software engineering;Project management;Computer science;Education;Prototypes","","","","15","IEEE","1 Dec 2016","","","IEEE","IEEE Conferences"
"ISO/IEC/IEEE Draft International Standard - Systems and software engineering--Life cycle management--Specification for process description","",,"ISO /IEC/IEEE P24774/DIS, July 2020","25 Aug 2020","2020","","","1","34","A number of international, national and industry standards describe processes and process models. Process models are developed for a range of purposes including process implementation and assessment. In order for users of standards to select the appropriate forms of process description and apply them in a consistent fashion, it is desirable to develop a common characterization of all of these forms of process description. This document presents requirements for the description of processes in terms of their format, content and level of prescription. Because of the wide usage of process descriptions, process elements are categorized as “Required” or “Optional”. Although developed within ISO/IEC/JTC1/SC7 – Systems and software engineering, the requirements of this document can be applied to any process model or description developed for any purpose.","","978-1-5044-6962-3","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9177419","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Systems engineering and theory","","","","","","25 Aug 2020","","","IEEE","IEEE Standards"
"ISO/IEC/IEEE Approved Draft International Standard - Systems and software engineering--Life cycle management--Specification for process description","",,"ISO /IEC/IEEE P24774_D3, January 2021","27 Jan 2021","2021","","","1","34","A number of international, national and industry standards describe processes and process models. Process models are developed for a range of purposes including process implementation and assessment. In order for users of standards to select the appropriate forms of process description and apply them in a consistent fashion, it is desirable to develop a common characterization of all of these forms of process description. This document presents requirements for the description of processes in terms of their format, content and level of prescription. Because of the wide usage of process descriptions, process elements are categorized as “Required” or “Optional”. Although developed within ISO/IEC/JTC1/SC7 – Systems and software engineering, the requirements of this document can be applied to any process model or description developed for any purpose.","","978-1-5044-7340-8","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9337282","","IEEE Standards;ISO Standards;IEC Standards;Software engineering;Systems engineering and theory;Product life cycle management","","","","","","27 Jan 2021","","","IEEE","IEEE Standards"
"A client/server case study for software engineering students","S. A. Butler","Computer Science Department, School of Computer Science, Carnegie Mellon University, Pittsburgh, PA, USA",Proceedings 12th Conference on Software Engineering Education and Training (Cat. No.PR00131),"6 Aug 2002","1999","","","156","165","A goal of the Studio course in the Master of Software Engineering program at Carnegie Mellon University is to bridge the gap between experience and academics. One way to transfer experience to young software engineers is through case studies designed to focus students on specific software engineering problems. This paper discusses my experience with developing a case study to improve students' analytical capabilities and introduce the importance of considering maintenance and implementation issues in software design. The case study, developed as a classroom assignment, proved an effective tool to teach software engineering students that there are more things to consider than performance specifications.","1093-0175","0-7695-0131-1","10.1109/CSEE.1999.755197","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=755197","","Computer aided software engineering;Software engineering;Computer architecture;Maintenance engineering;Performance analysis;Software systems;Bridges;Software architecture;Design engineering;Middleware","","4","","2","IEEE","6 Aug 2002","","","IEEE","IEEE Conferences"
"Software Engineers' Perceptions of Factors in Motivation: The Work, People, Obstacles","R. Sach; H. Sharp; M. Petre","Maths, Computing and Technology Faculty, Open University, Milton Keynes, UK; Maths, Computing and Technology Faculty, Open University, Milton Keynes, UK; Maths, Computing and Technology Faculty, Open University, Milton Keynes, UK",2011 International Symposium on Empirical Software Engineering and Measurement,"1 Dec 2011","2011","","","368","371","Recent research suggests that the motivating factors in software engineering are evolving and that our current understanding of motivation in software engineering might be out of date. This paper presents an analysis of semi-structured interviews with 13 professional software engineers. The data suggests that 'the work' continues to be enjoyable and that 'people' are important, but that 'obstacles' really sap the energy of software engineers.","1949-3789","978-1-4577-2203-5","10.1109/ESEM.2011.50","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6092590","Motivation;Software Development;Professional Software Engineers","Software;Interviews;Software engineering;Logic gates;Systematics;Programming;Employment","","9","","11","IEEE","1 Dec 2011","","","IEEE","IEEE Conferences"
"Impact & Contributions of MBASE on Software Engineering Graduate Courses","R. Valerdi; R. Madachy","Massachusetts Institute of Technology, USA; University of Southern California, USA",19th Conference on Software Engineering Education & Training (CSEET'06),"8 May 2006","2006","","","209","218","As the founding Director of the Center for Software Engineering, Professor Barry W. Boehm developed courses that have greatly impacted the education of software engineering students. Through the use of the MBASE framework and complementary tools, students have been able to obtain real-life software development experience without leaving campus. Project team clients and the universities have also benefited. This paper provides evidence on the impact of Dr. Boehm's frameworks on courses at two universities, and identifies major contributions to software engineering education and practice","2377-570X","0-7695-2557-1","10.1109/CSEET.2006.21","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1617349","","Software engineering;Software systems;Spirals;Programming;Computer science education;Computer architecture;Computer industry;Computer science;Educational technology;Home computing","","1","","20","IEEE","8 May 2006","","","IEEE","IEEE Conferences"
"A Case Study of Group Communication Patterns in a Large Project Software Engineering Course","B. MacKellar","Saint John's University, USA",2012 IEEE 25th Conference on Software Engineering Education and Training,"23 Jul 2012","2012","","","134","138","Effective communication among members of a software development team is considered to be a critical factor in the success of software projects. Social network analysis is a promising way to analyze communication patterns that has been used in a number of studies of professional software development teams. In this paper, we present preliminary data on communication events collected in a software engineering course and analyze it on a number of measures including basic social network measures. Successful groups are compared to an unsuccessful group on these measures. This is a work in progress report of a project to use social network analysis as a means of studying communication patterns among software engineering students, in order to improve teaching strategies.","2377-570X","978-1-4673-1592-0","10.1109/CSEET.2012.21","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6245024","","Software engineering;Software;Social network services;Databases;Business;Face;Collaboration","","2","","12","IEEE","23 Jul 2012","","","IEEE","IEEE Conferences"
"Organizational Behavior Engineering for Sustainable Global Software Development","D. Khara; D. P. Mahapatra","Siemens Technology and Services Private Limited, Pune, India; Siemens Technology and Services Private Limited, Pune, India",2016 IEEE 11th International Conference on Global Software Engineering (ICGSE),"29 Sep 2016","2016","","","11","15","We had started our journey as an Offshore Supplier with a clear goal to become the ""Software Engineering Partner of choice"" for the Siemens R&D organization. Now, while we work as a partner of choice, our sustainability in this role, has largely depended on our ability to demonstrate the right set of behaviors as a partner organization, retain our key people and enable them to grow. Our continuous and conscious focus on people development, as a matter of our organizational culture, has been one of the key factors that have contributed in generating the required value in a partnership. In this paper, we talk about our expedition in which we applied our customized ""Organizational Behavior Engineering"" practices to deal with our challenges in enabling our people to achieve growth and mastery in the roles they played. We ensured that not only we built and developed technical and domain competencies, but we also retained these competencies to be able to play the role of a dependable partner, on a sustainable basis. In this paper, we also share the WHY part behind our practices, the HOW part of the implementation, the challenges we faced, the results we have achieved and our next steps towards further development.","2329-6313","978-1-5090-2680-7","10.1109/ICGSE.2016.18","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7577413","Sustainable Global Product Development;People Development and Excellence;Human Aspects of Software Development;Sustainable Global Software Engineering;Organizational Behavior Engineering;Sustainable Holistic Organization Development","Conferences;Product development;Context;Software engineering;Software;Companies","","","","4","IEEE","29 Sep 2016","","","IEEE","IEEE Conferences"
"A Graduate Education in Software Management and the Software Business for Mid-Career Professionals","R. Bareiss; G. Mercier","Carnegie Mellon University Silicon Valley, USA; Carnegie Mellon University Silicon Valley, USA",2010 23rd IEEE Conference on Software Engineering Education and Training,"13 May 2010","2010","","","65","72","Given the unique nature of the software business, the faculty of Carnegie Mellon University's Silicon Valley campus concluded that mid-career software professionals would be better served by a tailored master's degree focusing on software management and more broadly on the business of software than by a typical MBA. Our software management master's program integrates business, technical, and soft skills to prepare our students for technical leadership in their current companies or in entrepreneurial ventures. Our initial program built on the strengths of Carnegie Mellon's world-class software engineering education. We targeted students working in large companies, engaged in large-scale enterprise software projects, employing ¿high ceremony¿ software development processes. However, the majority of our students came from Silicon Valley companies which shared a product development focus, engaged in smaller projects, favored agile development processes, and measured development cycles in weeks rather than years. Our program has evolved to align with these interests. It employs a unique team-based and project-based pedagogy which emphasizes practical skills over theory, depth over breadth, and coaching over lecturing. High student satisfaction and growing enrollment have validated our curriculum decisions and have led us to make this program the educational centerpiece of Carnegie Mellon's Silicon Valley campus.","2377-570X","978-1-4244-7053-2","10.1109/CSEET.2010.26","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5463630","","Engineering management;Companies;Software engineering;Educational programs;Silicon;Software quality;Software development management;Management training;Open source software;Knowledge management","","4","","9","IEEE","13 May 2010","","","IEEE","IEEE Conferences"
"A new perspective on agent-oriented software engineering","A. A. Barfouroush; M. R. A. Shirazi","Computer Engineering Faculty, Intelligent Systems Laboratory, University of Technology, Iran; Intelligent Systems Laboratory Limited, Iran","Proceedings World Automation Congress, 2004.","20 Jun 2005","2004","16","","155","162","In this paper, we introduce and justify agent-oriented software engineering (AOSE) as a layered technology. The layers of this technology are quality, agent-oriented software process model, agent-oriented methods, agent-based system architecture and agent development tools. On the basis of this layered view, an investigation and evaluation on the current! works in agent-oriented software engineering is presented. current gaps are analyzed and areas for further works are introduced. The other main contributions of this paper are introducing and describing umbrella activities for complementing the main activities and steps in the agent-based system development, a classification and definition of testing activities for agent-had systems and a classification of agent development tools. The results that have been presented in this paper are based on an extensive survey of work in the field of agent-oriented software engineering. ","","1-889335-21-5","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1438648","agent;agent-oriented software engineering;software engineering","Software engineering;Software quality;Software tools;Systems engineering and theory;Intelligent systems;Intelligent agent;Laboratories;Computer architecture;System testing;Application software","","","","27","","20 Jun 2005","","","IEEE","IEEE Conferences"
"Artificial Intelligence in Software Engineering: Perspectives and Challenges","K. Bhandari; K. Kumar; A. L. Sangal","Computer Science & Engineering, Dr. B.R Ambedkar National Institute of Technology, Jalandhar, India; Computer Engineering, National Institute of Technology, Kurukshetra, India; Computer Science & Engineering, Dr. B.R Ambedkar National Institute of Technology, Jalandhar, India",2023 Third International Conference on Secure Cyber Computing and Communication (ICSCCC),"14 Jul 2023","2023","","","133","137","Artificial Intelligence in Software Engineering is the hottest trend in the rapidly growing software world. AI techniques are powerful and easy to use as it can be easily deployed as key components of the system. The fusion of both these techniques emerges four new innovative research areas which require extensive research in the future. The application of AI techniques in the Software Engineering field poses many opportunities and risks for software organizations and handling these issues is essential before the selection of appropriate techniques. In this paper, we present an introduction, new emerging fields with the fusion of Artificial Intelligence with Software Engineering, challenges, and a conclusion.","","979-8-3503-0071-0","10.1109/ICSCCC58608.2023.10176436","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10176436","Software Engineering;Artificial Intelligence;Machine Learning","Industries;Companies;Market research;Software;Artificial intelligence;Software engineering","","","","20","IEEE","14 Jul 2023","","","IEEE","IEEE Conferences"
"On the value of user preferences in search-based software engineering: A case study in software product lines","A. S. Sayyad; T. Menzies; H. Ammar","Lane Department of Computer Science and Electrical Engineering, West Virginia University, Morgantown, WV, USA; Lane Department of Computer Science and Electrical Engineering, West Virginia University, Morgantown, WV, USA; Lane Department of Computer Science and Electrical Engineering, West Virginia University, Morgantown, WV, USA",2013 35th International Conference on Software Engineering (ICSE),"26 Sep 2013","2013","","","492","501","Software design is a process of trading off competing objectives. If the user objective space is rich, then we should use optimizers that can fully exploit that richness. For example, this study configures software product lines (expressed as feature maps) using various search-based software engineering methods. As we increase the number of optimization objectives, we find that methods in widespread use (e.g. NSGA-II, SPEA2) perform much worse than IBEA (Indicator-Based Evolutionary Algorithm). IBEA works best since it makes most use of user preference knowledge. Hence it does better on the standard measures (hypervolume and spread) but it also generates far more products with 0% violations of domain constraints. Our conclusion is that we need to change our methods for search-based software engineering, particularly when studying complex decision spaces.","1558-1225","978-1-4673-3076-3","10.1109/ICSE.2013.6606595","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6606595","Software Product Lines;Feature Models;Optimal Feature Selection;Multiobjective Optimization;Indicator-Based Evolutionary Algorithm;Search-Based Software Engineering","Software;Optimization;Software engineering;Mobile handsets;Software algorithms;Evolutionary computation;Sociology","","84","","35","IEEE","26 Sep 2013","","","IEEE","IEEE Conferences"
"The Role Of Post-Release Software Traceability in Release Engineering: A Software-Intensive Embedded Systems Case Study From The Telecommunications Domain","A. Dakkak; J. Bosch; H. H. Olsson","Ericsson AB, Stockholm, Sweden; Chalmers University of Technology, Göteborg, Sweden; Malmö University, Malmö, Sweden",2022 48th Euromicro Conference on Software Engineering and Advanced Applications (SEAA),"16 Jan 2023","2022","","","169","176","Modern release engineering practices such as continuous integration and delivery have allowed software development companies to transition from a long release cycle to a shorter one. The shorter release cycle has led to more software releases available to customers. At the same time, companies developing high-volume software-intensive embedded systems often deliver patch releases and maintenance releases on top of major and minor releases to customers who pick and choose what releases apply to them and decide when to upgrade the system, if to upgrade at all. While release engineering has been studied before in web-based, desktop-based, and embedded software, the focus has been on pre-release activities. Few studies have investigated what happens after the release, particularly the role of tracing software from release to deployment in high-volume software-intensive embedded systems. To address this gap, we conducted a qualitative case study at a multi-national telecommunications systems provider focusing on Radio Access Network (RAN) software. RAN software is a complex and large-scale embedded software used in mobile networks Base Stations (BS), providing software functionality for RAN mobile technologies ranging from 2G to 5G. Our study shed light on post-release software traceability and how it is used in the release engineering process.","","978-1-6654-6152-8","10.1109/SEAA56994.2022.00034","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10011191","Release engineering;software traceability;software-intensive embedded system","Release engineering;Base stations;Embedded systems;5G mobile communication;Focusing;Companies;Maintenance engineering","","1","","35","IEEE","16 Jan 2023","","","IEEE","IEEE Conferences"
"A Coherent Object-Oriented (OO) Software Metric Framework Model: Software Engineering","M. Mao; Y. Jiang","School of Information Science and Technology, Sun Yat-Sen University, Guangzhou, China; School of Information Science and Technology, Sun Yat-Sen University, Guangzhou, China",2008 International Conference on Computer Science and Software Engineering,"22 Dec 2008","2008","2","","68","72","Software metrics play an important role in developing high quality software as well as developer productivity. In this paper, we analyze the relationships between object-oriented (OO) metrics attributes and software quality characteristics, combining traditional and OO metrics method, present a coherent framework model for object-oriented software metrics and their computational methods, which can metric software development from four layers: function layer, class layer, module layer and system layer.","","978-0-7695-3336-0","10.1109/CSSE.2008.746","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4722003","Object-oriented (OO) Metrics;Software Metrics Framewor;Metrics Attributes;Computational Methods","Software metrics;Object oriented modeling;Software engineering;Software quality;Programming;Software systems;Information science;Sun;Size measurement;Software measurement","","3","","37","IEEE","22 Dec 2008","","","IEEE","IEEE Conferences"
"Instilling a software engineering mindset through freshman Seminar","M. J. Lutz; J. R. Vallino; K. Martínez; D. E. Krutz","Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA; Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, USA",2012 Frontiers in Education Conference Proceedings,"18 Feb 2013","2012","","","1","6","Student retention is a challenge faced by all engineering programs. Our first year software engineering students have schedules filled with computer science, mathematics, science and humanities. The lack of any exposure to engineering meant some students, expressing a dislike for software engineering, left the program before they had any exposure to the discipline. To address this issue, we created a one credit Software Engineering Freshman Seminar, which all entering students take in their first term at RIT. This lets us insure student/faculty contact early in the program, as well as providing an opportunity to introduce engineering concepts and practices early in each student's program of study. This paper discusses the seminar's current incarnation. In particular, we focus on those aspects of the course which help students identify with software engineering as a profession. The challenge we face is achieving this goal with students whose technical knowledge and skills are modest. We have settled on an approach that provides experience with teamwork, requirements elicitation, and the effects of change, and addressing professional ethics. These in-class activities are complemented by an assignment to interview a practicing software engineer and to write an interview summary for discussion. This activity ensemble serves to disabuse students of the notion that software engineering is little more than programming, or that the discipline is identical to computer science. Should a student exit the program at this point, at least he or she knows a bit about what they are leaving behind.","2377-634X","978-1-4673-1352-0","10.1109/FIE.2012.6462287","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6462287","first-year seminar;software engineering;teamwork","Software engineering;Software;Seminars;Interviews;Ethics;Computer science;Collaboration","","5","","11","IEEE","18 Feb 2013","","","IEEE","IEEE Conferences"
"When Natural Language Processing Jumps into Collaborative Software Engineering","F. Gilson; D. Weyns","Computer Science and Software Engineering, University of Canterbury, Christchurch, New Zealand; Department of Computer Science, Belgium Linnaeus University, Växjö, Sweden",2019 IEEE International Conference on Software Architecture Companion (ICSA-C),"13 May 2019","2019","","","238","241","Software engineering is an intrinsically collaborative activity, especially in the era of Agile Software Development. Many actors are partaking in development activities, such that a common understanding should be reached at numerous stages during the overall development life-cycle. For a few years now, Natural Language Processing techniques have been employed either to extract key information from free-form text or to generate models from the analysis of text in order to ease the sharing of knowledge across all parties. A significant part of these approaches focuses on retrieving lost domain and architectural knowledge through the analysis of documents, issue management systems or other forms of knowledge management systems. However, these post-processing methods are time-consuming by nature since they require to invest significant resources into the validation of the extracted knowledge. In this paper, inspired by collaborative tools, bots and Natural Language extraction approaches, we envision new ways to collaboratively record and document design decisions as they are discussed. These decisions will be documented as they are taken and, for some of them, static or behavioural models may be generated on-the-fly. Such an interactive process will ensure everyone agrees on critical design aspects of the software. We believe development teams will benefit from this approach because manual encoding of design knowledge will be reduced and will not be pushed to a later stage, when not forgotten.","","978-1-7281-1876-5","10.1109/ICSA-C.2019.00049","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8712352","agile software development;documentation;model-driven development;natural language processing","Tools;Natural language processing;Unified modeling language;Software;Monitoring;Software engineering;Collaboration","","2","","34","IEEE","13 May 2019","","","IEEE","IEEE Conferences"
"The Human Competitiveness of Search Based Software Engineering","J. T. de Souza; C. L. Maia; F. G. de Freitas; D. P. Coutinho","Optimization in Software Engineering Group (GOES.UECE), State University of Ceará, Fortaleza, Ceara, Brazil; Optimization in Software Engineering Group (GOES.UECE), State University of Ceará, Fortaleza, Ceara, Brazil; Optimization in Software Engineering Group (GOES.UECE), State University of Ceará, Fortaleza, Ceara, Brazil; Optimization in Software Engineering Group (GOES.UECE), State University of Ceará, Fortaleza, Ceara, Brazil",2nd International Symposium on Search Based Software Engineering,"11 Nov 2010","2010","","","143","152","This paper reports a comprehensive experimental study regarding the human competitiveness of search based software engineering (SBSE). The experiments were performed over four well-known SBSE problem formulations: next release problem, multi-objective next release problem, workgroup formation problem and the multi-objective test case selection problem. For each of these problems, two instances, with increasing sizes, were synthetically generated and solved by both metaheuristics and human subjects. A total of 63 professional software engineers participated in the experiment by solving some or all problem instances, producing together 128 responses. The comparison analysis strongly suggests that the results generated by search based software engineering can be said to be human competitive.","","978-1-4244-8341-9","10.1109/SSBSE.2010.25","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5635158","human competitiveness;search based software engineering;SBSE;human subjects","Humans;Software engineering;Search problems;Simulated annealing;Software;Gallium;Software algorithms","","27","","53","IEEE","11 Nov 2010","","","IEEE","IEEE Conferences"
"Work in progress — Elassys: Online tool for teamwork analysis and assessment in software engineering education","A. Mamei; R. Todtenhoefer; D. Petkovic",NA; NA; NA,2011 Frontiers in Education Conference (FIE),"2 Feb 2012","2011","","","T1H-1","T1H-3","Teaching software engineering (SE) is now critical part of all major curricula in computer science programs. The ultimate goals of such programs include development of teamwork practices and techniques important for software (SW) development and application of modern SE practices and processes. One of the most challenging parts in these activities is the assessment process whose goal is to evaluate student's achievement of those learning objectives, namely adherence to the software engineering process and their ability to develop adequate SW product. The challenges of the assessment process include the following: a) Fairness of the assessment process - reflection of individual performance and contribution as well as of ability of students to work in collaborative environment and support teamwork; b) Effectiveness, efficiency and ease of implementation; c) Fast and timely access to the relevant feedback about performance and collaboration of the students; d) Automation of the process and availability of the recorded data for further analysis. To address these questions we have designed a tool Elassys for assessment and analysis of teamwork and individual student performance in software engineering projects.","2377-634X","978-1-61284-469-5","10.1109/FIE.2011.6142842","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6142842","Assessment;online tool;performance;software engineering;teamwork","Software engineering;Teamwork;Educational institutions;IEEE Computer Society;Software;Joints","","1","","18","IEEE","2 Feb 2012","","","IEEE","IEEE Conferences"
"Extended Principlism Approach to Software Engineering Ethics","K. Saleh","Department of Information Sciences, Kuwait University, Kuwait City, Kuwait",2024 4th International Conference on Information Communication and Software Engineering (ICICSE),"12 Aug 2024","2024","","","51","54","The reliance on software systems to support our daily activities, and to facilitate decision making processes in the workplace is becoming a fact of life spanning a wide range of application domains including healthcare, security, banking and finance, education, transportation, and social networking. Many of these software systems are safety-critical and real-time systems that affect the physical safety and well-being of humans. Developing ethical and trustworthy software systems is a complex and challenging process. To avoid many of the ethical concerns and pitfalls, it is of utmost importance that the developers and maintainers of such systems understand and adhere to some ethical principles that these systems must conform to in order to increase the various stakeholders’ trust in such systems and avoid potential future legal consequences. In this paper, we first explain how the four ethical principles of autonomy and respect, beneficence, non-maleficence and justice that were introduced by Beauchamp and Childress can apply when developing and maintaining ethical software systems. We then define the people, process and product viewpoints with requirements for ethical software engineering. The strict consideration of these requirements is shown to map to the four ethical principles and hence contribute to the conformance to these principles. Finally, we present and discuss cases using the principlism (principlesbased) approach and the three viewpoints.","","979-8-3503-5169-9","10.1109/ICICSE61805.2024.10625674","Kuwait University; ","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10625674","ethics;principlism;software engineering","Ethics;Social networking (online);Law;Transportation;Medical services;Software systems;Real-time systems","","","","18","IEEE","12 Aug 2024","","","IEEE","IEEE Conferences"
"Bridging the gaps between software engineering and human-computer interaction","R. Kazman; L. Bass; J. Bosch","Software Engineering Institute, Pittsburgh, PA, USA; Software Engineering Institute, Pittsburgh, PA, USA; University of Groningam, Groningen, Netherlands","25th International Conference on Software Engineering, 2003. Proceedings.","28 May 2003","2003","","","777","778","The First International Workshop on the Relationships between Software Engineering and Human-Computer Interaction was held on May 3-4, 2003 as part of the 2003 International Conference on Software Engineering, in Portland, OR, U.S.A. This workshop was motivated by a perception among researchers, practitioners, and educators that the fields of Human-Computer Interaction and Software Engineering were largely ignoring each other and that they needed to work together more closely and to understand each other better. This paper describes the motivation, goals, organization, and outputs of the workshop.","0270-5257","0-7695-1877-X","10.1109/ICSE.2003.1201281","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1201281","","Software engineering;Human computer interaction;Educational institutions;Software systems;User interfaces;Computer industry;Best practices;Vocabulary;Proposals;Educational programs","","6","","","IEEE","28 May 2003","","","IEEE","IEEE Conferences"
"Teaching Software Engineering in schools on the right time to introduce Software Engineering concepts","A. Bollin; B. Sabitzer","Institut für Informatik-Systeme, Alpen-Adria Universität Klagenfurt, Klagenfurt, Austria; Institut für Informatik-Systeme, Alpen-Adria Universität Klagenfurt, Klagenfurt, Austria",2015 IEEE Global Engineering Education Conference (EDUCON),"30 Apr 2015","2015","","","518","525","Software is everywhere - be it in mobile phones, in washing machines, or in cars. With it, the importance of Software Engineering is uncontested, and Software Engineering (SE) is taught all over the world: at Universities, at Colleges, and recently also at High Schools. There are international Software Engineering curricula, standards, and certificates, but there is no manifestation of Software Engineering (and related practices) in the course syllabi at primary and secondary schools. This contribution raises the question about the ideal time to start with Software Engineering at schools and reports on some first answer and lessons learned of an experiment introducing Software Engineering principles in the 3rd grade of a vocational high school (higher secondary school).","2165-9567","978-1-4799-1908-6","10.1109/EDUCON.2015.7096019","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7096019","Engineering Education;Secondary Schools;Learning and Teaching Experiences Introduction","Software;Software engineering;Education;Programming profession;Informatics","","5","","39","IEEE","30 Apr 2015","","","IEEE","IEEE Conferences"
"A Flipped Classroom Experience Teaching Software Engineering","N. M. Paez","Department of Science and Technology, Universidad Nacional de Tres de Febrero, Saenz Peña, Buenos Aires, Argentina",2017 IEEE/ACM 1st International Workshop on Software Engineering Curricula for Millennials (SECM),"3 Jul 2017","2017","","","16","20","New teaching approaches like the flipped classroom are an interesting alternative to educate new generations but they represent new challenges for teachers. This paper describes our experience re-designing our classes and study materials in order to adopt a flipped classroom approach combined with some other non-traditional teaching techniques. This experience is focused on the Software Engineering course at Universidad Nacional de Tres de Febrero. In this paper we share details of our strategy, the positive results we obtained and the concerns we still need to address.","","978-1-5386-2795-2","10.1109/SECM.2017.6","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7964617","experience report;flipped classroom;education;agile;software engineering","Education;Tools;Software engineering;Online services;Industries;Smart phones;Context","","22","","12","IEEE","3 Jul 2017","","","IEEE","IEEE Conferences"
"A Comparison of Dictionary Building Methods for Sentiment Analysis in Software Engineering Text","M. R. Islam; M. F. Zibran","University of New Orleans, USA; University of New Orleans, USA",2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM),"11 Dec 2017","2017","","","478","479","Sentiment Analysis (SA) in Software Engineering (SE) texts suffers from low accuracies primarily due to the lack of an effective dictionary. The use of a domain-specific dictionary can improve the accuracy of SA in a particular domain. Building a domain dictionary is not a trivial task. The performance of lexical SA also varies based on the method applied to develop the dictionary. This paper includes a quantitative comparison of four dictionaries representing distinct dictionary building methods to identify which methods have higher/lower potential to perform well in constructing a domain dictionary for SA in SE texts.","","978-1-5090-4039-1","10.1109/ESEM.2017.67","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8170140","Sentiment analysis;Software engineering;Dictionary;Lexicon","Dictionaries;Tools;Software engineering;Buildings;Benchmark testing;Sentiment analysis;Reliability","","17","","14","IEEE","11 Dec 2017","","","IEEE","IEEE Conferences"
"Study on the multimedia courseware with software engineering theory","Z. Yong; L. Zengxue; L. Chao; Y. Panpan","Industrial & Commercial College, HeBei University, Baoding, HeBei, China; Quality & technology supervision College, HeBei University, Baoding, HeBei, China; Physical Research Department, HeBei University, Baoding, HeBei, China; Quality & technology supervision College, HeBei University, Baoding, HeBei, China",2012 IEEE Symposium on Robotics and Applications (ISRA),"18 Jun 2012","2012","","","900","903","As one kind of Software projects, Multimedia Courseware is facing the Software crisis too. The paper gives a way to solve this problem by using the Software Engineering theory.","","978-1-4673-2207-2","10.1109/ISRA.2012.6219337","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=6219337","Software engineering;Multimedia courseware;Solutions to the crisi","Courseware;Software;Multimedia communication;Software engineering;Programming;Maintenance engineering","","","","7","IEEE","18 Jun 2012","","","IEEE","IEEE Conferences"
"Revisiting the Construct and Assessment of Industrial Relevance in Software Engineering Research","K. Petersen; J. Börstler; N. B. Ali; E. Engström","Blekinge Institute of Technology, Sweden University of Applied Sciences, Flensburg, Germany; Blekinge Institution of Technology, Sweden; Blekinge Institution of Technology, Sweden; Lund University, Sweden",2024 IEEE/ACM International Workshop on Methodological Issues with Empirical Studies in Software Engineering (WSESE),"11 Oct 2024","2024","","","17","20","Industrial relevance is essential for an applied research area like software engineering. However, it is unclear how to achieve industrial relevance and how we communicate and assess it. We propose a reasoning framework to support the design, reporting, and assessment of research for industrial relevance.","","979-8-4007-0567-0","10.1145/3643664.364820","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10707625","Software engineering;Research;Industry relevance;Practical relevance","Conferences;Cognition;Software engineering","","","","18","","11 Oct 2024","","","IEEE","IEEE Conferences"
"Impact of using Agile Methods in Software Engineering Education: A Case Study","S. Al-Ratrout","Information Technology Department, Al-Zahra College for Women, Muscat, Oman","2019 6th International Conference on Control, Decision and Information Technologies (CoDIT)","2 Sep 2019","2019","","","1986","1991","Agile methods have proved their applicability and efficiency in software development. Advantages of using agile methods include short development life-cycle times; multidisciplinary development teams; continuous evolution, immediacy, and reduced cost of change. Although some universities started including these methods in their curriculum, courses on practical practices for Agile methods at the undergraduate and graduate levels are still few. In this paper, an investigation is conducted to evaluate the impact of teaching practical agile methods in web engineering course on the learning outcomes of the software engineering students. This case study started by conducting a real-life business simulation inside a computer lab. Then, a questionnaire was prepared and disseminated in order to obtain the feedback on the students' perception on this teaching method. Afterward, the questionnaire results were analyzed and assessments for students were done to find out the impact of this educational technique on students' performance.","2576-3555","978-1-7281-0521-5","10.1109/CoDIT.2019.8820377","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8820377","Web Engineering;Software Engineering Education;Agile methods;Scrum;XP","Software;Education;Software engineering;Programming profession;Business;Industries","","5","","19","IEEE","2 Sep 2019","","","IEEE","IEEE Conferences"
"Data Warehousing in an Industrial Software Development Environment","M. Colaço Júnior; M. Mendonça; F. Rodrigues","Federal University of Bahia, Salvador, BA, Brazil; Federal University of Bahia, Salvador, BA, Brazil; Federal University of Bahia, Salvador, BA, Brazil",2009 33rd Annual IEEE Software Engineering Workshop,"4 Nov 2010","2009","","","131","135","Data quality is one of the bases for effective data mining. Flexible, consistent and extensible data storage is one of the requirements for effective data analysis. For more than 15 years, researchers in the database and decision making world have been studying the construction of data repositories for data analysis. Named data warehouses, these repositories are historical databases, which are separated both logically and physically from the organization production environment and designed to store data gathered from this environment. Data warehousing also includes data selection, integration and organization approaches to make data easily accessible to the decision making process. Based on our previous experience with data warehousing for mining software repositories, this paper presents a Data Warehousing Approach for software development data analysis.","1550-6215","978-1-4244-6864-5","10.1109/SEW.2009.7","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5621799","Software Data Warehouse;Mining Software Repositories;Software Engineering Intelligence","Software;Data mining;Warehousing;History;Maintenance engineering;Software engineering;Measurement","","2","","15","IEEE","4 Nov 2010","","","IEEE","IEEE Conferences"
"SETMAT: A Representation Instrument for Software Engineering Teaching Practices","M. C. Gómez-Álvarez; C. M. Zapata-Jaramillo; H. Astudillo-Rojas","Departamento de Ciencias de la Computación y la Decisión, Universidad Nacional de Colombia, Medellín, Colombia; Departamento de Ciencias de la Computación y la Decisión, Universidad Nacional de Colombia, Medellín, Colombia; Instituto de Tecnología para la Innovación en Salud y Bienestar Universidad Andres, Viña del Mar, Chile",2024 L Latin American Computer Conference (CLEI),"8 Oct 2024","2024","","","1","9","Software engineering (SE) teaching includes different strategies such as project-based learning, collaborative learning, simulations, and case methods, among others, seeking to balance theory and practice and encourage teamwork. However, although some repositories of teaching practices are identified, each SE teacher incorporates different strategies/practices either barely documented or subjectively represented. The latter hinders the transfer of knowledge among the software engineering education community. Therefore, in this paper we propose SETMAT (Software Engineering Teaching Methods and Theory), a descriptive theory of SE education offering a common conceptual framework for representing software engineering teaching practices, and we also describe a pilot with teachers from Colombia, Chile, and Mexico where they represented and socialized their SE teaching practices in SETMAT. This pilot proves the usage of SETMAT for representing teaching practices easies comparison, composition, and transferring such practices. This poses an input of interest for SE education.","2771-5752","979-8-3315-4097-5","10.1109/CLEI64178.2024.10700415","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10700415","Software Engineering;SETMAT;Teaching practices","Knowledge engineering;Federated learning;Instruments;Education;Software;Teamwork;Software engineering","","","","0","IEEE","8 Oct 2024","","","IEEE","IEEE Conferences"
"IEEE Standard Glossary of Software Engineering Terminology","",,ANSI/ IEEE Std 729-1983,"17 Mar 2016","1983","","","1","40","Software engineering is an emerging field. New terms are continually being generated, and new meanings are being adopted for existing terms. The Glossary of Software Engineering Terminology was undertaken to document this vocabulary. Its purpose is to identify terms currently used in software engineering and to present the current meanings of these terms. It is intended to serve as a useful reference for software engineers and for those in related fields and to promote clarity and consistency in the vocabulary of software engineering. It is recognized that software engineering is a dynamic area; thus the standard will be subject to appropriate change as becomes necessary.;Software engineering is an emerging field. New terms are continually being generated, and new meanings are being adopted for existing terms. The Glossary of Software Engineering Terminology was undertaken to document this vocabulary. Its purpose is to identify terms currently used in software engineering and to present the current meanings of these terms. It is intended to serve as a useful reference for software engineers and for those in related fields and to promote clarity and consistency in the vocabulary of software engineering. It is recognized that software engineering is a dynamic area; thus the standard will be subject to appropriate change as becomes necessary.","","978-1-5044-0425-9","10.1109/IEEESTD.1983.7435207","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7435207","","IEEE Standards;ANSI Standards;Terminology;Software engineering","","10","","","","17 Mar 2016","","","IEEE","IEEE Standards"
"Industry–Academia Collaboration in Software Engineering","J. C. Carver; R. Prikladnicki","University of Alabama, Tuscaloosa, AL, US; Pontifical Catholic University",IEEE Software,"27 Sep 2018","2018","35","5","120","124","This article aims to encourage more industry–academia collaborations by highlighting examples of successful collaborations. Through these examples, the authors hope to help practitioners and researchers understand the breadth of options available for such interactions. This article is part of a theme issue on software engineering’s 50th anniversary.","1937-4194","","10.1109/MS.2018.3571250","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8474518","software architecture;automatic bug assignment;software quality;requirements-based testing;industry–academia collaboration;software development;software engineering;Practitioners’ Digest","Software engineering;Computer science education;Collaboration","","12","","","IEEE","27 Sep 2018","","","IEEE","IEEE Magazines"
"Component Selection in Software Engineering - Which Attributes are the Most Important in the Decision Process?","P. Chatzipetrou; E. Alégroth; E. Papatheocharous; M. Borg; T. Gorschek; K. Wnuk","Software Research Engineering Lab (SERL), Blekinge Institute of Technology, Karlskrona, Sweden; Software Research Engineering Lab (SERL), Blekinge Institute of Technology, Karlskrona, Sweden; RISE SICS AB, Lund, Sweden; RISE SICS AB, Lund, Sweden; Software Research Engineering Lab (SERL), Blekinge Institute of Technology, Karlskrona, Sweden; Software Research Engineering Lab (SERL), Blekinge Institute of Technology, Karlskrona, Sweden",2018 44th Euromicro Conference on Software Engineering and Advanced Applications (SEAA),"21 Oct 2018","2018","","","198","205","Component-based software engineering is a common approach to develop and evolve contemporary software systems where different component sourcing options are available: 1)Software developed internally (in-house), 2)Software developed outsourced, 3)Commercial of the shelf software, and 4) Open Source Software. However, there is little available research on what attributes of a component are the most important ones when selecting new components. The object of the present study is to investigate what matters the most to industry practitioners during component selection. We conducted a cross-domain anonymous survey with industry practitioners involved in component selection. First, the practitioners selected the most important attributes from a list. Next, they prioritized their selection using the Hundred-Dollar ($100) test. We analyzed the results using Compositional Data Analysis. The descriptive results showed that Cost was clearly considered the most important attribute during the component selection. Other important attributes for the practitioners were: Support of the component, Longevity prediction, and Level of off-the-shelf fit to product. Next, an exploratory analysis was conducted based on the practitioners' inherent characteristics. Nonparametric tests and biplots were used. It seems that smaller organizations and more immature products focus on different attributes than bigger organizations and mature products which focus more on Cost.","","978-1-5386-7383-6","10.1109/SEAA.2018.00039","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8498206","Component-based software engineering;Decision making;Compositional Data Analysis;Cumulative voting","Software;Companies;Software engineering;Stakeholders;Data analysis;Decision making;Statistical analysis","","7","","31","IEEE","21 Oct 2018","","","IEEE","IEEE Conferences"
"Enhancing Software Engineering Education Through Experimentation: An Experience Report","M. Kuhrmann; J. Münch","Clausthal University of Technology, Institute for Applied Software Systems Engineering, Goslar, Germany; Reutlingen University, Business Informatics & Herman Hollerith Center, Böblingen, Germany","2018 IEEE International Conference on Engineering, Technology and Innovation (ICE/ITMC)","16 Aug 2018","2018","","","1","9","Software engineering courses have to deliver theoretical and technical knowledge and skills while establishing links to practice. However, due to course goals or resource limitations, it is not always possible or even meaningful to set up complete projects and let students work on a real piece of software. For instance, if students shall understand the impact of group dynamics on productivity, a particular software to be developed is of less interest than an environment in which students can learn about team-related phenomena. To address this issue, we use experimentation as a teaching tool in software engineering courses. Experiments help to precisely characterize and study a problem in a systematic way, to observe phenomena, and to develop and evaluate solutions. Furthermore, experiments help establishing short feedback and learning cycles, and they also allow for experiencing risk and failure scenarios in a controlled environment. In this paper, we report on three courses in which we implemented different experiments and we share our experiences and lessons learned. Using these courses, we demonstrate how to use classroom experiments, and we provide a discussion on the feasibility based on formal and informal course evaluations. This experience report thus aims to help teachers integrating small- and medium-sized experiments in their courses.","","978-1-5386-1469-3","10.1109/ICE.2018.8436357","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8436357","software engineering education;empirical software engineering;experimentation;empirical studies;experience report","Software engineering;Software;Education;Tools;Project management;Task analysis;Quality management","","5","","50","IEEE","16 Aug 2018","","","IEEE","IEEE Conferences"
"Creating Domain Non-functional Requirements Software Product Line Engineering Using Model Transformations","F. Khalique; W. H. Butt; S. A. Khan","Dept. of Computer Engineering, National University of Sciences and technology, Islamabad, Pakistan; Dept. of Computer Engineering, National University of Sciences and technology, Islamabad, Pakistan; National University of Sciences and Technology, Islamabad, PK",2017 International Conference on Frontiers of Information Technology (FIT),"18 Jan 2018","2017","","","41","45","Requirement Engineering (RE) process during product development produces core artifacts to be analyzed during domain analysis phase of Software Product Line Engineering (SPLE). The product RE process can be a Software Requirement Specification (SRS) document, use case models or other artifacts containing both functional and nonfunctional requirements of the product. The analysis of these artifacts is a time consuming and error-prone process when performed manually. There is also a need for creating consistent and complete set of non-functional requirements from user-specific individual projects in SPL. Therefore, we propose a methodology to create Domain Non-Functional Requirements (DNFRs) from Product Non-Functional Requirements (PNFRs) using model driven approach. Two model transformations are performed to automate the process of DNFR creation. First transformation converts PNFR into Product Line Non-Functional Requirements (PLNFR) using a PNFR meta model. The second transformation converts the PLNFR into DNFR using DNFR meta model. This transformation exploits commonality and variability among the products in terms of their non-functional requirements. The resulting DNFR can serve as a useful baseline for domain analysis in SPLE.","","978-1-5386-3567-4","10.1109/FIT.2017.00015","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8261009","Product Non Functional Requirements (PNFRs);Domain Non Functional requirements (DNFRs);Software Product Line Engineering (SPLE);Model Driven Software Engineering (MDSE);meta models","Software product lines;Measurement;Requirements engineering;Object oriented modeling;Software systems","","","","19","IEEE","18 Jan 2018","","","IEEE","IEEE Conferences"
"Learning software engineering basic concepts using a five-phase game","A. Rusu; R. Russell; J. Robinson; A. Rusu","Department of Computer Science, Rowan University, USA; Department of Computer Science, Rowan University, USA; Department of Computer Science, Rowan University, USA; Department of Software Engineering, Fairfield University, USA",2010 IEEE Frontiers in Education Conference (FIE),"23 Dec 2010","2010","","","S2D-1","S2D-6","Unfortunately, the stereotype of a software engineer or computer scientist is one who spends his whole day in a cubicle programming. Other aspects of software engineering, such as holding meetings with the customer and users to gather requirements, documenting requirements, design, and testing are not talked about. Many middle and high school students believe this stereotype and become disinterested in a prospective career in software engineering. As a result, we developed a game prototype to teach software engineering basic concepts to middle and high school students. Our game allows a student to explore the various phases of the software life cycle, which are requirements, design, implementation, testing, and maintenance. The waterfall software life cycle was practiced while developing this game, and every student in the Information Visualization course participated equally in the development of the game. In addition, visualization techniques were used to develop this game.","2377-634X","978-1-4244-6262-9","10.1109/FIE.2010.5673327","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5673327","K-12 Education;Software Engineering Education;Information Visualization;Educational Games","Games;Software;Maintenance engineering;Software engineering;Testing;Educational institutions;Computer bugs","","6","","14","IEEE","23 Dec 2010","","","IEEE","IEEE Conferences"
"10 most powerful ideas in software engineering","S. McConnell","Construx Software, USA",2009 31st International Conference on Software Engineering - Companion Volume,"12 Jun 2009","2009","","","12","12","Summary form only given. At software engineering's 40th birthday, do we know which software engineering ideas matter most? In this talk, award-winning author Steve McConnell identifies 10 of the most powerful ideas in software engineering. McConnell explains how the 10 ideas form the foundation for effective software development, and he shows how practices ranging from the waterfall model to extreme programming measure up. He uses these key ideas to explain which currently popular software engineering practices will withstand the test of time, and which are fleeting fads.","","978-1-4244-3495-4","10.1109/ICSE-COMPANION.2009.5070958","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5070958","","Software engineering;Programming profession;Computer industry;Books;Software measurement;Software testing;Biographies;Art","","3","","","IEEE","12 Jun 2009","","","IEEE","IEEE Conferences"
"Keynote on Augmented Agile: Human-centred AI-assisted Software Project Management at FinanSE Workshop (ICSE 2024)","R. Hoda","Faculty of Information Technology, Monash University, Melbourne, VIC, Australia",2024 IEEE/ACM Workshop on Software Engineering Challenges in Financial Firms (FinanSE),"14 Oct 2024","2024","","","17","18","Software engineering teams face a number of challenges on a regular basis. Software practitioners have employed agile methods for over two decades to work around challenges such as inadequate customer collaboration, poor management practices, teamwork issues, and coordination challenges in large-scale teams. While they have served us well for over two decades, agile methods are not without limitations. Transitioning into agile methods as well as adapting agile practices to suit different domains such as Finance, can be challenging for software teams, management, and firms at large. This keynote shares experiences from industrial agile research to shed light on what’s been working, what’s missing, and what can be done better, including a vision of a new future of software project management – augmented agile – that combines a deeply human-centric approach (‘the heart’) with AI-assisted techniques (‘the mind’) to augment and boost current agile practice. CCS CONCEPTS • Software and its engineering;","","979-8-4007-0568-7","","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=10714239","Augmented agile;agile methods;software engineering;finance","Conferences;Project management;Finance;Software;Teamwork;Faces;Software engineering","","","","6","","14 Oct 2024","","","IEEE","IEEE Conferences"
"Game Design Techniques for Software Engineering Management Education","P. Letra; A. C. R. Paiva; N. Flores","FEUP Porto, Portugal; FEUP & INESC Porto, Porto, Portugal; FEUP & INESC Porto, Porto, Portugal",2015 IEEE 18th International Conference on Computational Science and Engineering,"7 Jan 2016","2015","","","192","199","Software engineering is an area with a wide range of concepts and knowledge. To this diversity of topics, you may need to apply different teaching and learning techniques to be effective. One such technique is the use of serious games, but the design of such games tends to be complex, currently lacking a map of game design standards that comply with the Software Engineering education requirements. This paper presents the process to identify the game design patterns that can be effective for teaching software engineering, specifically the software project management topic. The process begins by identifying the relationship between game design patterns and teaching and learning functions based on literature review. Then the work follows establishing a relationship between teaching and learning functions and software project management education through questionnaires made to software engineering teachers. Finally, it sets up the relationship between game design patterns and software project management education through an empirical study conducted with master students. These results can be used as a basis for designing and developing serious games for teaching software project management.","","978-1-4673-8297-7","10.1109/CSE.2015.42","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7371373","Software Engineering Education;Software Engineering Management;Game Design Techniques;SimSE","Games;Education;Software engineering;Software;Knowledge engineering;Project management;Monitoring","","9","","18","IEEE","7 Jan 2016","","","IEEE","IEEE Conferences"
"Research on the phenomenon of software drift in software processes","Yutao Ma; Jianxun Chen; Jianghua Wu","State Key Laboratory of Software Engineering, Wuhan University of China, Wuhan, China; State Key Laboratory of Software Engineering, Wuhan University of China, Wuhan, China; State Key Laboratory of Software Engineering, Wuhan University of China, Wuhan, China",Eighth International Workshop on Principles of Software Evolution (IWPSE'05),"10 Jan 2006","2005","","","195","198","Software drift is a common phenomenon existing in software processes. Negative drift makes function, performance and even overall quality of a software product deviate from customers' expectations, which bring about the loss to users and software organizations in succession. In this paper, software drift and its relevant concepts are defined initially. Then, an evolutional model of negative drift is presented, and detrimental effects of the model are also analyzed. How to analyze, measure, and control negative drift is an essential problem to be solved in software evolution. Eventually, we put forward a research framework to guide future work to measure and control negative drift for improving software processes.","2332-5682","0-7695-2349-8","10.1109/IWPSE.2005.26","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1572326","","Software quality;Software performance;Capability maturity model;Software measurement;Educational institutions;Manufacturing processes;Computer bugs;Neodymium;Laboratories;Software engineering","","1","","9","IEEE","10 Jan 2006","","","IEEE","IEEE Conferences"
"The Influence of Agile Methodology (Scrum) on Software Project Management","F. Hayat; A. U. Rehman; K. S. Arif; K. Wahab; M. Abbas","Dept. of Computer & Software Engineering, National University of Sciences & Technology (NUST), Islamabad, Pakistan; Dept. of Computer & Software Engineering, National University of Sciences & Technology (NUST), Islamabad, Pakistan; Dept. of Computer & Software Engineering, National University of Sciences & Technology (NUST), Islamabad, Pakistan; Dept. of Computer & Software Engineering, National University of Sciences & Technology (NUST), Islamabad, Pakistan; Dept. of Computer & Software Engineering, National University of Sciences & Technology (NUST), Islamabad, Pakistan","2019 20th IEEE/ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel/Distributed Computing (SNPD)","19 Dec 2019","2019","","","145","149","Software project management has main role in the Software industry. It includes different processes and knowledge areas. The triple constraint of the software project like time, cost and scope is directly dependent on the requirement of the project. Agile methodology is the iterative way for developing the software project for frequent changes, fast delivery and reduce risk. Software project management also plays important role in agile based software project. Agile methodology influence software project management at 10 knowledge areas. In this study we carried out survey from different software companies and it shows that almost every software company uses agile development (Scrum) and has a positive impact on the software project management.","","978-1-7281-1651-8","10.1109/SNPD.2019.8935813","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8935813","Agile Methodology;Scrum;Project Knowledge Areas;Software Project Management","Software;Scrum (Software development);Project management;Companies;Bibliographies;Software engineering","","41","","13","IEEE","19 Dec 2019","","","IEEE","IEEE Conferences"
"Project-Oriented Course of Software Engineering Based on Essence","D. O. Zmeev; O. A. Zmeev","Higher IT School, National Research Tomsk State University, Tomsk, Russia; Higher IT School, National Research Tomsk State University, Tomsk, Russia",2020 IEEE 32nd Conference on Software Engineering Education and Training (CSEE&T),"14 Oct 2020","2020","","","1","3","One of the most difficult parts in education of future software engineers is teaching how to combine software engineering hard skills (analysis and design of architecture, developing software, initial launch of software for customers) with soft skills (team work, time and resource management, communication with stakeholders of the project). Unfortunately, some universities only give theoretical basics of project management or do not even consider this part of software engineering as compulsory. In this paper we present our teaching experience of software engineering as a project-oriented course in a business-like environment. In this course we use Essence to combine the students' knowledge about software engineering projects with their experience in course projects.","2377-570X","978-1-7281-6807-4","10.1109/CSEET49119.2020.9206240","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=9206240","Software development processes;Essence;SEMAT;Project based education","Software engineering;Software;Project management;Training;Stakeholders;Task analysis","","1","","8","IEEE","14 Oct 2020","","","IEEE","IEEE Conferences"
"Economics-Driven Software Mining","R. Bahsoon; W. Emmerich","School of Engineering and Applied Science, Computer Science, Aston University, Birmingham, UK; London Software Systems, Department of Computer Science, University College London, London, UK",2007 First International Workshop on the Economics of Software and Computation,"16 Jul 2007","2007","","","3","3","Economics-driven software mining (EDSM) sifts through the repository data to extract information that could be useful for reasoning about not only the technical aspects but also the economics properties related to the development and/or evolution of software systems, and in relation to the environments in which they are procured, developed, evolved and used. The objective is to provide the analyst with insights into investment decisions related to the development, maintenance, and evolution of software systems, EDSM can also assist the analyst in resource planning and utilization. In this position paper, we define EDSM, describe possible scenarios for realizing EDSM and highlight some challenges.","","0-7695-2955-0","10.1109/ESC.2007.5","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4273049","Economics-Driven Software Engineering;Mining Software Repositories;Maintenance and Evolution.","Economic forecasting;Environmental economics;Power generation economics;Software systems;Data mining;Software engineering;Investments;Software maintenance;Software quality;Data analysis","","2","","20","IEEE","16 Jul 2007","","","IEEE","IEEE Conferences"
"The Current State of Software Engineering Masters Degree Programs","A. Pyster; R. Turner; D. Henry; K. Lasfer; L. Bernstein; K. Baldwin","Stevens Institute of Technology, USA; Stevens Institute of Technology, USA; Stevens Institute of Technology, USA; Stevens Institute of Technology, USA; Stevens Institute of Technology, USA; U.S. Office of the Under Secretary of Defense (Acquisition, Technology, Logistics)",2008 21st Conference on Software Engineering Education and Training,"9 Jul 2008","2008","","","103","109","A broad coalition of professionals from academia, industry, and government, under sponsorship of the US Department of Defense, is building a new model curriculum for a Masters Degree in Software Engineering (SwE). Before beginning to create such a model, a study of 28 programs was completed to determine the current state of SwE masters-level education in the US and abroad.","1093-0175","978-0-7695-3144-1","10.1109/CSEET.2008.40","","https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4556955","graduate education;software engineering;curriculumTurnerR","Software engineering;Educational institutions;Educational programs;Logistics;Defense industry;Back;Government;Customer relationship management;Software systems;Large-scale systems","","2","","5","IEEE","9 Jul 2008","","","IEEE","IEEE Conferences"
